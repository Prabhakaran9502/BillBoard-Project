{"ast":null,"code":"import { createSelector, createSelectorMemoized } from '../../../utils/createSelector';\nimport { gridExpandedSortedRowEntriesSelector, gridExpandedSortedRowIdsSelector, gridFilteredSortedTopLevelRowEntriesSelector } from '../filter/gridFilterSelector';\nimport { gridRowMaximumTreeDepthSelector, gridRowTreeSelector } from '../rows/gridRowsSelector';\nimport { getPageCount } from './gridPaginationUtils';\n/**\n * @category Pagination\n * @ignore - do not document.\n */\n\nexport const gridPaginationSelector = state => state.pagination;\n/**\n * Get the pagination model\n * @category Pagination\n */\n\nexport const gridPaginationModelSelector = createSelector(gridPaginationSelector, pagination => pagination.paginationModel);\n/**\n * Get the row count\n * @category Pagination\n */\n\nexport const gridPaginationRowCountSelector = createSelector(gridPaginationSelector, pagination => pagination.rowCount);\n/**\n * Get the pagination meta\n * @category Pagination\n */\n\nexport const gridPaginationMetaSelector = createSelector(gridPaginationSelector, pagination => pagination.meta);\n/**\n * Get the index of the page to render if the pagination is enabled\n * @category Pagination\n */\n\nexport const gridPageSelector = createSelector(gridPaginationModelSelector, paginationModel => paginationModel.page);\n/**\n * Get the maximum amount of rows to display on a single page if the pagination is enabled\n * @category Pagination\n */\n\nexport const gridPageSizeSelector = createSelector(gridPaginationModelSelector, paginationModel => paginationModel.pageSize);\n/**\n * Get the amount of pages needed to display all the rows if the pagination is enabled\n * @category Pagination\n */\n\nexport const gridPageCountSelector = createSelector(gridPaginationModelSelector, gridPaginationRowCountSelector, (paginationModel, rowCount) => getPageCount(rowCount, paginationModel.pageSize, paginationModel.page));\n/**\n * Get the index of the first and the last row to include in the current page if the pagination is enabled.\n * @category Pagination\n */\n\nexport const gridPaginationRowRangeSelector = createSelectorMemoized(gridPaginationModelSelector, gridRowTreeSelector, gridRowMaximumTreeDepthSelector, gridExpandedSortedRowEntriesSelector, gridFilteredSortedTopLevelRowEntriesSelector, (paginationModel, rowTree, rowTreeDepth, visibleSortedRowEntries, visibleSortedTopLevelRowEntries) => {\n  const visibleTopLevelRowCount = visibleSortedTopLevelRowEntries.length;\n  const topLevelFirstRowIndex = Math.min(paginationModel.pageSize * paginationModel.page, visibleTopLevelRowCount - 1);\n  const topLevelLastRowIndex = Math.min(topLevelFirstRowIndex + paginationModel.pageSize - 1, visibleTopLevelRowCount - 1); // The range contains no element\n\n  if (topLevelFirstRowIndex === -1 || topLevelLastRowIndex === -1) {\n    return null;\n  } // The tree is flat, there is no need to look for children\n\n\n  if (rowTreeDepth < 2) {\n    return {\n      firstRowIndex: topLevelFirstRowIndex,\n      lastRowIndex: topLevelLastRowIndex\n    };\n  }\n\n  const topLevelFirstRow = visibleSortedTopLevelRowEntries[topLevelFirstRowIndex];\n  const topLevelRowsInCurrentPageCount = topLevelLastRowIndex - topLevelFirstRowIndex + 1;\n  const firstRowIndex = visibleSortedRowEntries.findIndex(row => row.id === topLevelFirstRow.id);\n  let lastRowIndex = firstRowIndex;\n  let topLevelRowAdded = 0;\n\n  while (lastRowIndex < visibleSortedRowEntries.length && topLevelRowAdded <= topLevelRowsInCurrentPageCount) {\n    const row = visibleSortedRowEntries[lastRowIndex];\n    const depth = rowTree[row.id]?.depth;\n\n    if (depth === undefined) {\n      lastRowIndex += 1;\n    } else {\n      if (topLevelRowAdded < topLevelRowsInCurrentPageCount || depth > 0) {\n        lastRowIndex += 1;\n      }\n\n      if (depth === 0) {\n        topLevelRowAdded += 1;\n      }\n    }\n  }\n\n  return {\n    firstRowIndex,\n    lastRowIndex: lastRowIndex - 1\n  };\n});\n/**\n * Get the id and the model of each row to include in the current page if the pagination is enabled.\n * @category Pagination\n */\n\nexport const gridPaginatedVisibleSortedGridRowEntriesSelector = createSelectorMemoized(gridExpandedSortedRowEntriesSelector, gridPaginationRowRangeSelector, (visibleSortedRowEntries, paginationRange) => {\n  if (!paginationRange) {\n    return [];\n  }\n\n  return visibleSortedRowEntries.slice(paginationRange.firstRowIndex, paginationRange.lastRowIndex + 1);\n});\n/**\n * Get the id of each row to include in the current page if the pagination is enabled.\n * @category Pagination\n */\n\nexport const gridPaginatedVisibleSortedGridRowIdsSelector = createSelectorMemoized(gridExpandedSortedRowIdsSelector, gridPaginationRowRangeSelector, (visibleSortedRowIds, paginationRange) => {\n  if (!paginationRange) {\n    return [];\n  }\n\n  return visibleSortedRowIds.slice(paginationRange.firstRowIndex, paginationRange.lastRowIndex + 1);\n});","map":{"version":3,"names":["createSelector","createSelectorMemoized","gridExpandedSortedRowEntriesSelector","gridExpandedSortedRowIdsSelector","gridFilteredSortedTopLevelRowEntriesSelector","gridRowMaximumTreeDepthSelector","gridRowTreeSelector","getPageCount","gridPaginationSelector","state","pagination","gridPaginationModelSelector","paginationModel","gridPaginationRowCountSelector","rowCount","gridPaginationMetaSelector","meta","gridPageSelector","page","gridPageSizeSelector","pageSize","gridPageCountSelector","gridPaginationRowRangeSelector","rowTree","rowTreeDepth","visibleSortedRowEntries","visibleSortedTopLevelRowEntries","visibleTopLevelRowCount","length","topLevelFirstRowIndex","Math","min","topLevelLastRowIndex","firstRowIndex","lastRowIndex","topLevelFirstRow","topLevelRowsInCurrentPageCount","findIndex","row","id","topLevelRowAdded","depth","undefined","gridPaginatedVisibleSortedGridRowEntriesSelector","paginationRange","slice","gridPaginatedVisibleSortedGridRowIdsSelector","visibleSortedRowIds"],"sources":["C:/Users/kb/node_modules/@mui/x-data-grid/hooks/features/pagination/gridPaginationSelector.js"],"sourcesContent":["import { createSelector, createSelectorMemoized } from '../../../utils/createSelector';\nimport { gridExpandedSortedRowEntriesSelector, gridExpandedSortedRowIdsSelector, gridFilteredSortedTopLevelRowEntriesSelector } from '../filter/gridFilterSelector';\nimport { gridRowMaximumTreeDepthSelector, gridRowTreeSelector } from '../rows/gridRowsSelector';\nimport { getPageCount } from './gridPaginationUtils';\n\n/**\n * @category Pagination\n * @ignore - do not document.\n */\nexport const gridPaginationSelector = state => state.pagination;\n\n/**\n * Get the pagination model\n * @category Pagination\n */\nexport const gridPaginationModelSelector = createSelector(gridPaginationSelector, pagination => pagination.paginationModel);\n\n/**\n * Get the row count\n * @category Pagination\n */\nexport const gridPaginationRowCountSelector = createSelector(gridPaginationSelector, pagination => pagination.rowCount);\n\n/**\n * Get the pagination meta\n * @category Pagination\n */\nexport const gridPaginationMetaSelector = createSelector(gridPaginationSelector, pagination => pagination.meta);\n\n/**\n * Get the index of the page to render if the pagination is enabled\n * @category Pagination\n */\nexport const gridPageSelector = createSelector(gridPaginationModelSelector, paginationModel => paginationModel.page);\n\n/**\n * Get the maximum amount of rows to display on a single page if the pagination is enabled\n * @category Pagination\n */\nexport const gridPageSizeSelector = createSelector(gridPaginationModelSelector, paginationModel => paginationModel.pageSize);\n\n/**\n * Get the amount of pages needed to display all the rows if the pagination is enabled\n * @category Pagination\n */\nexport const gridPageCountSelector = createSelector(gridPaginationModelSelector, gridPaginationRowCountSelector, (paginationModel, rowCount) => getPageCount(rowCount, paginationModel.pageSize, paginationModel.page));\n\n/**\n * Get the index of the first and the last row to include in the current page if the pagination is enabled.\n * @category Pagination\n */\nexport const gridPaginationRowRangeSelector = createSelectorMemoized(gridPaginationModelSelector, gridRowTreeSelector, gridRowMaximumTreeDepthSelector, gridExpandedSortedRowEntriesSelector, gridFilteredSortedTopLevelRowEntriesSelector, (paginationModel, rowTree, rowTreeDepth, visibleSortedRowEntries, visibleSortedTopLevelRowEntries) => {\n  const visibleTopLevelRowCount = visibleSortedTopLevelRowEntries.length;\n  const topLevelFirstRowIndex = Math.min(paginationModel.pageSize * paginationModel.page, visibleTopLevelRowCount - 1);\n  const topLevelLastRowIndex = Math.min(topLevelFirstRowIndex + paginationModel.pageSize - 1, visibleTopLevelRowCount - 1);\n\n  // The range contains no element\n  if (topLevelFirstRowIndex === -1 || topLevelLastRowIndex === -1) {\n    return null;\n  }\n\n  // The tree is flat, there is no need to look for children\n  if (rowTreeDepth < 2) {\n    return {\n      firstRowIndex: topLevelFirstRowIndex,\n      lastRowIndex: topLevelLastRowIndex\n    };\n  }\n  const topLevelFirstRow = visibleSortedTopLevelRowEntries[topLevelFirstRowIndex];\n  const topLevelRowsInCurrentPageCount = topLevelLastRowIndex - topLevelFirstRowIndex + 1;\n  const firstRowIndex = visibleSortedRowEntries.findIndex(row => row.id === topLevelFirstRow.id);\n  let lastRowIndex = firstRowIndex;\n  let topLevelRowAdded = 0;\n  while (lastRowIndex < visibleSortedRowEntries.length && topLevelRowAdded <= topLevelRowsInCurrentPageCount) {\n    const row = visibleSortedRowEntries[lastRowIndex];\n    const depth = rowTree[row.id]?.depth;\n    if (depth === undefined) {\n      lastRowIndex += 1;\n    } else {\n      if (topLevelRowAdded < topLevelRowsInCurrentPageCount || depth > 0) {\n        lastRowIndex += 1;\n      }\n      if (depth === 0) {\n        topLevelRowAdded += 1;\n      }\n    }\n  }\n  return {\n    firstRowIndex,\n    lastRowIndex: lastRowIndex - 1\n  };\n});\n\n/**\n * Get the id and the model of each row to include in the current page if the pagination is enabled.\n * @category Pagination\n */\nexport const gridPaginatedVisibleSortedGridRowEntriesSelector = createSelectorMemoized(gridExpandedSortedRowEntriesSelector, gridPaginationRowRangeSelector, (visibleSortedRowEntries, paginationRange) => {\n  if (!paginationRange) {\n    return [];\n  }\n  return visibleSortedRowEntries.slice(paginationRange.firstRowIndex, paginationRange.lastRowIndex + 1);\n});\n\n/**\n * Get the id of each row to include in the current page if the pagination is enabled.\n * @category Pagination\n */\nexport const gridPaginatedVisibleSortedGridRowIdsSelector = createSelectorMemoized(gridExpandedSortedRowIdsSelector, gridPaginationRowRangeSelector, (visibleSortedRowIds, paginationRange) => {\n  if (!paginationRange) {\n    return [];\n  }\n  return visibleSortedRowIds.slice(paginationRange.firstRowIndex, paginationRange.lastRowIndex + 1);\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}