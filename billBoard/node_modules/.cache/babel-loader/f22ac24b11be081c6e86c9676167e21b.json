{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { gridColumnLookupSelector } from '@mui/x-data-grid-pro';\nimport { useGridRegisterPipeProcessor } from '@mui/x-data-grid-pro/internals';\nimport { getAvailableAggregationFunctions, addFooterRows, getAggregationRules, mergeStateWithAggregationModel } from './gridAggregationUtils';\nimport { wrapColumnWithAggregationValue, unwrapColumnFromAggregation } from './wrapColumnWithAggregation';\nimport { gridAggregationModelSelector } from './gridAggregationSelectors';\nexport const useGridAggregationPreProcessors = (apiRef, props) => {\n  // apiRef.current.caches.aggregation.rulesOnLastColumnHydration is not used because by the time\n  // that the pre-processor is called it will already have been updated with the current rules.\n  const rulesOnLastColumnHydration = React.useRef({});\n  const updateAggregatedColumns = React.useCallback(columnsState => {\n    const aggregationRules = props.disableAggregation ? {} : getAggregationRules({\n      columnsLookup: columnsState.lookup,\n      aggregationModel: gridAggregationModelSelector(apiRef),\n      aggregationFunctions: props.aggregationFunctions\n    });\n    columnsState.orderedFields.forEach(field => {\n      const shouldHaveAggregationValue = !!aggregationRules[field];\n      const haveAggregationColumnValue = !!rulesOnLastColumnHydration.current[field];\n      let column = columnsState.lookup[field];\n\n      if (haveAggregationColumnValue) {\n        column = unwrapColumnFromAggregation({\n          column\n        });\n      }\n\n      if (shouldHaveAggregationValue) {\n        column = wrapColumnWithAggregationValue({\n          column,\n          aggregationRule: aggregationRules[field],\n          apiRef\n        });\n      }\n\n      columnsState.lookup[field] = column;\n    });\n    rulesOnLastColumnHydration.current = aggregationRules;\n    return columnsState;\n  }, [apiRef, props.aggregationFunctions, props.disableAggregation]);\n  const addGroupFooterRows = React.useCallback(value => {\n    const aggregationRules = props.disableAggregation ? {} : getAggregationRules({\n      columnsLookup: gridColumnLookupSelector(apiRef),\n      aggregationModel: gridAggregationModelSelector(apiRef),\n      aggregationFunctions: props.aggregationFunctions\n    });\n    const hasAggregationRule = Object.keys(aggregationRules).length > 0; // If we did not have any aggregation footer before, and we still don't have any,\n    // Then we can skip this step\n\n    if (Object.keys(apiRef.current.caches.aggregation.rulesOnLastRowHydration).length === 0 && !hasAggregationRule) {\n      return value;\n    }\n\n    apiRef.current.caches.aggregation.rulesOnLastRowHydration = aggregationRules;\n    return addFooterRows({\n      apiRef,\n      groupingParams: value,\n      getAggregationPosition: props.getAggregationPosition,\n      hasAggregationRule\n    });\n  }, [apiRef, props.disableAggregation, props.getAggregationPosition, props.aggregationFunctions]);\n  const addColumnMenuButtons = React.useCallback((columnMenuItems, colDef) => {\n    if (props.disableAggregation || !colDef.aggregable) {\n      return columnMenuItems;\n    }\n\n    const availableAggregationFunctions = getAvailableAggregationFunctions({\n      aggregationFunctions: props.aggregationFunctions,\n      colDef\n    });\n\n    if (availableAggregationFunctions.length === 0) {\n      return columnMenuItems;\n    }\n\n    return [...columnMenuItems, 'columnMenuAggregationItem'];\n  }, [props.aggregationFunctions, props.disableAggregation]);\n  const stateExportPreProcessing = React.useCallback(prevState => {\n    if (props.disableAggregation) {\n      return prevState;\n    }\n\n    const aggregationModelToExport = gridAggregationModelSelector(apiRef);\n\n    if (Object.values(aggregationModelToExport).length === 0) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      aggregation: {\n        model: aggregationModelToExport\n      }\n    });\n  }, [apiRef, props.disableAggregation]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    if (props.disableAggregation) {\n      return params;\n    }\n\n    const aggregationModel = context.stateToRestore.aggregation?.model;\n\n    if (aggregationModel != null) {\n      apiRef.current.setState(mergeStateWithAggregationModel(aggregationModel));\n    }\n\n    return params;\n  }, [apiRef, props.disableAggregation]);\n  useGridRegisterPipeProcessor(apiRef, 'hydrateColumns', updateAggregatedColumns);\n  useGridRegisterPipeProcessor(apiRef, 'hydrateRows', addGroupFooterRows);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuButtons);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n};","map":{"version":3,"names":["_extends","React","gridColumnLookupSelector","useGridRegisterPipeProcessor","getAvailableAggregationFunctions","addFooterRows","getAggregationRules","mergeStateWithAggregationModel","wrapColumnWithAggregationValue","unwrapColumnFromAggregation","gridAggregationModelSelector","useGridAggregationPreProcessors","apiRef","props","rulesOnLastColumnHydration","useRef","updateAggregatedColumns","useCallback","columnsState","aggregationRules","disableAggregation","columnsLookup","lookup","aggregationModel","aggregationFunctions","orderedFields","forEach","field","shouldHaveAggregationValue","haveAggregationColumnValue","current","column","aggregationRule","addGroupFooterRows","value","hasAggregationRule","Object","keys","length","caches","aggregation","rulesOnLastRowHydration","groupingParams","getAggregationPosition","addColumnMenuButtons","columnMenuItems","colDef","aggregable","availableAggregationFunctions","stateExportPreProcessing","prevState","aggregationModelToExport","values","model","stateRestorePreProcessing","params","context","stateToRestore","setState"],"sources":["C:/Users/kb/node_modules/@mui/x-data-grid-premium/esm/hooks/features/aggregation/useGridAggregationPreProcessors.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { gridColumnLookupSelector } from '@mui/x-data-grid-pro';\nimport { useGridRegisterPipeProcessor } from '@mui/x-data-grid-pro/internals';\nimport { getAvailableAggregationFunctions, addFooterRows, getAggregationRules, mergeStateWithAggregationModel } from './gridAggregationUtils';\nimport { wrapColumnWithAggregationValue, unwrapColumnFromAggregation } from './wrapColumnWithAggregation';\nimport { gridAggregationModelSelector } from './gridAggregationSelectors';\nexport const useGridAggregationPreProcessors = (apiRef, props) => {\n  // apiRef.current.caches.aggregation.rulesOnLastColumnHydration is not used because by the time\n  // that the pre-processor is called it will already have been updated with the current rules.\n  const rulesOnLastColumnHydration = React.useRef({});\n  const updateAggregatedColumns = React.useCallback(columnsState => {\n    const aggregationRules = props.disableAggregation ? {} : getAggregationRules({\n      columnsLookup: columnsState.lookup,\n      aggregationModel: gridAggregationModelSelector(apiRef),\n      aggregationFunctions: props.aggregationFunctions\n    });\n    columnsState.orderedFields.forEach(field => {\n      const shouldHaveAggregationValue = !!aggregationRules[field];\n      const haveAggregationColumnValue = !!rulesOnLastColumnHydration.current[field];\n      let column = columnsState.lookup[field];\n      if (haveAggregationColumnValue) {\n        column = unwrapColumnFromAggregation({\n          column\n        });\n      }\n      if (shouldHaveAggregationValue) {\n        column = wrapColumnWithAggregationValue({\n          column,\n          aggregationRule: aggregationRules[field],\n          apiRef\n        });\n      }\n      columnsState.lookup[field] = column;\n    });\n    rulesOnLastColumnHydration.current = aggregationRules;\n    return columnsState;\n  }, [apiRef, props.aggregationFunctions, props.disableAggregation]);\n  const addGroupFooterRows = React.useCallback(value => {\n    const aggregationRules = props.disableAggregation ? {} : getAggregationRules({\n      columnsLookup: gridColumnLookupSelector(apiRef),\n      aggregationModel: gridAggregationModelSelector(apiRef),\n      aggregationFunctions: props.aggregationFunctions\n    });\n    const hasAggregationRule = Object.keys(aggregationRules).length > 0;\n\n    // If we did not have any aggregation footer before, and we still don't have any,\n    // Then we can skip this step\n    if (Object.keys(apiRef.current.caches.aggregation.rulesOnLastRowHydration).length === 0 && !hasAggregationRule) {\n      return value;\n    }\n    apiRef.current.caches.aggregation.rulesOnLastRowHydration = aggregationRules;\n    return addFooterRows({\n      apiRef,\n      groupingParams: value,\n      getAggregationPosition: props.getAggregationPosition,\n      hasAggregationRule\n    });\n  }, [apiRef, props.disableAggregation, props.getAggregationPosition, props.aggregationFunctions]);\n  const addColumnMenuButtons = React.useCallback((columnMenuItems, colDef) => {\n    if (props.disableAggregation || !colDef.aggregable) {\n      return columnMenuItems;\n    }\n    const availableAggregationFunctions = getAvailableAggregationFunctions({\n      aggregationFunctions: props.aggregationFunctions,\n      colDef\n    });\n    if (availableAggregationFunctions.length === 0) {\n      return columnMenuItems;\n    }\n    return [...columnMenuItems, 'columnMenuAggregationItem'];\n  }, [props.aggregationFunctions, props.disableAggregation]);\n  const stateExportPreProcessing = React.useCallback(prevState => {\n    if (props.disableAggregation) {\n      return prevState;\n    }\n    const aggregationModelToExport = gridAggregationModelSelector(apiRef);\n    if (Object.values(aggregationModelToExport).length === 0) {\n      return prevState;\n    }\n    return _extends({}, prevState, {\n      aggregation: {\n        model: aggregationModelToExport\n      }\n    });\n  }, [apiRef, props.disableAggregation]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    if (props.disableAggregation) {\n      return params;\n    }\n    const aggregationModel = context.stateToRestore.aggregation?.model;\n    if (aggregationModel != null) {\n      apiRef.current.setState(mergeStateWithAggregationModel(aggregationModel));\n    }\n    return params;\n  }, [apiRef, props.disableAggregation]);\n  useGridRegisterPipeProcessor(apiRef, 'hydrateColumns', updateAggregatedColumns);\n  useGridRegisterPipeProcessor(apiRef, 'hydrateRows', addGroupFooterRows);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuButtons);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}