{"ast":null,"code":"import { createIsAfterIgnoreDatePart } from './time-utils';\nimport { mergeDateAndTime, getTodayDate } from './date-utils';\nexport const SECTION_TYPE_GRANULARITY = {\n  year: 1,\n  month: 2,\n  day: 3,\n  hours: 4,\n  minutes: 5,\n  seconds: 6,\n  milliseconds: 7\n};\nexport const getSectionTypeGranularity = sections => Math.max(...sections.map(section => SECTION_TYPE_GRANULARITY[section.type] ?? 1));\n\nconst roundDate = (utils, granularity, date) => {\n  if (granularity === SECTION_TYPE_GRANULARITY.year) {\n    return utils.startOfYear(date);\n  }\n\n  if (granularity === SECTION_TYPE_GRANULARITY.month) {\n    return utils.startOfMonth(date);\n  }\n\n  if (granularity === SECTION_TYPE_GRANULARITY.day) {\n    return utils.startOfDay(date);\n  } // We don't have startOfHour / startOfMinute / startOfSecond\n\n\n  let roundedDate = date;\n\n  if (granularity < SECTION_TYPE_GRANULARITY.minutes) {\n    roundedDate = utils.setMinutes(roundedDate, 0);\n  }\n\n  if (granularity < SECTION_TYPE_GRANULARITY.seconds) {\n    roundedDate = utils.setSeconds(roundedDate, 0);\n  }\n\n  if (granularity < SECTION_TYPE_GRANULARITY.milliseconds) {\n    roundedDate = utils.setMilliseconds(roundedDate, 0);\n  }\n\n  return roundedDate;\n};\n\nexport const getDefaultReferenceDate = _ref => {\n  let {\n    props,\n    utils,\n    granularity,\n    timezone,\n    getTodayDate: inGetTodayDate\n  } = _ref;\n  let referenceDate = inGetTodayDate ? inGetTodayDate() : roundDate(utils, granularity, getTodayDate(utils, timezone));\n\n  if (props.minDate != null && utils.isAfterDay(props.minDate, referenceDate)) {\n    referenceDate = roundDate(utils, granularity, props.minDate);\n  }\n\n  if (props.maxDate != null && utils.isBeforeDay(props.maxDate, referenceDate)) {\n    referenceDate = roundDate(utils, granularity, props.maxDate);\n  }\n\n  const isAfter = createIsAfterIgnoreDatePart(props.disableIgnoringDatePartForTimeValidation ?? false, utils);\n\n  if (props.minTime != null && isAfter(props.minTime, referenceDate)) {\n    referenceDate = roundDate(utils, granularity, props.disableIgnoringDatePartForTimeValidation ? props.minTime : mergeDateAndTime(utils, referenceDate, props.minTime));\n  }\n\n  if (props.maxTime != null && isAfter(referenceDate, props.maxTime)) {\n    referenceDate = roundDate(utils, granularity, props.disableIgnoringDatePartForTimeValidation ? props.maxTime : mergeDateAndTime(utils, referenceDate, props.maxTime));\n  }\n\n  return referenceDate;\n};","map":{"version":3,"names":["createIsAfterIgnoreDatePart","mergeDateAndTime","getTodayDate","SECTION_TYPE_GRANULARITY","year","month","day","hours","minutes","seconds","milliseconds","getSectionTypeGranularity","sections","Math","max","map","section","type","roundDate","utils","granularity","date","startOfYear","startOfMonth","startOfDay","roundedDate","setMinutes","setSeconds","setMilliseconds","getDefaultReferenceDate","props","timezone","inGetTodayDate","referenceDate","minDate","isAfterDay","maxDate","isBeforeDay","isAfter","disableIgnoringDatePartForTimeValidation","minTime","maxTime"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/@mui/x-date-pickers/internals/utils/getDefaultReferenceDate.js"],"sourcesContent":["import { createIsAfterIgnoreDatePart } from './time-utils';\nimport { mergeDateAndTime, getTodayDate } from './date-utils';\nexport const SECTION_TYPE_GRANULARITY = {\n  year: 1,\n  month: 2,\n  day: 3,\n  hours: 4,\n  minutes: 5,\n  seconds: 6,\n  milliseconds: 7\n};\nexport const getSectionTypeGranularity = sections => Math.max(...sections.map(section => SECTION_TYPE_GRANULARITY[section.type] ?? 1));\nconst roundDate = (utils, granularity, date) => {\n  if (granularity === SECTION_TYPE_GRANULARITY.year) {\n    return utils.startOfYear(date);\n  }\n  if (granularity === SECTION_TYPE_GRANULARITY.month) {\n    return utils.startOfMonth(date);\n  }\n  if (granularity === SECTION_TYPE_GRANULARITY.day) {\n    return utils.startOfDay(date);\n  }\n\n  // We don't have startOfHour / startOfMinute / startOfSecond\n  let roundedDate = date;\n  if (granularity < SECTION_TYPE_GRANULARITY.minutes) {\n    roundedDate = utils.setMinutes(roundedDate, 0);\n  }\n  if (granularity < SECTION_TYPE_GRANULARITY.seconds) {\n    roundedDate = utils.setSeconds(roundedDate, 0);\n  }\n  if (granularity < SECTION_TYPE_GRANULARITY.milliseconds) {\n    roundedDate = utils.setMilliseconds(roundedDate, 0);\n  }\n  return roundedDate;\n};\nexport const getDefaultReferenceDate = ({\n  props,\n  utils,\n  granularity,\n  timezone,\n  getTodayDate: inGetTodayDate\n}) => {\n  let referenceDate = inGetTodayDate ? inGetTodayDate() : roundDate(utils, granularity, getTodayDate(utils, timezone));\n  if (props.minDate != null && utils.isAfterDay(props.minDate, referenceDate)) {\n    referenceDate = roundDate(utils, granularity, props.minDate);\n  }\n  if (props.maxDate != null && utils.isBeforeDay(props.maxDate, referenceDate)) {\n    referenceDate = roundDate(utils, granularity, props.maxDate);\n  }\n  const isAfter = createIsAfterIgnoreDatePart(props.disableIgnoringDatePartForTimeValidation ?? false, utils);\n  if (props.minTime != null && isAfter(props.minTime, referenceDate)) {\n    referenceDate = roundDate(utils, granularity, props.disableIgnoringDatePartForTimeValidation ? props.minTime : mergeDateAndTime(utils, referenceDate, props.minTime));\n  }\n  if (props.maxTime != null && isAfter(referenceDate, props.maxTime)) {\n    referenceDate = roundDate(utils, granularity, props.disableIgnoringDatePartForTimeValidation ? props.maxTime : mergeDateAndTime(utils, referenceDate, props.maxTime));\n  }\n  return referenceDate;\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}