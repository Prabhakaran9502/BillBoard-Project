{"ast":null,"code":"\"use strict\";\n\nexports.formatDistanceStrict = formatDistanceStrict;\n\nvar _index = require(\"./_lib/defaultLocale.js\");\n\nvar _index2 = require(\"./_lib/defaultOptions.js\");\n\nvar _index3 = require(\"./_lib/getRoundingMethod.js\");\n\nvar _index4 = require(\"./_lib/getTimezoneOffsetInMilliseconds.js\");\n\nvar _index5 = require(\"./compareAsc.js\");\n\nvar _index6 = require(\"./constants.js\");\n\nvar _index7 = require(\"./toDate.js\");\n/**\n * The {@link formatDistanceStrict} function options.\n */\n\n/**\n * The unit used to format the distance in {@link formatDistanceStrict}.\n */\n\n/**\n * @name formatDistanceStrict\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words, using strict units.\n * This is like `formatDistance`, but does not use helpers like 'almost', 'over',\n * 'less than' and the like.\n *\n * | Distance between dates | Result              |\n * |------------------------|---------------------|\n * | 0 ... 59 secs          | [0..59] seconds     |\n * | 1 ... 59 mins          | [1..59] minutes     |\n * | 1 ... 23 hrs           | [1..23] hours       |\n * | 1 ... 29 days          | [1..29] days        |\n * | 1 ... 11 months        | [1..11] months      |\n * | 1 ... N years          | [1..N]  years       |\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date\n * @param baseDate - The date to compare with\n * @param options - An object with options\n *\n * @returns The distance in words\n *\n * @throws `date` must not be Invalid Date\n * @throws `baseDate` must not be Invalid Date\n * @throws `options.unit` must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\n * @throws `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistanceStrict(new Date(2014, 6, 2), new Date(2015, 0, 2))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00?\n * const result = formatDistanceStrict(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0)\n * )\n * //=> '15 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistanceStrict(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> '1 year ago'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, in minutes?\n * const result = formatDistanceStrict(new Date(2016, 0, 1), new Date(2015, 0, 1), {\n *   unit: 'minute'\n * })\n * //=> '525600 minutes'\n *\n * @example\n * // What is the distance from 1 January 2015\n * // to 28 January 2015, in months, rounded up?\n * const result = formatDistanceStrict(new Date(2015, 0, 28), new Date(2015, 0, 1), {\n *   unit: 'month',\n *   roundingMethod: 'ceil'\n * })\n * //=> '1 month'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistanceStrict(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> '1 jaro'\n */\n\n\nfunction formatDistanceStrict(date, baseDate, options) {\n  const defaultOptions = (0, _index2.getDefaultOptions)();\n  const locale = options?.locale ?? defaultOptions.locale ?? _index.defaultLocale;\n  const comparison = (0, _index5.compareAsc)(date, baseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const localizeOptions = Object.assign({}, options, {\n    addSuffix: options?.addSuffix,\n    comparison: comparison\n  });\n  let dateLeft;\n  let dateRight;\n\n  if (comparison > 0) {\n    dateLeft = (0, _index7.toDate)(baseDate);\n    dateRight = (0, _index7.toDate)(date);\n  } else {\n    dateLeft = (0, _index7.toDate)(date);\n    dateRight = (0, _index7.toDate)(baseDate);\n  }\n\n  const roundingMethod = (0, _index3.getRoundingMethod)(options?.roundingMethod ?? \"round\");\n  const milliseconds = dateRight.getTime() - dateLeft.getTime();\n  const minutes = milliseconds / _index6.millisecondsInMinute;\n  const timezoneOffset = (0, _index4.getTimezoneOffsetInMilliseconds)(dateRight) - (0, _index4.getTimezoneOffsetInMilliseconds)(dateLeft); // Use DST-normalized difference in minutes for years, months and days;\n  // use regular difference in minutes for hours, minutes and seconds.\n\n  const dstNormalizedMinutes = (milliseconds - timezoneOffset) / _index6.millisecondsInMinute;\n  const defaultUnit = options?.unit;\n  let unit;\n\n  if (!defaultUnit) {\n    if (minutes < 1) {\n      unit = \"second\";\n    } else if (minutes < 60) {\n      unit = \"minute\";\n    } else if (minutes < _index6.minutesInDay) {\n      unit = \"hour\";\n    } else if (dstNormalizedMinutes < _index6.minutesInMonth) {\n      unit = \"day\";\n    } else if (dstNormalizedMinutes < _index6.minutesInYear) {\n      unit = \"month\";\n    } else {\n      unit = \"year\";\n    }\n  } else {\n    unit = defaultUnit;\n  } // 0 up to 60 seconds\n\n\n  if (unit === \"second\") {\n    const seconds = roundingMethod(milliseconds / 1000);\n    return locale.formatDistance(\"xSeconds\", seconds, localizeOptions); // 1 up to 60 mins\n  } else if (unit === \"minute\") {\n    const roundedMinutes = roundingMethod(minutes);\n    return locale.formatDistance(\"xMinutes\", roundedMinutes, localizeOptions); // 1 up to 24 hours\n  } else if (unit === \"hour\") {\n    const hours = roundingMethod(minutes / 60);\n    return locale.formatDistance(\"xHours\", hours, localizeOptions); // 1 up to 30 days\n  } else if (unit === \"day\") {\n    const days = roundingMethod(dstNormalizedMinutes / _index6.minutesInDay);\n    return locale.formatDistance(\"xDays\", days, localizeOptions); // 1 up to 12 months\n  } else if (unit === \"month\") {\n    const months = roundingMethod(dstNormalizedMinutes / _index6.minutesInMonth);\n    return months === 12 && defaultUnit !== \"month\" ? locale.formatDistance(\"xYears\", 1, localizeOptions) : locale.formatDistance(\"xMonths\", months, localizeOptions); // 1 year up to max Date\n  } else {\n    const years = roundingMethod(dstNormalizedMinutes / _index6.minutesInYear);\n    return locale.formatDistance(\"xYears\", years, localizeOptions);\n  }\n}","map":{"version":3,"names":["exports","formatDistanceStrict","_index","require","_index2","_index3","_index4","_index5","_index6","_index7","date","baseDate","options","defaultOptions","getDefaultOptions","locale","defaultLocale","comparison","compareAsc","isNaN","RangeError","localizeOptions","Object","assign","addSuffix","dateLeft","dateRight","toDate","roundingMethod","getRoundingMethod","milliseconds","getTime","minutes","millisecondsInMinute","timezoneOffset","getTimezoneOffsetInMilliseconds","dstNormalizedMinutes","defaultUnit","unit","minutesInDay","minutesInMonth","minutesInYear","seconds","formatDistance","roundedMinutes","hours","days","months","years"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/date-fns/formatDistanceStrict.js"],"sourcesContent":["\"use strict\";\nexports.formatDistanceStrict = formatDistanceStrict;\nvar _index = require(\"./_lib/defaultLocale.js\");\nvar _index2 = require(\"./_lib/defaultOptions.js\");\nvar _index3 = require(\"./_lib/getRoundingMethod.js\");\nvar _index4 = require(\"./_lib/getTimezoneOffsetInMilliseconds.js\");\nvar _index5 = require(\"./compareAsc.js\");\nvar _index6 = require(\"./constants.js\");\n\nvar _index7 = require(\"./toDate.js\");\n\n/**\n * The {@link formatDistanceStrict} function options.\n */\n\n/**\n * The unit used to format the distance in {@link formatDistanceStrict}.\n */\n\n/**\n * @name formatDistanceStrict\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words, using strict units.\n * This is like `formatDistance`, but does not use helpers like 'almost', 'over',\n * 'less than' and the like.\n *\n * | Distance between dates | Result              |\n * |------------------------|---------------------|\n * | 0 ... 59 secs          | [0..59] seconds     |\n * | 1 ... 59 mins          | [1..59] minutes     |\n * | 1 ... 23 hrs           | [1..23] hours       |\n * | 1 ... 29 days          | [1..29] days        |\n * | 1 ... 11 months        | [1..11] months      |\n * | 1 ... N years          | [1..N]  years       |\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date\n * @param baseDate - The date to compare with\n * @param options - An object with options\n *\n * @returns The distance in words\n *\n * @throws `date` must not be Invalid Date\n * @throws `baseDate` must not be Invalid Date\n * @throws `options.unit` must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\n * @throws `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistanceStrict(new Date(2014, 6, 2), new Date(2015, 0, 2))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00?\n * const result = formatDistanceStrict(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0)\n * )\n * //=> '15 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistanceStrict(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> '1 year ago'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, in minutes?\n * const result = formatDistanceStrict(new Date(2016, 0, 1), new Date(2015, 0, 1), {\n *   unit: 'minute'\n * })\n * //=> '525600 minutes'\n *\n * @example\n * // What is the distance from 1 January 2015\n * // to 28 January 2015, in months, rounded up?\n * const result = formatDistanceStrict(new Date(2015, 0, 28), new Date(2015, 0, 1), {\n *   unit: 'month',\n *   roundingMethod: 'ceil'\n * })\n * //=> '1 month'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistanceStrict(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> '1 jaro'\n */\n\nfunction formatDistanceStrict(date, baseDate, options) {\n  const defaultOptions = (0, _index2.getDefaultOptions)();\n  const locale =\n    options?.locale ?? defaultOptions.locale ?? _index.defaultLocale;\n\n  const comparison = (0, _index5.compareAsc)(date, baseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const localizeOptions = Object.assign({}, options, {\n    addSuffix: options?.addSuffix,\n    comparison: comparison,\n  });\n\n  let dateLeft;\n  let dateRight;\n  if (comparison > 0) {\n    dateLeft = (0, _index7.toDate)(baseDate);\n    dateRight = (0, _index7.toDate)(date);\n  } else {\n    dateLeft = (0, _index7.toDate)(date);\n    dateRight = (0, _index7.toDate)(baseDate);\n  }\n\n  const roundingMethod = (0, _index3.getRoundingMethod)(\n    options?.roundingMethod ?? \"round\",\n  );\n\n  const milliseconds = dateRight.getTime() - dateLeft.getTime();\n  const minutes = milliseconds / _index6.millisecondsInMinute;\n\n  const timezoneOffset =\n    (0, _index4.getTimezoneOffsetInMilliseconds)(dateRight) -\n    (0, _index4.getTimezoneOffsetInMilliseconds)(dateLeft);\n\n  // Use DST-normalized difference in minutes for years, months and days;\n  // use regular difference in minutes for hours, minutes and seconds.\n  const dstNormalizedMinutes =\n    (milliseconds - timezoneOffset) / _index6.millisecondsInMinute;\n\n  const defaultUnit = options?.unit;\n  let unit;\n  if (!defaultUnit) {\n    if (minutes < 1) {\n      unit = \"second\";\n    } else if (minutes < 60) {\n      unit = \"minute\";\n    } else if (minutes < _index6.minutesInDay) {\n      unit = \"hour\";\n    } else if (dstNormalizedMinutes < _index6.minutesInMonth) {\n      unit = \"day\";\n    } else if (dstNormalizedMinutes < _index6.minutesInYear) {\n      unit = \"month\";\n    } else {\n      unit = \"year\";\n    }\n  } else {\n    unit = defaultUnit;\n  }\n\n  // 0 up to 60 seconds\n  if (unit === \"second\") {\n    const seconds = roundingMethod(milliseconds / 1000);\n    return locale.formatDistance(\"xSeconds\", seconds, localizeOptions);\n\n    // 1 up to 60 mins\n  } else if (unit === \"minute\") {\n    const roundedMinutes = roundingMethod(minutes);\n    return locale.formatDistance(\"xMinutes\", roundedMinutes, localizeOptions);\n\n    // 1 up to 24 hours\n  } else if (unit === \"hour\") {\n    const hours = roundingMethod(minutes / 60);\n    return locale.formatDistance(\"xHours\", hours, localizeOptions);\n\n    // 1 up to 30 days\n  } else if (unit === \"day\") {\n    const days = roundingMethod(dstNormalizedMinutes / _index6.minutesInDay);\n    return locale.formatDistance(\"xDays\", days, localizeOptions);\n\n    // 1 up to 12 months\n  } else if (unit === \"month\") {\n    const months = roundingMethod(\n      dstNormalizedMinutes / _index6.minutesInMonth,\n    );\n    return months === 12 && defaultUnit !== \"month\"\n      ? locale.formatDistance(\"xYears\", 1, localizeOptions)\n      : locale.formatDistance(\"xMonths\", months, localizeOptions);\n\n    // 1 year up to max Date\n  } else {\n    const years = roundingMethod(dstNormalizedMinutes / _index6.minutesInYear);\n    return locale.formatDistance(\"xYears\", years, localizeOptions);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}