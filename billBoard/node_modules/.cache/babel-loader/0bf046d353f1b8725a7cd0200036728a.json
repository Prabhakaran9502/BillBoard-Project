{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"sx\"];\nimport * as React from 'react';\nimport useEnhancedEffect from '@mui/utils/useEnhancedEffect';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { useViews } from '../useViews';\nimport { isTimeView } from '../../utils/time-utils';\n/**\n * Props used to handle the views that are common to all pickers.\n */\n\n/**\n * Props used to handle the views of the pickers.\n */\n\n/**\n * Props used to handle the value of the pickers.\n */\n\n/**\n * Manage the views of all the pickers:\n * - Handles the view switch\n * - Handles the switch between UI views and field views\n * - Handles the focus management when switching views\n */\n\nexport const usePickerViews = _ref => {\n  let {\n    props,\n    propsFromPickerValue,\n    additionalViewProps,\n    autoFocusView,\n    rendererInterceptor,\n    fieldRef\n  } = _ref;\n  const {\n    onChange,\n    open,\n    onClose\n  } = propsFromPickerValue;\n  const {\n    view: inView,\n    views,\n    openTo,\n    onViewChange,\n    viewRenderers,\n    timezone\n  } = props;\n\n  const propsToForwardToView = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const {\n    view,\n    setView,\n    defaultView,\n    focusedView,\n    setFocusedView,\n    setValueAndGoToNextView\n  } = useViews({\n    view: inView,\n    views,\n    openTo,\n    onChange,\n    onViewChange,\n    autoFocus: autoFocusView\n  });\n  const {\n    hasUIView,\n    viewModeLookup\n  } = React.useMemo(() => views.reduce((acc, viewForReduce) => {\n    let viewMode;\n\n    if (viewRenderers[viewForReduce] != null) {\n      viewMode = 'UI';\n    } else {\n      viewMode = 'field';\n    }\n\n    acc.viewModeLookup[viewForReduce] = viewMode;\n\n    if (viewMode === 'UI') {\n      acc.hasUIView = true;\n    }\n\n    return acc;\n  }, {\n    hasUIView: false,\n    viewModeLookup: {}\n  }), [viewRenderers, views]);\n  const timeViewsCount = React.useMemo(() => views.reduce((acc, viewForReduce) => {\n    if (viewRenderers[viewForReduce] != null && isTimeView(viewForReduce)) {\n      return acc + 1;\n    }\n\n    return acc;\n  }, 0), [viewRenderers, views]);\n  const currentViewMode = viewModeLookup[view];\n  const shouldRestoreFocus = useEventCallback(() => currentViewMode === 'UI');\n  const [popperView, setPopperView] = React.useState(currentViewMode === 'UI' ? view : null);\n\n  if (popperView !== view && viewModeLookup[view] === 'UI') {\n    setPopperView(view);\n  }\n\n  useEnhancedEffect(() => {\n    // Handle case of `DateTimePicker` without time renderers\n    if (currentViewMode === 'field' && open) {\n      onClose();\n      setTimeout(() => {\n        fieldRef?.current?.setSelectedSections(view); // focusing the input before the range selection is done\n        // calling it outside of timeout results in an inconsistent behavior between Safari And Chrome\n\n        fieldRef?.current?.focusField(view);\n      });\n    }\n  }, [view]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEnhancedEffect(() => {\n    if (!open) {\n      return;\n    }\n\n    let newView = view; // If the current view is a field view, go to the last popper view\n\n    if (currentViewMode === 'field' && popperView != null) {\n      newView = popperView;\n    } // If the current view is not the default view and both are UI views\n\n\n    if (newView !== defaultView && viewModeLookup[newView] === 'UI' && viewModeLookup[defaultView] === 'UI') {\n      newView = defaultView;\n    }\n\n    if (newView !== view) {\n      setView(newView);\n    }\n\n    setFocusedView(newView, true);\n  }, [open]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const layoutProps = {\n    views,\n    view: popperView,\n    onViewChange: setView\n  };\n  return {\n    hasUIView,\n    shouldRestoreFocus,\n    layoutProps,\n    renderCurrentView: () => {\n      if (popperView == null) {\n        return null;\n      }\n\n      const renderer = viewRenderers[popperView];\n\n      if (renderer == null) {\n        return null;\n      }\n\n      const rendererProps = _extends({}, propsToForwardToView, additionalViewProps, propsFromPickerValue, {\n        views,\n        timezone,\n        onChange: setValueAndGoToNextView,\n        view: popperView,\n        onViewChange: setView,\n        focusedView,\n        onFocusedViewChange: setFocusedView,\n        showViewSwitcher: timeViewsCount > 1,\n        timeViewsCount\n      });\n\n      if (rendererInterceptor) {\n        return rendererInterceptor(viewRenderers, popperView, rendererProps);\n      }\n\n      return renderer(rendererProps);\n    }\n  };\n};","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","useEnhancedEffect","useEventCallback","useViews","isTimeView","usePickerViews","props","propsFromPickerValue","additionalViewProps","autoFocusView","rendererInterceptor","fieldRef","onChange","open","onClose","view","inView","views","openTo","onViewChange","viewRenderers","timezone","propsToForwardToView","setView","defaultView","focusedView","setFocusedView","setValueAndGoToNextView","autoFocus","hasUIView","viewModeLookup","useMemo","reduce","acc","viewForReduce","viewMode","timeViewsCount","currentViewMode","shouldRestoreFocus","popperView","setPopperView","useState","setTimeout","current","setSelectedSections","focusField","newView","layoutProps","renderCurrentView","renderer","rendererProps","onFocusedViewChange","showViewSwitcher"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/@mui/x-date-pickers/internals/hooks/usePicker/usePickerViews.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"sx\"];\nimport * as React from 'react';\nimport useEnhancedEffect from '@mui/utils/useEnhancedEffect';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { useViews } from '../useViews';\nimport { isTimeView } from '../../utils/time-utils';\n\n/**\n * Props used to handle the views that are common to all pickers.\n */\n\n/**\n * Props used to handle the views of the pickers.\n */\n\n/**\n * Props used to handle the value of the pickers.\n */\n\n/**\n * Manage the views of all the pickers:\n * - Handles the view switch\n * - Handles the switch between UI views and field views\n * - Handles the focus management when switching views\n */\nexport const usePickerViews = ({\n  props,\n  propsFromPickerValue,\n  additionalViewProps,\n  autoFocusView,\n  rendererInterceptor,\n  fieldRef\n}) => {\n  const {\n    onChange,\n    open,\n    onClose\n  } = propsFromPickerValue;\n  const {\n    view: inView,\n    views,\n    openTo,\n    onViewChange,\n    viewRenderers,\n    timezone\n  } = props;\n  const propsToForwardToView = _objectWithoutPropertiesLoose(props, _excluded);\n  const {\n    view,\n    setView,\n    defaultView,\n    focusedView,\n    setFocusedView,\n    setValueAndGoToNextView\n  } = useViews({\n    view: inView,\n    views,\n    openTo,\n    onChange,\n    onViewChange,\n    autoFocus: autoFocusView\n  });\n  const {\n    hasUIView,\n    viewModeLookup\n  } = React.useMemo(() => views.reduce((acc, viewForReduce) => {\n    let viewMode;\n    if (viewRenderers[viewForReduce] != null) {\n      viewMode = 'UI';\n    } else {\n      viewMode = 'field';\n    }\n    acc.viewModeLookup[viewForReduce] = viewMode;\n    if (viewMode === 'UI') {\n      acc.hasUIView = true;\n    }\n    return acc;\n  }, {\n    hasUIView: false,\n    viewModeLookup: {}\n  }), [viewRenderers, views]);\n  const timeViewsCount = React.useMemo(() => views.reduce((acc, viewForReduce) => {\n    if (viewRenderers[viewForReduce] != null && isTimeView(viewForReduce)) {\n      return acc + 1;\n    }\n    return acc;\n  }, 0), [viewRenderers, views]);\n  const currentViewMode = viewModeLookup[view];\n  const shouldRestoreFocus = useEventCallback(() => currentViewMode === 'UI');\n  const [popperView, setPopperView] = React.useState(currentViewMode === 'UI' ? view : null);\n  if (popperView !== view && viewModeLookup[view] === 'UI') {\n    setPopperView(view);\n  }\n  useEnhancedEffect(() => {\n    // Handle case of `DateTimePicker` without time renderers\n    if (currentViewMode === 'field' && open) {\n      onClose();\n      setTimeout(() => {\n        fieldRef?.current?.setSelectedSections(view);\n        // focusing the input before the range selection is done\n        // calling it outside of timeout results in an inconsistent behavior between Safari And Chrome\n        fieldRef?.current?.focusField(view);\n      });\n    }\n  }, [view]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEnhancedEffect(() => {\n    if (!open) {\n      return;\n    }\n    let newView = view;\n\n    // If the current view is a field view, go to the last popper view\n    if (currentViewMode === 'field' && popperView != null) {\n      newView = popperView;\n    }\n\n    // If the current view is not the default view and both are UI views\n    if (newView !== defaultView && viewModeLookup[newView] === 'UI' && viewModeLookup[defaultView] === 'UI') {\n      newView = defaultView;\n    }\n    if (newView !== view) {\n      setView(newView);\n    }\n    setFocusedView(newView, true);\n  }, [open]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const layoutProps = {\n    views,\n    view: popperView,\n    onViewChange: setView\n  };\n  return {\n    hasUIView,\n    shouldRestoreFocus,\n    layoutProps,\n    renderCurrentView: () => {\n      if (popperView == null) {\n        return null;\n      }\n      const renderer = viewRenderers[popperView];\n      if (renderer == null) {\n        return null;\n      }\n      const rendererProps = _extends({}, propsToForwardToView, additionalViewProps, propsFromPickerValue, {\n        views,\n        timezone,\n        onChange: setValueAndGoToNextView,\n        view: popperView,\n        onViewChange: setView,\n        focusedView,\n        onFocusedViewChange: setFocusedView,\n        showViewSwitcher: timeViewsCount > 1,\n        timeViewsCount\n      });\n      if (rendererInterceptor) {\n        return rendererInterceptor(viewRenderers, popperView, rendererProps);\n      }\n      return renderer(rendererProps);\n    }\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}