{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_composeClasses as composeClasses } from '@mui/utils';\nimport { useTheme } from '@mui/material/styles';\nimport { useGridApiEventHandler, getDataGridUtilityClass, useGridLogger, useGridApiOptionHandler } from '@mui/x-data-grid';\nimport { gridColumnReorderDragColSelector } from './columnReorderSelector';\nconst CURSOR_MOVE_DIRECTION_LEFT = 'left';\nconst CURSOR_MOVE_DIRECTION_RIGHT = 'right';\n\nconst getCursorMoveDirectionX = (currentCoordinates, nextCoordinates) => {\n  return currentCoordinates.x <= nextCoordinates.x ? CURSOR_MOVE_DIRECTION_RIGHT : CURSOR_MOVE_DIRECTION_LEFT;\n};\n\nconst hasCursorPositionChanged = (currentCoordinates, nextCoordinates) => currentCoordinates.x !== nextCoordinates.x || currentCoordinates.y !== nextCoordinates.y;\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    columnHeaderDragging: ['columnHeader--dragging']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n\nexport const columnReorderStateInitializer = state => _extends({}, state, {\n  columnReorder: {\n    dragCol: ''\n  }\n});\n/**\n * @requires useGridColumns (method)\n */\n\nexport const useGridColumnReorder = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridColumnReorder');\n  const dragColNode = React.useRef(null);\n  const cursorPosition = React.useRef({\n    x: 0,\n    y: 0\n  });\n  const originColumnIndex = React.useRef(null);\n  const forbiddenIndexes = React.useRef({});\n  const removeDnDStylesTimeout = React.useRef();\n  const ownerState = {\n    classes: props.classes\n  };\n  const classes = useUtilityClasses(ownerState);\n  const theme = useTheme();\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(removeDnDStylesTimeout.current);\n    };\n  }, []);\n  const handleDragStart = React.useCallback((params, event) => {\n    if (props.disableColumnReorder || params.colDef.disableReorder) {\n      return;\n    }\n\n    logger.debug(`Start dragging col ${params.field}`); // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n\n    event.stopPropagation();\n    dragColNode.current = event.currentTarget;\n    dragColNode.current.classList.add(classes.columnHeaderDragging);\n\n    if (event.dataTransfer) {\n      event.dataTransfer.effectAllowed = 'move';\n    }\n\n    apiRef.current.setState(state => _extends({}, state, {\n      columnReorder: _extends({}, state.columnReorder, {\n        dragCol: params.field\n      })\n    }));\n    apiRef.current.forceUpdate();\n    removeDnDStylesTimeout.current = setTimeout(() => {\n      dragColNode.current.classList.remove(classes.columnHeaderDragging);\n    });\n    originColumnIndex.current = apiRef.current.getColumnIndex(params.field, false);\n    const draggingColumnGroupPath = apiRef.current.getColumnGroupPath(params.field);\n    const columnIndex = originColumnIndex.current;\n    const allColumns = apiRef.current.getAllColumns();\n    const groupsLookup = apiRef.current.getAllGroupDetails();\n\n    const getGroupPathFromColumnIndex = colIndex => {\n      const field = allColumns[colIndex].field;\n      return apiRef.current.getColumnGroupPath(field);\n    }; // The limitingGroupId is the id of the group from which the dragged column should not escape\n\n\n    let limitingGroupId = null;\n    draggingColumnGroupPath.forEach(groupId => {\n      if (!groupsLookup[groupId]?.freeReordering) {\n        // Only consider group that are made of more than one column\n        if (columnIndex > 0 && getGroupPathFromColumnIndex(columnIndex - 1).includes(groupId)) {\n          limitingGroupId = groupId;\n        } else if (columnIndex + 1 < allColumns.length && getGroupPathFromColumnIndex(columnIndex + 1).includes(groupId)) {\n          limitingGroupId = groupId;\n        }\n      }\n    });\n    forbiddenIndexes.current = {};\n\n    for (let indexToForbid = 0; indexToForbid < allColumns.length; indexToForbid += 1) {\n      const leftIndex = indexToForbid <= columnIndex ? indexToForbid - 1 : indexToForbid;\n      const rightIndex = indexToForbid < columnIndex ? indexToForbid : indexToForbid + 1;\n\n      if (limitingGroupId !== null) {\n        // verify this indexToForbid will be linked to the limiting group. Otherwise forbid it\n        let allowIndex = false;\n\n        if (leftIndex >= 0 && getGroupPathFromColumnIndex(leftIndex).includes(limitingGroupId)) {\n          allowIndex = true;\n        } else if (rightIndex < allColumns.length && getGroupPathFromColumnIndex(rightIndex).includes(limitingGroupId)) {\n          allowIndex = true;\n        }\n\n        if (!allowIndex) {\n          forbiddenIndexes.current[indexToForbid] = true;\n        }\n      } // Verify we are not splitting another group\n\n\n      if (leftIndex >= 0 && rightIndex < allColumns.length) {\n        getGroupPathFromColumnIndex(rightIndex).forEach(groupId => {\n          if (getGroupPathFromColumnIndex(leftIndex).includes(groupId)) {\n            if (!draggingColumnGroupPath.includes(groupId)) {\n              // moving here split the group groupId in two distincts chunks\n              if (!groupsLookup[groupId]?.freeReordering) {\n                forbiddenIndexes.current[indexToForbid] = true;\n              }\n            }\n          }\n        });\n      }\n    }\n  }, [props.disableColumnReorder, classes.columnHeaderDragging, logger, apiRef]);\n  const handleDragEnter = React.useCallback((params, event) => {\n    event.preventDefault(); // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n\n    event.stopPropagation();\n  }, []);\n  const handleDragOver = React.useCallback((params, event) => {\n    const dragColField = gridColumnReorderDragColSelector(apiRef);\n\n    if (!dragColField) {\n      return;\n    }\n\n    logger.debug(`Dragging over col ${params.field}`);\n    event.preventDefault(); // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n\n    event.stopPropagation();\n    const coordinates = {\n      x: event.clientX,\n      y: event.clientY\n    };\n\n    if (params.field !== dragColField && hasCursorPositionChanged(cursorPosition.current, coordinates)) {\n      const targetColIndex = apiRef.current.getColumnIndex(params.field, false);\n      const targetColVisibleIndex = apiRef.current.getColumnIndex(params.field, true);\n      const targetCol = apiRef.current.getColumn(params.field);\n      const dragColIndex = apiRef.current.getColumnIndex(dragColField, false);\n      const visibleColumns = apiRef.current.getVisibleColumns();\n      const allColumns = apiRef.current.getAllColumns();\n      const cursorMoveDirectionX = getCursorMoveDirectionX(cursorPosition.current, coordinates);\n      const hasMovedLeft = cursorMoveDirectionX === CURSOR_MOVE_DIRECTION_LEFT && (theme.direction === 'rtl' ? dragColIndex < targetColIndex : targetColIndex < dragColIndex);\n      const hasMovedRight = cursorMoveDirectionX === CURSOR_MOVE_DIRECTION_RIGHT && (theme.direction === 'rtl' ? targetColIndex < dragColIndex : dragColIndex < targetColIndex);\n\n      if (hasMovedLeft || hasMovedRight) {\n        let canBeReordered;\n        let indexOffsetInHiddenColumns = 0;\n\n        if (!targetCol.disableReorder) {\n          canBeReordered = true;\n        } else if (hasMovedLeft) {\n          canBeReordered = targetColVisibleIndex > 0 && !visibleColumns[targetColVisibleIndex - 1].disableReorder;\n        } else {\n          canBeReordered = targetColVisibleIndex < visibleColumns.length - 1 && !visibleColumns[targetColVisibleIndex + 1].disableReorder;\n        }\n\n        if (forbiddenIndexes.current[targetColIndex]) {\n          let nextVisibleColumnField;\n          let indexWithOffset = targetColIndex + indexOffsetInHiddenColumns;\n\n          if (hasMovedLeft) {\n            nextVisibleColumnField = targetColVisibleIndex > 0 ? visibleColumns[targetColVisibleIndex - 1].field : null;\n\n            while (indexWithOffset > 0 && allColumns[indexWithOffset].field !== nextVisibleColumnField && forbiddenIndexes.current[indexWithOffset]) {\n              indexOffsetInHiddenColumns -= 1;\n              indexWithOffset = targetColIndex + indexOffsetInHiddenColumns;\n            }\n          } else {\n            nextVisibleColumnField = targetColVisibleIndex + 1 < visibleColumns.length ? visibleColumns[targetColVisibleIndex + 1].field : null;\n\n            while (indexWithOffset < allColumns.length - 1 && allColumns[indexWithOffset].field !== nextVisibleColumnField && forbiddenIndexes.current[indexWithOffset]) {\n              indexOffsetInHiddenColumns += 1;\n              indexWithOffset = targetColIndex + indexOffsetInHiddenColumns;\n            }\n          }\n\n          if (forbiddenIndexes.current[indexWithOffset] || allColumns[indexWithOffset].field === nextVisibleColumnField) {\n            // If we ended up on a visible column, or a forbidden one, we cannot do the reorder\n            canBeReordered = false;\n          }\n        }\n\n        const canBeReorderedProcessed = apiRef.current.unstable_applyPipeProcessors('canBeReordered', canBeReordered, {\n          targetIndex: targetColVisibleIndex\n        });\n\n        if (canBeReorderedProcessed) {\n          apiRef.current.setColumnIndex(dragColField, targetColIndex + indexOffsetInHiddenColumns);\n        }\n      }\n\n      cursorPosition.current = coordinates;\n    }\n  }, [apiRef, logger, theme.direction]);\n  const handleDragEnd = React.useCallback((params, event) => {\n    const dragColField = gridColumnReorderDragColSelector(apiRef);\n\n    if (props.disableColumnReorder || !dragColField) {\n      return;\n    }\n\n    logger.debug('End dragging col');\n    event.preventDefault(); // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n\n    event.stopPropagation();\n    clearTimeout(removeDnDStylesTimeout.current);\n    dragColNode.current = null; // Check if the column was dropped outside the grid.\n\n    if (event.dataTransfer.dropEffect === 'none' && !props.keepColumnPositionIfDraggedOutside) {\n      // Accessing params.field may contain the wrong field as header elements are reused\n      apiRef.current.setColumnIndex(dragColField, originColumnIndex.current);\n      originColumnIndex.current = null;\n    } else {\n      // Emit the columnOrderChange event only once when the reordering stops.\n      const columnOrderChangeParams = {\n        column: apiRef.current.getColumn(dragColField),\n        targetIndex: apiRef.current.getColumnIndexRelativeToVisibleColumns(dragColField),\n        oldIndex: originColumnIndex.current\n      };\n      apiRef.current.publishEvent('columnOrderChange', columnOrderChangeParams);\n    }\n\n    apiRef.current.setState(state => _extends({}, state, {\n      columnReorder: _extends({}, state.columnReorder, {\n        dragCol: ''\n      })\n    }));\n    apiRef.current.forceUpdate();\n  }, [props.disableColumnReorder, props.keepColumnPositionIfDraggedOutside, logger, apiRef]);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragStart', handleDragStart);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragEnter', handleDragEnter);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragOver', handleDragOver);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragEnd', handleDragEnd);\n  useGridApiEventHandler(apiRef, 'cellDragEnter', handleDragEnter);\n  useGridApiEventHandler(apiRef, 'cellDragOver', handleDragOver);\n  useGridApiOptionHandler(apiRef, 'columnOrderChange', props.onColumnOrderChange);\n};","map":{"version":3,"names":["_extends","React","unstable_composeClasses","composeClasses","useTheme","useGridApiEventHandler","getDataGridUtilityClass","useGridLogger","useGridApiOptionHandler","gridColumnReorderDragColSelector","CURSOR_MOVE_DIRECTION_LEFT","CURSOR_MOVE_DIRECTION_RIGHT","getCursorMoveDirectionX","currentCoordinates","nextCoordinates","x","hasCursorPositionChanged","y","useUtilityClasses","ownerState","classes","slots","columnHeaderDragging","columnReorderStateInitializer","state","columnReorder","dragCol","useGridColumnReorder","apiRef","props","logger","dragColNode","useRef","cursorPosition","originColumnIndex","forbiddenIndexes","removeDnDStylesTimeout","theme","useEffect","clearTimeout","current","handleDragStart","useCallback","params","event","disableColumnReorder","colDef","disableReorder","debug","field","stopPropagation","currentTarget","classList","add","dataTransfer","effectAllowed","setState","forceUpdate","setTimeout","remove","getColumnIndex","draggingColumnGroupPath","getColumnGroupPath","columnIndex","allColumns","getAllColumns","groupsLookup","getAllGroupDetails","getGroupPathFromColumnIndex","colIndex","limitingGroupId","forEach","groupId","freeReordering","includes","length","indexToForbid","leftIndex","rightIndex","allowIndex","handleDragEnter","preventDefault","handleDragOver","dragColField","coordinates","clientX","clientY","targetColIndex","targetColVisibleIndex","targetCol","getColumn","dragColIndex","visibleColumns","getVisibleColumns","cursorMoveDirectionX","hasMovedLeft","direction","hasMovedRight","canBeReordered","indexOffsetInHiddenColumns","nextVisibleColumnField","indexWithOffset","canBeReorderedProcessed","unstable_applyPipeProcessors","targetIndex","setColumnIndex","handleDragEnd","dropEffect","keepColumnPositionIfDraggedOutside","columnOrderChangeParams","column","getColumnIndexRelativeToVisibleColumns","oldIndex","publishEvent","onColumnOrderChange"],"sources":["C:/Users/kb/node_modules/@mui/x-data-grid-pro/esm/hooks/features/columnReorder/useGridColumnReorder.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_composeClasses as composeClasses } from '@mui/utils';\nimport { useTheme } from '@mui/material/styles';\nimport { useGridApiEventHandler, getDataGridUtilityClass, useGridLogger, useGridApiOptionHandler } from '@mui/x-data-grid';\nimport { gridColumnReorderDragColSelector } from './columnReorderSelector';\nconst CURSOR_MOVE_DIRECTION_LEFT = 'left';\nconst CURSOR_MOVE_DIRECTION_RIGHT = 'right';\nconst getCursorMoveDirectionX = (currentCoordinates, nextCoordinates) => {\n  return currentCoordinates.x <= nextCoordinates.x ? CURSOR_MOVE_DIRECTION_RIGHT : CURSOR_MOVE_DIRECTION_LEFT;\n};\nconst hasCursorPositionChanged = (currentCoordinates, nextCoordinates) => currentCoordinates.x !== nextCoordinates.x || currentCoordinates.y !== nextCoordinates.y;\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    columnHeaderDragging: ['columnHeader--dragging']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\nexport const columnReorderStateInitializer = state => _extends({}, state, {\n  columnReorder: {\n    dragCol: ''\n  }\n});\n\n/**\n * @requires useGridColumns (method)\n */\nexport const useGridColumnReorder = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridColumnReorder');\n  const dragColNode = React.useRef(null);\n  const cursorPosition = React.useRef({\n    x: 0,\n    y: 0\n  });\n  const originColumnIndex = React.useRef(null);\n  const forbiddenIndexes = React.useRef({});\n  const removeDnDStylesTimeout = React.useRef();\n  const ownerState = {\n    classes: props.classes\n  };\n  const classes = useUtilityClasses(ownerState);\n  const theme = useTheme();\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(removeDnDStylesTimeout.current);\n    };\n  }, []);\n  const handleDragStart = React.useCallback((params, event) => {\n    if (props.disableColumnReorder || params.colDef.disableReorder) {\n      return;\n    }\n    logger.debug(`Start dragging col ${params.field}`);\n    // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n    event.stopPropagation();\n    dragColNode.current = event.currentTarget;\n    dragColNode.current.classList.add(classes.columnHeaderDragging);\n    if (event.dataTransfer) {\n      event.dataTransfer.effectAllowed = 'move';\n    }\n    apiRef.current.setState(state => _extends({}, state, {\n      columnReorder: _extends({}, state.columnReorder, {\n        dragCol: params.field\n      })\n    }));\n    apiRef.current.forceUpdate();\n    removeDnDStylesTimeout.current = setTimeout(() => {\n      dragColNode.current.classList.remove(classes.columnHeaderDragging);\n    });\n    originColumnIndex.current = apiRef.current.getColumnIndex(params.field, false);\n    const draggingColumnGroupPath = apiRef.current.getColumnGroupPath(params.field);\n    const columnIndex = originColumnIndex.current;\n    const allColumns = apiRef.current.getAllColumns();\n    const groupsLookup = apiRef.current.getAllGroupDetails();\n    const getGroupPathFromColumnIndex = colIndex => {\n      const field = allColumns[colIndex].field;\n      return apiRef.current.getColumnGroupPath(field);\n    };\n\n    // The limitingGroupId is the id of the group from which the dragged column should not escape\n    let limitingGroupId = null;\n    draggingColumnGroupPath.forEach(groupId => {\n      if (!groupsLookup[groupId]?.freeReordering) {\n        // Only consider group that are made of more than one column\n        if (columnIndex > 0 && getGroupPathFromColumnIndex(columnIndex - 1).includes(groupId)) {\n          limitingGroupId = groupId;\n        } else if (columnIndex + 1 < allColumns.length && getGroupPathFromColumnIndex(columnIndex + 1).includes(groupId)) {\n          limitingGroupId = groupId;\n        }\n      }\n    });\n    forbiddenIndexes.current = {};\n    for (let indexToForbid = 0; indexToForbid < allColumns.length; indexToForbid += 1) {\n      const leftIndex = indexToForbid <= columnIndex ? indexToForbid - 1 : indexToForbid;\n      const rightIndex = indexToForbid < columnIndex ? indexToForbid : indexToForbid + 1;\n      if (limitingGroupId !== null) {\n        // verify this indexToForbid will be linked to the limiting group. Otherwise forbid it\n        let allowIndex = false;\n        if (leftIndex >= 0 && getGroupPathFromColumnIndex(leftIndex).includes(limitingGroupId)) {\n          allowIndex = true;\n        } else if (rightIndex < allColumns.length && getGroupPathFromColumnIndex(rightIndex).includes(limitingGroupId)) {\n          allowIndex = true;\n        }\n        if (!allowIndex) {\n          forbiddenIndexes.current[indexToForbid] = true;\n        }\n      }\n\n      // Verify we are not splitting another group\n      if (leftIndex >= 0 && rightIndex < allColumns.length) {\n        getGroupPathFromColumnIndex(rightIndex).forEach(groupId => {\n          if (getGroupPathFromColumnIndex(leftIndex).includes(groupId)) {\n            if (!draggingColumnGroupPath.includes(groupId)) {\n              // moving here split the group groupId in two distincts chunks\n              if (!groupsLookup[groupId]?.freeReordering) {\n                forbiddenIndexes.current[indexToForbid] = true;\n              }\n            }\n          }\n        });\n      }\n    }\n  }, [props.disableColumnReorder, classes.columnHeaderDragging, logger, apiRef]);\n  const handleDragEnter = React.useCallback((params, event) => {\n    event.preventDefault();\n    // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n    event.stopPropagation();\n  }, []);\n  const handleDragOver = React.useCallback((params, event) => {\n    const dragColField = gridColumnReorderDragColSelector(apiRef);\n    if (!dragColField) {\n      return;\n    }\n    logger.debug(`Dragging over col ${params.field}`);\n    event.preventDefault();\n    // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n    event.stopPropagation();\n    const coordinates = {\n      x: event.clientX,\n      y: event.clientY\n    };\n    if (params.field !== dragColField && hasCursorPositionChanged(cursorPosition.current, coordinates)) {\n      const targetColIndex = apiRef.current.getColumnIndex(params.field, false);\n      const targetColVisibleIndex = apiRef.current.getColumnIndex(params.field, true);\n      const targetCol = apiRef.current.getColumn(params.field);\n      const dragColIndex = apiRef.current.getColumnIndex(dragColField, false);\n      const visibleColumns = apiRef.current.getVisibleColumns();\n      const allColumns = apiRef.current.getAllColumns();\n      const cursorMoveDirectionX = getCursorMoveDirectionX(cursorPosition.current, coordinates);\n      const hasMovedLeft = cursorMoveDirectionX === CURSOR_MOVE_DIRECTION_LEFT && (theme.direction === 'rtl' ? dragColIndex < targetColIndex : targetColIndex < dragColIndex);\n      const hasMovedRight = cursorMoveDirectionX === CURSOR_MOVE_DIRECTION_RIGHT && (theme.direction === 'rtl' ? targetColIndex < dragColIndex : dragColIndex < targetColIndex);\n      if (hasMovedLeft || hasMovedRight) {\n        let canBeReordered;\n        let indexOffsetInHiddenColumns = 0;\n        if (!targetCol.disableReorder) {\n          canBeReordered = true;\n        } else if (hasMovedLeft) {\n          canBeReordered = targetColVisibleIndex > 0 && !visibleColumns[targetColVisibleIndex - 1].disableReorder;\n        } else {\n          canBeReordered = targetColVisibleIndex < visibleColumns.length - 1 && !visibleColumns[targetColVisibleIndex + 1].disableReorder;\n        }\n        if (forbiddenIndexes.current[targetColIndex]) {\n          let nextVisibleColumnField;\n          let indexWithOffset = targetColIndex + indexOffsetInHiddenColumns;\n          if (hasMovedLeft) {\n            nextVisibleColumnField = targetColVisibleIndex > 0 ? visibleColumns[targetColVisibleIndex - 1].field : null;\n            while (indexWithOffset > 0 && allColumns[indexWithOffset].field !== nextVisibleColumnField && forbiddenIndexes.current[indexWithOffset]) {\n              indexOffsetInHiddenColumns -= 1;\n              indexWithOffset = targetColIndex + indexOffsetInHiddenColumns;\n            }\n          } else {\n            nextVisibleColumnField = targetColVisibleIndex + 1 < visibleColumns.length ? visibleColumns[targetColVisibleIndex + 1].field : null;\n            while (indexWithOffset < allColumns.length - 1 && allColumns[indexWithOffset].field !== nextVisibleColumnField && forbiddenIndexes.current[indexWithOffset]) {\n              indexOffsetInHiddenColumns += 1;\n              indexWithOffset = targetColIndex + indexOffsetInHiddenColumns;\n            }\n          }\n          if (forbiddenIndexes.current[indexWithOffset] || allColumns[indexWithOffset].field === nextVisibleColumnField) {\n            // If we ended up on a visible column, or a forbidden one, we cannot do the reorder\n            canBeReordered = false;\n          }\n        }\n        const canBeReorderedProcessed = apiRef.current.unstable_applyPipeProcessors('canBeReordered', canBeReordered, {\n          targetIndex: targetColVisibleIndex\n        });\n        if (canBeReorderedProcessed) {\n          apiRef.current.setColumnIndex(dragColField, targetColIndex + indexOffsetInHiddenColumns);\n        }\n      }\n      cursorPosition.current = coordinates;\n    }\n  }, [apiRef, logger, theme.direction]);\n  const handleDragEnd = React.useCallback((params, event) => {\n    const dragColField = gridColumnReorderDragColSelector(apiRef);\n    if (props.disableColumnReorder || !dragColField) {\n      return;\n    }\n    logger.debug('End dragging col');\n    event.preventDefault();\n    // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n    event.stopPropagation();\n    clearTimeout(removeDnDStylesTimeout.current);\n    dragColNode.current = null;\n\n    // Check if the column was dropped outside the grid.\n    if (event.dataTransfer.dropEffect === 'none' && !props.keepColumnPositionIfDraggedOutside) {\n      // Accessing params.field may contain the wrong field as header elements are reused\n      apiRef.current.setColumnIndex(dragColField, originColumnIndex.current);\n      originColumnIndex.current = null;\n    } else {\n      // Emit the columnOrderChange event only once when the reordering stops.\n      const columnOrderChangeParams = {\n        column: apiRef.current.getColumn(dragColField),\n        targetIndex: apiRef.current.getColumnIndexRelativeToVisibleColumns(dragColField),\n        oldIndex: originColumnIndex.current\n      };\n      apiRef.current.publishEvent('columnOrderChange', columnOrderChangeParams);\n    }\n    apiRef.current.setState(state => _extends({}, state, {\n      columnReorder: _extends({}, state.columnReorder, {\n        dragCol: ''\n      })\n    }));\n    apiRef.current.forceUpdate();\n  }, [props.disableColumnReorder, props.keepColumnPositionIfDraggedOutside, logger, apiRef]);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragStart', handleDragStart);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragEnter', handleDragEnter);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragOver', handleDragOver);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragEnd', handleDragEnd);\n  useGridApiEventHandler(apiRef, 'cellDragEnter', handleDragEnter);\n  useGridApiEventHandler(apiRef, 'cellDragOver', handleDragOver);\n  useGridApiOptionHandler(apiRef, 'columnOrderChange', props.onColumnOrderChange);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}