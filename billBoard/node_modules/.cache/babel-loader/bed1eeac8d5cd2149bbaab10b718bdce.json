{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { defaultMemoize } from 'reselect';\nimport { unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { useLazyRef } from '../../utils/useLazyRef';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { GridPreferencePanelsValue } from '../preferencesPanel/gridPreferencePanelsValue';\nimport { getDefaultGridFilterModel } from './gridFilterState';\nimport { gridFilterModelSelector } from './gridFilterSelector';\nimport { useFirstRender } from '../../utils/useFirstRender';\nimport { gridRowsLookupSelector } from '../rows';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GRID_DEFAULT_STRATEGY, useGridRegisterStrategyProcessor } from '../../core/strategyProcessing';\nimport { buildAggregatedFilterApplier, sanitizeFilterModel, mergeStateWithFilterModel, cleanFilterItem, passFilterLogic, shouldQuickFilterExcludeHiddenColumns } from './gridFilterUtils';\nimport { isDeepEqual } from '../../../utils/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const filterStateInitializer = (state, props, apiRef) => {\n  const filterModel = props.filterModel ?? props.initialState?.filter?.filterModel ?? getDefaultGridFilterModel();\n  return _extends({}, state, {\n    filter: {\n      filterModel: sanitizeFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef),\n      filteredRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    },\n    visibleRowsLookup: {}\n  });\n};\n\nconst getVisibleRowsLookup = params => {\n  // For flat tree, the `visibleRowsLookup` and the `filteredRowsLookup` are equals since no row is collapsed.\n  return params.filteredRowsLookup;\n};\n\nfunction getVisibleRowsLookupState(apiRef, state) {\n  return apiRef.current.applyStrategyProcessor('visibleRowsLookupCreation', {\n    tree: state.rows.tree,\n    filteredRowsLookup: state.filter.filteredRowsLookup\n  });\n}\n\nfunction createMemoizedValues() {\n  return defaultMemoize(Object.values);\n}\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n * @requires useGridRows (event)\n */\n\n\nexport const useGridFilter = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridFilter');\n  apiRef.current.registerControlState({\n    stateId: 'filter',\n    propModel: props.filterModel,\n    propOnChange: props.onFilterModelChange,\n    stateSelector: gridFilterModelSelector,\n    changeEvent: 'filterModelChange'\n  });\n  const updateFilteredRows = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      const filterModel = gridFilterModelSelector(state, apiRef.current.instanceId);\n      const filterState = apiRef.current.getFilterState(filterModel);\n\n      const newState = _extends({}, state, {\n        filter: _extends({}, state.filter, filterState)\n      });\n\n      const visibleRowsLookupState = getVisibleRowsLookupState(apiRef, newState);\n      return _extends({}, newState, {\n        visibleRowsLookup: visibleRowsLookupState\n      });\n    });\n    apiRef.current.publishEvent('filteredRowsSet');\n  }, [apiRef]);\n  const addColumnMenuItem = React.useCallback((columnMenuItems, colDef) => {\n    if (colDef == null || colDef.filterable === false || props.disableColumnFilter) {\n      return columnMenuItems;\n    }\n\n    return [...columnMenuItems, 'columnMenuFilterItem'];\n  }, [props.disableColumnFilter]);\n  /**\n   * API METHODS\n   */\n\n  const applyFilters = React.useCallback(() => {\n    updateFilteredRows();\n    apiRef.current.forceUpdate();\n  }, [apiRef, updateFilteredRows]);\n  const upsertFilterItem = React.useCallback(item => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = [...filterModel.items];\n    const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);\n\n    if (itemIndex === -1) {\n      items.push(item);\n    } else {\n      items[itemIndex] = item;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'upsertFilterItem');\n  }, [apiRef]);\n  const upsertFilterItems = React.useCallback(items => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const existingItems = [...filterModel.items];\n    items.forEach(item => {\n      const itemIndex = existingItems.findIndex(filterItem => filterItem.id === item.id);\n\n      if (itemIndex === -1) {\n        existingItems.push(item);\n      } else {\n        existingItems[itemIndex] = item;\n      }\n    });\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items: existingItems\n    }), 'upsertFilterItems');\n  }, [apiRef]);\n  const deleteFilterItem = React.useCallback(itemToDelete => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = filterModel.items.filter(item => item.id !== itemToDelete.id);\n\n    if (items.length === filterModel.items.length) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'deleteFilterItem');\n  }, [apiRef]);\n  const showFilterPanel = React.useCallback((targetColumnField, panelId, labelId) => {\n    logger.debug('Displaying filter panel');\n\n    if (targetColumnField) {\n      const filterModel = gridFilterModelSelector(apiRef);\n      const filterItemsWithValue = filterModel.items.filter(item => {\n        if (item.value !== undefined) {\n          // Some filters like `isAnyOf` support array as `item.value`.\n          // If array is empty, we want to remove it from the filter model.\n          if (Array.isArray(item.value) && item.value.length === 0) {\n            return false;\n          }\n\n          return true;\n        }\n\n        const column = apiRef.current.getColumn(item.field);\n        const filterOperator = column.filterOperators?.find(operator => operator.value === item.operator);\n        const requiresFilterValue = typeof filterOperator?.requiresFilterValue === 'undefined' ? true : filterOperator?.requiresFilterValue; // Operators like `isEmpty` don't have and don't require `item.value`.\n        // So we don't want to remove them from the filter model if `item.value === undefined`.\n        // See https://github.com/mui/mui-x/issues/5402\n\n        if (requiresFilterValue) {\n          return false;\n        }\n\n        return true;\n      });\n      let newFilterItems;\n      const filterItemOnTarget = filterItemsWithValue.find(item => item.field === targetColumnField);\n      const targetColumn = apiRef.current.getColumn(targetColumnField);\n\n      if (filterItemOnTarget) {\n        newFilterItems = filterItemsWithValue;\n      } else if (props.disableMultipleColumnsFiltering) {\n        newFilterItems = [cleanFilterItem({\n          field: targetColumnField,\n          operator: targetColumn.filterOperators[0].value\n        }, apiRef)];\n      } else {\n        newFilterItems = [...filterItemsWithValue, cleanFilterItem({\n          field: targetColumnField,\n          operator: targetColumn.filterOperators[0].value\n        }, apiRef)];\n      }\n\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n\n    apiRef.current.showPreferences(GridPreferencePanelsValue.filters, panelId, labelId);\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const hideFilterPanel = React.useCallback(() => {\n    logger.debug('Hiding filter panel');\n    apiRef.current.hidePreferences();\n  }, [apiRef, logger]);\n  const setFilterLogicOperator = React.useCallback(logicOperator => {\n    const filterModel = gridFilterModelSelector(apiRef);\n\n    if (filterModel.logicOperator === logicOperator) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      logicOperator\n    }), 'changeLogicOperator');\n  }, [apiRef]);\n  const setQuickFilterValues = React.useCallback(values => {\n    const filterModel = gridFilterModelSelector(apiRef);\n\n    if (isDeepEqual(filterModel.quickFilterValues, values)) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      quickFilterValues: [...values]\n    }));\n  }, [apiRef]);\n  const setFilterModel = React.useCallback((model, reason) => {\n    const currentModel = gridFilterModelSelector(apiRef);\n\n    if (currentModel !== model) {\n      logger.debug('Setting filter model');\n      apiRef.current.updateControlState('filter', mergeStateWithFilterModel(model, props.disableMultipleColumnsFiltering, apiRef), reason);\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const getFilterState = React.useCallback(inputFilterModel => {\n    const filterModel = sanitizeFilterModel(inputFilterModel, props.disableMultipleColumnsFiltering, apiRef);\n    const isRowMatchingFilters = props.filterMode === 'client' ? buildAggregatedFilterApplier(filterModel, apiRef, props.disableEval) : null;\n    const filterResult = apiRef.current.applyStrategyProcessor('filtering', {\n      isRowMatchingFilters,\n      filterModel: filterModel ?? getDefaultGridFilterModel()\n    });\n    return _extends({}, filterResult, {\n      filterModel\n    });\n  }, [props.disableMultipleColumnsFiltering, props.filterMode, props.disableEval, apiRef]);\n  const filterApi = {\n    setFilterLogicOperator,\n    unstable_applyFilters: applyFilters,\n    deleteFilterItem,\n    upsertFilterItem,\n    upsertFilterItems,\n    setFilterModel,\n    showFilterPanel,\n    hideFilterPanel,\n    setQuickFilterValues,\n    ignoreDiacritics: props.ignoreDiacritics,\n    getFilterState\n  };\n  useGridApiMethod(apiRef, filterApi, 'public');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    const filterModelToExport = gridFilterModelSelector(apiRef);\n    const shouldExportFilterModel = // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels || // Always export if the model is controlled\n    props.filterModel != null || // Always export if the model has been initialized\n    props.initialState?.filter?.filterModel != null || // Export if the model is not equal to the default value\n    !isDeepEqual(filterModelToExport, getDefaultGridFilterModel());\n\n    if (!shouldExportFilterModel) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      filter: {\n        filterModel: filterModelToExport\n      }\n    });\n  }, [apiRef, props.filterModel, props.initialState?.filter?.filterModel]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const filterModel = context.stateToRestore.filter?.filterModel;\n\n    if (filterModel == null) {\n      return params;\n    }\n\n    apiRef.current.updateControlState('filter', mergeStateWithFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef), 'restoreState');\n    return _extends({}, params, {\n      callbacks: [...params.callbacks, apiRef.current.unstable_applyFilters]\n    });\n  }, [apiRef, props.disableMultipleColumnsFiltering]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === GridPreferencePanelsValue.filters) {\n      const FilterPanel = props.slots.filterPanel;\n      return /*#__PURE__*/_jsx(FilterPanel, _extends({}, props.slotProps?.filterPanel));\n    }\n\n    return initialValue;\n  }, [props.slots.filterPanel, props.slotProps?.filterPanel]);\n  const {\n    getRowId\n  } = props;\n  const getRowsRef = useLazyRef(createMemoizedValues);\n  const flatFilteringMethod = React.useCallback(params => {\n    if (props.filterMode !== 'client' || !params.isRowMatchingFilters) {\n      return {\n        filteredRowsLookup: {},\n        filteredDescendantCountLookup: {}\n      };\n    }\n\n    const dataRowIdToModelLookup = gridRowsLookupSelector(apiRef);\n    const filteredRowsLookup = {};\n    const {\n      isRowMatchingFilters\n    } = params;\n    const filterCache = {};\n    const result = {\n      passingFilterItems: null,\n      passingQuickFilterValues: null\n    };\n    const rows = getRowsRef.current(apiRef.current.state.rows.dataRowIdToModelLookup);\n\n    for (let i = 0; i < rows.length; i += 1) {\n      const row = rows[i];\n      const id = getRowId ? getRowId(row) : row.id;\n      isRowMatchingFilters(row, undefined, result);\n      const isRowPassing = passFilterLogic([result.passingFilterItems], [result.passingQuickFilterValues], params.filterModel, apiRef, filterCache);\n      filteredRowsLookup[id] = isRowPassing;\n    }\n\n    const footerId = 'auto-generated-group-footer-root';\n    const footer = dataRowIdToModelLookup[footerId];\n\n    if (footer) {\n      filteredRowsLookup[footerId] = true;\n    }\n\n    return {\n      filteredRowsLookup,\n      filteredDescendantCountLookup: {}\n    };\n  }, [apiRef, props.filterMode, getRowId, getRowsRef]);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuItem);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'filtering', flatFilteringMethod);\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'visibleRowsLookupCreation', getVisibleRowsLookup);\n  /**\n   * EVENTS\n   */\n\n  const handleColumnsChange = React.useCallback(() => {\n    logger.debug('onColUpdated - GridColumns changed, applying filters');\n    const filterModel = gridFilterModelSelector(apiRef);\n    const columnsLookup = gridColumnLookupSelector(apiRef);\n    const newFilterItems = filterModel.items.filter(item => item.field && columnsLookup[item.field]);\n\n    if (newFilterItems.length < filterModel.items.length) {\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n  }, [apiRef, logger]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'filtering') {\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef]);\n  const updateVisibleRowsLookupState = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        visibleRowsLookup: getVisibleRowsLookupState(apiRef, state)\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]); // Do not call `apiRef.current.forceUpdate` to avoid re-render before updating the sorted rows.\n  // Otherwise, the state is not consistent during the render\n\n  useGridApiEventHandler(apiRef, 'rowsSet', updateFilteredRows);\n  useGridApiEventHandler(apiRef, 'columnsChange', handleColumnsChange);\n  useGridApiEventHandler(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n  useGridApiEventHandler(apiRef, 'rowExpansionChange', updateVisibleRowsLookupState);\n  useGridApiEventHandler(apiRef, 'columnVisibilityModelChange', () => {\n    const filterModel = gridFilterModelSelector(apiRef);\n\n    if (filterModel.quickFilterValues && shouldQuickFilterExcludeHiddenColumns(filterModel)) {\n      // re-apply filters because the quick filter results may have changed\n      apiRef.current.unstable_applyFilters();\n    }\n  });\n  /**\n   * 1ST RENDER\n   */\n\n  useFirstRender(() => {\n    apiRef.current.unstable_applyFilters();\n  });\n  /**\n   * EFFECTS\n   */\n\n  useEnhancedEffect(() => {\n    if (props.filterModel !== undefined) {\n      apiRef.current.setFilterModel(props.filterModel);\n    }\n  }, [apiRef, logger, props.filterModel]);\n};","map":{"version":3,"names":["_extends","React","defaultMemoize","unstable_useEnhancedEffect","useEnhancedEffect","useLazyRef","useGridApiEventHandler","useGridApiMethod","useGridLogger","gridColumnLookupSelector","GridPreferencePanelsValue","getDefaultGridFilterModel","gridFilterModelSelector","useFirstRender","gridRowsLookupSelector","useGridRegisterPipeProcessor","GRID_DEFAULT_STRATEGY","useGridRegisterStrategyProcessor","buildAggregatedFilterApplier","sanitizeFilterModel","mergeStateWithFilterModel","cleanFilterItem","passFilterLogic","shouldQuickFilterExcludeHiddenColumns","isDeepEqual","jsx","_jsx","filterStateInitializer","state","props","apiRef","filterModel","initialState","filter","disableMultipleColumnsFiltering","filteredRowsLookup","filteredDescendantCountLookup","visibleRowsLookup","getVisibleRowsLookup","params","getVisibleRowsLookupState","current","applyStrategyProcessor","tree","rows","createMemoizedValues","Object","values","useGridFilter","logger","registerControlState","stateId","propModel","propOnChange","onFilterModelChange","stateSelector","changeEvent","updateFilteredRows","useCallback","setState","instanceId","filterState","getFilterState","newState","visibleRowsLookupState","publishEvent","addColumnMenuItem","columnMenuItems","colDef","filterable","disableColumnFilter","applyFilters","forceUpdate","upsertFilterItem","item","items","itemIndex","findIndex","filterItem","id","push","setFilterModel","upsertFilterItems","existingItems","forEach","deleteFilterItem","itemToDelete","length","showFilterPanel","targetColumnField","panelId","labelId","debug","filterItemsWithValue","value","undefined","Array","isArray","column","getColumn","field","filterOperator","filterOperators","find","operator","requiresFilterValue","newFilterItems","filterItemOnTarget","targetColumn","showPreferences","filters","hideFilterPanel","hidePreferences","setFilterLogicOperator","logicOperator","setQuickFilterValues","quickFilterValues","model","reason","currentModel","updateControlState","unstable_applyFilters","inputFilterModel","isRowMatchingFilters","filterMode","disableEval","filterResult","filterApi","ignoreDiacritics","stateExportPreProcessing","prevState","context","filterModelToExport","shouldExportFilterModel","exportOnlyDirtyModels","stateRestorePreProcessing","stateToRestore","callbacks","preferencePanelPreProcessing","initialValue","FilterPanel","slots","filterPanel","slotProps","getRowId","getRowsRef","flatFilteringMethod","dataRowIdToModelLookup","filterCache","result","passingFilterItems","passingQuickFilterValues","i","row","isRowPassing","footerId","footer","handleColumnsChange","columnsLookup","handleStrategyProcessorChange","methodName","updateVisibleRowsLookupState"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/@mui/x-data-grid/hooks/features/filter/useGridFilter.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { defaultMemoize } from 'reselect';\nimport { unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { useLazyRef } from '../../utils/useLazyRef';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { GridPreferencePanelsValue } from '../preferencesPanel/gridPreferencePanelsValue';\nimport { getDefaultGridFilterModel } from './gridFilterState';\nimport { gridFilterModelSelector } from './gridFilterSelector';\nimport { useFirstRender } from '../../utils/useFirstRender';\nimport { gridRowsLookupSelector } from '../rows';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GRID_DEFAULT_STRATEGY, useGridRegisterStrategyProcessor } from '../../core/strategyProcessing';\nimport { buildAggregatedFilterApplier, sanitizeFilterModel, mergeStateWithFilterModel, cleanFilterItem, passFilterLogic, shouldQuickFilterExcludeHiddenColumns } from './gridFilterUtils';\nimport { isDeepEqual } from '../../../utils/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const filterStateInitializer = (state, props, apiRef) => {\n  const filterModel = props.filterModel ?? props.initialState?.filter?.filterModel ?? getDefaultGridFilterModel();\n  return _extends({}, state, {\n    filter: {\n      filterModel: sanitizeFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef),\n      filteredRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    },\n    visibleRowsLookup: {}\n  });\n};\nconst getVisibleRowsLookup = params => {\n  // For flat tree, the `visibleRowsLookup` and the `filteredRowsLookup` are equals since no row is collapsed.\n  return params.filteredRowsLookup;\n};\nfunction getVisibleRowsLookupState(apiRef, state) {\n  return apiRef.current.applyStrategyProcessor('visibleRowsLookupCreation', {\n    tree: state.rows.tree,\n    filteredRowsLookup: state.filter.filteredRowsLookup\n  });\n}\nfunction createMemoizedValues() {\n  return defaultMemoize(Object.values);\n}\n\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n * @requires useGridRows (event)\n */\nexport const useGridFilter = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridFilter');\n  apiRef.current.registerControlState({\n    stateId: 'filter',\n    propModel: props.filterModel,\n    propOnChange: props.onFilterModelChange,\n    stateSelector: gridFilterModelSelector,\n    changeEvent: 'filterModelChange'\n  });\n  const updateFilteredRows = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      const filterModel = gridFilterModelSelector(state, apiRef.current.instanceId);\n      const filterState = apiRef.current.getFilterState(filterModel);\n      const newState = _extends({}, state, {\n        filter: _extends({}, state.filter, filterState)\n      });\n      const visibleRowsLookupState = getVisibleRowsLookupState(apiRef, newState);\n      return _extends({}, newState, {\n        visibleRowsLookup: visibleRowsLookupState\n      });\n    });\n    apiRef.current.publishEvent('filteredRowsSet');\n  }, [apiRef]);\n  const addColumnMenuItem = React.useCallback((columnMenuItems, colDef) => {\n    if (colDef == null || colDef.filterable === false || props.disableColumnFilter) {\n      return columnMenuItems;\n    }\n    return [...columnMenuItems, 'columnMenuFilterItem'];\n  }, [props.disableColumnFilter]);\n\n  /**\n   * API METHODS\n   */\n  const applyFilters = React.useCallback(() => {\n    updateFilteredRows();\n    apiRef.current.forceUpdate();\n  }, [apiRef, updateFilteredRows]);\n  const upsertFilterItem = React.useCallback(item => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = [...filterModel.items];\n    const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);\n    if (itemIndex === -1) {\n      items.push(item);\n    } else {\n      items[itemIndex] = item;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'upsertFilterItem');\n  }, [apiRef]);\n  const upsertFilterItems = React.useCallback(items => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const existingItems = [...filterModel.items];\n    items.forEach(item => {\n      const itemIndex = existingItems.findIndex(filterItem => filterItem.id === item.id);\n      if (itemIndex === -1) {\n        existingItems.push(item);\n      } else {\n        existingItems[itemIndex] = item;\n      }\n    });\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items: existingItems\n    }), 'upsertFilterItems');\n  }, [apiRef]);\n  const deleteFilterItem = React.useCallback(itemToDelete => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = filterModel.items.filter(item => item.id !== itemToDelete.id);\n    if (items.length === filterModel.items.length) {\n      return;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'deleteFilterItem');\n  }, [apiRef]);\n  const showFilterPanel = React.useCallback((targetColumnField, panelId, labelId) => {\n    logger.debug('Displaying filter panel');\n    if (targetColumnField) {\n      const filterModel = gridFilterModelSelector(apiRef);\n      const filterItemsWithValue = filterModel.items.filter(item => {\n        if (item.value !== undefined) {\n          // Some filters like `isAnyOf` support array as `item.value`.\n          // If array is empty, we want to remove it from the filter model.\n          if (Array.isArray(item.value) && item.value.length === 0) {\n            return false;\n          }\n          return true;\n        }\n        const column = apiRef.current.getColumn(item.field);\n        const filterOperator = column.filterOperators?.find(operator => operator.value === item.operator);\n        const requiresFilterValue = typeof filterOperator?.requiresFilterValue === 'undefined' ? true : filterOperator?.requiresFilterValue;\n\n        // Operators like `isEmpty` don't have and don't require `item.value`.\n        // So we don't want to remove them from the filter model if `item.value === undefined`.\n        // See https://github.com/mui/mui-x/issues/5402\n        if (requiresFilterValue) {\n          return false;\n        }\n        return true;\n      });\n      let newFilterItems;\n      const filterItemOnTarget = filterItemsWithValue.find(item => item.field === targetColumnField);\n      const targetColumn = apiRef.current.getColumn(targetColumnField);\n      if (filterItemOnTarget) {\n        newFilterItems = filterItemsWithValue;\n      } else if (props.disableMultipleColumnsFiltering) {\n        newFilterItems = [cleanFilterItem({\n          field: targetColumnField,\n          operator: targetColumn.filterOperators[0].value\n        }, apiRef)];\n      } else {\n        newFilterItems = [...filterItemsWithValue, cleanFilterItem({\n          field: targetColumnField,\n          operator: targetColumn.filterOperators[0].value\n        }, apiRef)];\n      }\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n    apiRef.current.showPreferences(GridPreferencePanelsValue.filters, panelId, labelId);\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const hideFilterPanel = React.useCallback(() => {\n    logger.debug('Hiding filter panel');\n    apiRef.current.hidePreferences();\n  }, [apiRef, logger]);\n  const setFilterLogicOperator = React.useCallback(logicOperator => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    if (filterModel.logicOperator === logicOperator) {\n      return;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      logicOperator\n    }), 'changeLogicOperator');\n  }, [apiRef]);\n  const setQuickFilterValues = React.useCallback(values => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    if (isDeepEqual(filterModel.quickFilterValues, values)) {\n      return;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      quickFilterValues: [...values]\n    }));\n  }, [apiRef]);\n  const setFilterModel = React.useCallback((model, reason) => {\n    const currentModel = gridFilterModelSelector(apiRef);\n    if (currentModel !== model) {\n      logger.debug('Setting filter model');\n      apiRef.current.updateControlState('filter', mergeStateWithFilterModel(model, props.disableMultipleColumnsFiltering, apiRef), reason);\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const getFilterState = React.useCallback(inputFilterModel => {\n    const filterModel = sanitizeFilterModel(inputFilterModel, props.disableMultipleColumnsFiltering, apiRef);\n    const isRowMatchingFilters = props.filterMode === 'client' ? buildAggregatedFilterApplier(filterModel, apiRef, props.disableEval) : null;\n    const filterResult = apiRef.current.applyStrategyProcessor('filtering', {\n      isRowMatchingFilters,\n      filterModel: filterModel ?? getDefaultGridFilterModel()\n    });\n    return _extends({}, filterResult, {\n      filterModel\n    });\n  }, [props.disableMultipleColumnsFiltering, props.filterMode, props.disableEval, apiRef]);\n  const filterApi = {\n    setFilterLogicOperator,\n    unstable_applyFilters: applyFilters,\n    deleteFilterItem,\n    upsertFilterItem,\n    upsertFilterItems,\n    setFilterModel,\n    showFilterPanel,\n    hideFilterPanel,\n    setQuickFilterValues,\n    ignoreDiacritics: props.ignoreDiacritics,\n    getFilterState\n  };\n  useGridApiMethod(apiRef, filterApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    const filterModelToExport = gridFilterModelSelector(apiRef);\n    const shouldExportFilterModel =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the model is controlled\n    props.filterModel != null ||\n    // Always export if the model has been initialized\n    props.initialState?.filter?.filterModel != null ||\n    // Export if the model is not equal to the default value\n    !isDeepEqual(filterModelToExport, getDefaultGridFilterModel());\n    if (!shouldExportFilterModel) {\n      return prevState;\n    }\n    return _extends({}, prevState, {\n      filter: {\n        filterModel: filterModelToExport\n      }\n    });\n  }, [apiRef, props.filterModel, props.initialState?.filter?.filterModel]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const filterModel = context.stateToRestore.filter?.filterModel;\n    if (filterModel == null) {\n      return params;\n    }\n    apiRef.current.updateControlState('filter', mergeStateWithFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef), 'restoreState');\n    return _extends({}, params, {\n      callbacks: [...params.callbacks, apiRef.current.unstable_applyFilters]\n    });\n  }, [apiRef, props.disableMultipleColumnsFiltering]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === GridPreferencePanelsValue.filters) {\n      const FilterPanel = props.slots.filterPanel;\n      return /*#__PURE__*/_jsx(FilterPanel, _extends({}, props.slotProps?.filterPanel));\n    }\n    return initialValue;\n  }, [props.slots.filterPanel, props.slotProps?.filterPanel]);\n  const {\n    getRowId\n  } = props;\n  const getRowsRef = useLazyRef(createMemoizedValues);\n  const flatFilteringMethod = React.useCallback(params => {\n    if (props.filterMode !== 'client' || !params.isRowMatchingFilters) {\n      return {\n        filteredRowsLookup: {},\n        filteredDescendantCountLookup: {}\n      };\n    }\n    const dataRowIdToModelLookup = gridRowsLookupSelector(apiRef);\n    const filteredRowsLookup = {};\n    const {\n      isRowMatchingFilters\n    } = params;\n    const filterCache = {};\n    const result = {\n      passingFilterItems: null,\n      passingQuickFilterValues: null\n    };\n    const rows = getRowsRef.current(apiRef.current.state.rows.dataRowIdToModelLookup);\n    for (let i = 0; i < rows.length; i += 1) {\n      const row = rows[i];\n      const id = getRowId ? getRowId(row) : row.id;\n      isRowMatchingFilters(row, undefined, result);\n      const isRowPassing = passFilterLogic([result.passingFilterItems], [result.passingQuickFilterValues], params.filterModel, apiRef, filterCache);\n      filteredRowsLookup[id] = isRowPassing;\n    }\n    const footerId = 'auto-generated-group-footer-root';\n    const footer = dataRowIdToModelLookup[footerId];\n    if (footer) {\n      filteredRowsLookup[footerId] = true;\n    }\n    return {\n      filteredRowsLookup,\n      filteredDescendantCountLookup: {}\n    };\n  }, [apiRef, props.filterMode, getRowId, getRowsRef]);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuItem);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'filtering', flatFilteringMethod);\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'visibleRowsLookupCreation', getVisibleRowsLookup);\n\n  /**\n   * EVENTS\n   */\n  const handleColumnsChange = React.useCallback(() => {\n    logger.debug('onColUpdated - GridColumns changed, applying filters');\n    const filterModel = gridFilterModelSelector(apiRef);\n    const columnsLookup = gridColumnLookupSelector(apiRef);\n    const newFilterItems = filterModel.items.filter(item => item.field && columnsLookup[item.field]);\n    if (newFilterItems.length < filterModel.items.length) {\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n  }, [apiRef, logger]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'filtering') {\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef]);\n  const updateVisibleRowsLookupState = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        visibleRowsLookup: getVisibleRowsLookupState(apiRef, state)\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n\n  // Do not call `apiRef.current.forceUpdate` to avoid re-render before updating the sorted rows.\n  // Otherwise, the state is not consistent during the render\n  useGridApiEventHandler(apiRef, 'rowsSet', updateFilteredRows);\n  useGridApiEventHandler(apiRef, 'columnsChange', handleColumnsChange);\n  useGridApiEventHandler(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n  useGridApiEventHandler(apiRef, 'rowExpansionChange', updateVisibleRowsLookupState);\n  useGridApiEventHandler(apiRef, 'columnVisibilityModelChange', () => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    if (filterModel.quickFilterValues && shouldQuickFilterExcludeHiddenColumns(filterModel)) {\n      // re-apply filters because the quick filter results may have changed\n      apiRef.current.unstable_applyFilters();\n    }\n  });\n\n  /**\n   * 1ST RENDER\n   */\n  useFirstRender(() => {\n    apiRef.current.unstable_applyFilters();\n  });\n\n  /**\n   * EFFECTS\n   */\n  useEnhancedEffect(() => {\n    if (props.filterModel !== undefined) {\n      apiRef.current.setFilterModel(props.filterModel);\n    }\n  }, [apiRef, logger, props.filterModel]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}