{"ast":null,"code":"import { isNumber } from '@mui/x-data-grid-pro/internals';\nconst sumAgg = {\n  apply: _ref => {\n    let {\n      values\n    } = _ref;\n    let sum = 0;\n\n    for (let i = 0; i < values.length; i += 1) {\n      const value = values[i];\n\n      if (isNumber(value)) {\n        sum += value;\n      }\n    }\n\n    return sum;\n  },\n  columnTypes: ['number']\n};\nconst avgAgg = {\n  apply: _ref2 => {\n    let {\n      values\n    } = _ref2;\n\n    if (values.length === 0) {\n      return null;\n    }\n\n    let sum = 0;\n    let valuesCount = 0;\n\n    for (let i = 0; i < values.length; i += 1) {\n      const value = values[i];\n\n      if (isNumber(value)) {\n        valuesCount += 1;\n        sum += value;\n      }\n    }\n\n    return sum / valuesCount;\n  },\n  columnTypes: ['number']\n};\nconst minAgg = {\n  apply: _ref3 => {\n    let {\n      values\n    } = _ref3;\n\n    if (values.length === 0) {\n      return null;\n    }\n\n    let min = +Infinity;\n\n    for (let i = 0; i < values.length; i += 1) {\n      const value = values[i];\n\n      if (value != null && value < min) {\n        min = value;\n      }\n    }\n\n    return min;\n  },\n  columnTypes: ['number', 'date', 'dateTime']\n};\nconst maxAgg = {\n  apply: _ref4 => {\n    let {\n      values\n    } = _ref4;\n\n    if (values.length === 0) {\n      return null;\n    }\n\n    let max = -Infinity;\n\n    for (let i = 0; i < values.length; i += 1) {\n      const value = values[i];\n\n      if (value != null && value > max) {\n        max = value;\n      }\n    }\n\n    return max;\n  },\n  columnTypes: ['number', 'date', 'dateTime']\n};\nconst sizeAgg = {\n  apply: _ref5 => {\n    let {\n      values\n    } = _ref5;\n    return values.filter(value => typeof value !== 'undefined').length;\n  },\n  valueFormatter: value => {\n    if (value == null || !isNumber(value)) {\n      return value;\n    }\n\n    return value.toLocaleString();\n  },\n  hasCellUnit: false\n};\nexport const GRID_AGGREGATION_FUNCTIONS = {\n  sum: sumAgg,\n  avg: avgAgg,\n  min: minAgg,\n  max: maxAgg,\n  size: sizeAgg\n};","map":{"version":3,"names":["isNumber","sumAgg","apply","values","sum","i","length","value","columnTypes","avgAgg","valuesCount","minAgg","min","Infinity","maxAgg","max","sizeAgg","filter","valueFormatter","toLocaleString","hasCellUnit","GRID_AGGREGATION_FUNCTIONS","avg","size"],"sources":["C:/Users/kb/node_modules/@mui/x-data-grid-premium/esm/hooks/features/aggregation/gridAggregationFunctions.js"],"sourcesContent":["import { isNumber } from '@mui/x-data-grid-pro/internals';\nconst sumAgg = {\n  apply: ({\n    values\n  }) => {\n    let sum = 0;\n    for (let i = 0; i < values.length; i += 1) {\n      const value = values[i];\n      if (isNumber(value)) {\n        sum += value;\n      }\n    }\n    return sum;\n  },\n  columnTypes: ['number']\n};\nconst avgAgg = {\n  apply: ({\n    values\n  }) => {\n    if (values.length === 0) {\n      return null;\n    }\n    let sum = 0;\n    let valuesCount = 0;\n    for (let i = 0; i < values.length; i += 1) {\n      const value = values[i];\n      if (isNumber(value)) {\n        valuesCount += 1;\n        sum += value;\n      }\n    }\n    return sum / valuesCount;\n  },\n  columnTypes: ['number']\n};\nconst minAgg = {\n  apply: ({\n    values\n  }) => {\n    if (values.length === 0) {\n      return null;\n    }\n    let min = +Infinity;\n    for (let i = 0; i < values.length; i += 1) {\n      const value = values[i];\n      if (value != null && value < min) {\n        min = value;\n      }\n    }\n    return min;\n  },\n  columnTypes: ['number', 'date', 'dateTime']\n};\nconst maxAgg = {\n  apply: ({\n    values\n  }) => {\n    if (values.length === 0) {\n      return null;\n    }\n    let max = -Infinity;\n    for (let i = 0; i < values.length; i += 1) {\n      const value = values[i];\n      if (value != null && value > max) {\n        max = value;\n      }\n    }\n    return max;\n  },\n  columnTypes: ['number', 'date', 'dateTime']\n};\nconst sizeAgg = {\n  apply: ({\n    values\n  }) => {\n    return values.filter(value => typeof value !== 'undefined').length;\n  },\n  valueFormatter: value => {\n    if (value == null || !isNumber(value)) {\n      return value;\n    }\n    return value.toLocaleString();\n  },\n  hasCellUnit: false\n};\nexport const GRID_AGGREGATION_FUNCTIONS = {\n  sum: sumAgg,\n  avg: avgAgg,\n  min: minAgg,\n  max: maxAgg,\n  size: sizeAgg\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}