{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { gridColumnLookupSelector, useGridApiEventHandler, useGridApiMethod } from '@mui/x-data-grid-pro';\nimport { gridAggregationModelSelector } from './gridAggregationSelectors';\nimport { getAggregationRules, mergeStateWithAggregationModel, areAggregationRulesEqual } from './gridAggregationUtils';\nimport { createAggregationLookup } from './createAggregationLookup';\nexport const aggregationStateInitializer = (state, props, apiRef) => {\n  apiRef.current.caches.aggregation = {\n    rulesOnLastColumnHydration: {},\n    rulesOnLastRowHydration: {}\n  };\n  return _extends({}, state, {\n    aggregation: {\n      model: props.aggregationModel ?? props.initialState?.aggregation?.model ?? {}\n    }\n  });\n};\nexport const useGridAggregation = (apiRef, props) => {\n  apiRef.current.registerControlState({\n    stateId: 'aggregation',\n    propModel: props.aggregationModel,\n    propOnChange: props.onAggregationModelChange,\n    stateSelector: gridAggregationModelSelector,\n    changeEvent: 'aggregationModelChange'\n  });\n  /**\n   * API METHODS\n   */\n\n  const setAggregationModel = React.useCallback(model => {\n    const currentModel = gridAggregationModelSelector(apiRef);\n\n    if (currentModel !== model) {\n      apiRef.current.setState(mergeStateWithAggregationModel(model));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef]);\n  const applyAggregation = React.useCallback(() => {\n    const aggregationLookup = createAggregationLookup({\n      apiRef,\n      getAggregationPosition: props.getAggregationPosition,\n      aggregationFunctions: props.aggregationFunctions,\n      aggregationRowsScope: props.aggregationRowsScope\n    });\n    apiRef.current.setState(state => _extends({}, state, {\n      aggregation: _extends({}, state.aggregation, {\n        lookup: aggregationLookup\n      })\n    }));\n  }, [apiRef, props.getAggregationPosition, props.aggregationFunctions, props.aggregationRowsScope]);\n  const aggregationApi = {\n    setAggregationModel\n  };\n  useGridApiMethod(apiRef, aggregationApi, 'public');\n  /**\n   * EVENTS\n   */\n\n  const checkAggregationRulesDiff = React.useCallback(() => {\n    const {\n      rulesOnLastRowHydration,\n      rulesOnLastColumnHydration\n    } = apiRef.current.caches.aggregation;\n    const aggregationRules = props.disableAggregation ? {} : getAggregationRules({\n      columnsLookup: gridColumnLookupSelector(apiRef),\n      aggregationModel: gridAggregationModelSelector(apiRef),\n      aggregationFunctions: props.aggregationFunctions\n    }); // Re-apply the row hydration to add / remove the aggregation footers\n\n    if (!areAggregationRulesEqual(rulesOnLastRowHydration, aggregationRules)) {\n      apiRef.current.requestPipeProcessorsApplication('hydrateRows');\n      applyAggregation();\n    } // Re-apply the column hydration to wrap / unwrap the aggregated columns\n\n\n    if (!areAggregationRulesEqual(rulesOnLastColumnHydration, aggregationRules)) {\n      apiRef.current.caches.aggregation.rulesOnLastColumnHydration = aggregationRules;\n      apiRef.current.requestPipeProcessorsApplication('hydrateColumns');\n    }\n  }, [apiRef, applyAggregation, props.aggregationFunctions, props.disableAggregation]);\n  useGridApiEventHandler(apiRef, 'aggregationModelChange', checkAggregationRulesDiff);\n  useGridApiEventHandler(apiRef, 'columnsChange', checkAggregationRulesDiff);\n  useGridApiEventHandler(apiRef, 'filteredRowsSet', applyAggregation);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (props.aggregationModel !== undefined) {\n      apiRef.current.setAggregationModel(props.aggregationModel);\n    }\n  }, [apiRef, props.aggregationModel]);\n};","map":{"version":3,"names":["_extends","React","gridColumnLookupSelector","useGridApiEventHandler","useGridApiMethod","gridAggregationModelSelector","getAggregationRules","mergeStateWithAggregationModel","areAggregationRulesEqual","createAggregationLookup","aggregationStateInitializer","state","props","apiRef","current","caches","aggregation","rulesOnLastColumnHydration","rulesOnLastRowHydration","model","aggregationModel","initialState","useGridAggregation","registerControlState","stateId","propModel","propOnChange","onAggregationModelChange","stateSelector","changeEvent","setAggregationModel","useCallback","currentModel","setState","forceUpdate","applyAggregation","aggregationLookup","getAggregationPosition","aggregationFunctions","aggregationRowsScope","lookup","aggregationApi","checkAggregationRulesDiff","aggregationRules","disableAggregation","columnsLookup","requestPipeProcessorsApplication","useEffect","undefined"],"sources":["C:/Users/kb/node_modules/@mui/x-data-grid-premium/esm/hooks/features/aggregation/useGridAggregation.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { gridColumnLookupSelector, useGridApiEventHandler, useGridApiMethod } from '@mui/x-data-grid-pro';\nimport { gridAggregationModelSelector } from './gridAggregationSelectors';\nimport { getAggregationRules, mergeStateWithAggregationModel, areAggregationRulesEqual } from './gridAggregationUtils';\nimport { createAggregationLookup } from './createAggregationLookup';\nexport const aggregationStateInitializer = (state, props, apiRef) => {\n  apiRef.current.caches.aggregation = {\n    rulesOnLastColumnHydration: {},\n    rulesOnLastRowHydration: {}\n  };\n  return _extends({}, state, {\n    aggregation: {\n      model: props.aggregationModel ?? props.initialState?.aggregation?.model ?? {}\n    }\n  });\n};\nexport const useGridAggregation = (apiRef, props) => {\n  apiRef.current.registerControlState({\n    stateId: 'aggregation',\n    propModel: props.aggregationModel,\n    propOnChange: props.onAggregationModelChange,\n    stateSelector: gridAggregationModelSelector,\n    changeEvent: 'aggregationModelChange'\n  });\n\n  /**\n   * API METHODS\n   */\n  const setAggregationModel = React.useCallback(model => {\n    const currentModel = gridAggregationModelSelector(apiRef);\n    if (currentModel !== model) {\n      apiRef.current.setState(mergeStateWithAggregationModel(model));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef]);\n  const applyAggregation = React.useCallback(() => {\n    const aggregationLookup = createAggregationLookup({\n      apiRef,\n      getAggregationPosition: props.getAggregationPosition,\n      aggregationFunctions: props.aggregationFunctions,\n      aggregationRowsScope: props.aggregationRowsScope\n    });\n    apiRef.current.setState(state => _extends({}, state, {\n      aggregation: _extends({}, state.aggregation, {\n        lookup: aggregationLookup\n      })\n    }));\n  }, [apiRef, props.getAggregationPosition, props.aggregationFunctions, props.aggregationRowsScope]);\n  const aggregationApi = {\n    setAggregationModel\n  };\n  useGridApiMethod(apiRef, aggregationApi, 'public');\n\n  /**\n   * EVENTS\n   */\n  const checkAggregationRulesDiff = React.useCallback(() => {\n    const {\n      rulesOnLastRowHydration,\n      rulesOnLastColumnHydration\n    } = apiRef.current.caches.aggregation;\n    const aggregationRules = props.disableAggregation ? {} : getAggregationRules({\n      columnsLookup: gridColumnLookupSelector(apiRef),\n      aggregationModel: gridAggregationModelSelector(apiRef),\n      aggregationFunctions: props.aggregationFunctions\n    });\n\n    // Re-apply the row hydration to add / remove the aggregation footers\n    if (!areAggregationRulesEqual(rulesOnLastRowHydration, aggregationRules)) {\n      apiRef.current.requestPipeProcessorsApplication('hydrateRows');\n      applyAggregation();\n    }\n\n    // Re-apply the column hydration to wrap / unwrap the aggregated columns\n    if (!areAggregationRulesEqual(rulesOnLastColumnHydration, aggregationRules)) {\n      apiRef.current.caches.aggregation.rulesOnLastColumnHydration = aggregationRules;\n      apiRef.current.requestPipeProcessorsApplication('hydrateColumns');\n    }\n  }, [apiRef, applyAggregation, props.aggregationFunctions, props.disableAggregation]);\n  useGridApiEventHandler(apiRef, 'aggregationModelChange', checkAggregationRulesDiff);\n  useGridApiEventHandler(apiRef, 'columnsChange', checkAggregationRulesDiff);\n  useGridApiEventHandler(apiRef, 'filteredRowsSet', applyAggregation);\n\n  /**\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    if (props.aggregationModel !== undefined) {\n      apiRef.current.setAggregationModel(props.aggregationModel);\n    }\n  }, [apiRef, props.aggregationModel]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}