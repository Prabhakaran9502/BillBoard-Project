{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiEventHandler, useGridApiMethod, gridColumnLookupSelector } from '@mui/x-data-grid-pro';\nimport { useGridRegisterPipeProcessor } from '@mui/x-data-grid-pro/internals';\nimport { gridRowGroupingModelSelector, gridRowGroupingSanitizedModelSelector } from './gridRowGroupingSelector';\nimport { getRowGroupingFieldFromGroupingCriteria, ROW_GROUPING_STRATEGY, isGroupingColumn, mergeStateWithRowGroupingModel, setStrategyAvailability, getGroupingRules, areGroupingRulesEqual } from './gridRowGroupingUtils';\nexport const rowGroupingStateInitializer = (state, props, apiRef) => {\n  apiRef.current.caches.rowGrouping = {\n    rulesOnLastRowTreeCreation: []\n  };\n  return _extends({}, state, {\n    rowGrouping: {\n      model: props.rowGroupingModel ?? props.initialState?.rowGrouping?.model ?? []\n    }\n  });\n};\n/**\n * @requires useGridColumns (state, method) - can be after, async only\n * @requires useGridRows (state, method) - can be after, async only\n * @requires useGridParamsApi (method) - can be after, async only\n */\n\nexport const useGridRowGrouping = (apiRef, props) => {\n  apiRef.current.registerControlState({\n    stateId: 'rowGrouping',\n    propModel: props.rowGroupingModel,\n    propOnChange: props.onRowGroupingModelChange,\n    stateSelector: gridRowGroupingModelSelector,\n    changeEvent: 'rowGroupingModelChange'\n  });\n  /**\n   * API METHODS\n   */\n\n  const setRowGroupingModel = React.useCallback(model => {\n    const currentModel = gridRowGroupingModelSelector(apiRef);\n\n    if (currentModel !== model) {\n      apiRef.current.setState(mergeStateWithRowGroupingModel(model));\n      setStrategyAvailability(apiRef, props.disableRowGrouping);\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, props.disableRowGrouping]);\n  const addRowGroupingCriteria = React.useCallback((field, groupingIndex) => {\n    const currentModel = gridRowGroupingModelSelector(apiRef);\n\n    if (currentModel.includes(field)) {\n      return;\n    }\n\n    const cleanGroupingIndex = groupingIndex ?? currentModel.length;\n    const updatedModel = [...currentModel.slice(0, cleanGroupingIndex), field, ...currentModel.slice(cleanGroupingIndex)];\n    apiRef.current.setRowGroupingModel(updatedModel);\n  }, [apiRef]);\n  const removeRowGroupingCriteria = React.useCallback(field => {\n    const currentModel = gridRowGroupingModelSelector(apiRef);\n\n    if (!currentModel.includes(field)) {\n      return;\n    }\n\n    apiRef.current.setRowGroupingModel(currentModel.filter(el => el !== field));\n  }, [apiRef]);\n  const setRowGroupingCriteriaIndex = React.useCallback((field, targetIndex) => {\n    const currentModel = gridRowGroupingModelSelector(apiRef);\n    const currentTargetIndex = currentModel.indexOf(field);\n\n    if (currentTargetIndex === -1) {\n      return;\n    }\n\n    const updatedModel = [...currentModel];\n    updatedModel.splice(targetIndex, 0, updatedModel.splice(currentTargetIndex, 1)[0]);\n    apiRef.current.setRowGroupingModel(updatedModel);\n  }, [apiRef]);\n  const rowGroupingApi = {\n    setRowGroupingModel,\n    addRowGroupingCriteria,\n    removeRowGroupingCriteria,\n    setRowGroupingCriteriaIndex\n  };\n  useGridApiMethod(apiRef, rowGroupingApi, 'public');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const addColumnMenuButtons = React.useCallback((columnMenuItems, colDef) => {\n    if (props.disableRowGrouping) {\n      return columnMenuItems;\n    }\n\n    if (isGroupingColumn(colDef.field) || colDef.groupable) {\n      return [...columnMenuItems, 'columnMenuGroupingItem'];\n    }\n\n    return columnMenuItems;\n  }, [props.disableRowGrouping]);\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    const rowGroupingModelToExport = gridRowGroupingModelSelector(apiRef);\n    const shouldExportRowGroupingModel = // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels || // Always export if the model is controlled\n    props.rowGroupingModel != null || // Always export if the model has been initialized\n    props.initialState?.rowGrouping?.model != null || // Export if the model is not empty\n    Object.keys(rowGroupingModelToExport).length > 0;\n\n    if (!shouldExportRowGroupingModel) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      rowGrouping: {\n        model: rowGroupingModelToExport\n      }\n    });\n  }, [apiRef, props.rowGroupingModel, props.initialState?.rowGrouping?.model]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    if (props.disableRowGrouping) {\n      return params;\n    }\n\n    const rowGroupingModel = context.stateToRestore.rowGrouping?.model;\n\n    if (rowGroupingModel != null) {\n      apiRef.current.setState(mergeStateWithRowGroupingModel(rowGroupingModel));\n    }\n\n    return params;\n  }, [apiRef, props.disableRowGrouping]);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuButtons);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  /**\n   * EVENTS\n   */\n\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    const cellParams = apiRef.current.getCellParams(params.id, params.field);\n\n    if (isGroupingColumn(cellParams.field) && event.key === ' ' && !event.shiftKey) {\n      event.stopPropagation();\n      event.preventDefault();\n\n      if (params.rowNode.type !== 'group') {\n        return;\n      }\n\n      const isOnGroupingCell = props.rowGroupingColumnMode === 'single' || getRowGroupingFieldFromGroupingCriteria(params.rowNode.groupingField) === params.field;\n\n      if (!isOnGroupingCell) {\n        return;\n      }\n\n      apiRef.current.setRowChildrenExpansion(params.id, !params.rowNode.childrenExpanded);\n    }\n  }, [apiRef, props.rowGroupingColumnMode]);\n  const checkGroupingColumnsModelDiff = React.useCallback(() => {\n    const sanitizedRowGroupingModel = gridRowGroupingSanitizedModelSelector(apiRef);\n    const rulesOnLastRowTreeCreation = apiRef.current.caches.rowGrouping.rulesOnLastRowTreeCreation || [];\n    const groupingRules = getGroupingRules({\n      sanitizedRowGroupingModel,\n      columnsLookup: gridColumnLookupSelector(apiRef)\n    });\n\n    if (!areGroupingRulesEqual(rulesOnLastRowTreeCreation, groupingRules)) {\n      apiRef.current.caches.rowGrouping.rulesOnLastRowTreeCreation = groupingRules;\n      apiRef.current.requestPipeProcessorsApplication('hydrateColumns');\n      setStrategyAvailability(apiRef, props.disableRowGrouping); // Refresh the row tree creation strategy processing\n      // TODO: Add a clean way to re-run a strategy processing without publishing a private event\n\n      if (apiRef.current.getActiveStrategy('rowTree') === ROW_GROUPING_STRATEGY) {\n        apiRef.current.publishEvent('activeStrategyProcessorChange', 'rowTreeCreation');\n      }\n    }\n  }, [apiRef, props.disableRowGrouping]);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n  useGridApiEventHandler(apiRef, 'columnsChange', checkGroupingColumnsModelDiff);\n  useGridApiEventHandler(apiRef, 'rowGroupingModelChange', checkGroupingColumnsModelDiff);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (props.rowGroupingModel !== undefined) {\n      apiRef.current.setRowGroupingModel(props.rowGroupingModel);\n    }\n  }, [apiRef, props.rowGroupingModel]);\n};","map":{"version":3,"names":["_extends","React","useGridApiEventHandler","useGridApiMethod","gridColumnLookupSelector","useGridRegisterPipeProcessor","gridRowGroupingModelSelector","gridRowGroupingSanitizedModelSelector","getRowGroupingFieldFromGroupingCriteria","ROW_GROUPING_STRATEGY","isGroupingColumn","mergeStateWithRowGroupingModel","setStrategyAvailability","getGroupingRules","areGroupingRulesEqual","rowGroupingStateInitializer","state","props","apiRef","current","caches","rowGrouping","rulesOnLastRowTreeCreation","model","rowGroupingModel","initialState","useGridRowGrouping","registerControlState","stateId","propModel","propOnChange","onRowGroupingModelChange","stateSelector","changeEvent","setRowGroupingModel","useCallback","currentModel","setState","disableRowGrouping","forceUpdate","addRowGroupingCriteria","field","groupingIndex","includes","cleanGroupingIndex","length","updatedModel","slice","removeRowGroupingCriteria","filter","el","setRowGroupingCriteriaIndex","targetIndex","currentTargetIndex","indexOf","splice","rowGroupingApi","addColumnMenuButtons","columnMenuItems","colDef","groupable","stateExportPreProcessing","prevState","context","rowGroupingModelToExport","shouldExportRowGroupingModel","exportOnlyDirtyModels","Object","keys","stateRestorePreProcessing","params","stateToRestore","handleCellKeyDown","event","cellParams","getCellParams","id","key","shiftKey","stopPropagation","preventDefault","rowNode","type","isOnGroupingCell","rowGroupingColumnMode","groupingField","setRowChildrenExpansion","childrenExpanded","checkGroupingColumnsModelDiff","sanitizedRowGroupingModel","groupingRules","columnsLookup","requestPipeProcessorsApplication","getActiveStrategy","publishEvent","useEffect","undefined"],"sources":["C:/Users/kb/node_modules/@mui/x-data-grid-premium/esm/hooks/features/rowGrouping/useGridRowGrouping.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiEventHandler, useGridApiMethod, gridColumnLookupSelector } from '@mui/x-data-grid-pro';\nimport { useGridRegisterPipeProcessor } from '@mui/x-data-grid-pro/internals';\nimport { gridRowGroupingModelSelector, gridRowGroupingSanitizedModelSelector } from './gridRowGroupingSelector';\nimport { getRowGroupingFieldFromGroupingCriteria, ROW_GROUPING_STRATEGY, isGroupingColumn, mergeStateWithRowGroupingModel, setStrategyAvailability, getGroupingRules, areGroupingRulesEqual } from './gridRowGroupingUtils';\nexport const rowGroupingStateInitializer = (state, props, apiRef) => {\n  apiRef.current.caches.rowGrouping = {\n    rulesOnLastRowTreeCreation: []\n  };\n  return _extends({}, state, {\n    rowGrouping: {\n      model: props.rowGroupingModel ?? props.initialState?.rowGrouping?.model ?? []\n    }\n  });\n};\n\n/**\n * @requires useGridColumns (state, method) - can be after, async only\n * @requires useGridRows (state, method) - can be after, async only\n * @requires useGridParamsApi (method) - can be after, async only\n */\nexport const useGridRowGrouping = (apiRef, props) => {\n  apiRef.current.registerControlState({\n    stateId: 'rowGrouping',\n    propModel: props.rowGroupingModel,\n    propOnChange: props.onRowGroupingModelChange,\n    stateSelector: gridRowGroupingModelSelector,\n    changeEvent: 'rowGroupingModelChange'\n  });\n\n  /**\n   * API METHODS\n   */\n  const setRowGroupingModel = React.useCallback(model => {\n    const currentModel = gridRowGroupingModelSelector(apiRef);\n    if (currentModel !== model) {\n      apiRef.current.setState(mergeStateWithRowGroupingModel(model));\n      setStrategyAvailability(apiRef, props.disableRowGrouping);\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, props.disableRowGrouping]);\n  const addRowGroupingCriteria = React.useCallback((field, groupingIndex) => {\n    const currentModel = gridRowGroupingModelSelector(apiRef);\n    if (currentModel.includes(field)) {\n      return;\n    }\n    const cleanGroupingIndex = groupingIndex ?? currentModel.length;\n    const updatedModel = [...currentModel.slice(0, cleanGroupingIndex), field, ...currentModel.slice(cleanGroupingIndex)];\n    apiRef.current.setRowGroupingModel(updatedModel);\n  }, [apiRef]);\n  const removeRowGroupingCriteria = React.useCallback(field => {\n    const currentModel = gridRowGroupingModelSelector(apiRef);\n    if (!currentModel.includes(field)) {\n      return;\n    }\n    apiRef.current.setRowGroupingModel(currentModel.filter(el => el !== field));\n  }, [apiRef]);\n  const setRowGroupingCriteriaIndex = React.useCallback((field, targetIndex) => {\n    const currentModel = gridRowGroupingModelSelector(apiRef);\n    const currentTargetIndex = currentModel.indexOf(field);\n    if (currentTargetIndex === -1) {\n      return;\n    }\n    const updatedModel = [...currentModel];\n    updatedModel.splice(targetIndex, 0, updatedModel.splice(currentTargetIndex, 1)[0]);\n    apiRef.current.setRowGroupingModel(updatedModel);\n  }, [apiRef]);\n  const rowGroupingApi = {\n    setRowGroupingModel,\n    addRowGroupingCriteria,\n    removeRowGroupingCriteria,\n    setRowGroupingCriteriaIndex\n  };\n  useGridApiMethod(apiRef, rowGroupingApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const addColumnMenuButtons = React.useCallback((columnMenuItems, colDef) => {\n    if (props.disableRowGrouping) {\n      return columnMenuItems;\n    }\n    if (isGroupingColumn(colDef.field) || colDef.groupable) {\n      return [...columnMenuItems, 'columnMenuGroupingItem'];\n    }\n    return columnMenuItems;\n  }, [props.disableRowGrouping]);\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    const rowGroupingModelToExport = gridRowGroupingModelSelector(apiRef);\n    const shouldExportRowGroupingModel =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the model is controlled\n    props.rowGroupingModel != null ||\n    // Always export if the model has been initialized\n    props.initialState?.rowGrouping?.model != null ||\n    // Export if the model is not empty\n    Object.keys(rowGroupingModelToExport).length > 0;\n    if (!shouldExportRowGroupingModel) {\n      return prevState;\n    }\n    return _extends({}, prevState, {\n      rowGrouping: {\n        model: rowGroupingModelToExport\n      }\n    });\n  }, [apiRef, props.rowGroupingModel, props.initialState?.rowGrouping?.model]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    if (props.disableRowGrouping) {\n      return params;\n    }\n    const rowGroupingModel = context.stateToRestore.rowGrouping?.model;\n    if (rowGroupingModel != null) {\n      apiRef.current.setState(mergeStateWithRowGroupingModel(rowGroupingModel));\n    }\n    return params;\n  }, [apiRef, props.disableRowGrouping]);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuButtons);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n\n  /**\n   * EVENTS\n   */\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    const cellParams = apiRef.current.getCellParams(params.id, params.field);\n    if (isGroupingColumn(cellParams.field) && event.key === ' ' && !event.shiftKey) {\n      event.stopPropagation();\n      event.preventDefault();\n      if (params.rowNode.type !== 'group') {\n        return;\n      }\n      const isOnGroupingCell = props.rowGroupingColumnMode === 'single' || getRowGroupingFieldFromGroupingCriteria(params.rowNode.groupingField) === params.field;\n      if (!isOnGroupingCell) {\n        return;\n      }\n      apiRef.current.setRowChildrenExpansion(params.id, !params.rowNode.childrenExpanded);\n    }\n  }, [apiRef, props.rowGroupingColumnMode]);\n  const checkGroupingColumnsModelDiff = React.useCallback(() => {\n    const sanitizedRowGroupingModel = gridRowGroupingSanitizedModelSelector(apiRef);\n    const rulesOnLastRowTreeCreation = apiRef.current.caches.rowGrouping.rulesOnLastRowTreeCreation || [];\n    const groupingRules = getGroupingRules({\n      sanitizedRowGroupingModel,\n      columnsLookup: gridColumnLookupSelector(apiRef)\n    });\n    if (!areGroupingRulesEqual(rulesOnLastRowTreeCreation, groupingRules)) {\n      apiRef.current.caches.rowGrouping.rulesOnLastRowTreeCreation = groupingRules;\n      apiRef.current.requestPipeProcessorsApplication('hydrateColumns');\n      setStrategyAvailability(apiRef, props.disableRowGrouping);\n\n      // Refresh the row tree creation strategy processing\n      // TODO: Add a clean way to re-run a strategy processing without publishing a private event\n      if (apiRef.current.getActiveStrategy('rowTree') === ROW_GROUPING_STRATEGY) {\n        apiRef.current.publishEvent('activeStrategyProcessorChange', 'rowTreeCreation');\n      }\n    }\n  }, [apiRef, props.disableRowGrouping]);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n  useGridApiEventHandler(apiRef, 'columnsChange', checkGroupingColumnsModelDiff);\n  useGridApiEventHandler(apiRef, 'rowGroupingModelChange', checkGroupingColumnsModelDiff);\n\n  /**\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    if (props.rowGroupingModel !== undefined) {\n      apiRef.current.setRowGroupingModel(props.rowGroupingModel);\n    }\n  }, [apiRef, props.rowGroupingModel]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}