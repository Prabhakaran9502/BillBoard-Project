{"ast":null,"code":"import * as React from 'react';\nimport { unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nconst isDevEnvironment = process.env.NODE_ENV === 'development';\n\nconst noop = () => {};\n\nexport function useResizeObserver(ref, fn, enabled) {\n  const fnRef = React.useRef(null);\n  fnRef.current = fn;\n  useEnhancedEffect(() => {\n    if (enabled === false || typeof ResizeObserver === 'undefined') {\n      return noop;\n    }\n\n    let frameID = 0;\n    const target = ref.current;\n    const observer = new ResizeObserver(entries => {\n      // See https://github.com/mui/mui-x/issues/8733\n      // In dev, we avoid the React warning by moving the task to the next frame.\n      // In prod, we want the task to run in the same frame as to avoid tear.\n      if (isDevEnvironment) {\n        frameID = requestAnimationFrame(() => {\n          fnRef.current(entries);\n        });\n      } else {\n        fnRef.current(entries);\n      }\n    });\n\n    if (target) {\n      observer.observe(target);\n    }\n\n    return () => {\n      if (frameID) {\n        cancelAnimationFrame(frameID);\n      }\n\n      observer.disconnect();\n    };\n  }, [ref, enabled]);\n}","map":{"version":3,"names":["React","unstable_useEnhancedEffect","useEnhancedEffect","isDevEnvironment","process","env","NODE_ENV","noop","useResizeObserver","ref","fn","enabled","fnRef","useRef","current","ResizeObserver","frameID","target","observer","entries","requestAnimationFrame","observe","cancelAnimationFrame","disconnect"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/@mui/x-data-grid/hooks/utils/useResizeObserver.js"],"sourcesContent":["import * as React from 'react';\nimport { unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nconst isDevEnvironment = process.env.NODE_ENV === 'development';\nconst noop = () => {};\nexport function useResizeObserver(ref, fn, enabled) {\n  const fnRef = React.useRef(null);\n  fnRef.current = fn;\n  useEnhancedEffect(() => {\n    if (enabled === false || typeof ResizeObserver === 'undefined') {\n      return noop;\n    }\n    let frameID = 0;\n    const target = ref.current;\n    const observer = new ResizeObserver(entries => {\n      // See https://github.com/mui/mui-x/issues/8733\n      // In dev, we avoid the React warning by moving the task to the next frame.\n      // In prod, we want the task to run in the same frame as to avoid tear.\n      if (isDevEnvironment) {\n        frameID = requestAnimationFrame(() => {\n          fnRef.current(entries);\n        });\n      } else {\n        fnRef.current(entries);\n      }\n    });\n    if (target) {\n      observer.observe(target);\n    }\n    return () => {\n      if (frameID) {\n        cancelAnimationFrame(frameID);\n      }\n      observer.disconnect();\n    };\n  }, [ref, enabled]);\n}"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,0BAA0B,IAAIC,iBAAvC,QAAgE,YAAhE;AACA,MAAMC,gBAAgB,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAlD;;AACA,MAAMC,IAAI,GAAG,MAAM,CAAE,CAArB;;AACA,OAAO,SAASC,iBAAT,CAA2BC,GAA3B,EAAgCC,EAAhC,EAAoCC,OAApC,EAA6C;EAClD,MAAMC,KAAK,GAAGZ,KAAK,CAACa,MAAN,CAAa,IAAb,CAAd;EACAD,KAAK,CAACE,OAAN,GAAgBJ,EAAhB;EACAR,iBAAiB,CAAC,MAAM;IACtB,IAAIS,OAAO,KAAK,KAAZ,IAAqB,OAAOI,cAAP,KAA0B,WAAnD,EAAgE;MAC9D,OAAOR,IAAP;IACD;;IACD,IAAIS,OAAO,GAAG,CAAd;IACA,MAAMC,MAAM,GAAGR,GAAG,CAACK,OAAnB;IACA,MAAMI,QAAQ,GAAG,IAAIH,cAAJ,CAAmBI,OAAO,IAAI;MAC7C;MACA;MACA;MACA,IAAIhB,gBAAJ,EAAsB;QACpBa,OAAO,GAAGI,qBAAqB,CAAC,MAAM;UACpCR,KAAK,CAACE,OAAN,CAAcK,OAAd;QACD,CAF8B,CAA/B;MAGD,CAJD,MAIO;QACLP,KAAK,CAACE,OAAN,CAAcK,OAAd;MACD;IACF,CAXgB,CAAjB;;IAYA,IAAIF,MAAJ,EAAY;MACVC,QAAQ,CAACG,OAAT,CAAiBJ,MAAjB;IACD;;IACD,OAAO,MAAM;MACX,IAAID,OAAJ,EAAa;QACXM,oBAAoB,CAACN,OAAD,CAApB;MACD;;MACDE,QAAQ,CAACK,UAAT;IACD,CALD;EAMD,CA3BgB,EA2Bd,CAACd,GAAD,EAAME,OAAN,CA3Bc,CAAjB;AA4BD"},"metadata":{},"sourceType":"module"}