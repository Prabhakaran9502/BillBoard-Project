{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useLicenseVerifier, Watermark } from '@mui/x-license';\nimport { GridBody, GridFooterPlaceholder, GridHeader, GridRoot, GridContextProvider } from '@mui/x-data-grid-pro';\nimport { propValidatorsDataGrid, propValidatorsDataGridPro, validateProps } from '@mui/x-data-grid-pro/internals';\nimport { useDataGridPremiumComponent } from './useDataGridPremiumComponent';\nimport { useDataGridPremiumProps } from './useDataGridPremiumProps';\nimport { getReleaseInfo } from '../utils/releaseInfo';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst releaseInfo = getReleaseInfo();\nlet dataGridPremiumPropValidators;\n\nif (process.env.NODE_ENV !== 'production') {\n  dataGridPremiumPropValidators = [...propValidatorsDataGrid, ...propValidatorsDataGridPro];\n}\n\nconst DataGridPremiumRaw = /*#__PURE__*/React.forwardRef(function DataGridPremium(inProps, ref) {\n  const props = useDataGridPremiumProps(inProps);\n  const privateApiRef = useDataGridPremiumComponent(props.apiRef, props);\n  useLicenseVerifier('x-data-grid-premium', releaseInfo);\n\n  if (process.env.NODE_ENV !== 'production') {\n    validateProps(props, dataGridPremiumPropValidators);\n  }\n\n  return /*#__PURE__*/_jsx(GridContextProvider, {\n    privateApiRef: privateApiRef,\n    props: props,\n    children: /*#__PURE__*/_jsxs(GridRoot, _extends({\n      className: props.className,\n      style: props.style,\n      sx: props.sx,\n      ref: ref\n    }, props.forwardedProps, {\n      children: [/*#__PURE__*/_jsx(GridHeader, {}), /*#__PURE__*/_jsx(GridBody, {\n        children: /*#__PURE__*/_jsx(Watermark, {\n          packageName: \"x-data-grid-premium\",\n          releaseInfo: releaseInfo\n        })\n      }), /*#__PURE__*/_jsx(GridFooterPlaceholder, {})]\n    }))\n  });\n});\n/**\n * Demos:\n * - [DataGridPremium](https://mui.com/x/react-data-grid/demo/)\n *\n * API:\n * - [DataGridPremium API](https://mui.com/x/api/data-grid/data-grid-premium/)\n */\n\nexport const DataGridPremium = /*#__PURE__*/React.memo(DataGridPremiumRaw);\nprocess.env.NODE_ENV !== \"production\" ? DataGridPremiumRaw.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Aggregation functions available on the grid.\n   * @default GRID_AGGREGATION_FUNCTIONS\n   */\n  aggregationFunctions: PropTypes.object,\n\n  /**\n   * Set the aggregation model of the grid.\n   */\n  aggregationModel: PropTypes.object,\n\n  /**\n   * Rows used to generate the aggregated value.\n   * If `filtered`, the aggregated values are generated using only the rows currently passing the filtering process.\n   * If `all`, the aggregated values are generated using all the rows.\n   * @default \"filtered\"\n   */\n  aggregationRowsScope: PropTypes.oneOf(['all', 'filtered']),\n\n  /**\n   * The ref object that allows grid manipulation. Can be instantiated with `useGridApiRef()`.\n   */\n  apiRef: PropTypes.shape({\n    current: PropTypes.object.isRequired\n  }),\n\n  /**\n   * The label of the Data Grid.\n   */\n  'aria-label': PropTypes.string,\n\n  /**\n   * The id of the element containing a label for the Data Grid.\n   */\n  'aria-labelledby': PropTypes.string,\n\n  /**\n   * If `true`, the Data Grid height is dynamic and follows the number of rows in the Data Grid.\n   * @default false\n   */\n  autoHeight: PropTypes.bool,\n\n  /**\n   * If `true`, the pageSize is calculated according to the container size and the max number of rows to avoid rendering a vertical scroll bar.\n   * @default false\n   */\n  autoPageSize: PropTypes.bool,\n\n  /**\n   * If `true`, columns are autosized after the datagrid is mounted.\n   * @default false\n   */\n  autosizeOnMount: PropTypes.bool,\n\n  /**\n   * The options for autosize when user-initiated.\n   */\n  autosizeOptions: PropTypes.shape({\n    columns: PropTypes.arrayOf(PropTypes.string),\n    expand: PropTypes.bool,\n    includeHeaders: PropTypes.bool,\n    includeOutliers: PropTypes.bool,\n    outliersFactor: PropTypes.number\n  }),\n\n  /**\n   * Controls the modes of the cells.\n   */\n  cellModesModel: PropTypes.object,\n\n  /**\n   * If `true`, the cell selection mode is enabled.\n   * @default false\n   */\n  cellSelection: PropTypes.bool,\n\n  /**\n   * Set the cell selection model of the grid.\n   */\n  cellSelectionModel: PropTypes.object,\n\n  /**\n   * If `true`, the Data Grid will display an extra column with checkboxes for selecting rows.\n   * @default false\n   */\n  checkboxSelection: PropTypes.bool,\n\n  /**\n   * If `true`, the \"Select All\" header checkbox selects only the rows on the current page. To be used in combination with `checkboxSelection`.\n   * It only works if the pagination is enabled.\n   * @default false\n   */\n  checkboxSelectionVisibleOnly: PropTypes.bool,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * The character used to separate cell values when copying to the clipboard.\n   * @default '\\t'\n   */\n  clipboardCopyCellDelimiter: PropTypes.string,\n\n  /**\n   * Column region in pixels to render before/after the viewport\n   * @default 150\n   */\n  columnBufferPx: PropTypes.number,\n  columnGroupingModel: PropTypes.arrayOf(PropTypes.object),\n\n  /**\n   * Sets the height in pixel of the column headers in the Data Grid.\n   * @default 56\n   */\n  columnHeaderHeight: PropTypes.number,\n\n  /**\n   * Set of columns of type [[GridColDef]][].\n   */\n  columns: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n  /**\n   * Set the column visibility model of the Data Grid.\n   * If defined, the Data Grid will ignore the `hide` property in [[GridColDef]].\n   */\n  columnVisibilityModel: PropTypes.object,\n\n  /**\n   * If above 0, the row children will be expanded up to this depth.\n   * If equal to -1, all the row children will be expanded.\n   * @default 0\n   */\n  defaultGroupingExpansionDepth: PropTypes.number,\n\n  /**\n   * Set the density of the Data Grid.\n   * @default \"standard\"\n   */\n  density: PropTypes.oneOf(['comfortable', 'compact', 'standard']),\n\n  /**\n   * The row ids to show the detail panel.\n   */\n  detailPanelExpandedRowIds: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired),\n\n  /**\n   * If `true`, aggregation is disabled.\n   * @default false\n   */\n  disableAggregation: PropTypes.bool,\n\n  /**\n   * If `true`, column autosizing on header separator double-click is disabled.\n   * @default false\n   */\n  disableAutosize: PropTypes.bool,\n\n  /**\n   * If `true`, the filtering will only be applied to the top level rows when grouping rows with the `treeData` prop.\n   * @default false\n   */\n  disableChildrenFiltering: PropTypes.bool,\n\n  /**\n   * If `true`, the sorting will only be applied to the top level rows when grouping rows with the `treeData` prop.\n   * @default false\n   */\n  disableChildrenSorting: PropTypes.bool,\n\n  /**\n   * If `true`, the clipboard paste is disabled.\n   * @default false\n   */\n  disableClipboardPaste: PropTypes.bool,\n\n  /**\n   * If `true`, column filters are disabled.\n   * @default false\n   */\n  disableColumnFilter: PropTypes.bool,\n\n  /**\n   * If `true`, the column menu is disabled.\n   * @default false\n   */\n  disableColumnMenu: PropTypes.bool,\n\n  /**\n   * If `true`, the column pinning is disabled.\n   * @default false\n   */\n  disableColumnPinning: PropTypes.bool,\n\n  /**\n   * If `true`, reordering columns is disabled.\n   * @default false\n   */\n  disableColumnReorder: PropTypes.bool,\n\n  /**\n   * If `true`, resizing columns is disabled.\n   * @default false\n   */\n  disableColumnResize: PropTypes.bool,\n\n  /**\n   * If `true`, hiding/showing columns is disabled.\n   * @default false\n   */\n  disableColumnSelector: PropTypes.bool,\n\n  /**\n   * If `true`, the column sorting feature will be disabled.\n   * @default false\n   */\n  disableColumnSorting: PropTypes.bool,\n\n  /**\n   * If `true`, the density selector is disabled.\n   * @default false\n   */\n  disableDensitySelector: PropTypes.bool,\n\n  /**\n   * If `true`, `eval()` is not used for performance optimization.\n   * @default false\n   */\n  disableEval: PropTypes.bool,\n\n  /**\n   * If `true`, filtering with multiple columns is disabled.\n   * @default false\n   */\n  disableMultipleColumnsFiltering: PropTypes.bool,\n\n  /**\n   * If `true`, the sorting with multiple columns is disabled.\n   * @default false\n   */\n  disableMultipleColumnsSorting: PropTypes.bool,\n\n  /**\n   * If `true`, multiple selection using the Ctrl/CMD or Shift key is disabled.\n   * The MIT DataGrid will ignore this prop, unless `checkboxSelection` is enabled.\n   * @default false (`!props.checkboxSelection` for MIT Data Grid)\n   */\n  disableMultipleRowSelection: PropTypes.bool,\n\n  /**\n   * If `true`, the row grouping is disabled.\n   * @default false\n   */\n  disableRowGrouping: PropTypes.bool,\n\n  /**\n   * If `true`, the selection on click on a row or cell is disabled.\n   * @default false\n   */\n  disableRowSelectionOnClick: PropTypes.bool,\n\n  /**\n   * If `true`, the virtualization is disabled.\n   * @default false\n   */\n  disableVirtualization: PropTypes.bool,\n\n  /**\n   * Controls whether to use the cell or row editing.\n   * @default \"cell\"\n   */\n  editMode: PropTypes.oneOf(['cell', 'row']),\n\n  /**\n   * Use if the actual rowCount is not known upfront, but an estimation is available.\n   * If some rows have children (for instance in the tree data), this number represents the amount of top level rows.\n   * Applicable only with `paginationMode=\"server\"` and when `rowCount=\"-1\"`\n   */\n  estimatedRowCount: PropTypes.number,\n\n  /**\n   * Unstable features, breaking changes might be introduced.\n   * For each feature, if the flag is not explicitly set to `true`, then the feature is fully disabled, and neither property nor method calls will have any effect.\n   */\n  experimentalFeatures: PropTypes.shape({\n    warnIfFocusStateIsNotSynced: PropTypes.bool\n  }),\n\n  /**\n   * The milliseconds delay to wait after a keystroke before triggering filtering.\n   * @default 150\n   */\n  filterDebounceMs: PropTypes.number,\n\n  /**\n   * Filtering can be processed on the server or client-side.\n   * Set it to 'server' if you would like to handle filtering on the server-side.\n   * @default \"client\"\n   */\n  filterMode: PropTypes.oneOf(['client', 'server']),\n\n  /**\n   * Set the filter model of the Data Grid.\n   */\n  filterModel: PropTypes.shape({\n    items: PropTypes.arrayOf(PropTypes.shape({\n      field: PropTypes.string.isRequired,\n      id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n      operator: PropTypes.string.isRequired,\n      value: PropTypes.any\n    })).isRequired,\n    logicOperator: PropTypes.oneOf(['and', 'or']),\n    quickFilterExcludeHiddenColumns: PropTypes.bool,\n    quickFilterLogicOperator: PropTypes.oneOf(['and', 'or']),\n    quickFilterValues: PropTypes.array\n  }),\n\n  /**\n   * Forwarded props for the Data Grid root element.\n   * @ignore - do not document.\n   */\n  forwardedProps: PropTypes.object,\n\n  /**\n   * Determines the position of an aggregated value.\n   * @param {GridGroupNode} groupNode The current group.\n   * @returns {GridAggregationPosition | null} Position of the aggregated value (if `null`, the group isn't aggregated).\n   * @default (groupNode) => groupNode == null ? 'footer' : 'inline'\n   */\n  getAggregationPosition: PropTypes.func,\n\n  /**\n   * Function that applies CSS classes dynamically on cells.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @returns {string} The CSS class to apply to the cell.\n   */\n  getCellClassName: PropTypes.func,\n\n  /**\n   * Function that returns the element to render in row detail.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @returns {React.JSX.Element} The row detail element.\n   */\n  getDetailPanelContent: PropTypes.func,\n\n  /**\n   * Function that returns the height of the row detail panel.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @returns {number | string} The height in pixels or \"auto\" to use the content height.\n   * @default \"() => 500\"\n   */\n  getDetailPanelHeight: PropTypes.func,\n\n  /**\n   * Function that returns the estimated height for a row.\n   * Only works if dynamic row height is used.\n   * Once the row height is measured this value is discarded.\n   * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].\n   * @returns {number | null} The estimated row height value. If `null` or `undefined` then the default row height, based on the density, is applied.\n   */\n  getEstimatedRowHeight: PropTypes.func,\n\n  /**\n   * Function that applies CSS classes dynamically on rows.\n   * @param {GridRowClassNameParams} params With all properties from [[GridRowClassNameParams]].\n   * @returns {string} The CSS class to apply to the row.\n   */\n  getRowClassName: PropTypes.func,\n\n  /**\n   * Function that sets the row height per row.\n   * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].\n   * @returns {GridRowHeightReturnValue} The row height value. If `null` or `undefined` then the default row height is applied. If \"auto\" then the row height is calculated based on the content.\n   */\n  getRowHeight: PropTypes.func,\n\n  /**\n   * Return the id of a given [[GridRowModel]].\n   */\n  getRowId: PropTypes.func,\n\n  /**\n   * Function that allows to specify the spacing between rows.\n   * @param {GridRowSpacingParams} params With all properties from [[GridRowSpacingParams]].\n   * @returns {GridRowSpacing} The row spacing values.\n   */\n  getRowSpacing: PropTypes.func,\n\n  /**\n   * Determines the path of a row in the tree data.\n   * For instance, a row with the path [\"A\", \"B\"] is the child of the row with the path [\"A\"].\n   * Note that all paths must contain at least one element.\n   * @template R\n   * @param {R} row The row from which we want the path.\n   * @returns {string[]} The path to the row.\n   */\n  getTreeDataPath: PropTypes.func,\n\n  /**\n   * The grouping column used by the tree data.\n   */\n  groupingColDef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n\n  /**\n   * Override the height of the header filters.\n   */\n  headerFilterHeight: PropTypes.number,\n\n  /**\n   * If `true`, enables the data grid filtering on header feature.\n   * @default false\n   */\n  headerFilters: PropTypes.bool,\n\n  /**\n   * If `true`, the footer component is hidden.\n   * @default false\n   */\n  hideFooter: PropTypes.bool,\n\n  /**\n   * If `true`, the pagination component in the footer is hidden.\n   * @default false\n   */\n  hideFooterPagination: PropTypes.bool,\n\n  /**\n   * If `true`, the row count in the footer is hidden.\n   * It has no effect if the pagination is enabled.\n   * @default false\n   */\n  hideFooterRowCount: PropTypes.bool,\n\n  /**\n   * If `true`, the selected row count in the footer is hidden.\n   * @default false\n   */\n  hideFooterSelectedRowCount: PropTypes.bool,\n\n  /**\n   * If `true`, the diacritics (accents) are ignored when filtering or quick filtering.\n   * E.g. when filter value is `cafe`, the rows with `café` will be visible.\n   * @default false\n   */\n  ignoreDiacritics: PropTypes.bool,\n\n  /**\n   * If `true`, the Data Grid will not use `valueFormatter` when exporting to CSV or copying to clipboard.\n   * If an object is provided, you can choose to ignore the `valueFormatter` for CSV export or clipboard export.\n   * @default false\n   */\n  ignoreValueFormatterDuringExport: PropTypes.oneOfType([PropTypes.shape({\n    clipboardExport: PropTypes.bool,\n    csvExport: PropTypes.bool\n  }), PropTypes.bool]),\n\n  /**\n   * The initial state of the DataGridPremium.\n   * The data in it is set in the state on initialization but isn't controlled.\n   * If one of the data in `initialState` is also being controlled, then the control state wins.\n   */\n  initialState: PropTypes.object,\n\n  /**\n   * Callback fired when a cell is rendered, returns true if the cell is editable.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @returns {boolean} A boolean indicating if the cell is editable.\n   */\n  isCellEditable: PropTypes.func,\n\n  /**\n   * Determines if a group should be expanded after its creation.\n   * This prop takes priority over the `defaultGroupingExpansionDepth` prop.\n   * @param {GridGroupNode} node The node of the group to test.\n   * @returns {boolean} A boolean indicating if the group is expanded.\n   */\n  isGroupExpandedByDefault: PropTypes.func,\n\n  /**\n   * Determines if a row can be selected.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @returns {boolean} A boolean indicating if the cell is selectable.\n   */\n  isRowSelectable: PropTypes.func,\n\n  /**\n   * If `true`, moving the mouse pointer outside the grid before releasing the mouse button\n   * in a column re-order action will not cause the column to jump back to its original position.\n   * @default false\n   */\n  keepColumnPositionIfDraggedOutside: PropTypes.bool,\n\n  /**\n   * If `true`, the selection model will retain selected rows that do not exist.\n   * Useful when using server side pagination and row selections need to be retained\n   * when changing pages.\n   * @default false\n   */\n  keepNonExistentRowsSelected: PropTypes.bool,\n\n  /**\n   * If `true`, a loading overlay is displayed.\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Set the locale text of the Data Grid.\n   * You can find all the translation keys supported in [the source](https://github.com/mui/mui-x/blob/HEAD/packages/x-data-grid/src/constants/localeTextConstants.ts) in the GitHub repository.\n   */\n  localeText: PropTypes.object,\n\n  /**\n   * Pass a custom logger in the components that implements the [[Logger]] interface.\n   * @default console\n   */\n  logger: PropTypes.shape({\n    debug: PropTypes.func.isRequired,\n    error: PropTypes.func.isRequired,\n    info: PropTypes.func.isRequired,\n    warn: PropTypes.func.isRequired\n  }),\n\n  /**\n   * Allows to pass the logging level or false to turn off logging.\n   * @default \"error\" (\"warn\" in dev mode)\n   */\n  logLevel: PropTypes.oneOf(['debug', 'error', 'info', 'warn', false]),\n\n  /**\n   * Nonce of the inline styles for [Content Security Policy](https://www.w3.org/TR/2016/REC-CSP2-20161215/#script-src-the-nonce-attribute).\n   */\n  nonce: PropTypes.string,\n\n  /**\n   * Callback fired when the row grouping model changes.\n   * @param {GridAggregationModel} model The aggregated columns.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onAggregationModelChange: PropTypes.func,\n\n  /**\n   * Callback fired before the clipboard paste operation starts.\n   * Use it to confirm or cancel the paste operation.\n   * @param {object} params Params passed to the callback.\n   * @param {string[][]} params.data The raw pasted data split by rows and cells.\n   * @returns {Promise<any>} A promise that resolves to confirm the paste operation, and rejects to cancel it.\n   */\n  onBeforeClipboardPasteStart: PropTypes.func,\n\n  /**\n   * Callback fired when any cell is clicked.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellClick: PropTypes.func,\n\n  /**\n   * Callback fired when a double click event comes from a cell element.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellDoubleClick: PropTypes.func,\n\n  /**\n   * Callback fired when the cell turns to edit mode.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.\n   */\n  onCellEditStart: PropTypes.func,\n\n  /**\n   * Callback fired when the cell turns to view mode.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n   */\n  onCellEditStop: PropTypes.func,\n\n  /**\n   * Callback fired when a keydown event comes from a cell element.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.KeyboardEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellKeyDown: PropTypes.func,\n\n  /**\n   * Callback fired when the `cellModesModel` prop changes.\n   * @param {GridCellModesModel} cellModesModel Object containing which cells are in \"edit\" mode.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellModesModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when the selection state of one or multiple cells changes.\n   * @param {GridCellSelectionModel} cellSelectionModel Object in the shape of [[GridCellSelectionModel]] containing the selected cells.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellSelectionModelChange: PropTypes.func,\n\n  /**\n   * Callback called when the data is copied to the clipboard.\n   * @param {string} data The data copied to the clipboard.\n   */\n  onClipboardCopy: PropTypes.func,\n\n  /**\n   * Callback fired when the clipboard paste operation ends.\n   */\n  onClipboardPasteEnd: PropTypes.func,\n\n  /**\n   * Callback fired when the clipboard paste operation starts.\n   */\n  onClipboardPasteStart: PropTypes.func,\n\n  /**\n   * Callback fired when a click event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderClick: PropTypes.func,\n\n  /**\n   * Callback fired when a double click event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderDoubleClick: PropTypes.func,\n\n  /**\n   * Callback fired when a mouse enter event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderEnter: PropTypes.func,\n\n  /**\n   * Callback fired when a mouse leave event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderLeave: PropTypes.func,\n\n  /**\n   * Callback fired when a mouseout event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderOut: PropTypes.func,\n\n  /**\n   * Callback fired when a mouseover event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderOver: PropTypes.func,\n\n  /**\n   * Callback fired when a column is reordered.\n   * @param {GridColumnOrderChangeParams} params With all properties from [[GridColumnOrderChangeParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnOrderChange: PropTypes.func,\n\n  /**\n   * Callback fired while a column is being resized.\n   * @param {GridColumnResizeParams} params With all properties from [[GridColumnResizeParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnResize: PropTypes.func,\n\n  /**\n   * Callback fired when the column visibility model changes.\n   * @param {GridColumnVisibilityModel} model The new model.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnVisibilityModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when the width of a column is changed.\n   * @param {GridColumnResizeParams} params With all properties from [[GridColumnResizeParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnWidthChange: PropTypes.func,\n\n  /**\n   * Callback fired when the density changes.\n   * @param {GridDensity} density New density value.\n   */\n  onDensityChange: PropTypes.func,\n\n  /**\n   * Callback fired when the detail panel of a row is opened or closed.\n   * @param {GridRowId[]} ids The ids of the rows which have the detail panel open.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onDetailPanelExpandedRowIdsChange: PropTypes.func,\n\n  /**\n   * Callback fired when the state of the Excel export changes.\n   * @param {string} inProgress Indicates if the task is in progress.\n   */\n  onExcelExportStateChange: PropTypes.func,\n\n  /**\n   * Callback fired when rowCount is set and the next batch of virtualized rows is rendered.\n   * @param {GridFetchRowsParams} params With all properties from [[GridFetchRowsParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onFetchRows: PropTypes.func,\n\n  /**\n   * Callback fired when the Filter model changes before the filters are applied.\n   * @param {GridFilterModel} model With all properties from [[GridFilterModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onFilterModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when the menu is closed.\n   * @param {GridMenuParams} params With all properties from [[GridMenuParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onMenuClose: PropTypes.func,\n\n  /**\n   * Callback fired when the menu is opened.\n   * @param {GridMenuParams} params With all properties from [[GridMenuParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onMenuOpen: PropTypes.func,\n\n  /**\n   * Callback fired when the pagination meta has changed.\n   * @param {GridPaginationMeta} paginationMeta Updated pagination meta.\n   */\n  onPaginationMetaChange: PropTypes.func,\n\n  /**\n   * Callback fired when the pagination model has changed.\n   * @param {GridPaginationModel} model Updated pagination model.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPaginationModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when the pinned columns have changed.\n   * @param {GridPinnedColumnFields} pinnedColumns The changed pinned columns.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPinnedColumnsChange: PropTypes.func,\n\n  /**\n   * Callback fired when the preferences panel is closed.\n   * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPreferencePanelClose: PropTypes.func,\n\n  /**\n   * Callback fired when the preferences panel is opened.\n   * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPreferencePanelOpen: PropTypes.func,\n\n  /**\n   * Callback called when `processRowUpdate` throws an error or rejects.\n   * @param {any} error The error thrown.\n   */\n  onProcessRowUpdateError: PropTypes.func,\n\n  /**\n   * Callback fired when the Data Grid is resized.\n   * @param {ElementSize} containerSize With all properties from [[ElementSize]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onResize: PropTypes.func,\n\n  /**\n   * Callback fired when a row is clicked.\n   * Not called if the target clicked is an interactive element added by the built-in columns.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowClick: PropTypes.func,\n\n  /**\n   * Callback fired when the row count has changed.\n   * @param {number} count Updated row count.\n   */\n  onRowCountChange: PropTypes.func,\n\n  /**\n   * Callback fired when a double click event comes from a row container element.\n   * @param {GridRowParams} params With all properties from [[RowParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowDoubleClick: PropTypes.func,\n\n  /**\n   * Callback fired when the row turns to edit mode.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.\n   */\n  onRowEditStart: PropTypes.func,\n\n  /**\n   * Callback fired when the row turns to view mode.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n   */\n  onRowEditStop: PropTypes.func,\n\n  /**\n   * Callback fired when the row grouping model changes.\n   * @param {GridRowGroupingModel} model Columns used as grouping criteria.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowGroupingModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when the `rowModesModel` prop changes.\n   * @param {GridRowModesModel} rowModesModel Object containing which rows are in \"edit\" mode.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowModesModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when a row is being reordered.\n   * @param {GridRowOrderChangeParams} params With all properties from [[GridRowOrderChangeParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowOrderChange: PropTypes.func,\n\n  /**\n   * Callback fired when the selection state of one or multiple rows changes.\n   * @param {GridRowSelectionModel} rowSelectionModel With all the row ids [[GridSelectionModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowSelectionModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when scrolling to the bottom of the grid viewport.\n   * @param {GridRowScrollEndParams} params With all properties from [[GridRowScrollEndParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowsScrollEnd: PropTypes.func,\n\n  /**\n   * Callback fired when the sort model changes before a column is sorted.\n   * @param {GridSortModel} model With all properties from [[GridSortModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onSortModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when the state of the Data Grid is updated.\n   * @param {GridState} state The new state.\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   * @ignore - do not document.\n   */\n  onStateChange: PropTypes.func,\n\n  /**\n   * Select the pageSize dynamically using the component UI.\n   * @default [25, 50, 100]\n   */\n  pageSizeOptions: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    label: PropTypes.string.isRequired,\n    value: PropTypes.number.isRequired\n  })]).isRequired),\n\n  /**\n   * If `true`, pagination is enabled.\n   * @default false\n   */\n  pagination: PropTypes.bool,\n\n  /**\n   * The extra information about the pagination state of the Data Grid.\n   * Only applicable with `paginationMode=\"server\"`.\n   */\n  paginationMeta: PropTypes.shape({\n    hasNextPage: PropTypes.bool\n  }),\n\n  /**\n   * Pagination can be processed on the server or client-side.\n   * Set it to 'client' if you would like to handle the pagination on the client-side.\n   * Set it to 'server' if you would like to handle the pagination on the server-side.\n   * @default \"client\"\n   */\n  paginationMode: PropTypes.oneOf(['client', 'server']),\n\n  /**\n   * The pagination model of type [[GridPaginationModel]] which refers to current `page` and `pageSize`.\n   */\n  paginationModel: PropTypes.shape({\n    page: PropTypes.number.isRequired,\n    pageSize: PropTypes.number.isRequired\n  }),\n\n  /**\n   * The column fields to display pinned to left or right.\n   */\n  pinnedColumns: PropTypes.object,\n\n  /**\n   * Rows data to pin on top or bottom.\n   */\n  pinnedRows: PropTypes.shape({\n    bottom: PropTypes.arrayOf(PropTypes.object),\n    top: PropTypes.arrayOf(PropTypes.object)\n  }),\n\n  /**\n   * Callback called before updating a row with new values in the row and cell editing.\n   * @template R\n   * @param {R} newRow Row object with the new values.\n   * @param {R} oldRow Row object with the old values.\n   * @returns {Promise<R> | R} The final values to update the row.\n   */\n  processRowUpdate: PropTypes.func,\n\n  /**\n   * The milliseconds throttle delay for resizing the grid.\n   * @default 60\n   */\n  resizeThrottleMs: PropTypes.number,\n\n  /**\n   * Row region in pixels to render before/after the viewport\n   * @default 150\n   */\n  rowBufferPx: PropTypes.number,\n\n  /**\n   * Set the total number of rows, if it is different from the length of the value `rows` prop.\n   * If some rows have children (for instance in the tree data), this number represents the amount of top level rows.\n   * Only works with `paginationMode=\"server\"`, ignored when `paginationMode=\"client\"`.\n   */\n  rowCount: PropTypes.number,\n\n  /**\n   * If `single`, all the columns that are grouped are represented in the same grid column.\n   * If `multiple`, each column that is grouped is represented in its own grid column.\n   * @default 'single'\n   */\n  rowGroupingColumnMode: PropTypes.oneOf(['multiple', 'single']),\n\n  /**\n   * Set the row grouping model of the grid.\n   */\n  rowGroupingModel: PropTypes.arrayOf(PropTypes.string),\n\n  /**\n   * Sets the height in pixel of a row in the Data Grid.\n   * @default 52\n   */\n  rowHeight: PropTypes.number,\n\n  /**\n   * Controls the modes of the rows.\n   */\n  rowModesModel: PropTypes.object,\n\n  /**\n   * The milliseconds delay to wait after measuring the row height before recalculating row positions.\n   * Setting it to a lower value could be useful when using dynamic row height,\n   * but might reduce performance when displaying a large number of rows.\n   * @default 166\n   */\n  rowPositionsDebounceMs: PropTypes.number,\n\n  /**\n   * If `true`, the reordering of rows is enabled.\n   * @default false\n   */\n  rowReordering: PropTypes.bool,\n\n  /**\n   * Set of rows of type [[GridRowsProp]].\n   * @default []\n   */\n  rows: PropTypes.arrayOf(PropTypes.object),\n\n  /**\n   * If `false`, the row selection mode is disabled.\n   * @default true\n   */\n  rowSelection: PropTypes.bool,\n\n  /**\n   * Sets the row selection model of the Data Grid.\n   */\n  rowSelectionModel: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired), PropTypes.number, PropTypes.string]),\n\n  /**\n   * Loading rows can be processed on the server or client-side.\n   * Set it to 'client' if you would like enable infnite loading.\n   * Set it to 'server' if you would like to enable lazy loading.\n   * * @default \"client\"\n   */\n  rowsLoadingMode: PropTypes.oneOf(['client', 'server']),\n\n  /**\n   * Sets the type of space between rows added by `getRowSpacing`.\n   * @default \"margin\"\n   */\n  rowSpacingType: PropTypes.oneOf(['border', 'margin']),\n\n  /**\n   * Override the height/width of the Data Grid inner scrollbar.\n   */\n  scrollbarSize: PropTypes.number,\n\n  /**\n   * Set the area in `px` at the bottom of the grid viewport where onRowsScrollEnd is called.\n   * @default 80\n   */\n  scrollEndThreshold: PropTypes.number,\n\n  /**\n   * If `true`, the vertical borders of the cells are displayed.\n   * @default false\n   */\n  showCellVerticalBorder: PropTypes.bool,\n\n  /**\n   * If `true`, the right border of the column headers are displayed.\n   * @default false\n   */\n  showColumnVerticalBorder: PropTypes.bool,\n\n  /**\n   * Overridable components props dynamically passed to the component at rendering.\n   */\n  slotProps: PropTypes.object,\n\n  /**\n   * Overridable components.\n   */\n  slots: PropTypes.object,\n\n  /**\n   * Sorting can be processed on the server or client-side.\n   * Set it to 'client' if you would like to handle sorting on the client-side.\n   * Set it to 'server' if you would like to handle sorting on the server-side.\n   * @default \"client\"\n   */\n  sortingMode: PropTypes.oneOf(['client', 'server']),\n\n  /**\n   * The order of the sorting sequence.\n   * @default ['asc', 'desc', null]\n   */\n  sortingOrder: PropTypes.arrayOf(PropTypes.oneOf(['asc', 'desc'])),\n\n  /**\n   * Set the sort model of the Data Grid.\n   */\n  sortModel: PropTypes.arrayOf(PropTypes.shape({\n    field: PropTypes.string.isRequired,\n    sort: PropTypes.oneOf(['asc', 'desc'])\n  })),\n\n  /**\n   * The function is used to split the pasted text into rows and cells.\n   * @param {string} text The text pasted from the clipboard.\n   * @returns {string[][] | null} A 2D array of strings. The first dimension is the rows, the second dimension is the columns.\n   * @default (pastedText) => { const text = pastedText.replace(/\\r?\\n$/, ''); return text.split(/\\r\\n|\\n|\\r/).map((row) => row.split('\\t')); }\n   */\n  splitClipboardPastedText: PropTypes.func,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * If positive, the Data Grid will throttle updates coming from `apiRef.current.updateRows` and `apiRef.current.setRows`.\n   * It can be useful if you have a high update rate but do not want to do heavy work like filtering / sorting or rendering on each  individual update.\n   * @default 0\n   */\n  throttleRowsMs: PropTypes.number,\n\n  /**\n   * If `true`, the rows will be gathered in a tree structure according to the `getTreeDataPath` prop.\n   * @default false\n   */\n  treeData: PropTypes.bool\n} : void 0;","map":{"version":3,"names":["_extends","React","PropTypes","useLicenseVerifier","Watermark","GridBody","GridFooterPlaceholder","GridHeader","GridRoot","GridContextProvider","propValidatorsDataGrid","propValidatorsDataGridPro","validateProps","useDataGridPremiumComponent","useDataGridPremiumProps","getReleaseInfo","jsx","_jsx","jsxs","_jsxs","releaseInfo","dataGridPremiumPropValidators","process","env","NODE_ENV","DataGridPremiumRaw","forwardRef","DataGridPremium","inProps","ref","props","privateApiRef","apiRef","children","className","style","sx","forwardedProps","packageName","memo","propTypes","aggregationFunctions","object","aggregationModel","aggregationRowsScope","oneOf","shape","current","isRequired","string","autoHeight","bool","autoPageSize","autosizeOnMount","autosizeOptions","columns","arrayOf","expand","includeHeaders","includeOutliers","outliersFactor","number","cellModesModel","cellSelection","cellSelectionModel","checkboxSelection","checkboxSelectionVisibleOnly","classes","clipboardCopyCellDelimiter","columnBufferPx","columnGroupingModel","columnHeaderHeight","columnVisibilityModel","defaultGroupingExpansionDepth","density","detailPanelExpandedRowIds","oneOfType","disableAggregation","disableAutosize","disableChildrenFiltering","disableChildrenSorting","disableClipboardPaste","disableColumnFilter","disableColumnMenu","disableColumnPinning","disableColumnReorder","disableColumnResize","disableColumnSelector","disableColumnSorting","disableDensitySelector","disableEval","disableMultipleColumnsFiltering","disableMultipleColumnsSorting","disableMultipleRowSelection","disableRowGrouping","disableRowSelectionOnClick","disableVirtualization","editMode","estimatedRowCount","experimentalFeatures","warnIfFocusStateIsNotSynced","filterDebounceMs","filterMode","filterModel","items","field","id","operator","value","any","logicOperator","quickFilterExcludeHiddenColumns","quickFilterLogicOperator","quickFilterValues","array","getAggregationPosition","func","getCellClassName","getDetailPanelContent","getDetailPanelHeight","getEstimatedRowHeight","getRowClassName","getRowHeight","getRowId","getRowSpacing","getTreeDataPath","groupingColDef","headerFilterHeight","headerFilters","hideFooter","hideFooterPagination","hideFooterRowCount","hideFooterSelectedRowCount","ignoreDiacritics","ignoreValueFormatterDuringExport","clipboardExport","csvExport","initialState","isCellEditable","isGroupExpandedByDefault","isRowSelectable","keepColumnPositionIfDraggedOutside","keepNonExistentRowsSelected","loading","localeText","logger","debug","error","info","warn","logLevel","nonce","onAggregationModelChange","onBeforeClipboardPasteStart","onCellClick","onCellDoubleClick","onCellEditStart","onCellEditStop","onCellKeyDown","onCellModesModelChange","onCellSelectionModelChange","onClipboardCopy","onClipboardPasteEnd","onClipboardPasteStart","onColumnHeaderClick","onColumnHeaderDoubleClick","onColumnHeaderEnter","onColumnHeaderLeave","onColumnHeaderOut","onColumnHeaderOver","onColumnOrderChange","onColumnResize","onColumnVisibilityModelChange","onColumnWidthChange","onDensityChange","onDetailPanelExpandedRowIdsChange","onExcelExportStateChange","onFetchRows","onFilterModelChange","onMenuClose","onMenuOpen","onPaginationMetaChange","onPaginationModelChange","onPinnedColumnsChange","onPreferencePanelClose","onPreferencePanelOpen","onProcessRowUpdateError","onResize","onRowClick","onRowCountChange","onRowDoubleClick","onRowEditStart","onRowEditStop","onRowGroupingModelChange","onRowModesModelChange","onRowOrderChange","onRowSelectionModelChange","onRowsScrollEnd","onSortModelChange","onStateChange","pageSizeOptions","label","pagination","paginationMeta","hasNextPage","paginationMode","paginationModel","page","pageSize","pinnedColumns","pinnedRows","bottom","top","processRowUpdate","resizeThrottleMs","rowBufferPx","rowCount","rowGroupingColumnMode","rowGroupingModel","rowHeight","rowModesModel","rowPositionsDebounceMs","rowReordering","rows","rowSelection","rowSelectionModel","rowsLoadingMode","rowSpacingType","scrollbarSize","scrollEndThreshold","showCellVerticalBorder","showColumnVerticalBorder","slotProps","slots","sortingMode","sortingOrder","sortModel","sort","splitClipboardPastedText","throttleRowsMs","treeData"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/@mui/x-data-grid-premium/esm/DataGridPremium/DataGridPremium.js"],"sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useLicenseVerifier, Watermark } from '@mui/x-license';\nimport { GridBody, GridFooterPlaceholder, GridHeader, GridRoot, GridContextProvider } from '@mui/x-data-grid-pro';\nimport { propValidatorsDataGrid, propValidatorsDataGridPro, validateProps } from '@mui/x-data-grid-pro/internals';\nimport { useDataGridPremiumComponent } from './useDataGridPremiumComponent';\nimport { useDataGridPremiumProps } from './useDataGridPremiumProps';\nimport { getReleaseInfo } from '../utils/releaseInfo';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst releaseInfo = getReleaseInfo();\nlet dataGridPremiumPropValidators;\nif (process.env.NODE_ENV !== 'production') {\n  dataGridPremiumPropValidators = [...propValidatorsDataGrid, ...propValidatorsDataGridPro];\n}\nconst DataGridPremiumRaw = /*#__PURE__*/React.forwardRef(function DataGridPremium(inProps, ref) {\n  const props = useDataGridPremiumProps(inProps);\n  const privateApiRef = useDataGridPremiumComponent(props.apiRef, props);\n  useLicenseVerifier('x-data-grid-premium', releaseInfo);\n  if (process.env.NODE_ENV !== 'production') {\n    validateProps(props, dataGridPremiumPropValidators);\n  }\n  return /*#__PURE__*/_jsx(GridContextProvider, {\n    privateApiRef: privateApiRef,\n    props: props,\n    children: /*#__PURE__*/_jsxs(GridRoot, _extends({\n      className: props.className,\n      style: props.style,\n      sx: props.sx,\n      ref: ref\n    }, props.forwardedProps, {\n      children: [/*#__PURE__*/_jsx(GridHeader, {}), /*#__PURE__*/_jsx(GridBody, {\n        children: /*#__PURE__*/_jsx(Watermark, {\n          packageName: \"x-data-grid-premium\",\n          releaseInfo: releaseInfo\n        })\n      }), /*#__PURE__*/_jsx(GridFooterPlaceholder, {})]\n    }))\n  });\n});\n/**\n * Demos:\n * - [DataGridPremium](https://mui.com/x/react-data-grid/demo/)\n *\n * API:\n * - [DataGridPremium API](https://mui.com/x/api/data-grid/data-grid-premium/)\n */\nexport const DataGridPremium = /*#__PURE__*/React.memo(DataGridPremiumRaw);\nprocess.env.NODE_ENV !== \"production\" ? DataGridPremiumRaw.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * Aggregation functions available on the grid.\n   * @default GRID_AGGREGATION_FUNCTIONS\n   */\n  aggregationFunctions: PropTypes.object,\n  /**\n   * Set the aggregation model of the grid.\n   */\n  aggregationModel: PropTypes.object,\n  /**\n   * Rows used to generate the aggregated value.\n   * If `filtered`, the aggregated values are generated using only the rows currently passing the filtering process.\n   * If `all`, the aggregated values are generated using all the rows.\n   * @default \"filtered\"\n   */\n  aggregationRowsScope: PropTypes.oneOf(['all', 'filtered']),\n  /**\n   * The ref object that allows grid manipulation. Can be instantiated with `useGridApiRef()`.\n   */\n  apiRef: PropTypes.shape({\n    current: PropTypes.object.isRequired\n  }),\n  /**\n   * The label of the Data Grid.\n   */\n  'aria-label': PropTypes.string,\n  /**\n   * The id of the element containing a label for the Data Grid.\n   */\n  'aria-labelledby': PropTypes.string,\n  /**\n   * If `true`, the Data Grid height is dynamic and follows the number of rows in the Data Grid.\n   * @default false\n   */\n  autoHeight: PropTypes.bool,\n  /**\n   * If `true`, the pageSize is calculated according to the container size and the max number of rows to avoid rendering a vertical scroll bar.\n   * @default false\n   */\n  autoPageSize: PropTypes.bool,\n  /**\n   * If `true`, columns are autosized after the datagrid is mounted.\n   * @default false\n   */\n  autosizeOnMount: PropTypes.bool,\n  /**\n   * The options for autosize when user-initiated.\n   */\n  autosizeOptions: PropTypes.shape({\n    columns: PropTypes.arrayOf(PropTypes.string),\n    expand: PropTypes.bool,\n    includeHeaders: PropTypes.bool,\n    includeOutliers: PropTypes.bool,\n    outliersFactor: PropTypes.number\n  }),\n  /**\n   * Controls the modes of the cells.\n   */\n  cellModesModel: PropTypes.object,\n  /**\n   * If `true`, the cell selection mode is enabled.\n   * @default false\n   */\n  cellSelection: PropTypes.bool,\n  /**\n   * Set the cell selection model of the grid.\n   */\n  cellSelectionModel: PropTypes.object,\n  /**\n   * If `true`, the Data Grid will display an extra column with checkboxes for selecting rows.\n   * @default false\n   */\n  checkboxSelection: PropTypes.bool,\n  /**\n   * If `true`, the \"Select All\" header checkbox selects only the rows on the current page. To be used in combination with `checkboxSelection`.\n   * It only works if the pagination is enabled.\n   * @default false\n   */\n  checkboxSelectionVisibleOnly: PropTypes.bool,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * The character used to separate cell values when copying to the clipboard.\n   * @default '\\t'\n   */\n  clipboardCopyCellDelimiter: PropTypes.string,\n  /**\n   * Column region in pixels to render before/after the viewport\n   * @default 150\n   */\n  columnBufferPx: PropTypes.number,\n  columnGroupingModel: PropTypes.arrayOf(PropTypes.object),\n  /**\n   * Sets the height in pixel of the column headers in the Data Grid.\n   * @default 56\n   */\n  columnHeaderHeight: PropTypes.number,\n  /**\n   * Set of columns of type [[GridColDef]][].\n   */\n  columns: PropTypes.arrayOf(PropTypes.object).isRequired,\n  /**\n   * Set the column visibility model of the Data Grid.\n   * If defined, the Data Grid will ignore the `hide` property in [[GridColDef]].\n   */\n  columnVisibilityModel: PropTypes.object,\n  /**\n   * If above 0, the row children will be expanded up to this depth.\n   * If equal to -1, all the row children will be expanded.\n   * @default 0\n   */\n  defaultGroupingExpansionDepth: PropTypes.number,\n  /**\n   * Set the density of the Data Grid.\n   * @default \"standard\"\n   */\n  density: PropTypes.oneOf(['comfortable', 'compact', 'standard']),\n  /**\n   * The row ids to show the detail panel.\n   */\n  detailPanelExpandedRowIds: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired),\n  /**\n   * If `true`, aggregation is disabled.\n   * @default false\n   */\n  disableAggregation: PropTypes.bool,\n  /**\n   * If `true`, column autosizing on header separator double-click is disabled.\n   * @default false\n   */\n  disableAutosize: PropTypes.bool,\n  /**\n   * If `true`, the filtering will only be applied to the top level rows when grouping rows with the `treeData` prop.\n   * @default false\n   */\n  disableChildrenFiltering: PropTypes.bool,\n  /**\n   * If `true`, the sorting will only be applied to the top level rows when grouping rows with the `treeData` prop.\n   * @default false\n   */\n  disableChildrenSorting: PropTypes.bool,\n  /**\n   * If `true`, the clipboard paste is disabled.\n   * @default false\n   */\n  disableClipboardPaste: PropTypes.bool,\n  /**\n   * If `true`, column filters are disabled.\n   * @default false\n   */\n  disableColumnFilter: PropTypes.bool,\n  /**\n   * If `true`, the column menu is disabled.\n   * @default false\n   */\n  disableColumnMenu: PropTypes.bool,\n  /**\n   * If `true`, the column pinning is disabled.\n   * @default false\n   */\n  disableColumnPinning: PropTypes.bool,\n  /**\n   * If `true`, reordering columns is disabled.\n   * @default false\n   */\n  disableColumnReorder: PropTypes.bool,\n  /**\n   * If `true`, resizing columns is disabled.\n   * @default false\n   */\n  disableColumnResize: PropTypes.bool,\n  /**\n   * If `true`, hiding/showing columns is disabled.\n   * @default false\n   */\n  disableColumnSelector: PropTypes.bool,\n  /**\n   * If `true`, the column sorting feature will be disabled.\n   * @default false\n   */\n  disableColumnSorting: PropTypes.bool,\n  /**\n   * If `true`, the density selector is disabled.\n   * @default false\n   */\n  disableDensitySelector: PropTypes.bool,\n  /**\n   * If `true`, `eval()` is not used for performance optimization.\n   * @default false\n   */\n  disableEval: PropTypes.bool,\n  /**\n   * If `true`, filtering with multiple columns is disabled.\n   * @default false\n   */\n  disableMultipleColumnsFiltering: PropTypes.bool,\n  /**\n   * If `true`, the sorting with multiple columns is disabled.\n   * @default false\n   */\n  disableMultipleColumnsSorting: PropTypes.bool,\n  /**\n   * If `true`, multiple selection using the Ctrl/CMD or Shift key is disabled.\n   * The MIT DataGrid will ignore this prop, unless `checkboxSelection` is enabled.\n   * @default false (`!props.checkboxSelection` for MIT Data Grid)\n   */\n  disableMultipleRowSelection: PropTypes.bool,\n  /**\n   * If `true`, the row grouping is disabled.\n   * @default false\n   */\n  disableRowGrouping: PropTypes.bool,\n  /**\n   * If `true`, the selection on click on a row or cell is disabled.\n   * @default false\n   */\n  disableRowSelectionOnClick: PropTypes.bool,\n  /**\n   * If `true`, the virtualization is disabled.\n   * @default false\n   */\n  disableVirtualization: PropTypes.bool,\n  /**\n   * Controls whether to use the cell or row editing.\n   * @default \"cell\"\n   */\n  editMode: PropTypes.oneOf(['cell', 'row']),\n  /**\n   * Use if the actual rowCount is not known upfront, but an estimation is available.\n   * If some rows have children (for instance in the tree data), this number represents the amount of top level rows.\n   * Applicable only with `paginationMode=\"server\"` and when `rowCount=\"-1\"`\n   */\n  estimatedRowCount: PropTypes.number,\n  /**\n   * Unstable features, breaking changes might be introduced.\n   * For each feature, if the flag is not explicitly set to `true`, then the feature is fully disabled, and neither property nor method calls will have any effect.\n   */\n  experimentalFeatures: PropTypes.shape({\n    warnIfFocusStateIsNotSynced: PropTypes.bool\n  }),\n  /**\n   * The milliseconds delay to wait after a keystroke before triggering filtering.\n   * @default 150\n   */\n  filterDebounceMs: PropTypes.number,\n  /**\n   * Filtering can be processed on the server or client-side.\n   * Set it to 'server' if you would like to handle filtering on the server-side.\n   * @default \"client\"\n   */\n  filterMode: PropTypes.oneOf(['client', 'server']),\n  /**\n   * Set the filter model of the Data Grid.\n   */\n  filterModel: PropTypes.shape({\n    items: PropTypes.arrayOf(PropTypes.shape({\n      field: PropTypes.string.isRequired,\n      id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n      operator: PropTypes.string.isRequired,\n      value: PropTypes.any\n    })).isRequired,\n    logicOperator: PropTypes.oneOf(['and', 'or']),\n    quickFilterExcludeHiddenColumns: PropTypes.bool,\n    quickFilterLogicOperator: PropTypes.oneOf(['and', 'or']),\n    quickFilterValues: PropTypes.array\n  }),\n  /**\n   * Forwarded props for the Data Grid root element.\n   * @ignore - do not document.\n   */\n  forwardedProps: PropTypes.object,\n  /**\n   * Determines the position of an aggregated value.\n   * @param {GridGroupNode} groupNode The current group.\n   * @returns {GridAggregationPosition | null} Position of the aggregated value (if `null`, the group isn't aggregated).\n   * @default (groupNode) => groupNode == null ? 'footer' : 'inline'\n   */\n  getAggregationPosition: PropTypes.func,\n  /**\n   * Function that applies CSS classes dynamically on cells.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @returns {string} The CSS class to apply to the cell.\n   */\n  getCellClassName: PropTypes.func,\n  /**\n   * Function that returns the element to render in row detail.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @returns {React.JSX.Element} The row detail element.\n   */\n  getDetailPanelContent: PropTypes.func,\n  /**\n   * Function that returns the height of the row detail panel.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @returns {number | string} The height in pixels or \"auto\" to use the content height.\n   * @default \"() => 500\"\n   */\n  getDetailPanelHeight: PropTypes.func,\n  /**\n   * Function that returns the estimated height for a row.\n   * Only works if dynamic row height is used.\n   * Once the row height is measured this value is discarded.\n   * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].\n   * @returns {number | null} The estimated row height value. If `null` or `undefined` then the default row height, based on the density, is applied.\n   */\n  getEstimatedRowHeight: PropTypes.func,\n  /**\n   * Function that applies CSS classes dynamically on rows.\n   * @param {GridRowClassNameParams} params With all properties from [[GridRowClassNameParams]].\n   * @returns {string} The CSS class to apply to the row.\n   */\n  getRowClassName: PropTypes.func,\n  /**\n   * Function that sets the row height per row.\n   * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].\n   * @returns {GridRowHeightReturnValue} The row height value. If `null` or `undefined` then the default row height is applied. If \"auto\" then the row height is calculated based on the content.\n   */\n  getRowHeight: PropTypes.func,\n  /**\n   * Return the id of a given [[GridRowModel]].\n   */\n  getRowId: PropTypes.func,\n  /**\n   * Function that allows to specify the spacing between rows.\n   * @param {GridRowSpacingParams} params With all properties from [[GridRowSpacingParams]].\n   * @returns {GridRowSpacing} The row spacing values.\n   */\n  getRowSpacing: PropTypes.func,\n  /**\n   * Determines the path of a row in the tree data.\n   * For instance, a row with the path [\"A\", \"B\"] is the child of the row with the path [\"A\"].\n   * Note that all paths must contain at least one element.\n   * @template R\n   * @param {R} row The row from which we want the path.\n   * @returns {string[]} The path to the row.\n   */\n  getTreeDataPath: PropTypes.func,\n  /**\n   * The grouping column used by the tree data.\n   */\n  groupingColDef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n  /**\n   * Override the height of the header filters.\n   */\n  headerFilterHeight: PropTypes.number,\n  /**\n   * If `true`, enables the data grid filtering on header feature.\n   * @default false\n   */\n  headerFilters: PropTypes.bool,\n  /**\n   * If `true`, the footer component is hidden.\n   * @default false\n   */\n  hideFooter: PropTypes.bool,\n  /**\n   * If `true`, the pagination component in the footer is hidden.\n   * @default false\n   */\n  hideFooterPagination: PropTypes.bool,\n  /**\n   * If `true`, the row count in the footer is hidden.\n   * It has no effect if the pagination is enabled.\n   * @default false\n   */\n  hideFooterRowCount: PropTypes.bool,\n  /**\n   * If `true`, the selected row count in the footer is hidden.\n   * @default false\n   */\n  hideFooterSelectedRowCount: PropTypes.bool,\n  /**\n   * If `true`, the diacritics (accents) are ignored when filtering or quick filtering.\n   * E.g. when filter value is `cafe`, the rows with `café` will be visible.\n   * @default false\n   */\n  ignoreDiacritics: PropTypes.bool,\n  /**\n   * If `true`, the Data Grid will not use `valueFormatter` when exporting to CSV or copying to clipboard.\n   * If an object is provided, you can choose to ignore the `valueFormatter` for CSV export or clipboard export.\n   * @default false\n   */\n  ignoreValueFormatterDuringExport: PropTypes.oneOfType([PropTypes.shape({\n    clipboardExport: PropTypes.bool,\n    csvExport: PropTypes.bool\n  }), PropTypes.bool]),\n  /**\n   * The initial state of the DataGridPremium.\n   * The data in it is set in the state on initialization but isn't controlled.\n   * If one of the data in `initialState` is also being controlled, then the control state wins.\n   */\n  initialState: PropTypes.object,\n  /**\n   * Callback fired when a cell is rendered, returns true if the cell is editable.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @returns {boolean} A boolean indicating if the cell is editable.\n   */\n  isCellEditable: PropTypes.func,\n  /**\n   * Determines if a group should be expanded after its creation.\n   * This prop takes priority over the `defaultGroupingExpansionDepth` prop.\n   * @param {GridGroupNode} node The node of the group to test.\n   * @returns {boolean} A boolean indicating if the group is expanded.\n   */\n  isGroupExpandedByDefault: PropTypes.func,\n  /**\n   * Determines if a row can be selected.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @returns {boolean} A boolean indicating if the cell is selectable.\n   */\n  isRowSelectable: PropTypes.func,\n  /**\n   * If `true`, moving the mouse pointer outside the grid before releasing the mouse button\n   * in a column re-order action will not cause the column to jump back to its original position.\n   * @default false\n   */\n  keepColumnPositionIfDraggedOutside: PropTypes.bool,\n  /**\n   * If `true`, the selection model will retain selected rows that do not exist.\n   * Useful when using server side pagination and row selections need to be retained\n   * when changing pages.\n   * @default false\n   */\n  keepNonExistentRowsSelected: PropTypes.bool,\n  /**\n   * If `true`, a loading overlay is displayed.\n   */\n  loading: PropTypes.bool,\n  /**\n   * Set the locale text of the Data Grid.\n   * You can find all the translation keys supported in [the source](https://github.com/mui/mui-x/blob/HEAD/packages/x-data-grid/src/constants/localeTextConstants.ts) in the GitHub repository.\n   */\n  localeText: PropTypes.object,\n  /**\n   * Pass a custom logger in the components that implements the [[Logger]] interface.\n   * @default console\n   */\n  logger: PropTypes.shape({\n    debug: PropTypes.func.isRequired,\n    error: PropTypes.func.isRequired,\n    info: PropTypes.func.isRequired,\n    warn: PropTypes.func.isRequired\n  }),\n  /**\n   * Allows to pass the logging level or false to turn off logging.\n   * @default \"error\" (\"warn\" in dev mode)\n   */\n  logLevel: PropTypes.oneOf(['debug', 'error', 'info', 'warn', false]),\n  /**\n   * Nonce of the inline styles for [Content Security Policy](https://www.w3.org/TR/2016/REC-CSP2-20161215/#script-src-the-nonce-attribute).\n   */\n  nonce: PropTypes.string,\n  /**\n   * Callback fired when the row grouping model changes.\n   * @param {GridAggregationModel} model The aggregated columns.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onAggregationModelChange: PropTypes.func,\n  /**\n   * Callback fired before the clipboard paste operation starts.\n   * Use it to confirm or cancel the paste operation.\n   * @param {object} params Params passed to the callback.\n   * @param {string[][]} params.data The raw pasted data split by rows and cells.\n   * @returns {Promise<any>} A promise that resolves to confirm the paste operation, and rejects to cancel it.\n   */\n  onBeforeClipboardPasteStart: PropTypes.func,\n  /**\n   * Callback fired when any cell is clicked.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellClick: PropTypes.func,\n  /**\n   * Callback fired when a double click event comes from a cell element.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellDoubleClick: PropTypes.func,\n  /**\n   * Callback fired when the cell turns to edit mode.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.\n   */\n  onCellEditStart: PropTypes.func,\n  /**\n   * Callback fired when the cell turns to view mode.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n   */\n  onCellEditStop: PropTypes.func,\n  /**\n   * Callback fired when a keydown event comes from a cell element.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.KeyboardEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellKeyDown: PropTypes.func,\n  /**\n   * Callback fired when the `cellModesModel` prop changes.\n   * @param {GridCellModesModel} cellModesModel Object containing which cells are in \"edit\" mode.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellModesModelChange: PropTypes.func,\n  /**\n   * Callback fired when the selection state of one or multiple cells changes.\n   * @param {GridCellSelectionModel} cellSelectionModel Object in the shape of [[GridCellSelectionModel]] containing the selected cells.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellSelectionModelChange: PropTypes.func,\n  /**\n   * Callback called when the data is copied to the clipboard.\n   * @param {string} data The data copied to the clipboard.\n   */\n  onClipboardCopy: PropTypes.func,\n  /**\n   * Callback fired when the clipboard paste operation ends.\n   */\n  onClipboardPasteEnd: PropTypes.func,\n  /**\n   * Callback fired when the clipboard paste operation starts.\n   */\n  onClipboardPasteStart: PropTypes.func,\n  /**\n   * Callback fired when a click event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderClick: PropTypes.func,\n  /**\n   * Callback fired when a double click event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderDoubleClick: PropTypes.func,\n  /**\n   * Callback fired when a mouse enter event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderEnter: PropTypes.func,\n  /**\n   * Callback fired when a mouse leave event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderLeave: PropTypes.func,\n  /**\n   * Callback fired when a mouseout event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderOut: PropTypes.func,\n  /**\n   * Callback fired when a mouseover event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderOver: PropTypes.func,\n  /**\n   * Callback fired when a column is reordered.\n   * @param {GridColumnOrderChangeParams} params With all properties from [[GridColumnOrderChangeParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnOrderChange: PropTypes.func,\n  /**\n   * Callback fired while a column is being resized.\n   * @param {GridColumnResizeParams} params With all properties from [[GridColumnResizeParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnResize: PropTypes.func,\n  /**\n   * Callback fired when the column visibility model changes.\n   * @param {GridColumnVisibilityModel} model The new model.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnVisibilityModelChange: PropTypes.func,\n  /**\n   * Callback fired when the width of a column is changed.\n   * @param {GridColumnResizeParams} params With all properties from [[GridColumnResizeParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnWidthChange: PropTypes.func,\n  /**\n   * Callback fired when the density changes.\n   * @param {GridDensity} density New density value.\n   */\n  onDensityChange: PropTypes.func,\n  /**\n   * Callback fired when the detail panel of a row is opened or closed.\n   * @param {GridRowId[]} ids The ids of the rows which have the detail panel open.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onDetailPanelExpandedRowIdsChange: PropTypes.func,\n  /**\n   * Callback fired when the state of the Excel export changes.\n   * @param {string} inProgress Indicates if the task is in progress.\n   */\n  onExcelExportStateChange: PropTypes.func,\n  /**\n   * Callback fired when rowCount is set and the next batch of virtualized rows is rendered.\n   * @param {GridFetchRowsParams} params With all properties from [[GridFetchRowsParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onFetchRows: PropTypes.func,\n  /**\n   * Callback fired when the Filter model changes before the filters are applied.\n   * @param {GridFilterModel} model With all properties from [[GridFilterModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onFilterModelChange: PropTypes.func,\n  /**\n   * Callback fired when the menu is closed.\n   * @param {GridMenuParams} params With all properties from [[GridMenuParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onMenuClose: PropTypes.func,\n  /**\n   * Callback fired when the menu is opened.\n   * @param {GridMenuParams} params With all properties from [[GridMenuParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onMenuOpen: PropTypes.func,\n  /**\n   * Callback fired when the pagination meta has changed.\n   * @param {GridPaginationMeta} paginationMeta Updated pagination meta.\n   */\n  onPaginationMetaChange: PropTypes.func,\n  /**\n   * Callback fired when the pagination model has changed.\n   * @param {GridPaginationModel} model Updated pagination model.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPaginationModelChange: PropTypes.func,\n  /**\n   * Callback fired when the pinned columns have changed.\n   * @param {GridPinnedColumnFields} pinnedColumns The changed pinned columns.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPinnedColumnsChange: PropTypes.func,\n  /**\n   * Callback fired when the preferences panel is closed.\n   * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPreferencePanelClose: PropTypes.func,\n  /**\n   * Callback fired when the preferences panel is opened.\n   * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPreferencePanelOpen: PropTypes.func,\n  /**\n   * Callback called when `processRowUpdate` throws an error or rejects.\n   * @param {any} error The error thrown.\n   */\n  onProcessRowUpdateError: PropTypes.func,\n  /**\n   * Callback fired when the Data Grid is resized.\n   * @param {ElementSize} containerSize With all properties from [[ElementSize]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onResize: PropTypes.func,\n  /**\n   * Callback fired when a row is clicked.\n   * Not called if the target clicked is an interactive element added by the built-in columns.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowClick: PropTypes.func,\n  /**\n   * Callback fired when the row count has changed.\n   * @param {number} count Updated row count.\n   */\n  onRowCountChange: PropTypes.func,\n  /**\n   * Callback fired when a double click event comes from a row container element.\n   * @param {GridRowParams} params With all properties from [[RowParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowDoubleClick: PropTypes.func,\n  /**\n   * Callback fired when the row turns to edit mode.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.\n   */\n  onRowEditStart: PropTypes.func,\n  /**\n   * Callback fired when the row turns to view mode.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n   */\n  onRowEditStop: PropTypes.func,\n  /**\n   * Callback fired when the row grouping model changes.\n   * @param {GridRowGroupingModel} model Columns used as grouping criteria.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowGroupingModelChange: PropTypes.func,\n  /**\n   * Callback fired when the `rowModesModel` prop changes.\n   * @param {GridRowModesModel} rowModesModel Object containing which rows are in \"edit\" mode.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowModesModelChange: PropTypes.func,\n  /**\n   * Callback fired when a row is being reordered.\n   * @param {GridRowOrderChangeParams} params With all properties from [[GridRowOrderChangeParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowOrderChange: PropTypes.func,\n  /**\n   * Callback fired when the selection state of one or multiple rows changes.\n   * @param {GridRowSelectionModel} rowSelectionModel With all the row ids [[GridSelectionModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowSelectionModelChange: PropTypes.func,\n  /**\n   * Callback fired when scrolling to the bottom of the grid viewport.\n   * @param {GridRowScrollEndParams} params With all properties from [[GridRowScrollEndParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowsScrollEnd: PropTypes.func,\n  /**\n   * Callback fired when the sort model changes before a column is sorted.\n   * @param {GridSortModel} model With all properties from [[GridSortModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onSortModelChange: PropTypes.func,\n  /**\n   * Callback fired when the state of the Data Grid is updated.\n   * @param {GridState} state The new state.\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   * @ignore - do not document.\n   */\n  onStateChange: PropTypes.func,\n  /**\n   * Select the pageSize dynamically using the component UI.\n   * @default [25, 50, 100]\n   */\n  pageSizeOptions: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    label: PropTypes.string.isRequired,\n    value: PropTypes.number.isRequired\n  })]).isRequired),\n  /**\n   * If `true`, pagination is enabled.\n   * @default false\n   */\n  pagination: PropTypes.bool,\n  /**\n   * The extra information about the pagination state of the Data Grid.\n   * Only applicable with `paginationMode=\"server\"`.\n   */\n  paginationMeta: PropTypes.shape({\n    hasNextPage: PropTypes.bool\n  }),\n  /**\n   * Pagination can be processed on the server or client-side.\n   * Set it to 'client' if you would like to handle the pagination on the client-side.\n   * Set it to 'server' if you would like to handle the pagination on the server-side.\n   * @default \"client\"\n   */\n  paginationMode: PropTypes.oneOf(['client', 'server']),\n  /**\n   * The pagination model of type [[GridPaginationModel]] which refers to current `page` and `pageSize`.\n   */\n  paginationModel: PropTypes.shape({\n    page: PropTypes.number.isRequired,\n    pageSize: PropTypes.number.isRequired\n  }),\n  /**\n   * The column fields to display pinned to left or right.\n   */\n  pinnedColumns: PropTypes.object,\n  /**\n   * Rows data to pin on top or bottom.\n   */\n  pinnedRows: PropTypes.shape({\n    bottom: PropTypes.arrayOf(PropTypes.object),\n    top: PropTypes.arrayOf(PropTypes.object)\n  }),\n  /**\n   * Callback called before updating a row with new values in the row and cell editing.\n   * @template R\n   * @param {R} newRow Row object with the new values.\n   * @param {R} oldRow Row object with the old values.\n   * @returns {Promise<R> | R} The final values to update the row.\n   */\n  processRowUpdate: PropTypes.func,\n  /**\n   * The milliseconds throttle delay for resizing the grid.\n   * @default 60\n   */\n  resizeThrottleMs: PropTypes.number,\n  /**\n   * Row region in pixels to render before/after the viewport\n   * @default 150\n   */\n  rowBufferPx: PropTypes.number,\n  /**\n   * Set the total number of rows, if it is different from the length of the value `rows` prop.\n   * If some rows have children (for instance in the tree data), this number represents the amount of top level rows.\n   * Only works with `paginationMode=\"server\"`, ignored when `paginationMode=\"client\"`.\n   */\n  rowCount: PropTypes.number,\n  /**\n   * If `single`, all the columns that are grouped are represented in the same grid column.\n   * If `multiple`, each column that is grouped is represented in its own grid column.\n   * @default 'single'\n   */\n  rowGroupingColumnMode: PropTypes.oneOf(['multiple', 'single']),\n  /**\n   * Set the row grouping model of the grid.\n   */\n  rowGroupingModel: PropTypes.arrayOf(PropTypes.string),\n  /**\n   * Sets the height in pixel of a row in the Data Grid.\n   * @default 52\n   */\n  rowHeight: PropTypes.number,\n  /**\n   * Controls the modes of the rows.\n   */\n  rowModesModel: PropTypes.object,\n  /**\n   * The milliseconds delay to wait after measuring the row height before recalculating row positions.\n   * Setting it to a lower value could be useful when using dynamic row height,\n   * but might reduce performance when displaying a large number of rows.\n   * @default 166\n   */\n  rowPositionsDebounceMs: PropTypes.number,\n  /**\n   * If `true`, the reordering of rows is enabled.\n   * @default false\n   */\n  rowReordering: PropTypes.bool,\n  /**\n   * Set of rows of type [[GridRowsProp]].\n   * @default []\n   */\n  rows: PropTypes.arrayOf(PropTypes.object),\n  /**\n   * If `false`, the row selection mode is disabled.\n   * @default true\n   */\n  rowSelection: PropTypes.bool,\n  /**\n   * Sets the row selection model of the Data Grid.\n   */\n  rowSelectionModel: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired), PropTypes.number, PropTypes.string]),\n  /**\n   * Loading rows can be processed on the server or client-side.\n   * Set it to 'client' if you would like enable infnite loading.\n   * Set it to 'server' if you would like to enable lazy loading.\n   * * @default \"client\"\n   */\n  rowsLoadingMode: PropTypes.oneOf(['client', 'server']),\n  /**\n   * Sets the type of space between rows added by `getRowSpacing`.\n   * @default \"margin\"\n   */\n  rowSpacingType: PropTypes.oneOf(['border', 'margin']),\n  /**\n   * Override the height/width of the Data Grid inner scrollbar.\n   */\n  scrollbarSize: PropTypes.number,\n  /**\n   * Set the area in `px` at the bottom of the grid viewport where onRowsScrollEnd is called.\n   * @default 80\n   */\n  scrollEndThreshold: PropTypes.number,\n  /**\n   * If `true`, the vertical borders of the cells are displayed.\n   * @default false\n   */\n  showCellVerticalBorder: PropTypes.bool,\n  /**\n   * If `true`, the right border of the column headers are displayed.\n   * @default false\n   */\n  showColumnVerticalBorder: PropTypes.bool,\n  /**\n   * Overridable components props dynamically passed to the component at rendering.\n   */\n  slotProps: PropTypes.object,\n  /**\n   * Overridable components.\n   */\n  slots: PropTypes.object,\n  /**\n   * Sorting can be processed on the server or client-side.\n   * Set it to 'client' if you would like to handle sorting on the client-side.\n   * Set it to 'server' if you would like to handle sorting on the server-side.\n   * @default \"client\"\n   */\n  sortingMode: PropTypes.oneOf(['client', 'server']),\n  /**\n   * The order of the sorting sequence.\n   * @default ['asc', 'desc', null]\n   */\n  sortingOrder: PropTypes.arrayOf(PropTypes.oneOf(['asc', 'desc'])),\n  /**\n   * Set the sort model of the Data Grid.\n   */\n  sortModel: PropTypes.arrayOf(PropTypes.shape({\n    field: PropTypes.string.isRequired,\n    sort: PropTypes.oneOf(['asc', 'desc'])\n  })),\n  /**\n   * The function is used to split the pasted text into rows and cells.\n   * @param {string} text The text pasted from the clipboard.\n   * @returns {string[][] | null} A 2D array of strings. The first dimension is the rows, the second dimension is the columns.\n   * @default (pastedText) => { const text = pastedText.replace(/\\r?\\n$/, ''); return text.split(/\\r\\n|\\n|\\r/).map((row) => row.split('\\t')); }\n   */\n  splitClipboardPastedText: PropTypes.func,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * If positive, the Data Grid will throttle updates coming from `apiRef.current.updateRows` and `apiRef.current.setRows`.\n   * It can be useful if you have a high update rate but do not want to do heavy work like filtering / sorting or rendering on each  individual update.\n   * @default 0\n   */\n  throttleRowsMs: PropTypes.number,\n  /**\n   * If `true`, the rows will be gathered in a tree structure according to the `getTreeDataPath` prop.\n   * @default false\n   */\n  treeData: PropTypes.bool\n} : void 0;"],"mappings":"AAAA;;AAEA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,kBAAT,EAA6BC,SAA7B,QAA8C,gBAA9C;AACA,SAASC,QAAT,EAAmBC,qBAAnB,EAA0CC,UAA1C,EAAsDC,QAAtD,EAAgEC,mBAAhE,QAA2F,sBAA3F;AACA,SAASC,sBAAT,EAAiCC,yBAAjC,EAA4DC,aAA5D,QAAiF,gCAAjF;AACA,SAASC,2BAAT,QAA4C,+BAA5C;AACA,SAASC,uBAAT,QAAwC,2BAAxC;AACA,SAASC,cAAT,QAA+B,sBAA/B;AACA,SAASC,GAAG,IAAIC,IAAhB,EAAsBC,IAAI,IAAIC,KAA9B,QAA2C,mBAA3C;AACA,MAAMC,WAAW,GAAGL,cAAc,EAAlC;AACA,IAAIM,6BAAJ;;AACA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;EACzCH,6BAA6B,GAAG,CAAC,GAAGX,sBAAJ,EAA4B,GAAGC,yBAA/B,CAAhC;AACD;;AACD,MAAMc,kBAAkB,GAAG,aAAaxB,KAAK,CAACyB,UAAN,CAAiB,SAASC,eAAT,CAAyBC,OAAzB,EAAkCC,GAAlC,EAAuC;EAC9F,MAAMC,KAAK,GAAGhB,uBAAuB,CAACc,OAAD,CAArC;EACA,MAAMG,aAAa,GAAGlB,2BAA2B,CAACiB,KAAK,CAACE,MAAP,EAAeF,KAAf,CAAjD;EACA3B,kBAAkB,CAAC,qBAAD,EAAwBiB,WAAxB,CAAlB;;EACA,IAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;IACzCZ,aAAa,CAACkB,KAAD,EAAQT,6BAAR,CAAb;EACD;;EACD,OAAO,aAAaJ,IAAI,CAACR,mBAAD,EAAsB;IAC5CsB,aAAa,EAAEA,aAD6B;IAE5CD,KAAK,EAAEA,KAFqC;IAG5CG,QAAQ,EAAE,aAAad,KAAK,CAACX,QAAD,EAAWR,QAAQ,CAAC;MAC9CkC,SAAS,EAAEJ,KAAK,CAACI,SAD6B;MAE9CC,KAAK,EAAEL,KAAK,CAACK,KAFiC;MAG9CC,EAAE,EAAEN,KAAK,CAACM,EAHoC;MAI9CP,GAAG,EAAEA;IAJyC,CAAD,EAK5CC,KAAK,CAACO,cALsC,EAKtB;MACvBJ,QAAQ,EAAE,CAAC,aAAahB,IAAI,CAACV,UAAD,EAAa,EAAb,CAAlB,EAAoC,aAAaU,IAAI,CAACZ,QAAD,EAAW;QACxE4B,QAAQ,EAAE,aAAahB,IAAI,CAACb,SAAD,EAAY;UACrCkC,WAAW,EAAE,qBADwB;UAErClB,WAAW,EAAEA;QAFwB,CAAZ;MAD6C,CAAX,CAArD,EAKN,aAAaH,IAAI,CAACX,qBAAD,EAAwB,EAAxB,CALX;IADa,CALsB,CAAnB;EAHgB,CAAtB,CAAxB;AAiBD,CAxBuC,CAAxC;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMqB,eAAe,GAAG,aAAa1B,KAAK,CAACsC,IAAN,CAAWd,kBAAX,CAArC;AACPH,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCC,kBAAkB,CAACe,SAAnB,GAA+B;EACrE;EACA;EACA;EACA;;EACA;AACF;AACA;AACA;EACEC,oBAAoB,EAAEvC,SAAS,CAACwC,MATqC;;EAUrE;AACF;AACA;EACEC,gBAAgB,EAAEzC,SAAS,CAACwC,MAbyC;;EAcrE;AACF;AACA;AACA;AACA;AACA;EACEE,oBAAoB,EAAE1C,SAAS,CAAC2C,KAAV,CAAgB,CAAC,KAAD,EAAQ,UAAR,CAAhB,CApB+C;;EAqBrE;AACF;AACA;EACEb,MAAM,EAAE9B,SAAS,CAAC4C,KAAV,CAAgB;IACtBC,OAAO,EAAE7C,SAAS,CAACwC,MAAV,CAAiBM;EADJ,CAAhB,CAxB6D;;EA2BrE;AACF;AACA;EACE,cAAc9C,SAAS,CAAC+C,MA9B6C;;EA+BrE;AACF;AACA;EACE,mBAAmB/C,SAAS,CAAC+C,MAlCwC;;EAmCrE;AACF;AACA;AACA;EACEC,UAAU,EAAEhD,SAAS,CAACiD,IAvC+C;;EAwCrE;AACF;AACA;AACA;EACEC,YAAY,EAAElD,SAAS,CAACiD,IA5C6C;;EA6CrE;AACF;AACA;AACA;EACEE,eAAe,EAAEnD,SAAS,CAACiD,IAjD0C;;EAkDrE;AACF;AACA;EACEG,eAAe,EAAEpD,SAAS,CAAC4C,KAAV,CAAgB;IAC/BS,OAAO,EAAErD,SAAS,CAACsD,OAAV,CAAkBtD,SAAS,CAAC+C,MAA5B,CADsB;IAE/BQ,MAAM,EAAEvD,SAAS,CAACiD,IAFa;IAG/BO,cAAc,EAAExD,SAAS,CAACiD,IAHK;IAI/BQ,eAAe,EAAEzD,SAAS,CAACiD,IAJI;IAK/BS,cAAc,EAAE1D,SAAS,CAAC2D;EALK,CAAhB,CArDoD;;EA4DrE;AACF;AACA;EACEC,cAAc,EAAE5D,SAAS,CAACwC,MA/D2C;;EAgErE;AACF;AACA;AACA;EACEqB,aAAa,EAAE7D,SAAS,CAACiD,IApE4C;;EAqErE;AACF;AACA;EACEa,kBAAkB,EAAE9D,SAAS,CAACwC,MAxEuC;;EAyErE;AACF;AACA;AACA;EACEuB,iBAAiB,EAAE/D,SAAS,CAACiD,IA7EwC;;EA8ErE;AACF;AACA;AACA;AACA;EACEe,4BAA4B,EAAEhE,SAAS,CAACiD,IAnF6B;;EAoFrE;AACF;AACA;EACEgB,OAAO,EAAEjE,SAAS,CAACwC,MAvFkD;;EAwFrE;AACF;AACA;AACA;EACE0B,0BAA0B,EAAElE,SAAS,CAAC+C,MA5F+B;;EA6FrE;AACF;AACA;AACA;EACEoB,cAAc,EAAEnE,SAAS,CAAC2D,MAjG2C;EAkGrES,mBAAmB,EAAEpE,SAAS,CAACsD,OAAV,CAAkBtD,SAAS,CAACwC,MAA5B,CAlGgD;;EAmGrE;AACF;AACA;AACA;EACE6B,kBAAkB,EAAErE,SAAS,CAAC2D,MAvGuC;;EAwGrE;AACF;AACA;EACEN,OAAO,EAAErD,SAAS,CAACsD,OAAV,CAAkBtD,SAAS,CAACwC,MAA5B,EAAoCM,UA3GwB;;EA4GrE;AACF;AACA;AACA;EACEwB,qBAAqB,EAAEtE,SAAS,CAACwC,MAhHoC;;EAiHrE;AACF;AACA;AACA;AACA;EACE+B,6BAA6B,EAAEvE,SAAS,CAAC2D,MAtH4B;;EAuHrE;AACF;AACA;AACA;EACEa,OAAO,EAAExE,SAAS,CAAC2C,KAAV,CAAgB,CAAC,aAAD,EAAgB,SAAhB,EAA2B,UAA3B,CAAhB,CA3H4D;;EA4HrE;AACF;AACA;EACE8B,yBAAyB,EAAEzE,SAAS,CAACsD,OAAV,CAAkBtD,SAAS,CAAC0E,SAAV,CAAoB,CAAC1E,SAAS,CAAC2D,MAAX,EAAmB3D,SAAS,CAAC+C,MAA7B,CAApB,EAA0DD,UAA5E,CA/H0C;;EAgIrE;AACF;AACA;AACA;EACE6B,kBAAkB,EAAE3E,SAAS,CAACiD,IApIuC;;EAqIrE;AACF;AACA;AACA;EACE2B,eAAe,EAAE5E,SAAS,CAACiD,IAzI0C;;EA0IrE;AACF;AACA;AACA;EACE4B,wBAAwB,EAAE7E,SAAS,CAACiD,IA9IiC;;EA+IrE;AACF;AACA;AACA;EACE6B,sBAAsB,EAAE9E,SAAS,CAACiD,IAnJmC;;EAoJrE;AACF;AACA;AACA;EACE8B,qBAAqB,EAAE/E,SAAS,CAACiD,IAxJoC;;EAyJrE;AACF;AACA;AACA;EACE+B,mBAAmB,EAAEhF,SAAS,CAACiD,IA7JsC;;EA8JrE;AACF;AACA;AACA;EACEgC,iBAAiB,EAAEjF,SAAS,CAACiD,IAlKwC;;EAmKrE;AACF;AACA;AACA;EACEiC,oBAAoB,EAAElF,SAAS,CAACiD,IAvKqC;;EAwKrE;AACF;AACA;AACA;EACEkC,oBAAoB,EAAEnF,SAAS,CAACiD,IA5KqC;;EA6KrE;AACF;AACA;AACA;EACEmC,mBAAmB,EAAEpF,SAAS,CAACiD,IAjLsC;;EAkLrE;AACF;AACA;AACA;EACEoC,qBAAqB,EAAErF,SAAS,CAACiD,IAtLoC;;EAuLrE;AACF;AACA;AACA;EACEqC,oBAAoB,EAAEtF,SAAS,CAACiD,IA3LqC;;EA4LrE;AACF;AACA;AACA;EACEsC,sBAAsB,EAAEvF,SAAS,CAACiD,IAhMmC;;EAiMrE;AACF;AACA;AACA;EACEuC,WAAW,EAAExF,SAAS,CAACiD,IArM8C;;EAsMrE;AACF;AACA;AACA;EACEwC,+BAA+B,EAAEzF,SAAS,CAACiD,IA1M0B;;EA2MrE;AACF;AACA;AACA;EACEyC,6BAA6B,EAAE1F,SAAS,CAACiD,IA/M4B;;EAgNrE;AACF;AACA;AACA;AACA;EACE0C,2BAA2B,EAAE3F,SAAS,CAACiD,IArN8B;;EAsNrE;AACF;AACA;AACA;EACE2C,kBAAkB,EAAE5F,SAAS,CAACiD,IA1NuC;;EA2NrE;AACF;AACA;AACA;EACE4C,0BAA0B,EAAE7F,SAAS,CAACiD,IA/N+B;;EAgOrE;AACF;AACA;AACA;EACE6C,qBAAqB,EAAE9F,SAAS,CAACiD,IApOoC;;EAqOrE;AACF;AACA;AACA;EACE8C,QAAQ,EAAE/F,SAAS,CAAC2C,KAAV,CAAgB,CAAC,MAAD,EAAS,KAAT,CAAhB,CAzO2D;;EA0OrE;AACF;AACA;AACA;AACA;EACEqD,iBAAiB,EAAEhG,SAAS,CAAC2D,MA/OwC;;EAgPrE;AACF;AACA;AACA;EACEsC,oBAAoB,EAAEjG,SAAS,CAAC4C,KAAV,CAAgB;IACpCsD,2BAA2B,EAAElG,SAAS,CAACiD;EADH,CAAhB,CApP+C;;EAuPrE;AACF;AACA;AACA;EACEkD,gBAAgB,EAAEnG,SAAS,CAAC2D,MA3PyC;;EA4PrE;AACF;AACA;AACA;AACA;EACEyC,UAAU,EAAEpG,SAAS,CAAC2C,KAAV,CAAgB,CAAC,QAAD,EAAW,QAAX,CAAhB,CAjQyD;;EAkQrE;AACF;AACA;EACE0D,WAAW,EAAErG,SAAS,CAAC4C,KAAV,CAAgB;IAC3B0D,KAAK,EAAEtG,SAAS,CAACsD,OAAV,CAAkBtD,SAAS,CAAC4C,KAAV,CAAgB;MACvC2D,KAAK,EAAEvG,SAAS,CAAC+C,MAAV,CAAiBD,UADe;MAEvC0D,EAAE,EAAExG,SAAS,CAAC0E,SAAV,CAAoB,CAAC1E,SAAS,CAAC2D,MAAX,EAAmB3D,SAAS,CAAC+C,MAA7B,CAApB,CAFmC;MAGvC0D,QAAQ,EAAEzG,SAAS,CAAC+C,MAAV,CAAiBD,UAHY;MAIvC4D,KAAK,EAAE1G,SAAS,CAAC2G;IAJsB,CAAhB,CAAlB,EAKH7D,UANuB;IAO3B8D,aAAa,EAAE5G,SAAS,CAAC2C,KAAV,CAAgB,CAAC,KAAD,EAAQ,IAAR,CAAhB,CAPY;IAQ3BkE,+BAA+B,EAAE7G,SAAS,CAACiD,IARhB;IAS3B6D,wBAAwB,EAAE9G,SAAS,CAAC2C,KAAV,CAAgB,CAAC,KAAD,EAAQ,IAAR,CAAhB,CATC;IAU3BoE,iBAAiB,EAAE/G,SAAS,CAACgH;EAVF,CAAhB,CArQwD;;EAiRrE;AACF;AACA;AACA;EACE7E,cAAc,EAAEnC,SAAS,CAACwC,MArR2C;;EAsRrE;AACF;AACA;AACA;AACA;AACA;EACEyE,sBAAsB,EAAEjH,SAAS,CAACkH,IA5RmC;;EA6RrE;AACF;AACA;AACA;AACA;EACEC,gBAAgB,EAAEnH,SAAS,CAACkH,IAlSyC;;EAmSrE;AACF;AACA;AACA;AACA;EACEE,qBAAqB,EAAEpH,SAAS,CAACkH,IAxSoC;;EAySrE;AACF;AACA;AACA;AACA;AACA;EACEG,oBAAoB,EAAErH,SAAS,CAACkH,IA/SqC;;EAgTrE;AACF;AACA;AACA;AACA;AACA;AACA;EACEI,qBAAqB,EAAEtH,SAAS,CAACkH,IAvToC;;EAwTrE;AACF;AACA;AACA;AACA;EACEK,eAAe,EAAEvH,SAAS,CAACkH,IA7T0C;;EA8TrE;AACF;AACA;AACA;AACA;EACEM,YAAY,EAAExH,SAAS,CAACkH,IAnU6C;;EAoUrE;AACF;AACA;EACEO,QAAQ,EAAEzH,SAAS,CAACkH,IAvUiD;;EAwUrE;AACF;AACA;AACA;AACA;EACEQ,aAAa,EAAE1H,SAAS,CAACkH,IA7U4C;;EA8UrE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACES,eAAe,EAAE3H,SAAS,CAACkH,IAtV0C;;EAuVrE;AACF;AACA;EACEU,cAAc,EAAE5H,SAAS,CAAC0E,SAAV,CAAoB,CAAC1E,SAAS,CAACkH,IAAX,EAAiBlH,SAAS,CAACwC,MAA3B,CAApB,CA1VqD;;EA2VrE;AACF;AACA;EACEqF,kBAAkB,EAAE7H,SAAS,CAAC2D,MA9VuC;;EA+VrE;AACF;AACA;AACA;EACEmE,aAAa,EAAE9H,SAAS,CAACiD,IAnW4C;;EAoWrE;AACF;AACA;AACA;EACE8E,UAAU,EAAE/H,SAAS,CAACiD,IAxW+C;;EAyWrE;AACF;AACA;AACA;EACE+E,oBAAoB,EAAEhI,SAAS,CAACiD,IA7WqC;;EA8WrE;AACF;AACA;AACA;AACA;EACEgF,kBAAkB,EAAEjI,SAAS,CAACiD,IAnXuC;;EAoXrE;AACF;AACA;AACA;EACEiF,0BAA0B,EAAElI,SAAS,CAACiD,IAxX+B;;EAyXrE;AACF;AACA;AACA;AACA;EACEkF,gBAAgB,EAAEnI,SAAS,CAACiD,IA9XyC;;EA+XrE;AACF;AACA;AACA;AACA;EACEmF,gCAAgC,EAAEpI,SAAS,CAAC0E,SAAV,CAAoB,CAAC1E,SAAS,CAAC4C,KAAV,CAAgB;IACrEyF,eAAe,EAAErI,SAAS,CAACiD,IAD0C;IAErEqF,SAAS,EAAEtI,SAAS,CAACiD;EAFgD,CAAhB,CAAD,EAGlDjD,SAAS,CAACiD,IAHwC,CAApB,CApYmC;;EAwYrE;AACF;AACA;AACA;AACA;EACEsF,YAAY,EAAEvI,SAAS,CAACwC,MA7Y6C;;EA8YrE;AACF;AACA;AACA;AACA;EACEgG,cAAc,EAAExI,SAAS,CAACkH,IAnZ2C;;EAoZrE;AACF;AACA;AACA;AACA;AACA;EACEuB,wBAAwB,EAAEzI,SAAS,CAACkH,IA1ZiC;;EA2ZrE;AACF;AACA;AACA;AACA;EACEwB,eAAe,EAAE1I,SAAS,CAACkH,IAha0C;;EAiarE;AACF;AACA;AACA;AACA;EACEyB,kCAAkC,EAAE3I,SAAS,CAACiD,IAtauB;;EAuarE;AACF;AACA;AACA;AACA;AACA;EACE2F,2BAA2B,EAAE5I,SAAS,CAACiD,IA7a8B;;EA8arE;AACF;AACA;EACE4F,OAAO,EAAE7I,SAAS,CAACiD,IAjbkD;;EAkbrE;AACF;AACA;AACA;EACE6F,UAAU,EAAE9I,SAAS,CAACwC,MAtb+C;;EAubrE;AACF;AACA;AACA;EACEuG,MAAM,EAAE/I,SAAS,CAAC4C,KAAV,CAAgB;IACtBoG,KAAK,EAAEhJ,SAAS,CAACkH,IAAV,CAAepE,UADA;IAEtBmG,KAAK,EAAEjJ,SAAS,CAACkH,IAAV,CAAepE,UAFA;IAGtBoG,IAAI,EAAElJ,SAAS,CAACkH,IAAV,CAAepE,UAHC;IAItBqG,IAAI,EAAEnJ,SAAS,CAACkH,IAAV,CAAepE;EAJC,CAAhB,CA3b6D;;EAicrE;AACF;AACA;AACA;EACEsG,QAAQ,EAAEpJ,SAAS,CAAC2C,KAAV,CAAgB,CAAC,OAAD,EAAU,OAAV,EAAmB,MAAnB,EAA2B,MAA3B,EAAmC,KAAnC,CAAhB,CArc2D;;EAscrE;AACF;AACA;EACE0G,KAAK,EAAErJ,SAAS,CAAC+C,MAzcoD;;EA0crE;AACF;AACA;AACA;AACA;EACEuG,wBAAwB,EAAEtJ,SAAS,CAACkH,IA/ciC;;EAgdrE;AACF;AACA;AACA;AACA;AACA;AACA;EACEqC,2BAA2B,EAAEvJ,SAAS,CAACkH,IAvd8B;;EAwdrE;AACF;AACA;AACA;AACA;AACA;EACEsC,WAAW,EAAExJ,SAAS,CAACkH,IA9d8C;;EA+drE;AACF;AACA;AACA;AACA;AACA;EACEuC,iBAAiB,EAAEzJ,SAAS,CAACkH,IArewC;;EAserE;AACF;AACA;AACA;AACA;EACEwC,eAAe,EAAE1J,SAAS,CAACkH,IA3e0C;;EA4erE;AACF;AACA;AACA;AACA;EACEyC,cAAc,EAAE3J,SAAS,CAACkH,IAjf2C;;EAkfrE;AACF;AACA;AACA;AACA;AACA;EACE0C,aAAa,EAAE5J,SAAS,CAACkH,IAxf4C;;EAyfrE;AACF;AACA;AACA;AACA;EACE2C,sBAAsB,EAAE7J,SAAS,CAACkH,IA9fmC;;EA+frE;AACF;AACA;AACA;AACA;EACE4C,0BAA0B,EAAE9J,SAAS,CAACkH,IApgB+B;;EAqgBrE;AACF;AACA;AACA;EACE6C,eAAe,EAAE/J,SAAS,CAACkH,IAzgB0C;;EA0gBrE;AACF;AACA;EACE8C,mBAAmB,EAAEhK,SAAS,CAACkH,IA7gBsC;;EA8gBrE;AACF;AACA;EACE+C,qBAAqB,EAAEjK,SAAS,CAACkH,IAjhBoC;;EAkhBrE;AACF;AACA;AACA;AACA;AACA;EACEgD,mBAAmB,EAAElK,SAAS,CAACkH,IAxhBsC;;EAyhBrE;AACF;AACA;AACA;AACA;AACA;EACEiD,yBAAyB,EAAEnK,SAAS,CAACkH,IA/hBgC;;EAgiBrE;AACF;AACA;AACA;AACA;AACA;EACEkD,mBAAmB,EAAEpK,SAAS,CAACkH,IAtiBsC;;EAuiBrE;AACF;AACA;AACA;AACA;AACA;EACEmD,mBAAmB,EAAErK,SAAS,CAACkH,IA7iBsC;;EA8iBrE;AACF;AACA;AACA;AACA;AACA;EACEoD,iBAAiB,EAAEtK,SAAS,CAACkH,IApjBwC;;EAqjBrE;AACF;AACA;AACA;AACA;AACA;EACEqD,kBAAkB,EAAEvK,SAAS,CAACkH,IA3jBuC;;EA4jBrE;AACF;AACA;AACA;AACA;AACA;EACEsD,mBAAmB,EAAExK,SAAS,CAACkH,IAlkBsC;;EAmkBrE;AACF;AACA;AACA;AACA;AACA;EACEuD,cAAc,EAAEzK,SAAS,CAACkH,IAzkB2C;;EA0kBrE;AACF;AACA;AACA;AACA;EACEwD,6BAA6B,EAAE1K,SAAS,CAACkH,IA/kB4B;;EAglBrE;AACF;AACA;AACA;AACA;AACA;EACEyD,mBAAmB,EAAE3K,SAAS,CAACkH,IAtlBsC;;EAulBrE;AACF;AACA;AACA;EACE0D,eAAe,EAAE5K,SAAS,CAACkH,IA3lB0C;;EA4lBrE;AACF;AACA;AACA;AACA;EACE2D,iCAAiC,EAAE7K,SAAS,CAACkH,IAjmBwB;;EAkmBrE;AACF;AACA;AACA;EACE4D,wBAAwB,EAAE9K,SAAS,CAACkH,IAtmBiC;;EAumBrE;AACF;AACA;AACA;AACA;AACA;EACE6D,WAAW,EAAE/K,SAAS,CAACkH,IA7mB8C;;EA8mBrE;AACF;AACA;AACA;AACA;EACE8D,mBAAmB,EAAEhL,SAAS,CAACkH,IAnnBsC;;EAonBrE;AACF;AACA;AACA;AACA;AACA;EACE+D,WAAW,EAAEjL,SAAS,CAACkH,IA1nB8C;;EA2nBrE;AACF;AACA;AACA;AACA;AACA;EACEgE,UAAU,EAAElL,SAAS,CAACkH,IAjoB+C;;EAkoBrE;AACF;AACA;AACA;EACEiE,sBAAsB,EAAEnL,SAAS,CAACkH,IAtoBmC;;EAuoBrE;AACF;AACA;AACA;AACA;EACEkE,uBAAuB,EAAEpL,SAAS,CAACkH,IA5oBkC;;EA6oBrE;AACF;AACA;AACA;AACA;EACEmE,qBAAqB,EAAErL,SAAS,CAACkH,IAlpBoC;;EAmpBrE;AACF;AACA;AACA;AACA;AACA;EACEoE,sBAAsB,EAAEtL,SAAS,CAACkH,IAzpBmC;;EA0pBrE;AACF;AACA;AACA;AACA;AACA;EACEqE,qBAAqB,EAAEvL,SAAS,CAACkH,IAhqBoC;;EAiqBrE;AACF;AACA;AACA;EACEsE,uBAAuB,EAAExL,SAAS,CAACkH,IArqBkC;;EAsqBrE;AACF;AACA;AACA;AACA;AACA;EACEuE,QAAQ,EAAEzL,SAAS,CAACkH,IA5qBiD;;EA6qBrE;AACF;AACA;AACA;AACA;AACA;AACA;EACEwE,UAAU,EAAE1L,SAAS,CAACkH,IAprB+C;;EAqrBrE;AACF;AACA;AACA;EACEyE,gBAAgB,EAAE3L,SAAS,CAACkH,IAzrByC;;EA0rBrE;AACF;AACA;AACA;AACA;AACA;EACE0E,gBAAgB,EAAE5L,SAAS,CAACkH,IAhsByC;;EAisBrE;AACF;AACA;AACA;AACA;EACE2E,cAAc,EAAE7L,SAAS,CAACkH,IAtsB2C;;EAusBrE;AACF;AACA;AACA;AACA;EACE4E,aAAa,EAAE9L,SAAS,CAACkH,IA5sB4C;;EA6sBrE;AACF;AACA;AACA;AACA;EACE6E,wBAAwB,EAAE/L,SAAS,CAACkH,IAltBiC;;EAmtBrE;AACF;AACA;AACA;AACA;EACE8E,qBAAqB,EAAEhM,SAAS,CAACkH,IAxtBoC;;EAytBrE;AACF;AACA;AACA;AACA;AACA;EACE+E,gBAAgB,EAAEjM,SAAS,CAACkH,IA/tByC;;EAguBrE;AACF;AACA;AACA;AACA;EACEgF,yBAAyB,EAAElM,SAAS,CAACkH,IAruBgC;;EAsuBrE;AACF;AACA;AACA;AACA;AACA;EACEiF,eAAe,EAAEnM,SAAS,CAACkH,IA5uB0C;;EA6uBrE;AACF;AACA;AACA;AACA;EACEkF,iBAAiB,EAAEpM,SAAS,CA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"},"metadata":{},"sourceType":"module"}