{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"slots\", \"slotProps\", \"InputProps\", \"inputProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport MuiTextField from '@mui/material/TextField';\nimport { useThemeProps } from '@mui/material/styles';\nimport { useSlotProps } from '@mui/base/utils';\nimport { refType } from '@mui/utils';\nimport { useClearableField } from '@mui/x-date-pickers/hooks';\nimport { convertFieldResponseIntoMuiTextFieldProps } from '@mui/x-date-pickers/internals';\nimport { PickersTextField } from '@mui/x-date-pickers/PickersTextField';\nimport { useSingleInputDateRangeField } from './useSingleInputDateRangeField';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * Demos:\n *\n * - [DateRangeField](http://mui.com/x/react-date-pickers/date-range-field/)\n * - [Fields](https://mui.com/x/react-date-pickers/fields/)\n *\n * API:\n *\n * - [SingleInputDateRangeField API](https://mui.com/x/api/single-input-date-range-field/)\n */\n\nconst SingleInputDateRangeField = /*#__PURE__*/React.forwardRef(function SingleInputDateRangeField(inProps, inRef) {\n  const themeProps = useThemeProps({\n    props: inProps,\n    name: 'MuiSingleInputDateRangeField'\n  });\n\n  const {\n    slots,\n    slotProps,\n    InputProps,\n    inputProps\n  } = themeProps,\n        other = _objectWithoutPropertiesLoose(themeProps, _excluded);\n\n  const ownerState = themeProps;\n  const TextField = slots?.textField ?? (inProps.enableAccessibleFieldDOMStructure ? PickersTextField : MuiTextField);\n  const textFieldProps = useSlotProps({\n    elementType: TextField,\n    externalSlotProps: slotProps?.textField,\n    externalForwardedProps: other,\n    ownerState,\n    additionalProps: {\n      ref: inRef\n    }\n  }); // TODO: Remove when mui/material-ui#35088 will be merged\n\n  textFieldProps.inputProps = _extends({}, inputProps, textFieldProps.inputProps);\n  textFieldProps.InputProps = _extends({}, InputProps, textFieldProps.InputProps);\n  const fieldResponse = useSingleInputDateRangeField(textFieldProps);\n  const convertedFieldResponse = convertFieldResponseIntoMuiTextFieldProps(fieldResponse);\n  const processedFieldProps = useClearableField(_extends({}, convertedFieldResponse, {\n    slots,\n    slotProps\n  }));\n  return /*#__PURE__*/_jsx(TextField, _extends({}, processedFieldProps));\n});\nSingleInputDateRangeField.fieldType = 'single-input';\nprocess.env.NODE_ENV !== \"production\" ? SingleInputDateRangeField.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the `input` element is focused during the first mount.\n   * @default false\n   */\n  autoFocus: PropTypes.bool,\n  className: PropTypes.string,\n\n  /**\n   * If `true`, a clear button will be shown in the field allowing value clearing.\n   * @default false\n   */\n  clearable: PropTypes.bool,\n\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'primary'\n   */\n  color: PropTypes.oneOf(['error', 'info', 'primary', 'secondary', 'success', 'warning']),\n  component: PropTypes.elementType,\n\n  /**\n   * String displayed between the start and the end dates.\n   * @default \"â€“\"\n   */\n  dateSeparator: PropTypes.string,\n\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.arrayOf(PropTypes.object),\n\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, disable values after the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * If `true`, disable values before the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  enableAccessibleFieldDOMStructure: PropTypes.bool,\n\n  /**\n   * If `true`, the component is displayed in focused state.\n   */\n  focused: PropTypes.bool,\n\n  /**\n   * Format of the date when rendered in the input(s).\n   */\n  format: PropTypes.string,\n\n  /**\n   * Density of the format when rendered in the input.\n   * Setting `formatDensity` to `\"spacious\"` will add a space before and after each `/`, `-` and `.` character.\n   * @default \"dense\"\n   */\n  formatDensity: PropTypes.oneOf(['dense', 'spacious']),\n\n  /**\n   * Props applied to the [`FormHelperText`](/material-ui/api/form-helper-text/) element.\n   */\n  FormHelperTextProps: PropTypes.object,\n\n  /**\n   * If `true`, the input will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The helper text content.\n   */\n  helperText: PropTypes.node,\n\n  /**\n   * If `true`, the label is hidden.\n   * This is used to increase density for a `FilledInput`.\n   * Be sure to add `aria-label` to the `input` element.\n   * @default false\n   */\n  hiddenLabel: PropTypes.bool,\n\n  /**\n   * The id of the `input` element.\n   * Use this prop to make `label` and `helperText` accessible for screen readers.\n   */\n  id: PropTypes.string,\n\n  /**\n   * Props applied to the [`InputLabel`](/material-ui/api/input-label/) element.\n   * Pointer events like `onClick` are enabled if and only if `shrink` is `true`.\n   */\n  InputLabelProps: PropTypes.object,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Props applied to the Input element.\n   * It will be a [`FilledInput`](/material-ui/api/filled-input/),\n   * [`OutlinedInput`](/material-ui/api/outlined-input/) or [`Input`](/material-ui/api/input/)\n   * component depending on the `variant` prop value.\n   */\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * The label content.\n   */\n  label: PropTypes.node,\n\n  /**\n   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.\n   * @default 'none'\n   */\n  margin: PropTypes.oneOf(['dense', 'none', 'normal']),\n\n  /**\n   * Maximal selectable date.\n   */\n  maxDate: PropTypes.object,\n\n  /**\n   * Minimal selectable date.\n   */\n  minDate: PropTypes.object,\n\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n  onBlur: PropTypes.func,\n\n  /**\n   * Callback fired when the value changes.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The new value.\n   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the clear button is clicked.\n   */\n  onClear: PropTypes.func,\n\n  /**\n   * Callback fired when the error associated to the current value changes.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TError} error The new error.\n   * @param {TValue} value The value associated to the error.\n   */\n  onError: PropTypes.func,\n  onFocus: PropTypes.func,\n\n  /**\n   * Callback fired when the selected sections change.\n   * @param {FieldSelectedSections} newValue The new selected sections.\n   */\n  onSelectedSectionsChange: PropTypes.func,\n\n  /**\n   * It prevents the user from changing the value of the field\n   * (not from interacting with the field).\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * The date used to generate a part of the new value that is not present in the format when both `value` and `defaultValue` are empty.\n   * For example, on time fields it will be used to determine the date to set.\n   * @default The closest valid date using the validation props, except callbacks such as `shouldDisableDate`. Value is rounded to the most granular section used.\n   */\n  referenceDate: PropTypes.object,\n\n  /**\n   * If `true`, the label is displayed as required and the `input` element is required.\n   * @default false\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The currently selected sections.\n   * This prop accepts four formats:\n   * 1. If a number is provided, the section at this index will be selected.\n   * 2. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.\n   * 3. If `\"all\"` is provided, all the sections will be selected.\n   * 4. If `null` is provided, no section will be selected.\n   * If not provided, the selected sections will be handled internally.\n   */\n  selectedSections: PropTypes.oneOfType([PropTypes.oneOf(['all', 'day', 'empty', 'hours', 'meridiem', 'minutes', 'month', 'seconds', 'weekDay', 'year']), PropTypes.number]),\n\n  /**\n   * Disable specific date.\n   *\n   * Warning: This function can be called multiple times (for example when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.\n   *\n   * @template TDate\n   * @param {TDate} day The date to test.\n   * @param {string} position The date to test, 'start' or 'end'.\n   * @returns {boolean} Returns `true` if the date should be disabled.\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\n   * If `true`, the format will respect the leading zeroes (e.g: on dayjs, the format `M/D/YYYY` will render `8/16/2018`)\n   * If `false`, the format will always add leading zeroes (e.g: on dayjs, the format `M/D/YYYY` will render `08/16/2018`)\n   *\n   * Warning nÂ°1: Luxon is not able to respect the leading zeroes when using macro tokens (e.g: \"DD\"), so `shouldRespectLeadingZeros={true}` might lead to inconsistencies when using `AdapterLuxon`.\n   *\n   * Warning nÂ°2: When `shouldRespectLeadingZeros={true}`, the field will add an invisible character on the sections containing a single digit to make sure `onChange` is fired.\n   * If you need to get the clean value from the input, you can remove this character using `input.value.replace(/\\u200e/g, '')`.\n   *\n   * Warning nÂ°3: When used in strict mode, dayjs and moment require to respect the leading zeros.\n   * This mean that when using `shouldRespectLeadingZeros={false}`, if you retrieve the value directly from the input (not listening to `onChange`) and your format contains tokens without leading zeros, the value will not be parsed by your library.\n   *\n   * @default false\n   */\n  shouldRespectLeadingZeros: PropTypes.bool,\n\n  /**\n   * The size of the component.\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n\n  /**\n   * Overridable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object,\n  style: PropTypes.object,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * Choose which timezone to use for the value.\n   * Example: \"default\", \"system\", \"UTC\", \"America/New_York\".\n   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.\n   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.\n   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.\n   */\n  timezone: PropTypes.string,\n\n  /**\n   * The ref object used to imperatively interact with the field.\n   */\n  unstableFieldRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n\n  /**\n   * The selected value.\n   * Used when the component is controlled.\n   */\n  value: PropTypes.arrayOf(PropTypes.object),\n\n  /**\n   * The variant to use.\n   * @default 'outlined'\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport { SingleInputDateRangeField };","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","MuiTextField","useThemeProps","useSlotProps","refType","useClearableField","convertFieldResponseIntoMuiTextFieldProps","PickersTextField","useSingleInputDateRangeField","jsx","_jsx","SingleInputDateRangeField","forwardRef","inProps","inRef","themeProps","props","name","slots","slotProps","InputProps","inputProps","other","ownerState","TextField","textField","enableAccessibleFieldDOMStructure","textFieldProps","elementType","externalSlotProps","externalForwardedProps","additionalProps","ref","fieldResponse","convertedFieldResponse","processedFieldProps","fieldType","process","env","NODE_ENV","propTypes","autoFocus","bool","className","string","clearable","color","oneOf","component","dateSeparator","defaultValue","arrayOf","object","disabled","disableFuture","disablePast","focused","format","formatDensity","FormHelperTextProps","fullWidth","helperText","node","hiddenLabel","id","InputLabelProps","inputRef","label","margin","maxDate","minDate","onBlur","func","onChange","onClear","onError","onFocus","onSelectedSectionsChange","readOnly","referenceDate","required","selectedSections","oneOfType","number","shouldDisableDate","shouldRespectLeadingZeros","size","style","sx","timezone","unstableFieldRef","value","variant"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/@mui/x-date-pickers-pro/SingleInputDateRangeField/SingleInputDateRangeField.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"slots\", \"slotProps\", \"InputProps\", \"inputProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport MuiTextField from '@mui/material/TextField';\nimport { useThemeProps } from '@mui/material/styles';\nimport { useSlotProps } from '@mui/base/utils';\nimport { refType } from '@mui/utils';\nimport { useClearableField } from '@mui/x-date-pickers/hooks';\nimport { convertFieldResponseIntoMuiTextFieldProps } from '@mui/x-date-pickers/internals';\nimport { PickersTextField } from '@mui/x-date-pickers/PickersTextField';\nimport { useSingleInputDateRangeField } from './useSingleInputDateRangeField';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * Demos:\n *\n * - [DateRangeField](http://mui.com/x/react-date-pickers/date-range-field/)\n * - [Fields](https://mui.com/x/react-date-pickers/fields/)\n *\n * API:\n *\n * - [SingleInputDateRangeField API](https://mui.com/x/api/single-input-date-range-field/)\n */\nconst SingleInputDateRangeField = /*#__PURE__*/React.forwardRef(function SingleInputDateRangeField(inProps, inRef) {\n  const themeProps = useThemeProps({\n    props: inProps,\n    name: 'MuiSingleInputDateRangeField'\n  });\n  const {\n      slots,\n      slotProps,\n      InputProps,\n      inputProps\n    } = themeProps,\n    other = _objectWithoutPropertiesLoose(themeProps, _excluded);\n  const ownerState = themeProps;\n  const TextField = slots?.textField ?? (inProps.enableAccessibleFieldDOMStructure ? PickersTextField : MuiTextField);\n  const textFieldProps = useSlotProps({\n    elementType: TextField,\n    externalSlotProps: slotProps?.textField,\n    externalForwardedProps: other,\n    ownerState,\n    additionalProps: {\n      ref: inRef\n    }\n  });\n\n  // TODO: Remove when mui/material-ui#35088 will be merged\n  textFieldProps.inputProps = _extends({}, inputProps, textFieldProps.inputProps);\n  textFieldProps.InputProps = _extends({}, InputProps, textFieldProps.InputProps);\n  const fieldResponse = useSingleInputDateRangeField(textFieldProps);\n  const convertedFieldResponse = convertFieldResponseIntoMuiTextFieldProps(fieldResponse);\n  const processedFieldProps = useClearableField(_extends({}, convertedFieldResponse, {\n    slots,\n    slotProps\n  }));\n  return /*#__PURE__*/_jsx(TextField, _extends({}, processedFieldProps));\n});\nSingleInputDateRangeField.fieldType = 'single-input';\nprocess.env.NODE_ENV !== \"production\" ? SingleInputDateRangeField.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * If `true`, the `input` element is focused during the first mount.\n   * @default false\n   */\n  autoFocus: PropTypes.bool,\n  className: PropTypes.string,\n  /**\n   * If `true`, a clear button will be shown in the field allowing value clearing.\n   * @default false\n   */\n  clearable: PropTypes.bool,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'primary'\n   */\n  color: PropTypes.oneOf(['error', 'info', 'primary', 'secondary', 'success', 'warning']),\n  component: PropTypes.elementType,\n  /**\n   * String displayed between the start and the end dates.\n   * @default \"â€“\"\n   */\n  dateSeparator: PropTypes.string,\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.arrayOf(PropTypes.object),\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, disable values after the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n  /**\n   * If `true`, disable values before the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n  /**\n   * @default false\n   */\n  enableAccessibleFieldDOMStructure: PropTypes.bool,\n  /**\n   * If `true`, the component is displayed in focused state.\n   */\n  focused: PropTypes.bool,\n  /**\n   * Format of the date when rendered in the input(s).\n   */\n  format: PropTypes.string,\n  /**\n   * Density of the format when rendered in the input.\n   * Setting `formatDensity` to `\"spacious\"` will add a space before and after each `/`, `-` and `.` character.\n   * @default \"dense\"\n   */\n  formatDensity: PropTypes.oneOf(['dense', 'spacious']),\n  /**\n   * Props applied to the [`FormHelperText`](/material-ui/api/form-helper-text/) element.\n   */\n  FormHelperTextProps: PropTypes.object,\n  /**\n   * If `true`, the input will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * The helper text content.\n   */\n  helperText: PropTypes.node,\n  /**\n   * If `true`, the label is hidden.\n   * This is used to increase density for a `FilledInput`.\n   * Be sure to add `aria-label` to the `input` element.\n   * @default false\n   */\n  hiddenLabel: PropTypes.bool,\n  /**\n   * The id of the `input` element.\n   * Use this prop to make `label` and `helperText` accessible for screen readers.\n   */\n  id: PropTypes.string,\n  /**\n   * Props applied to the [`InputLabel`](/material-ui/api/input-label/) element.\n   * Pointer events like `onClick` are enabled if and only if `shrink` is `true`.\n   */\n  InputLabelProps: PropTypes.object,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Props applied to the Input element.\n   * It will be a [`FilledInput`](/material-ui/api/filled-input/),\n   * [`OutlinedInput`](/material-ui/api/outlined-input/) or [`Input`](/material-ui/api/input/)\n   * component depending on the `variant` prop value.\n   */\n  InputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * The label content.\n   */\n  label: PropTypes.node,\n  /**\n   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.\n   * @default 'none'\n   */\n  margin: PropTypes.oneOf(['dense', 'none', 'normal']),\n  /**\n   * Maximal selectable date.\n   */\n  maxDate: PropTypes.object,\n  /**\n   * Minimal selectable date.\n   */\n  minDate: PropTypes.object,\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n  onBlur: PropTypes.func,\n  /**\n   * Callback fired when the value changes.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The new value.\n   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the clear button is clicked.\n   */\n  onClear: PropTypes.func,\n  /**\n   * Callback fired when the error associated to the current value changes.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TError} error The new error.\n   * @param {TValue} value The value associated to the error.\n   */\n  onError: PropTypes.func,\n  onFocus: PropTypes.func,\n  /**\n   * Callback fired when the selected sections change.\n   * @param {FieldSelectedSections} newValue The new selected sections.\n   */\n  onSelectedSectionsChange: PropTypes.func,\n  /**\n   * It prevents the user from changing the value of the field\n   * (not from interacting with the field).\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * The date used to generate a part of the new value that is not present in the format when both `value` and `defaultValue` are empty.\n   * For example, on time fields it will be used to determine the date to set.\n   * @default The closest valid date using the validation props, except callbacks such as `shouldDisableDate`. Value is rounded to the most granular section used.\n   */\n  referenceDate: PropTypes.object,\n  /**\n   * If `true`, the label is displayed as required and the `input` element is required.\n   * @default false\n   */\n  required: PropTypes.bool,\n  /**\n   * The currently selected sections.\n   * This prop accepts four formats:\n   * 1. If a number is provided, the section at this index will be selected.\n   * 2. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.\n   * 3. If `\"all\"` is provided, all the sections will be selected.\n   * 4. If `null` is provided, no section will be selected.\n   * If not provided, the selected sections will be handled internally.\n   */\n  selectedSections: PropTypes.oneOfType([PropTypes.oneOf(['all', 'day', 'empty', 'hours', 'meridiem', 'minutes', 'month', 'seconds', 'weekDay', 'year']), PropTypes.number]),\n  /**\n   * Disable specific date.\n   *\n   * Warning: This function can be called multiple times (for example when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.\n   *\n   * @template TDate\n   * @param {TDate} day The date to test.\n   * @param {string} position The date to test, 'start' or 'end'.\n   * @returns {boolean} Returns `true` if the date should be disabled.\n   */\n  shouldDisableDate: PropTypes.func,\n  /**\n   * If `true`, the format will respect the leading zeroes (e.g: on dayjs, the format `M/D/YYYY` will render `8/16/2018`)\n   * If `false`, the format will always add leading zeroes (e.g: on dayjs, the format `M/D/YYYY` will render `08/16/2018`)\n   *\n   * Warning nÂ°1: Luxon is not able to respect the leading zeroes when using macro tokens (e.g: \"DD\"), so `shouldRespectLeadingZeros={true}` might lead to inconsistencies when using `AdapterLuxon`.\n   *\n   * Warning nÂ°2: When `shouldRespectLeadingZeros={true}`, the field will add an invisible character on the sections containing a single digit to make sure `onChange` is fired.\n   * If you need to get the clean value from the input, you can remove this character using `input.value.replace(/\\u200e/g, '')`.\n   *\n   * Warning nÂ°3: When used in strict mode, dayjs and moment require to respect the leading zeros.\n   * This mean that when using `shouldRespectLeadingZeros={false}`, if you retrieve the value directly from the input (not listening to `onChange`) and your format contains tokens without leading zeros, the value will not be parsed by your library.\n   *\n   * @default false\n   */\n  shouldRespectLeadingZeros: PropTypes.bool,\n  /**\n   * The size of the component.\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n  /**\n   * Overridable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object,\n  style: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Choose which timezone to use for the value.\n   * Example: \"default\", \"system\", \"UTC\", \"America/New_York\".\n   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.\n   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.\n   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.\n   */\n  timezone: PropTypes.string,\n  /**\n   * The ref object used to imperatively interact with the field.\n   */\n  unstableFieldRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n  /**\n   * The selected value.\n   * Used when the component is controlled.\n   */\n  value: PropTypes.arrayOf(PropTypes.object),\n  /**\n   * The variant to use.\n   * @default 'outlined'\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport { SingleInputDateRangeField };"],"mappings":"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"},"metadata":{},"sourceType":"module"}