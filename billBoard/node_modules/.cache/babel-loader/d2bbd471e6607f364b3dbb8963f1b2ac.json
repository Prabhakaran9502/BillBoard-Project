{"ast":null,"code":"import { createSelector, createSelectorMemoized } from '../../../utils/createSelector';\nimport { EMPTY_PINNED_COLUMN_FIELDS } from './gridColumnsInterfaces';\nimport { gridThemeSelector } from '../../core/gridCoreSelector';\n/**\n * Get the columns state\n * @category Columns\n */\n\nexport const gridColumnsStateSelector = state => state.columns;\n/**\n * Get an array of column fields in the order rendered on screen.\n * @category Columns\n */\n\nexport const gridColumnFieldsSelector = createSelector(gridColumnsStateSelector, columnsState => columnsState.orderedFields);\n/**\n * Get the columns as a lookup (an object containing the field for keys and the definition for values).\n * @category Columns\n */\n\nexport const gridColumnLookupSelector = createSelector(gridColumnsStateSelector, columnsState => columnsState.lookup);\n/**\n * Get an array of column definitions in the order rendered on screen..\n * @category Columns\n */\n\nexport const gridColumnDefinitionsSelector = createSelectorMemoized(gridColumnFieldsSelector, gridColumnLookupSelector, (allFields, lookup) => allFields.map(field => lookup[field]));\n/**\n * Get the column visibility model, containing the visibility status of each column.\n * If a column is not registered in the model, it is visible.\n * @category Visible Columns\n */\n\nexport const gridColumnVisibilityModelSelector = createSelector(gridColumnsStateSelector, columnsState => columnsState.columnVisibilityModel);\n/**\n * Get the visible columns as a lookup (an object containing the field for keys and the definition for values).\n * @category Visible Columns\n */\n\nexport const gridVisibleColumnDefinitionsSelector = createSelectorMemoized(gridColumnDefinitionsSelector, gridColumnVisibilityModelSelector, (columns, columnVisibilityModel) => columns.filter(column => columnVisibilityModel[column.field] !== false));\n/**\n * Get the field of each visible column.\n * @category Visible Columns\n */\n\nexport const gridVisibleColumnFieldsSelector = createSelectorMemoized(gridVisibleColumnDefinitionsSelector, visibleColumns => visibleColumns.map(column => column.field));\n/**\n * Get the visible pinned columns model.\n * @category Visible Columns\n */\n\nexport const gridPinnedColumnsSelector = state => state.pinnedColumns;\n/**\n * Get the visible pinned columns.\n * @category Visible Columns\n */\n\nexport const gridVisiblePinnedColumnDefinitionsSelector = createSelectorMemoized(gridColumnsStateSelector, gridPinnedColumnsSelector, gridVisibleColumnFieldsSelector, gridThemeSelector, (columnsState, model, visibleColumnFields, theme) => {\n  const visiblePinnedFields = filterVisibleColumns(model, visibleColumnFields, theme.direction === 'rtl');\n  const visiblePinnedColumns = {\n    left: visiblePinnedFields.left.map(field => columnsState.lookup[field]),\n    right: visiblePinnedFields.right.map(field => columnsState.lookup[field])\n  };\n  return visiblePinnedColumns;\n});\n\nfunction filterVisibleColumns(pinnedColumns, columns, invert) {\n  if (!Array.isArray(pinnedColumns.left) && !Array.isArray(pinnedColumns.right)) {\n    return EMPTY_PINNED_COLUMN_FIELDS;\n  }\n\n  if (pinnedColumns.left?.length === 0 && pinnedColumns.right?.length === 0) {\n    return EMPTY_PINNED_COLUMN_FIELDS;\n  }\n\n  const filter = (newPinnedColumns, remainingColumns) => {\n    if (!Array.isArray(newPinnedColumns)) {\n      return [];\n    }\n\n    return newPinnedColumns.filter(field => remainingColumns.includes(field));\n  };\n\n  const leftPinnedColumns = filter(pinnedColumns.left, columns);\n  const columnsWithoutLeftPinnedColumns = columns.filter( // Filter out from the remaining columns those columns already pinned to the left\n  field => !leftPinnedColumns.includes(field));\n  const rightPinnedColumns = filter(pinnedColumns.right, columnsWithoutLeftPinnedColumns);\n\n  if (invert) {\n    return {\n      left: rightPinnedColumns,\n      right: leftPinnedColumns\n    };\n  }\n\n  return {\n    left: leftPinnedColumns,\n    right: rightPinnedColumns\n  };\n}\n/**\n * Get the left position in pixel of each visible columns relative to the left of the first column.\n * @category Visible Columns\n */\n\n\nexport const gridColumnPositionsSelector = createSelectorMemoized(gridVisibleColumnDefinitionsSelector, visibleColumns => {\n  const positions = [];\n  let currentPosition = 0;\n\n  for (let i = 0; i < visibleColumns.length; i += 1) {\n    positions.push(currentPosition);\n    currentPosition += visibleColumns[i].computedWidth;\n  }\n\n  return positions;\n});\n/**\n * Get the summed width of all the visible columns.\n * @category Visible Columns\n */\n\nexport const gridColumnsTotalWidthSelector = createSelector(gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector, (visibleColumns, positions) => {\n  const colCount = visibleColumns.length;\n\n  if (colCount === 0) {\n    return 0;\n  }\n\n  return positions[colCount - 1] + visibleColumns[colCount - 1].computedWidth;\n});\n/**\n * Get the filterable columns as an array.\n * @category Columns\n */\n\nexport const gridFilterableColumnDefinitionsSelector = createSelectorMemoized(gridColumnDefinitionsSelector, columns => columns.filter(col => col.filterable));\n/**\n * Get the filterable columns as a lookup (an object containing the field for keys and the definition for values).\n * @category Columns\n */\n\nexport const gridFilterableColumnLookupSelector = createSelectorMemoized(gridColumnDefinitionsSelector, columns => columns.reduce((acc, col) => {\n  if (col.filterable) {\n    acc[col.field] = col;\n  }\n\n  return acc;\n}, {}));\n/**\n * Checks if some column has a colSpan field.\n * @category Columns\n * @ignore - Do not document\n */\n\nexport const gridHasColSpanSelector = createSelectorMemoized(gridColumnDefinitionsSelector, columns => columns.some(column => column.colSpan !== undefined));","map":{"version":3,"names":["createSelector","createSelectorMemoized","EMPTY_PINNED_COLUMN_FIELDS","gridThemeSelector","gridColumnsStateSelector","state","columns","gridColumnFieldsSelector","columnsState","orderedFields","gridColumnLookupSelector","lookup","gridColumnDefinitionsSelector","allFields","map","field","gridColumnVisibilityModelSelector","columnVisibilityModel","gridVisibleColumnDefinitionsSelector","filter","column","gridVisibleColumnFieldsSelector","visibleColumns","gridPinnedColumnsSelector","pinnedColumns","gridVisiblePinnedColumnDefinitionsSelector","model","visibleColumnFields","theme","visiblePinnedFields","filterVisibleColumns","direction","visiblePinnedColumns","left","right","invert","Array","isArray","length","newPinnedColumns","remainingColumns","includes","leftPinnedColumns","columnsWithoutLeftPinnedColumns","rightPinnedColumns","gridColumnPositionsSelector","positions","currentPosition","i","push","computedWidth","gridColumnsTotalWidthSelector","colCount","gridFilterableColumnDefinitionsSelector","col","filterable","gridFilterableColumnLookupSelector","reduce","acc","gridHasColSpanSelector","some","colSpan","undefined"],"sources":["C:/Users/kb/node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsSelector.js"],"sourcesContent":["import { createSelector, createSelectorMemoized } from '../../../utils/createSelector';\nimport { EMPTY_PINNED_COLUMN_FIELDS } from './gridColumnsInterfaces';\nimport { gridThemeSelector } from '../../core/gridCoreSelector';\n\n/**\n * Get the columns state\n * @category Columns\n */\nexport const gridColumnsStateSelector = state => state.columns;\n\n/**\n * Get an array of column fields in the order rendered on screen.\n * @category Columns\n */\nexport const gridColumnFieldsSelector = createSelector(gridColumnsStateSelector, columnsState => columnsState.orderedFields);\n\n/**\n * Get the columns as a lookup (an object containing the field for keys and the definition for values).\n * @category Columns\n */\nexport const gridColumnLookupSelector = createSelector(gridColumnsStateSelector, columnsState => columnsState.lookup);\n\n/**\n * Get an array of column definitions in the order rendered on screen..\n * @category Columns\n */\nexport const gridColumnDefinitionsSelector = createSelectorMemoized(gridColumnFieldsSelector, gridColumnLookupSelector, (allFields, lookup) => allFields.map(field => lookup[field]));\n\n/**\n * Get the column visibility model, containing the visibility status of each column.\n * If a column is not registered in the model, it is visible.\n * @category Visible Columns\n */\nexport const gridColumnVisibilityModelSelector = createSelector(gridColumnsStateSelector, columnsState => columnsState.columnVisibilityModel);\n\n/**\n * Get the visible columns as a lookup (an object containing the field for keys and the definition for values).\n * @category Visible Columns\n */\nexport const gridVisibleColumnDefinitionsSelector = createSelectorMemoized(gridColumnDefinitionsSelector, gridColumnVisibilityModelSelector, (columns, columnVisibilityModel) => columns.filter(column => columnVisibilityModel[column.field] !== false));\n\n/**\n * Get the field of each visible column.\n * @category Visible Columns\n */\nexport const gridVisibleColumnFieldsSelector = createSelectorMemoized(gridVisibleColumnDefinitionsSelector, visibleColumns => visibleColumns.map(column => column.field));\n\n/**\n * Get the visible pinned columns model.\n * @category Visible Columns\n */\nexport const gridPinnedColumnsSelector = state => state.pinnedColumns;\n\n/**\n * Get the visible pinned columns.\n * @category Visible Columns\n */\nexport const gridVisiblePinnedColumnDefinitionsSelector = createSelectorMemoized(gridColumnsStateSelector, gridPinnedColumnsSelector, gridVisibleColumnFieldsSelector, gridThemeSelector, (columnsState, model, visibleColumnFields, theme) => {\n  const visiblePinnedFields = filterVisibleColumns(model, visibleColumnFields, theme.direction === 'rtl');\n  const visiblePinnedColumns = {\n    left: visiblePinnedFields.left.map(field => columnsState.lookup[field]),\n    right: visiblePinnedFields.right.map(field => columnsState.lookup[field])\n  };\n  return visiblePinnedColumns;\n});\nfunction filterVisibleColumns(pinnedColumns, columns, invert) {\n  if (!Array.isArray(pinnedColumns.left) && !Array.isArray(pinnedColumns.right)) {\n    return EMPTY_PINNED_COLUMN_FIELDS;\n  }\n  if (pinnedColumns.left?.length === 0 && pinnedColumns.right?.length === 0) {\n    return EMPTY_PINNED_COLUMN_FIELDS;\n  }\n  const filter = (newPinnedColumns, remainingColumns) => {\n    if (!Array.isArray(newPinnedColumns)) {\n      return [];\n    }\n    return newPinnedColumns.filter(field => remainingColumns.includes(field));\n  };\n  const leftPinnedColumns = filter(pinnedColumns.left, columns);\n  const columnsWithoutLeftPinnedColumns = columns.filter(\n  // Filter out from the remaining columns those columns already pinned to the left\n  field => !leftPinnedColumns.includes(field));\n  const rightPinnedColumns = filter(pinnedColumns.right, columnsWithoutLeftPinnedColumns);\n  if (invert) {\n    return {\n      left: rightPinnedColumns,\n      right: leftPinnedColumns\n    };\n  }\n  return {\n    left: leftPinnedColumns,\n    right: rightPinnedColumns\n  };\n}\n\n/**\n * Get the left position in pixel of each visible columns relative to the left of the first column.\n * @category Visible Columns\n */\nexport const gridColumnPositionsSelector = createSelectorMemoized(gridVisibleColumnDefinitionsSelector, visibleColumns => {\n  const positions = [];\n  let currentPosition = 0;\n  for (let i = 0; i < visibleColumns.length; i += 1) {\n    positions.push(currentPosition);\n    currentPosition += visibleColumns[i].computedWidth;\n  }\n  return positions;\n});\n\n/**\n * Get the summed width of all the visible columns.\n * @category Visible Columns\n */\nexport const gridColumnsTotalWidthSelector = createSelector(gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector, (visibleColumns, positions) => {\n  const colCount = visibleColumns.length;\n  if (colCount === 0) {\n    return 0;\n  }\n  return positions[colCount - 1] + visibleColumns[colCount - 1].computedWidth;\n});\n\n/**\n * Get the filterable columns as an array.\n * @category Columns\n */\nexport const gridFilterableColumnDefinitionsSelector = createSelectorMemoized(gridColumnDefinitionsSelector, columns => columns.filter(col => col.filterable));\n\n/**\n * Get the filterable columns as a lookup (an object containing the field for keys and the definition for values).\n * @category Columns\n */\nexport const gridFilterableColumnLookupSelector = createSelectorMemoized(gridColumnDefinitionsSelector, columns => columns.reduce((acc, col) => {\n  if (col.filterable) {\n    acc[col.field] = col;\n  }\n  return acc;\n}, {}));\n\n/**\n * Checks if some column has a colSpan field.\n * @category Columns\n * @ignore - Do not document\n */\nexport const gridHasColSpanSelector = createSelectorMemoized(gridColumnDefinitionsSelector, columns => columns.some(column => column.colSpan !== undefined));"],"mappings":"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"},"metadata":{},"sourceType":"module"}