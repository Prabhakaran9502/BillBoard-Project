{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { extractValidationProps } from '@mui/x-date-pickers/internals';\nimport { resolveComponentProps } from '@mui/base/utils';\nimport { refType } from '@mui/utils';\nimport { rangeValueManager } from '../internals/utils/valueManagers';\nimport { useDateRangePickerDefaultizedProps } from '../DateRangePicker/shared';\nimport { renderDateRangeViewCalendar } from '../dateRangeViewRenderers';\nimport { MultiInputDateRangeField } from '../MultiInputDateRangeField';\nimport { useDesktopRangePicker } from '../internals/hooks/useDesktopRangePicker';\nimport { validateDateRange } from '../internals/utils/validation/validateDateRange';\n/**\n * Demos:\n *\n * - [DateRangePicker](https://mui.com/x/react-date-pickers/date-range-picker/)\n * - [Validation](https://mui.com/x/react-date-pickers/validation/)\n *\n * API:\n *\n * - [DesktopDateRangePicker API](https://mui.com/x/api/date-pickers/desktop-date-range-picker/)\n */\n\nconst DesktopDateRangePicker = /*#__PURE__*/React.forwardRef(function DesktopDateRangePicker(inProps, ref) {\n  // Props with the default values common to all date time pickers\n  const defaultizedProps = useDateRangePickerDefaultizedProps(inProps, 'MuiDesktopDateRangePicker');\n\n  const viewRenderers = _extends({\n    day: renderDateRangeViewCalendar\n  }, defaultizedProps.viewRenderers);\n\n  const props = _extends({}, defaultizedProps, {\n    viewRenderers,\n    calendars: defaultizedProps.calendars ?? 2,\n    views: ['day'],\n    openTo: 'day',\n    slots: _extends({\n      field: MultiInputDateRangeField\n    }, defaultizedProps.slots),\n    slotProps: _extends({}, defaultizedProps.slotProps, {\n      field: ownerState => _extends({}, resolveComponentProps(defaultizedProps.slotProps?.field, ownerState), extractValidationProps(defaultizedProps), {\n        ref\n      }),\n      toolbar: _extends({\n        hidden: true\n      }, defaultizedProps.slotProps?.toolbar)\n    })\n  });\n\n  const {\n    renderPicker\n  } = useDesktopRangePicker({\n    props,\n    valueManager: rangeValueManager,\n    valueType: 'date',\n    validator: validateDateRange\n  });\n  return renderPicker();\n});\nDesktopDateRangePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the main element is focused during the first mount.\n   * This main element is:\n   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).\n   * - the `input` element if there is a field rendered.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * The number of calendars to render on **desktop**.\n   * @default 2\n   */\n  calendars: PropTypes.oneOf([1, 2, 3]),\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the popover or modal will close after submitting the full date.\n   * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  closeOnSelect: PropTypes.bool,\n\n  /**\n   * Position the current month is rendered in.\n   * @default 1\n   */\n  currentMonthCalendarPosition: PropTypes.oneOf([1, 2, 3]),\n\n  /**\n   * Formats the day of week displayed in the calendar header.\n   * @param {TDate} date The date of the day of week provided by the adapter.\n   * @returns {string} The name to display.\n   * @default (date: TDate) => adapter.format(date, 'weekdayShort').charAt(0).toUpperCase()\n   */\n  dayOfWeekFormatter: PropTypes.func,\n\n  /**\n   * The initial position in the edited date range.\n   * Used when the component is not controlled.\n   * @default 'start'\n   */\n  defaultRangePosition: PropTypes.oneOf(['end', 'start']),\n\n  /**\n   * The default value.\n   * Used when the component is not controlled.\n   */\n  defaultValue: PropTypes.arrayOf(PropTypes.object),\n\n  /**\n   * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.\n   * @default false\n   */\n  disableAutoMonthSwitching: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, editing dates by dragging is disabled.\n   * @default false\n   */\n  disableDragEditing: PropTypes.bool,\n\n  /**\n   * If `true`, disable values after the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * If `true`, today's date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\n   * If `true`, the open picker button will not be rendered (renders only the field).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * If `true`, disable values before the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * If `true`, the week number will be display in the calendar.\n   */\n  displayWeekNumber: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  enableAccessibleFieldDOMStructure: PropTypes.any,\n\n  /**\n   * The day view will show as many weeks as needed after the end of the current month to match this value.\n   * Put it to 6 to have a fixed number of weeks in Gregorian calendars\n   */\n  fixedWeekNumber: PropTypes.number,\n\n  /**\n   * Format of the date when rendered in the input(s).\n   * Defaults to localized format based on the used `views`.\n   */\n  format: PropTypes.string,\n\n  /**\n   * Density of the format when rendered in the input.\n   * Setting `formatDensity` to `\"spacious\"` will add a space before and after each `/`, `-` and `.` character.\n   * @default \"dense\"\n   */\n  formatDensity: PropTypes.oneOf(['dense', 'spacious']),\n\n  /**\n   * Pass a ref to the `input` element.\n   * Ignored if the field has several inputs.\n   */\n  inputRef: refType,\n\n  /**\n   * The label content.\n   * Ignored if the field has several inputs.\n   */\n  label: PropTypes.node,\n\n  /**\n   * If `true`, calls `renderLoading` instead of rendering the day calendar.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Locale for components texts.\n   * Allows overriding texts coming from `LocalizationProvider` and `theme`.\n   */\n  localeText: PropTypes.object,\n\n  /**\n   * Maximal selectable date.\n   */\n  maxDate: PropTypes.object,\n\n  /**\n   * Minimal selectable date.\n   */\n  minDate: PropTypes.object,\n\n  /**\n   * Name attribute used by the `input` element in the Field.\n   * Ignored if the field has several inputs.\n   */\n  name: PropTypes.string,\n\n  /**\n   * Callback fired when the value is accepted.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The value that was just accepted.\n   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value changes.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The new value.\n   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see `open`).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the error associated to the current value changes.\n   * If the error has a non-null value, then the `TextField` will be rendered in `error` state.\n   *\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TError} error The new error describing why the current value is not valid.\n   * @param {TValue} value The value associated to the error.\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback fired on month change.\n   * @template TDate\n   * @param {TDate} month The new month.\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see `open`).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Callback fired when the range position changes.\n   * @param {RangePosition} rangePosition The new range position.\n   */\n  onRangePositionChange: PropTypes.func,\n\n  /**\n   * Callback fired when the selected sections change.\n   * @param {FieldSelectedSections} newValue The new selected sections.\n   */\n  onSelectedSectionsChange: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   * @default false\n   */\n  open: PropTypes.bool,\n\n  /**\n   * The position in the currently edited date range.\n   * Used when the component position is controlled.\n   */\n  rangePosition: PropTypes.oneOf(['end', 'start']),\n  readOnly: PropTypes.bool,\n\n  /**\n   * If `true`, disable heavy animations.\n   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * The date used to generate the new value when both `value` and `defaultValue` are empty.\n   * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.\n   */\n  referenceDate: PropTypes.object,\n\n  /**\n   * Component rendered on the \"day\" view when `props.loading` is true.\n   * @returns {React.ReactNode} The node to render when loading.\n   * @default () => \"...\"\n   */\n  renderLoading: PropTypes.func,\n\n  /**\n   * The currently selected sections.\n   * This prop accepts four formats:\n   * 1. If a number is provided, the section at this index will be selected.\n   * 2. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.\n   * 3. If `\"all\"` is provided, all the sections will be selected.\n   * 4. If `null` is provided, no section will be selected.\n   * If not provided, the selected sections will be handled internally.\n   */\n  selectedSections: PropTypes.oneOfType([PropTypes.oneOf(['all', 'day', 'empty', 'hours', 'meridiem', 'minutes', 'month', 'seconds', 'weekDay', 'year']), PropTypes.number]),\n\n  /**\n   * Disable specific date.\n   *\n   * Warning: This function can be called multiple times (for example when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.\n   *\n   * @template TDate\n   * @param {TDate} day The date to test.\n   * @param {string} position The date to test, 'start' or 'end'.\n   * @returns {boolean} Returns `true` if the date should be disabled.\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\n   * If `true`, days outside the current month are rendered:\n   *\n   * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.\n   *\n   * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.\n   *\n   * - ignored if `calendars` equals more than `1` on range pickers.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n\n  /**\n   * Overridable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * Choose which timezone to use for the value.\n   * Example: \"default\", \"system\", \"UTC\", \"America/New_York\".\n   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.\n   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.\n   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.\n   */\n  timezone: PropTypes.string,\n\n  /**\n   * The selected value.\n   * Used when the component is controlled.\n   */\n  value: PropTypes.arrayOf(PropTypes.object),\n\n  /**\n   * Define custom view renderers for each section.\n   * If `null`, the section will only have field editing.\n   * If `undefined`, internally defined view will be used.\n   */\n  viewRenderers: PropTypes.shape({\n    day: PropTypes.func\n  })\n};\nexport { DesktopDateRangePicker };","map":{"version":3,"names":["_extends","React","PropTypes","extractValidationProps","resolveComponentProps","refType","rangeValueManager","useDateRangePickerDefaultizedProps","renderDateRangeViewCalendar","MultiInputDateRangeField","useDesktopRangePicker","validateDateRange","DesktopDateRangePicker","forwardRef","inProps","ref","defaultizedProps","viewRenderers","day","props","calendars","views","openTo","slots","field","slotProps","ownerState","toolbar","hidden","renderPicker","valueManager","valueType","validator","propTypes","autoFocus","bool","oneOf","className","string","closeOnSelect","currentMonthCalendarPosition","dayOfWeekFormatter","func","defaultRangePosition","defaultValue","arrayOf","object","disableAutoMonthSwitching","disabled","disableDragEditing","disableFuture","disableHighlightToday","disableOpenPicker","disablePast","displayWeekNumber","enableAccessibleFieldDOMStructure","any","fixedWeekNumber","number","format","formatDensity","inputRef","label","node","loading","localeText","maxDate","minDate","name","onAccept","onChange","onClose","onError","onMonthChange","onOpen","onRangePositionChange","onSelectedSectionsChange","open","rangePosition","readOnly","reduceAnimations","referenceDate","renderLoading","selectedSections","oneOfType","shouldDisableDate","showDaysOutsideCurrentMonth","sx","timezone","value","shape"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/@mui/x-date-pickers-pro/DesktopDateRangePicker/DesktopDateRangePicker.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { extractValidationProps } from '@mui/x-date-pickers/internals';\nimport { resolveComponentProps } from '@mui/base/utils';\nimport { refType } from '@mui/utils';\nimport { rangeValueManager } from '../internals/utils/valueManagers';\nimport { useDateRangePickerDefaultizedProps } from '../DateRangePicker/shared';\nimport { renderDateRangeViewCalendar } from '../dateRangeViewRenderers';\nimport { MultiInputDateRangeField } from '../MultiInputDateRangeField';\nimport { useDesktopRangePicker } from '../internals/hooks/useDesktopRangePicker';\nimport { validateDateRange } from '../internals/utils/validation/validateDateRange';\n/**\n * Demos:\n *\n * - [DateRangePicker](https://mui.com/x/react-date-pickers/date-range-picker/)\n * - [Validation](https://mui.com/x/react-date-pickers/validation/)\n *\n * API:\n *\n * - [DesktopDateRangePicker API](https://mui.com/x/api/date-pickers/desktop-date-range-picker/)\n */\nconst DesktopDateRangePicker = /*#__PURE__*/React.forwardRef(function DesktopDateRangePicker(inProps, ref) {\n  // Props with the default values common to all date time pickers\n  const defaultizedProps = useDateRangePickerDefaultizedProps(inProps, 'MuiDesktopDateRangePicker');\n  const viewRenderers = _extends({\n    day: renderDateRangeViewCalendar\n  }, defaultizedProps.viewRenderers);\n  const props = _extends({}, defaultizedProps, {\n    viewRenderers,\n    calendars: defaultizedProps.calendars ?? 2,\n    views: ['day'],\n    openTo: 'day',\n    slots: _extends({\n      field: MultiInputDateRangeField\n    }, defaultizedProps.slots),\n    slotProps: _extends({}, defaultizedProps.slotProps, {\n      field: ownerState => _extends({}, resolveComponentProps(defaultizedProps.slotProps?.field, ownerState), extractValidationProps(defaultizedProps), {\n        ref\n      }),\n      toolbar: _extends({\n        hidden: true\n      }, defaultizedProps.slotProps?.toolbar)\n    })\n  });\n  const {\n    renderPicker\n  } = useDesktopRangePicker({\n    props,\n    valueManager: rangeValueManager,\n    valueType: 'date',\n    validator: validateDateRange\n  });\n  return renderPicker();\n});\nDesktopDateRangePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * If `true`, the main element is focused during the first mount.\n   * This main element is:\n   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).\n   * - the `input` element if there is a field rendered.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * The number of calendars to render on **desktop**.\n   * @default 2\n   */\n  calendars: PropTypes.oneOf([1, 2, 3]),\n  className: PropTypes.string,\n  /**\n   * If `true`, the popover or modal will close after submitting the full date.\n   * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  closeOnSelect: PropTypes.bool,\n  /**\n   * Position the current month is rendered in.\n   * @default 1\n   */\n  currentMonthCalendarPosition: PropTypes.oneOf([1, 2, 3]),\n  /**\n   * Formats the day of week displayed in the calendar header.\n   * @param {TDate} date The date of the day of week provided by the adapter.\n   * @returns {string} The name to display.\n   * @default (date: TDate) => adapter.format(date, 'weekdayShort').charAt(0).toUpperCase()\n   */\n  dayOfWeekFormatter: PropTypes.func,\n  /**\n   * The initial position in the edited date range.\n   * Used when the component is not controlled.\n   * @default 'start'\n   */\n  defaultRangePosition: PropTypes.oneOf(['end', 'start']),\n  /**\n   * The default value.\n   * Used when the component is not controlled.\n   */\n  defaultValue: PropTypes.arrayOf(PropTypes.object),\n  /**\n   * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.\n   * @default false\n   */\n  disableAutoMonthSwitching: PropTypes.bool,\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, editing dates by dragging is disabled.\n   * @default false\n   */\n  disableDragEditing: PropTypes.bool,\n  /**\n   * If `true`, disable values after the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n  /**\n   * If `true`, today's date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n  /**\n   * If `true`, the open picker button will not be rendered (renders only the field).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n  /**\n   * If `true`, disable values before the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n  /**\n   * If `true`, the week number will be display in the calendar.\n   */\n  displayWeekNumber: PropTypes.bool,\n  /**\n   * @default false\n   */\n  enableAccessibleFieldDOMStructure: PropTypes.any,\n  /**\n   * The day view will show as many weeks as needed after the end of the current month to match this value.\n   * Put it to 6 to have a fixed number of weeks in Gregorian calendars\n   */\n  fixedWeekNumber: PropTypes.number,\n  /**\n   * Format of the date when rendered in the input(s).\n   * Defaults to localized format based on the used `views`.\n   */\n  format: PropTypes.string,\n  /**\n   * Density of the format when rendered in the input.\n   * Setting `formatDensity` to `\"spacious\"` will add a space before and after each `/`, `-` and `.` character.\n   * @default \"dense\"\n   */\n  formatDensity: PropTypes.oneOf(['dense', 'spacious']),\n  /**\n   * Pass a ref to the `input` element.\n   * Ignored if the field has several inputs.\n   */\n  inputRef: refType,\n  /**\n   * The label content.\n   * Ignored if the field has several inputs.\n   */\n  label: PropTypes.node,\n  /**\n   * If `true`, calls `renderLoading` instead of rendering the day calendar.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n  /**\n   * Locale for components texts.\n   * Allows overriding texts coming from `LocalizationProvider` and `theme`.\n   */\n  localeText: PropTypes.object,\n  /**\n   * Maximal selectable date.\n   */\n  maxDate: PropTypes.object,\n  /**\n   * Minimal selectable date.\n   */\n  minDate: PropTypes.object,\n  /**\n   * Name attribute used by the `input` element in the Field.\n   * Ignored if the field has several inputs.\n   */\n  name: PropTypes.string,\n  /**\n   * Callback fired when the value is accepted.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The value that was just accepted.\n   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.\n   */\n  onAccept: PropTypes.func,\n  /**\n   * Callback fired when the value changes.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The new value.\n   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see `open`).\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the error associated to the current value changes.\n   * If the error has a non-null value, then the `TextField` will be rendered in `error` state.\n   *\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TError} error The new error describing why the current value is not valid.\n   * @param {TValue} value The value associated to the error.\n   */\n  onError: PropTypes.func,\n  /**\n   * Callback fired on month change.\n   * @template TDate\n   * @param {TDate} month The new month.\n   */\n  onMonthChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see `open`).\n   */\n  onOpen: PropTypes.func,\n  /**\n   * Callback fired when the range position changes.\n   * @param {RangePosition} rangePosition The new range position.\n   */\n  onRangePositionChange: PropTypes.func,\n  /**\n   * Callback fired when the selected sections change.\n   * @param {FieldSelectedSections} newValue The new selected sections.\n   */\n  onSelectedSectionsChange: PropTypes.func,\n  /**\n   * Control the popup or dialog open state.\n   * @default false\n   */\n  open: PropTypes.bool,\n  /**\n   * The position in the currently edited date range.\n   * Used when the component position is controlled.\n   */\n  rangePosition: PropTypes.oneOf(['end', 'start']),\n  readOnly: PropTypes.bool,\n  /**\n   * If `true`, disable heavy animations.\n   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13\n   */\n  reduceAnimations: PropTypes.bool,\n  /**\n   * The date used to generate the new value when both `value` and `defaultValue` are empty.\n   * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.\n   */\n  referenceDate: PropTypes.object,\n  /**\n   * Component rendered on the \"day\" view when `props.loading` is true.\n   * @returns {React.ReactNode} The node to render when loading.\n   * @default () => \"...\"\n   */\n  renderLoading: PropTypes.func,\n  /**\n   * The currently selected sections.\n   * This prop accepts four formats:\n   * 1. If a number is provided, the section at this index will be selected.\n   * 2. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.\n   * 3. If `\"all\"` is provided, all the sections will be selected.\n   * 4. If `null` is provided, no section will be selected.\n   * If not provided, the selected sections will be handled internally.\n   */\n  selectedSections: PropTypes.oneOfType([PropTypes.oneOf(['all', 'day', 'empty', 'hours', 'meridiem', 'minutes', 'month', 'seconds', 'weekDay', 'year']), PropTypes.number]),\n  /**\n   * Disable specific date.\n   *\n   * Warning: This function can be called multiple times (for example when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.\n   *\n   * @template TDate\n   * @param {TDate} day The date to test.\n   * @param {string} position The date to test, 'start' or 'end'.\n   * @returns {boolean} Returns `true` if the date should be disabled.\n   */\n  shouldDisableDate: PropTypes.func,\n  /**\n   * If `true`, days outside the current month are rendered:\n   *\n   * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.\n   *\n   * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.\n   *\n   * - ignored if `calendars` equals more than `1` on range pickers.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n  /**\n   * Overridable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Choose which timezone to use for the value.\n   * Example: \"default\", \"system\", \"UTC\", \"America/New_York\".\n   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.\n   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.\n   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.\n   */\n  timezone: PropTypes.string,\n  /**\n   * The selected value.\n   * Used when the component is controlled.\n   */\n  value: PropTypes.arrayOf(PropTypes.object),\n  /**\n   * Define custom view renderers for each section.\n   * If `null`, the section will only have field editing.\n   * If `undefined`, internally defined view will be used.\n   */\n  viewRenderers: PropTypes.shape({\n    day: PropTypes.func\n  })\n};\nexport { DesktopDateRangePicker };"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,sBAAT,QAAuC,+BAAvC;AACA,SAASC,qBAAT,QAAsC,iBAAtC;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,iBAAT,QAAkC,kCAAlC;AACA,SAASC,kCAAT,QAAmD,2BAAnD;AACA,SAASC,2BAAT,QAA4C,2BAA5C;AACA,SAASC,wBAAT,QAAyC,6BAAzC;AACA,SAASC,qBAAT,QAAsC,0CAAtC;AACA,SAASC,iBAAT,QAAkC,iDAAlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,sBAAsB,GAAG,aAAaX,KAAK,CAACY,UAAN,CAAiB,SAASD,sBAAT,CAAgCE,OAAhC,EAAyCC,GAAzC,EAA8C;EACzG;EACA,MAAMC,gBAAgB,GAAGT,kCAAkC,CAACO,OAAD,EAAU,2BAAV,CAA3D;;EACA,MAAMG,aAAa,GAAGjB,QAAQ,CAAC;IAC7BkB,GAAG,EAAEV;EADwB,CAAD,EAE3BQ,gBAAgB,CAACC,aAFU,CAA9B;;EAGA,MAAME,KAAK,GAAGnB,QAAQ,CAAC,EAAD,EAAKgB,gBAAL,EAAuB;IAC3CC,aAD2C;IAE3CG,SAAS,EAAEJ,gBAAgB,CAACI,SAAjB,IAA8B,CAFE;IAG3CC,KAAK,EAAE,CAAC,KAAD,CAHoC;IAI3CC,MAAM,EAAE,KAJmC;IAK3CC,KAAK,EAAEvB,QAAQ,CAAC;MACdwB,KAAK,EAAEf;IADO,CAAD,EAEZO,gBAAgB,CAACO,KAFL,CAL4B;IAQ3CE,SAAS,EAAEzB,QAAQ,CAAC,EAAD,EAAKgB,gBAAgB,CAACS,SAAtB,EAAiC;MAClDD,KAAK,EAAEE,UAAU,IAAI1B,QAAQ,CAAC,EAAD,EAAKI,qBAAqB,CAACY,gBAAgB,CAACS,SAAjB,EAA4BD,KAA7B,EAAoCE,UAApC,CAA1B,EAA2EvB,sBAAsB,CAACa,gBAAD,CAAjG,EAAqH;QAChJD;MADgJ,CAArH,CADqB;MAIlDY,OAAO,EAAE3B,QAAQ,CAAC;QAChB4B,MAAM,EAAE;MADQ,CAAD,EAEdZ,gBAAgB,CAACS,SAAjB,EAA4BE,OAFd;IAJiC,CAAjC;EARwB,CAAvB,CAAtB;;EAiBA,MAAM;IACJE;EADI,IAEFnB,qBAAqB,CAAC;IACxBS,KADwB;IAExBW,YAAY,EAAExB,iBAFU;IAGxByB,SAAS,EAAE,MAHa;IAIxBC,SAAS,EAAErB;EAJa,CAAD,CAFzB;EAQA,OAAOkB,YAAY,EAAnB;AACD,CAhC2C,CAA5C;AAiCAjB,sBAAsB,CAACqB,SAAvB,GAAmC;EACjC;EACA;EACA;EACA;;EACA;AACF;AACA;AACA;AACA;AACA;EACEC,SAAS,EAAEhC,SAAS,CAACiC,IAXY;;EAYjC;AACF;AACA;AACA;EACEf,SAAS,EAAElB,SAAS,CAACkC,KAAV,CAAgB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAhB,CAhBsB;EAiBjCC,SAAS,EAAEnC,SAAS,CAACoC,MAjBY;;EAkBjC;AACF;AACA;AACA;EACEC,aAAa,EAAErC,SAAS,CAACiC,IAtBQ;;EAuBjC;AACF;AACA;AACA;EACEK,4BAA4B,EAAEtC,SAAS,CAACkC,KAAV,CAAgB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAhB,CA3BG;;EA4BjC;AACF;AACA;AACA;AACA;AACA;EACEK,kBAAkB,EAAEvC,SAAS,CAACwC,IAlCG;;EAmCjC;AACF;AACA;AACA;AACA;EACEC,oBAAoB,EAAEzC,SAAS,CAACkC,KAAV,CAAgB,CAAC,KAAD,EAAQ,OAAR,CAAhB,CAxCW;;EAyCjC;AACF;AACA;AACA;EACEQ,YAAY,EAAE1C,SAAS,CAAC2C,OAAV,CAAkB3C,SAAS,CAAC4C,MAA5B,CA7CmB;;EA8CjC;AACF;AACA;AACA;EACEC,yBAAyB,EAAE7C,SAAS,CAACiC,IAlDJ;;EAmDjC;AACF;AACA;AACA;EACEa,QAAQ,EAAE9C,SAAS,CAACiC,IAvDa;;EAwDjC;AACF;AACA;AACA;EACEc,kBAAkB,EAAE/C,SAAS,CAACiC,IA5DG;;EA6DjC;AACF;AACA;AACA;EACEe,aAAa,EAAEhD,SAAS,CAACiC,IAjEQ;;EAkEjC;AACF;AACA;AACA;EACEgB,qBAAqB,EAAEjD,SAAS,CAACiC,IAtEA;;EAuEjC;AACF;AACA;AACA;EACEiB,iBAAiB,EAAElD,SAAS,CAACiC,IA3EI;;EA4EjC;AACF;AACA;AACA;EACEkB,WAAW,EAAEnD,SAAS,CAACiC,IAhFU;;EAiFjC;AACF;AACA;EACEmB,iBAAiB,EAAEpD,SAAS,CAACiC,IApFI;;EAqFjC;AACF;AACA;EACEoB,iCAAiC,EAAErD,SAAS,CAACsD,GAxFZ;;EAyFjC;AACF;AACA;AACA;EACEC,eAAe,EAAEvD,SAAS,CAACwD,MA7FM;;EA8FjC;AACF;AACA;AACA;EACEC,MAAM,EAAEzD,SAAS,CAACoC,MAlGe;;EAmGjC;AACF;AACA;AACA;AACA;EACEsB,aAAa,EAAE1D,SAAS,CAACkC,KAAV,CAAgB,CAAC,OAAD,EAAU,UAAV,CAAhB,CAxGkB;;EAyGjC;AACF;AACA;AACA;EACEyB,QAAQ,EAAExD,OA7GuB;;EA8GjC;AACF;AACA;AACA;EACEyD,KAAK,EAAE5D,SAAS,CAAC6D,IAlHgB;;EAmHjC;AACF;AACA;AACA;AACA;EACEC,OAAO,EAAE9D,SAAS,CAACiC,IAxHc;;EAyHjC;AACF;AACA;AACA;EACE8B,UAAU,EAAE/D,SAAS,CAAC4C,MA7HW;;EA8HjC;AACF;AACA;EACEoB,OAAO,EAAEhE,SAAS,CAAC4C,MAjIc;;EAkIjC;AACF;AACA;EACEqB,OAAO,EAAEjE,SAAS,CAAC4C,MArIc;;EAsIjC;AACF;AACA;AACA;EACEsB,IAAI,EAAElE,SAAS,CAACoC,MA1IiB;;EA2IjC;AACF;AACA;AACA;AACA;AACA;AACA;EACE+B,QAAQ,EAAEnE,SAAS,CAACwC,IAlJa;;EAmJjC;AACF;AACA;AACA;AACA;AACA;AACA;EACE4B,QAAQ,EAAEpE,SAAS,CAACwC,IA1Ja;;EA2JjC;AACF;AACA;AACA;EACE6B,OAAO,EAAErE,SAAS,CAACwC,IA/Jc;;EAgKjC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE8B,OAAO,EAAEtE,SAAS,CAACwC,IAzKc;;EA0KjC;AACF;AACA;AACA;AACA;EACE+B,aAAa,EAAEvE,SAAS,CAACwC,IA/KQ;;EAgLjC;AACF;AACA;AACA;EACEgC,MAAM,EAAExE,SAAS,CAACwC,IApLe;;EAqLjC;AACF;AACA;AACA;EACEiC,qBAAqB,EAAEzE,SAAS,CAACwC,IAzLA;;EA0LjC;AACF;AACA;AACA;EACEkC,wBAAwB,EAAE1E,SAAS,CAACwC,IA9LH;;EA+LjC;AACF;AACA;AACA;EACEmC,IAAI,EAAE3E,SAAS,CAACiC,IAnMiB;;EAoMjC;AACF;AACA;AACA;EACE2C,aAAa,EAAE5E,SAAS,CAACkC,KAAV,CAAgB,CAAC,KAAD,EAAQ,OAAR,CAAhB,CAxMkB;EAyMjC2C,QAAQ,EAAE7E,SAAS,CAACiC,IAzMa;;EA0MjC;AACF;AACA;AACA;EACE6C,gBAAgB,EAAE9E,SAAS,CAACiC,IA9MK;;EA+MjC;AACF;AACA;AACA;EACE8C,aAAa,EAAE/E,SAAS,CAAC4C,MAnNQ;;EAoNjC;AACF;AACA;AACA;AACA;EACEoC,aAAa,EAAEhF,SAAS,CAACwC,IAzNQ;;EA0NjC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEyC,gBAAgB,EAAEjF,SAAS,CAACkF,SAAV,CAAoB,CAAClF,SAAS,CAACkC,KAAV,CAAgB,CAAC,KAAD,EAAQ,KAAR,EAAe,OAAf,EAAwB,OAAxB,EAAiC,UAAjC,EAA6C,SAA7C,EAAwD,OAAxD,EAAiE,SAAjE,EAA4E,SAA5E,EAAuF,MAAvF,CAAhB,CAAD,EAAkHlC,SAAS,CAACwD,MAA5H,CAApB,CAnOe;;EAoOjC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE2B,iBAAiB,EAAEnF,SAAS,CAACwC,IA9OI;;EA+OjC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE4C,2BAA2B,EAAEpF,SAAS,CAACiC,IAzPN;;EA0PjC;AACF;AACA;AACA;EACEV,SAAS,EAAEvB,SAAS,CAAC4C,MA9PY;;EA+PjC;AACF;AACA;AACA;EACEvB,KAAK,EAAErB,SAAS,CAAC4C,MAnQgB;;EAoQjC;AACF;AACA;EACEyC,EAAE,EAAErF,SAAS,CAACkF,SAAV,CAAoB,CAAClF,SAAS,CAAC2C,OAAV,CAAkB3C,SAAS,CAACkF,SAAV,CAAoB,CAAClF,SAAS,CAACwC,IAAX,EAAiBxC,SAAS,CAAC4C,MAA3B,EAAmC5C,SAAS,CAACiC,IAA7C,CAApB,CAAlB,CAAD,EAA6FjC,SAAS,CAACwC,IAAvG,EAA6GxC,SAAS,CAAC4C,MAAvH,CAApB,CAvQ6B;;EAwQjC;AACF;AACA;AACA;AACA;AACA;AACA;EACE0C,QAAQ,EAAEtF,SAAS,CAACoC,MA/Qa;;EAgRjC;AACF;AACA;AACA;EACEmD,KAAK,EAAEvF,SAAS,CAAC2C,OAAV,CAAkB3C,SAAS,CAAC4C,MAA5B,CApR0B;;EAqRjC;AACF;AACA;AACA;AACA;EACE7B,aAAa,EAAEf,SAAS,CAACwF,KAAV,CAAgB;IAC7BxE,GAAG,EAAEhB,SAAS,CAACwC;EADc,CAAhB;AA1RkB,CAAnC;AA8RA,SAAS9B,sBAAT"},"metadata":{},"sourceType":"module"}