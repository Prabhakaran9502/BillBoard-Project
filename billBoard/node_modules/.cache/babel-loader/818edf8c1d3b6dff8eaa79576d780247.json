{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridSelector, useGridApiEventHandler, useGridApiMethod, gridDataRowIdsSelector } from '@mui/x-data-grid';\nimport { useGridRegisterPipeProcessor } from '@mui/x-data-grid/internals';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from './gridDetailPanelToggleColDef';\nimport { gridDetailPanelExpandedRowIdsSelector, gridDetailPanelExpandedRowsContentCacheSelector, gridDetailPanelExpandedRowsHeightCacheSelector, gridDetailPanelRawHeightCacheSelector } from './gridDetailPanelSelector'; // FIXME: calling `api.updateDimensions()` here triggers a cycle where `updateDimensions` is\n// called 3 times when opening/closing a panel.\n\nexport const detailPanelStateInitializer = (state, props) => {\n  return _extends({}, state, {\n    detailPanel: {\n      heightCache: {},\n      expandedRowIds: props.detailPanelExpandedRowIds ?? props.initialState?.detailPanel?.expandedRowIds ?? []\n    }\n  });\n};\n\nfunction cacheContentAndHeight(apiRef, getDetailPanelContent, getDetailPanelHeight, previousHeightCache) {\n  if (typeof getDetailPanelContent !== 'function') {\n    return {};\n  } // TODO change to lazy approach using a Proxy\n  // only call getDetailPanelContent when asked for an id\n\n\n  const rowIds = gridDataRowIdsSelector(apiRef);\n  const contentCache = rowIds.reduce((acc, id) => {\n    const params = apiRef.current.getRowParams(id);\n    acc[id] = getDetailPanelContent(params);\n    return acc;\n  }, {});\n  const heightCache = rowIds.reduce((acc, id) => {\n    if (contentCache[id] == null) {\n      return acc;\n    }\n\n    const params = apiRef.current.getRowParams(id);\n    const height = getDetailPanelHeight(params);\n    const autoHeight = height === 'auto';\n    acc[id] = {\n      autoHeight,\n      height: autoHeight ? previousHeightCache[id]?.height : height\n    };\n    return acc;\n  }, {});\n  return {\n    contentCache,\n    heightCache\n  };\n}\n\nexport const useGridDetailPanel = (apiRef, props) => {\n  const expandedRowIds = useGridSelector(apiRef, gridDetailPanelExpandedRowIdsSelector);\n  const contentCache = useGridSelector(apiRef, gridDetailPanelExpandedRowsContentCacheSelector);\n  const handleCellClick = React.useCallback((params, event) => {\n    if (params.field !== GRID_DETAIL_PANEL_TOGGLE_FIELD || props.getDetailPanelContent == null) {\n      return;\n    }\n\n    const content = contentCache[params.id];\n\n    if (! /*#__PURE__*/React.isValidElement(content)) {\n      return;\n    } // Ignore if the user didn't click specifically in the \"i\" button\n\n\n    if (event.target === event.currentTarget) {\n      return;\n    }\n\n    apiRef.current.toggleDetailPanel(params.id);\n  }, [apiRef, contentCache, props.getDetailPanelContent]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (props.getDetailPanelContent == null) {\n      return;\n    }\n\n    if (params.field === GRID_DETAIL_PANEL_TOGGLE_FIELD && event.key === ' ') {\n      apiRef.current.toggleDetailPanel(params.id);\n    }\n  }, [apiRef, props.getDetailPanelContent]);\n  useGridApiEventHandler(apiRef, 'cellClick', handleCellClick);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n  apiRef.current.registerControlState({\n    stateId: 'detailPanels',\n    propModel: props.detailPanelExpandedRowIds,\n    propOnChange: props.onDetailPanelExpandedRowIdsChange,\n    stateSelector: gridDetailPanelExpandedRowIdsSelector,\n    changeEvent: 'detailPanelsExpandedRowIdsChange'\n  });\n  const toggleDetailPanel = React.useCallback(id => {\n    if (props.getDetailPanelContent == null) {\n      return;\n    }\n\n    const content = contentCache[id];\n\n    if (! /*#__PURE__*/React.isValidElement(content)) {\n      return;\n    }\n\n    const ids = apiRef.current.getExpandedDetailPanels();\n    apiRef.current.setExpandedDetailPanels(ids.includes(id) ? ids.filter(rowId => rowId !== id) : [...ids, id]);\n  }, [apiRef, contentCache, props.getDetailPanelContent]);\n  const getExpandedDetailPanels = React.useCallback(() => gridDetailPanelExpandedRowIdsSelector(apiRef.current.state), [apiRef]);\n  const setExpandedDetailPanels = React.useCallback(ids => {\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        detailPanel: _extends({}, state.detailPanel, {\n          expandedRowIds: ids\n        })\n      });\n    });\n    apiRef.current.updateDimensions();\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const storeDetailPanelHeight = React.useCallback((id, height) => {\n    const heightCache = gridDetailPanelRawHeightCacheSelector(apiRef.current.state);\n\n    if (!heightCache[id] || heightCache[id].height === height) {\n      return;\n    }\n\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        detailPanel: _extends({}, state.detailPanel, {\n          heightCache: _extends({}, heightCache, {\n            [id]: _extends({}, heightCache[id], {\n              height\n            })\n          })\n        })\n      });\n    });\n    apiRef.current.updateDimensions();\n    apiRef.current.requestPipeProcessorsApplication('rowHeight');\n  }, [apiRef]);\n  const detailPanelHasAutoHeight = React.useCallback(id => {\n    const heightCache = gridDetailPanelRawHeightCacheSelector(apiRef.current.state);\n    return heightCache[id] ? heightCache[id].autoHeight : false;\n  }, [apiRef]);\n  const detailPanelPubicApi = {\n    toggleDetailPanel,\n    getExpandedDetailPanels,\n    setExpandedDetailPanels\n  };\n  const detailPanelPrivateApi = {\n    storeDetailPanelHeight,\n    detailPanelHasAutoHeight\n  };\n  useGridApiMethod(apiRef, detailPanelPubicApi, 'public');\n  useGridApiMethod(apiRef, detailPanelPrivateApi, 'private');\n  React.useEffect(() => {\n    if (props.detailPanelExpandedRowIds) {\n      const currentModel = gridDetailPanelExpandedRowIdsSelector(apiRef.current.state);\n\n      if (currentModel !== props.detailPanelExpandedRowIds) {\n        apiRef.current.setExpandedDetailPanels(props.detailPanelExpandedRowIds);\n      }\n    }\n  }, [apiRef, props.detailPanelExpandedRowIds]);\n  const updateCachesAndForceUpdate = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        detailPanel: _extends({}, state.detailPanel, cacheContentAndHeight(apiRef, props.getDetailPanelContent, props.getDetailPanelHeight, state.detailPanel.heightCache))\n      });\n    });\n    apiRef.current.updateDimensions?.();\n    apiRef.current.forceUpdate();\n  }, [apiRef, props.getDetailPanelContent, props.getDetailPanelHeight]);\n  useGridApiEventHandler(apiRef, 'sortedRowsSet', updateCachesAndForceUpdate);\n  const previousGetDetailPanelContentProp = React.useRef();\n  const previousGetDetailPanelHeightProp = React.useRef();\n  const updateCachesIfNeeded = React.useCallback(() => {\n    if (props.getDetailPanelContent === previousGetDetailPanelContentProp.current && props.getDetailPanelHeight === previousGetDetailPanelHeightProp.current) {\n      return;\n    }\n\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        detailPanel: _extends({}, state.detailPanel, cacheContentAndHeight(apiRef, props.getDetailPanelContent, props.getDetailPanelHeight, state.detailPanel.heightCache))\n      });\n    });\n    apiRef.current.updateDimensions?.();\n    previousGetDetailPanelContentProp.current = props.getDetailPanelContent;\n    previousGetDetailPanelHeightProp.current = props.getDetailPanelHeight;\n  }, [apiRef, props.getDetailPanelContent, props.getDetailPanelHeight]);\n  const addDetailHeight = React.useCallback((initialValue, row) => {\n    if (!expandedRowIds || expandedRowIds.length === 0 || !expandedRowIds.includes(row.id)) {\n      initialValue.detail = 0;\n      return initialValue;\n    }\n\n    updateCachesIfNeeded();\n    const heightCache = gridDetailPanelExpandedRowsHeightCacheSelector(apiRef);\n    initialValue.detail = heightCache[row.id] ?? 0; // Fallback to zero because the cache might not be ready yet (for example page was changed)\n\n    return initialValue;\n  }, [apiRef, expandedRowIds, updateCachesIfNeeded]);\n  useGridRegisterPipeProcessor(apiRef, 'rowHeight', addDetailHeight);\n  const isFirstRender = React.useRef(true);\n\n  if (isFirstRender.current) {\n    isFirstRender.current = false;\n    updateCachesIfNeeded();\n  }\n};","map":{"version":3,"names":["_extends","React","useGridSelector","useGridApiEventHandler","useGridApiMethod","gridDataRowIdsSelector","useGridRegisterPipeProcessor","GRID_DETAIL_PANEL_TOGGLE_FIELD","gridDetailPanelExpandedRowIdsSelector","gridDetailPanelExpandedRowsContentCacheSelector","gridDetailPanelExpandedRowsHeightCacheSelector","gridDetailPanelRawHeightCacheSelector","detailPanelStateInitializer","state","props","detailPanel","heightCache","expandedRowIds","detailPanelExpandedRowIds","initialState","cacheContentAndHeight","apiRef","getDetailPanelContent","getDetailPanelHeight","previousHeightCache","rowIds","contentCache","reduce","acc","id","params","current","getRowParams","height","autoHeight","useGridDetailPanel","handleCellClick","useCallback","event","field","content","isValidElement","target","currentTarget","toggleDetailPanel","handleCellKeyDown","key","registerControlState","stateId","propModel","propOnChange","onDetailPanelExpandedRowIdsChange","stateSelector","changeEvent","ids","getExpandedDetailPanels","setExpandedDetailPanels","includes","filter","rowId","setState","updateDimensions","forceUpdate","storeDetailPanelHeight","requestPipeProcessorsApplication","detailPanelHasAutoHeight","detailPanelPubicApi","detailPanelPrivateApi","useEffect","currentModel","updateCachesAndForceUpdate","previousGetDetailPanelContentProp","useRef","previousGetDetailPanelHeightProp","updateCachesIfNeeded","addDetailHeight","initialValue","row","length","detail","isFirstRender"],"sources":["C:/Users/kb/node_modules/@mui/x-data-grid-pro/esm/hooks/features/detailPanel/useGridDetailPanel.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridSelector, useGridApiEventHandler, useGridApiMethod, gridDataRowIdsSelector } from '@mui/x-data-grid';\nimport { useGridRegisterPipeProcessor } from '@mui/x-data-grid/internals';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from './gridDetailPanelToggleColDef';\nimport { gridDetailPanelExpandedRowIdsSelector, gridDetailPanelExpandedRowsContentCacheSelector, gridDetailPanelExpandedRowsHeightCacheSelector, gridDetailPanelRawHeightCacheSelector } from './gridDetailPanelSelector';\n// FIXME: calling `api.updateDimensions()` here triggers a cycle where `updateDimensions` is\n// called 3 times when opening/closing a panel.\n\nexport const detailPanelStateInitializer = (state, props) => {\n  return _extends({}, state, {\n    detailPanel: {\n      heightCache: {},\n      expandedRowIds: props.detailPanelExpandedRowIds ?? props.initialState?.detailPanel?.expandedRowIds ?? []\n    }\n  });\n};\nfunction cacheContentAndHeight(apiRef, getDetailPanelContent, getDetailPanelHeight, previousHeightCache) {\n  if (typeof getDetailPanelContent !== 'function') {\n    return {};\n  }\n\n  // TODO change to lazy approach using a Proxy\n  // only call getDetailPanelContent when asked for an id\n  const rowIds = gridDataRowIdsSelector(apiRef);\n  const contentCache = rowIds.reduce((acc, id) => {\n    const params = apiRef.current.getRowParams(id);\n    acc[id] = getDetailPanelContent(params);\n    return acc;\n  }, {});\n  const heightCache = rowIds.reduce((acc, id) => {\n    if (contentCache[id] == null) {\n      return acc;\n    }\n    const params = apiRef.current.getRowParams(id);\n    const height = getDetailPanelHeight(params);\n    const autoHeight = height === 'auto';\n    acc[id] = {\n      autoHeight,\n      height: autoHeight ? previousHeightCache[id]?.height : height\n    };\n    return acc;\n  }, {});\n  return {\n    contentCache,\n    heightCache\n  };\n}\nexport const useGridDetailPanel = (apiRef, props) => {\n  const expandedRowIds = useGridSelector(apiRef, gridDetailPanelExpandedRowIdsSelector);\n  const contentCache = useGridSelector(apiRef, gridDetailPanelExpandedRowsContentCacheSelector);\n  const handleCellClick = React.useCallback((params, event) => {\n    if (params.field !== GRID_DETAIL_PANEL_TOGGLE_FIELD || props.getDetailPanelContent == null) {\n      return;\n    }\n    const content = contentCache[params.id];\n    if (! /*#__PURE__*/React.isValidElement(content)) {\n      return;\n    }\n\n    // Ignore if the user didn't click specifically in the \"i\" button\n    if (event.target === event.currentTarget) {\n      return;\n    }\n    apiRef.current.toggleDetailPanel(params.id);\n  }, [apiRef, contentCache, props.getDetailPanelContent]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (props.getDetailPanelContent == null) {\n      return;\n    }\n    if (params.field === GRID_DETAIL_PANEL_TOGGLE_FIELD && event.key === ' ') {\n      apiRef.current.toggleDetailPanel(params.id);\n    }\n  }, [apiRef, props.getDetailPanelContent]);\n  useGridApiEventHandler(apiRef, 'cellClick', handleCellClick);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n  apiRef.current.registerControlState({\n    stateId: 'detailPanels',\n    propModel: props.detailPanelExpandedRowIds,\n    propOnChange: props.onDetailPanelExpandedRowIdsChange,\n    stateSelector: gridDetailPanelExpandedRowIdsSelector,\n    changeEvent: 'detailPanelsExpandedRowIdsChange'\n  });\n  const toggleDetailPanel = React.useCallback(id => {\n    if (props.getDetailPanelContent == null) {\n      return;\n    }\n    const content = contentCache[id];\n    if (! /*#__PURE__*/React.isValidElement(content)) {\n      return;\n    }\n    const ids = apiRef.current.getExpandedDetailPanels();\n    apiRef.current.setExpandedDetailPanels(ids.includes(id) ? ids.filter(rowId => rowId !== id) : [...ids, id]);\n  }, [apiRef, contentCache, props.getDetailPanelContent]);\n  const getExpandedDetailPanels = React.useCallback(() => gridDetailPanelExpandedRowIdsSelector(apiRef.current.state), [apiRef]);\n  const setExpandedDetailPanels = React.useCallback(ids => {\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        detailPanel: _extends({}, state.detailPanel, {\n          expandedRowIds: ids\n        })\n      });\n    });\n    apiRef.current.updateDimensions();\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const storeDetailPanelHeight = React.useCallback((id, height) => {\n    const heightCache = gridDetailPanelRawHeightCacheSelector(apiRef.current.state);\n    if (!heightCache[id] || heightCache[id].height === height) {\n      return;\n    }\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        detailPanel: _extends({}, state.detailPanel, {\n          heightCache: _extends({}, heightCache, {\n            [id]: _extends({}, heightCache[id], {\n              height\n            })\n          })\n        })\n      });\n    });\n    apiRef.current.updateDimensions();\n    apiRef.current.requestPipeProcessorsApplication('rowHeight');\n  }, [apiRef]);\n  const detailPanelHasAutoHeight = React.useCallback(id => {\n    const heightCache = gridDetailPanelRawHeightCacheSelector(apiRef.current.state);\n    return heightCache[id] ? heightCache[id].autoHeight : false;\n  }, [apiRef]);\n  const detailPanelPubicApi = {\n    toggleDetailPanel,\n    getExpandedDetailPanels,\n    setExpandedDetailPanels\n  };\n  const detailPanelPrivateApi = {\n    storeDetailPanelHeight,\n    detailPanelHasAutoHeight\n  };\n  useGridApiMethod(apiRef, detailPanelPubicApi, 'public');\n  useGridApiMethod(apiRef, detailPanelPrivateApi, 'private');\n  React.useEffect(() => {\n    if (props.detailPanelExpandedRowIds) {\n      const currentModel = gridDetailPanelExpandedRowIdsSelector(apiRef.current.state);\n      if (currentModel !== props.detailPanelExpandedRowIds) {\n        apiRef.current.setExpandedDetailPanels(props.detailPanelExpandedRowIds);\n      }\n    }\n  }, [apiRef, props.detailPanelExpandedRowIds]);\n  const updateCachesAndForceUpdate = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        detailPanel: _extends({}, state.detailPanel, cacheContentAndHeight(apiRef, props.getDetailPanelContent, props.getDetailPanelHeight, state.detailPanel.heightCache))\n      });\n    });\n    apiRef.current.updateDimensions?.();\n    apiRef.current.forceUpdate();\n  }, [apiRef, props.getDetailPanelContent, props.getDetailPanelHeight]);\n  useGridApiEventHandler(apiRef, 'sortedRowsSet', updateCachesAndForceUpdate);\n  const previousGetDetailPanelContentProp = React.useRef();\n  const previousGetDetailPanelHeightProp = React.useRef();\n  const updateCachesIfNeeded = React.useCallback(() => {\n    if (props.getDetailPanelContent === previousGetDetailPanelContentProp.current && props.getDetailPanelHeight === previousGetDetailPanelHeightProp.current) {\n      return;\n    }\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        detailPanel: _extends({}, state.detailPanel, cacheContentAndHeight(apiRef, props.getDetailPanelContent, props.getDetailPanelHeight, state.detailPanel.heightCache))\n      });\n    });\n    apiRef.current.updateDimensions?.();\n    previousGetDetailPanelContentProp.current = props.getDetailPanelContent;\n    previousGetDetailPanelHeightProp.current = props.getDetailPanelHeight;\n  }, [apiRef, props.getDetailPanelContent, props.getDetailPanelHeight]);\n  const addDetailHeight = React.useCallback((initialValue, row) => {\n    if (!expandedRowIds || expandedRowIds.length === 0 || !expandedRowIds.includes(row.id)) {\n      initialValue.detail = 0;\n      return initialValue;\n    }\n    updateCachesIfNeeded();\n    const heightCache = gridDetailPanelExpandedRowsHeightCacheSelector(apiRef);\n    initialValue.detail = heightCache[row.id] ?? 0; // Fallback to zero because the cache might not be ready yet (for example page was changed)\n    return initialValue;\n  }, [apiRef, expandedRowIds, updateCachesIfNeeded]);\n  useGridRegisterPipeProcessor(apiRef, 'rowHeight', addDetailHeight);\n  const isFirstRender = React.useRef(true);\n  if (isFirstRender.current) {\n    isFirstRender.current = false;\n    updateCachesIfNeeded();\n  }\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}