{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { GRID_ROOT_GROUP_ID } from '@mui/x-data-grid';\nimport { isDeepEqual, getTreeNodeDescendants } from '@mui/x-data-grid/internals';\nimport { insertDataRowInTree } from './insertDataRowInTree';\nimport { removeDataRowFromTree } from './removeDataRowFromTree';\nimport { createUpdatedGroupsManager, getNodePathInTree } from './utils';\nexport const updateRowTree = params => {\n  const tree = _extends({}, params.previousTree);\n\n  const treeDepths = _extends({}, params.previousTreeDepth);\n\n  const updatedGroupsManager = createUpdatedGroupsManager();\n\n  for (let i = 0; i < params.nodes.inserted.length; i += 1) {\n    const {\n      id,\n      path\n    } = params.nodes.inserted[i];\n    insertDataRowInTree({\n      previousTree: params.previousTree,\n      tree,\n      treeDepths,\n      updatedGroupsManager,\n      id,\n      path,\n      onDuplicatePath: params.onDuplicatePath,\n      isGroupExpandedByDefault: params.isGroupExpandedByDefault,\n      defaultGroupingExpansionDepth: params.defaultGroupingExpansionDepth\n    });\n  }\n\n  for (let i = 0; i < params.nodes.removed.length; i += 1) {\n    const nodeId = params.nodes.removed[i];\n    removeDataRowFromTree({\n      tree,\n      treeDepths,\n      updatedGroupsManager,\n      id: nodeId\n    });\n  }\n\n  for (let i = 0; i < params.nodes.modified.length; i += 1) {\n    const {\n      id,\n      path\n    } = params.nodes.modified[i];\n    const pathInPreviousTree = getNodePathInTree({\n      tree,\n      id\n    });\n    const isInSameGroup = isDeepEqual(pathInPreviousTree, path);\n\n    if (!isInSameGroup) {\n      removeDataRowFromTree({\n        tree,\n        treeDepths,\n        updatedGroupsManager,\n        id\n      });\n      insertDataRowInTree({\n        previousTree: params.previousTree,\n        tree,\n        treeDepths,\n        updatedGroupsManager,\n        id,\n        path,\n        onDuplicatePath: params.onDuplicatePath,\n        isGroupExpandedByDefault: params.isGroupExpandedByDefault,\n        defaultGroupingExpansionDepth: params.defaultGroupingExpansionDepth\n      });\n    } else {\n      updatedGroupsManager?.addAction(tree[id].parent, 'modifyChildren');\n    }\n  } // TODO rows v6: Avoid walking the whole tree, we should be able to generate the new list only using slices.\n\n\n  const dataRowIds = getTreeNodeDescendants(tree, GRID_ROOT_GROUP_ID, true);\n  return {\n    tree,\n    treeDepths,\n    groupingName: params.groupingName,\n    dataRowIds,\n    updatedGroupsManager\n  };\n};","map":{"version":3,"names":["_extends","GRID_ROOT_GROUP_ID","isDeepEqual","getTreeNodeDescendants","insertDataRowInTree","removeDataRowFromTree","createUpdatedGroupsManager","getNodePathInTree","updateRowTree","params","tree","previousTree","treeDepths","previousTreeDepth","updatedGroupsManager","i","nodes","inserted","length","id","path","onDuplicatePath","isGroupExpandedByDefault","defaultGroupingExpansionDepth","removed","nodeId","modified","pathInPreviousTree","isInSameGroup","addAction","parent","dataRowIds","groupingName"],"sources":["C:/Users/kb/node_modules/@mui/x-data-grid-pro/esm/utils/tree/updateRowTree.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { GRID_ROOT_GROUP_ID } from '@mui/x-data-grid';\nimport { isDeepEqual, getTreeNodeDescendants } from '@mui/x-data-grid/internals';\nimport { insertDataRowInTree } from './insertDataRowInTree';\nimport { removeDataRowFromTree } from './removeDataRowFromTree';\nimport { createUpdatedGroupsManager, getNodePathInTree } from './utils';\nexport const updateRowTree = params => {\n  const tree = _extends({}, params.previousTree);\n  const treeDepths = _extends({}, params.previousTreeDepth);\n  const updatedGroupsManager = createUpdatedGroupsManager();\n  for (let i = 0; i < params.nodes.inserted.length; i += 1) {\n    const {\n      id,\n      path\n    } = params.nodes.inserted[i];\n    insertDataRowInTree({\n      previousTree: params.previousTree,\n      tree,\n      treeDepths,\n      updatedGroupsManager,\n      id,\n      path,\n      onDuplicatePath: params.onDuplicatePath,\n      isGroupExpandedByDefault: params.isGroupExpandedByDefault,\n      defaultGroupingExpansionDepth: params.defaultGroupingExpansionDepth\n    });\n  }\n  for (let i = 0; i < params.nodes.removed.length; i += 1) {\n    const nodeId = params.nodes.removed[i];\n    removeDataRowFromTree({\n      tree,\n      treeDepths,\n      updatedGroupsManager,\n      id: nodeId\n    });\n  }\n  for (let i = 0; i < params.nodes.modified.length; i += 1) {\n    const {\n      id,\n      path\n    } = params.nodes.modified[i];\n    const pathInPreviousTree = getNodePathInTree({\n      tree,\n      id\n    });\n    const isInSameGroup = isDeepEqual(pathInPreviousTree, path);\n    if (!isInSameGroup) {\n      removeDataRowFromTree({\n        tree,\n        treeDepths,\n        updatedGroupsManager,\n        id\n      });\n      insertDataRowInTree({\n        previousTree: params.previousTree,\n        tree,\n        treeDepths,\n        updatedGroupsManager,\n        id,\n        path,\n        onDuplicatePath: params.onDuplicatePath,\n        isGroupExpandedByDefault: params.isGroupExpandedByDefault,\n        defaultGroupingExpansionDepth: params.defaultGroupingExpansionDepth\n      });\n    } else {\n      updatedGroupsManager?.addAction(tree[id].parent, 'modifyChildren');\n    }\n  }\n\n  // TODO rows v6: Avoid walking the whole tree, we should be able to generate the new list only using slices.\n  const dataRowIds = getTreeNodeDescendants(tree, GRID_ROOT_GROUP_ID, true);\n  return {\n    tree,\n    treeDepths,\n    groupingName: params.groupingName,\n    dataRowIds,\n    updatedGroupsManager\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}