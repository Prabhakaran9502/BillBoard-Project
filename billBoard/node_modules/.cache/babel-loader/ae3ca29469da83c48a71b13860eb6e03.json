{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"id\", \"field\"],\n      _excluded2 = [\"id\", \"field\"];\nimport * as React from 'react';\nimport { unstable_useEventCallback as useEventCallback, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { GridEditModes, GridCellModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditingSelectors';\nimport { isPrintableKey, isPasteShortcut } from '../../../utils/keyboardUtils';\nimport { buildWarning } from '../../../utils/warning';\nimport { gridRowsDataRowIdToIdLookupSelector } from '../rows/gridRowsSelector';\nimport { deepClone } from '../../../utils/utils';\nimport { GridCellEditStartReasons, GridCellEditStopReasons } from '../../../models/params/gridEditCellParams';\nconst missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI X: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, for example `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see https://mui.com/x/react-data-grid/editing/#server-side-persistence.'], 'error');\nexport const useGridCellEditing = (apiRef, props) => {\n  const [cellModesModel, setCellModesModel] = React.useState({});\n  const cellModesModelRef = React.useRef(cellModesModel);\n  const prevCellModesModel = React.useRef({});\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError,\n    cellModesModel: cellModesModelProp,\n    onCellModesModelChange\n  } = props;\n\n  const runIfEditModeIsCell = callback => function () {\n    if (props.editMode === GridEditModes.Cell) {\n      callback(...arguments);\n    }\n  };\n\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI X: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, field, mode) => {\n    if (apiRef.current.getCellMode(id, field) !== mode) {\n      throw new Error(`MUI X: The cell with id=${id} and field=${field} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (params.cellMode === GridCellModes.Edit) {\n      return;\n    }\n\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStartReasons.cellDoubleClick\n    });\n\n    apiRef.current.publishEvent('cellEditStart', newParams, event);\n  }, [apiRef]);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.View) {\n      return;\n    }\n\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.View) {\n      return;\n    }\n\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStopReasons.cellFocusOut\n    });\n\n    apiRef.current.publishEvent('cellEditStop', newParams, event);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.Edit) {\n      // Wait until IME is settled for Asian languages like Japanese and Chinese\n      // TODO: `event.which` is deprecated but this is a temporary workaround\n      if (event.which === 229) {\n        return;\n      }\n\n      let reason;\n\n      if (event.key === 'Escape') {\n        reason = GridCellEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        reason = event.shiftKey ? GridCellEditStopReasons.shiftTabKeyDown : GridCellEditStopReasons.tabKeyDown;\n        event.preventDefault(); // Prevent going to the next element in the tab sequence\n      }\n\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason\n        });\n\n        apiRef.current.publishEvent('cellEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n      const canStartEditing = apiRef.current.unstable_applyPipeProcessors('canStartEditing', true, {\n        event,\n        cellParams: params,\n        editMode: 'cell'\n      });\n\n      if (!canStartEditing) {\n        return;\n      }\n\n      if (isPrintableKey(event)) {\n        reason = GridCellEditStartReasons.printableKeyDown;\n      } else if (isPasteShortcut(event)) {\n        reason = GridCellEditStartReasons.pasteKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Backspace' || event.key === 'Delete') {\n        reason = GridCellEditStartReasons.deleteKeyDown;\n      }\n\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason,\n          key: event.key\n        });\n\n        apiRef.current.publishEvent('cellEditStart', newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleCellEditStart = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    const startCellEditModeParams = {\n      id,\n      field\n    };\n\n    if (reason === GridCellEditStartReasons.printableKeyDown || reason === GridCellEditStartReasons.deleteKeyDown || reason === GridCellEditStartReasons.pasteKeyDown) {\n      startCellEditModeParams.deleteValue = true;\n    }\n\n    apiRef.current.startCellEditMode(startCellEditModeParams);\n  }, [apiRef]);\n  const handleCellEditStop = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    apiRef.current.runPendingEditCellValueMutation(id, field);\n    let cellToFocusAfter;\n\n    if (reason === GridCellEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridCellEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridCellEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n\n    const ignoreModifications = reason === 'escapeKeyDown';\n    apiRef.current.stopCellEditMode({\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter\n    });\n  }, [apiRef]);\n\n  const runIfNoFieldErrors = callback => async function () {\n    if (callback) {\n      const {\n        id,\n        field\n      } = arguments.length <= 0 ? undefined : arguments[0];\n      const editRowsState = apiRef.current.state.editRows;\n      const hasFieldErrors = editRowsState[id][field]?.error;\n\n      if (!hasFieldErrors) {\n        callback(...arguments);\n      }\n    }\n  };\n\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsCell(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsCell(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsCell(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'cellEditStart', runIfEditModeIsCell(handleCellEditStart));\n  useGridApiEventHandler(apiRef, 'cellEditStop', runIfEditModeIsCell(handleCellEditStop));\n  useGridApiOptionHandler(apiRef, 'cellEditStart', props.onCellEditStart);\n  useGridApiOptionHandler(apiRef, 'cellEditStop', runIfNoFieldErrors(props.onCellEditStop));\n  const getCellMode = React.useCallback((id, field) => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && editingState[id][field];\n    return isEditing ? GridCellModes.Edit : GridCellModes.View;\n  }, [apiRef]);\n  const updateCellModesModel = useEventCallback(newModel => {\n    const isNewModelDifferentFromProp = newModel !== props.cellModesModel;\n\n    if (onCellModesModelChange && isNewModelDifferentFromProp) {\n      onCellModesModelChange(newModel, {\n        api: apiRef.current\n      });\n    }\n\n    if (props.cellModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n\n    setCellModesModel(newModel);\n    cellModesModelRef.current = newModel;\n    apiRef.current.publishEvent('cellModesModelChange', newModel);\n  });\n  const updateFieldInCellModesModel = React.useCallback((id, field, newProps) => {\n    // We use the ref because it always contain the up-to-date value, different from the state\n    // that needs a rerender to reflect the new value\n    const newModel = _extends({}, cellModesModelRef.current);\n\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newModel[id], {\n        [field]: _extends({}, newProps)\n      });\n    } else {\n      const _newModel$id = newModel[id],\n            otherFields = _objectWithoutPropertiesLoose(_newModel$id, [field].map(_toPropertyKey)); // Ensure that we have a new object, not a reference\n\n\n      newModel[id] = otherFields;\n\n      if (Object.keys(newModel[id]).length === 0) {\n        delete newModel[id];\n      }\n    }\n\n    updateCellModesModel(newModel);\n  }, [updateCellModesModel]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startCellEditMode = React.useCallback(params => {\n    const {\n      id,\n      field\n    } = params,\n          other = _objectWithoutPropertiesLoose(params, _excluded);\n\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.View);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.Edit\n    }, other));\n  }, [throwIfNotEditable, throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStartCellEditMode = useEventCallback(params => {\n    const {\n      id,\n      field,\n      deleteValue,\n      initialValue\n    } = params;\n    let newValue = apiRef.current.getCellValue(id, field);\n\n    if (deleteValue) {\n      const fieldType = apiRef.current.getColumn(field).type;\n\n      switch (fieldType) {\n        case 'boolean':\n          newValue = false;\n          break;\n\n        case 'date':\n        case 'dateTime':\n        case 'number':\n          newValue = undefined;\n          break;\n\n        case 'singleSelect':\n          newValue = null;\n          break;\n\n        case 'string':\n        default:\n          newValue = '';\n          break;\n      }\n    } else if (initialValue) {\n      newValue = initialValue;\n    }\n\n    const newProps = {\n      value: newValue,\n      error: false,\n      isProcessingProps: false\n    };\n    updateOrDeleteFieldState(id, field, newProps);\n    apiRef.current.setCellFocus(id, field);\n  });\n  const stopCellEditMode = React.useCallback(params => {\n    const {\n      id,\n      field\n    } = params,\n          other = _objectWithoutPropertiesLoose(params, _excluded2);\n\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.View\n    }, other));\n  }, [throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStopCellEditMode = useEventCallback(async params => {\n    const {\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter = 'none'\n    } = params;\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    apiRef.current.runPendingEditCellValueMutation(id, field);\n\n    const finishCellEditMode = () => {\n      updateOrDeleteFieldState(id, field, null);\n      updateFieldInCellModesModel(id, field, null);\n\n      if (cellToFocusAfter !== 'none') {\n        apiRef.current.moveFocusToRelativeCell(id, field, cellToFocusAfter);\n      }\n    };\n\n    if (ignoreModifications) {\n      finishCellEditMode();\n      return;\n    }\n\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const {\n      error,\n      isProcessingProps\n    } = editingState[id][field];\n\n    if (error || isProcessingProps) {\n      // Attempt to change cell mode to \"view\" was not successful\n      // Update previous mode to allow another attempt\n      prevCellModesModel.current[id][field].mode = GridCellModes.Edit; // Revert the mode in the cellModesModel prop back to \"edit\"\n\n      updateFieldInCellModesModel(id, field, {\n        mode: GridCellModes.Edit\n      });\n      return;\n    }\n\n    const rowUpdate = apiRef.current.getRowWithUpdatedValuesFromCellEditing(id, field);\n\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        prevCellModesModel.current[id][field].mode = GridCellModes.Edit; // Revert the mode in the cellModesModel prop back to \"edit\"\n\n        updateFieldInCellModesModel(id, field, {\n          mode: GridCellModes.Edit\n        });\n\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else if (process.env.NODE_ENV !== 'production') {\n          missingOnProcessRowUpdateErrorWarning();\n        }\n      };\n\n      try {\n        const row = apiRef.current.getRow(id);\n        Promise.resolve(processRowUpdate(rowUpdate, row)).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishCellEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishCellEditMode();\n    }\n  });\n  const setCellEditingEditCellValue = React.useCallback(async params => {\n    const {\n      id,\n      field,\n      value,\n      debounceMs,\n      unstable_skipValueParser: skipValueParser\n    } = params;\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n\n    if (column.valueParser && !skipValueParser) {\n      parsedValue = column.valueParser(value, row, column, apiRef);\n    }\n\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue,\n      changeReason: debounceMs ? 'debouncedSetEditCellValue' : 'setEditCellValue'\n    });\n\n    if (column.preProcessEditCellProps) {\n      const hasChanged = value !== editingState[id][field].value;\n      newProps = _extends({}, newProps, {\n        isProcessingProps: true\n      });\n      updateOrDeleteFieldState(id, field, newProps);\n      newProps = await Promise.resolve(column.preProcessEditCellProps({\n        id,\n        row,\n        props: newProps,\n        hasChanged\n      }));\n    } // Check again if the cell is in edit mode because the user may have\n    // discarded the changes while the props were being processed.\n\n\n    if (apiRef.current.getCellMode(id, field) === GridCellModes.View) {\n      return false;\n    }\n\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    newProps = _extends({}, newProps, {\n      isProcessingProps: false\n    }); // We don't update the value with the one coming from the props pre-processing\n    // because when the promise resolves it may be already outdated. The only\n    // exception to this rule is when there's no pre-processing.\n\n    newProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n    updateOrDeleteFieldState(id, field, newProps);\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    return !editingState[id]?.[field]?.error;\n  }, [apiRef, throwIfNotEditable, throwIfNotInMode, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromCellEditing = React.useCallback((id, field) => {\n    const column = apiRef.current.getColumn(field);\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n\n    if (!editingState[id] || !editingState[id][field]) {\n      return apiRef.current.getRow(id);\n    }\n\n    const {\n      value\n    } = editingState[id][field];\n    return column.valueSetter ? column.valueSetter(value, row, column, apiRef) : _extends({}, row, {\n      [field]: value\n    });\n  }, [apiRef]);\n  const editingApi = {\n    getCellMode,\n    startCellEditMode,\n    stopCellEditMode\n  };\n  const editingPrivateApi = {\n    setCellEditingEditCellValue,\n    getRowWithUpdatedValuesFromCellEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'public');\n  useGridApiMethod(apiRef, editingPrivateApi, 'private');\n  React.useEffect(() => {\n    if (cellModesModelProp) {\n      updateCellModesModel(cellModesModelProp);\n    }\n  }, [cellModesModelProp, updateCellModesModel]); // Run this effect synchronously so that the keyboard event can impact the yet-to-be-rendered input.\n\n  useEnhancedEffect(() => {\n    const idToIdLookup = gridRowsDataRowIdToIdLookupSelector(apiRef); // Update the ref here because updateStateToStopCellEditMode may change it later\n\n    const copyOfPrevCellModes = prevCellModesModel.current;\n    prevCellModesModel.current = deepClone(cellModesModel); // Do a deep-clone because the attributes might be changed later\n\n    Object.entries(cellModesModel).forEach(_ref => {\n      let [id, fields] = _ref;\n      Object.entries(fields).forEach(_ref2 => {\n        let [field, params] = _ref2;\n        const prevMode = copyOfPrevCellModes[id]?.[field]?.mode || GridCellModes.View;\n        const originalId = idToIdLookup[id] ?? id;\n\n        if (params.mode === GridCellModes.Edit && prevMode === GridCellModes.View) {\n          updateStateToStartCellEditMode(_extends({\n            id: originalId,\n            field\n          }, params));\n        } else if (params.mode === GridCellModes.View && prevMode === GridCellModes.Edit) {\n          updateStateToStopCellEditMode(_extends({\n            id: originalId,\n            field\n          }, params));\n        }\n      });\n    });\n  }, [apiRef, cellModesModel, updateStateToStartCellEditMode, updateStateToStopCellEditMode]);\n};","map":{"version":3,"names":["_objectWithoutPropertiesLoose","_toPropertyKey","_extends","_excluded","_excluded2","React","unstable_useEventCallback","useEventCallback","unstable_useEnhancedEffect","useEnhancedEffect","useGridApiEventHandler","useGridApiOptionHandler","GridEditModes","GridCellModes","useGridApiMethod","gridEditRowsStateSelector","isPrintableKey","isPasteShortcut","buildWarning","gridRowsDataRowIdToIdLookupSelector","deepClone","GridCellEditStartReasons","GridCellEditStopReasons","missingOnProcessRowUpdateErrorWarning","useGridCellEditing","apiRef","props","cellModesModel","setCellModesModel","useState","cellModesModelRef","useRef","prevCellModesModel","processRowUpdate","onProcessRowUpdateError","cellModesModelProp","onCellModesModelChange","runIfEditModeIsCell","callback","editMode","Cell","throwIfNotEditable","useCallback","id","field","params","current","getCellParams","isCellEditable","Error","throwIfNotInMode","mode","getCellMode","handleCellDoubleClick","event","isEditable","cellMode","Edit","newParams","reason","cellDoubleClick","publishEvent","handleCellFocusOut","View","cellFocusOut","handleCellKeyDown","which","key","escapeKeyDown","enterKeyDown","shiftKey","shiftTabKeyDown","tabKeyDown","preventDefault","canStartEditing","unstable_applyPipeProcessors","cellParams","printableKeyDown","pasteKeyDown","deleteKeyDown","handleCellEditStart","startCellEditModeParams","deleteValue","startCellEditMode","handleCellEditStop","runPendingEditCellValueMutation","cellToFocusAfter","ignoreModifications","stopCellEditMode","runIfNoFieldErrors","editRowsState","state","editRows","hasFieldErrors","error","onCellEditStart","onCellEditStop","editingState","isEditing","updateCellModesModel","newModel","isNewModelDifferentFromProp","api","updateFieldInCellModesModel","newProps","_newModel$id","otherFields","map","Object","keys","length","updateOrDeleteFieldState","setState","newEditingState","forceUpdate","other","updateStateToStartCellEditMode","initialValue","newValue","getCellValue","fieldType","getColumn","type","undefined","value","isProcessingProps","setCellFocus","updateStateToStopCellEditMode","finishCellEditMode","moveFocusToRelativeCell","rowUpdate","getRowWithUpdatedValuesFromCellEditing","handleError","errorThrown","process","env","NODE_ENV","row","getRow","Promise","resolve","then","finalRowUpdate","updateRows","catch","setCellEditingEditCellValue","debounceMs","unstable_skipValueParser","skipValueParser","column","parsedValue","valueParser","changeReason","preProcessEditCellProps","hasChanged","valueSetter","editingApi","editingPrivateApi","useEffect","idToIdLookup","copyOfPrevCellModes","entries","forEach","fields","prevMode","originalId"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/@mui/x-data-grid/hooks/features/editing/useGridCellEditing.js"],"sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"id\", \"field\"],\n  _excluded2 = [\"id\", \"field\"];\nimport * as React from 'react';\nimport { unstable_useEventCallback as useEventCallback, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { GridEditModes, GridCellModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditingSelectors';\nimport { isPrintableKey, isPasteShortcut } from '../../../utils/keyboardUtils';\nimport { buildWarning } from '../../../utils/warning';\nimport { gridRowsDataRowIdToIdLookupSelector } from '../rows/gridRowsSelector';\nimport { deepClone } from '../../../utils/utils';\nimport { GridCellEditStartReasons, GridCellEditStopReasons } from '../../../models/params/gridEditCellParams';\nconst missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI X: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, for example `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see https://mui.com/x/react-data-grid/editing/#server-side-persistence.'], 'error');\nexport const useGridCellEditing = (apiRef, props) => {\n  const [cellModesModel, setCellModesModel] = React.useState({});\n  const cellModesModelRef = React.useRef(cellModesModel);\n  const prevCellModesModel = React.useRef({});\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError,\n    cellModesModel: cellModesModelProp,\n    onCellModesModelChange\n  } = props;\n  const runIfEditModeIsCell = callback => (...args) => {\n    if (props.editMode === GridEditModes.Cell) {\n      callback(...args);\n    }\n  };\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI X: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, field, mode) => {\n    if (apiRef.current.getCellMode(id, field) !== mode) {\n      throw new Error(`MUI X: The cell with id=${id} and field=${field} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n    if (params.cellMode === GridCellModes.Edit) {\n      return;\n    }\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStartReasons.cellDoubleClick\n    });\n    apiRef.current.publishEvent('cellEditStart', newParams, event);\n  }, [apiRef]);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.View) {\n      return;\n    }\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.View) {\n      return;\n    }\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStopReasons.cellFocusOut\n    });\n    apiRef.current.publishEvent('cellEditStop', newParams, event);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.Edit) {\n      // Wait until IME is settled for Asian languages like Japanese and Chinese\n      // TODO: `event.which` is deprecated but this is a temporary workaround\n      if (event.which === 229) {\n        return;\n      }\n      let reason;\n      if (event.key === 'Escape') {\n        reason = GridCellEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        reason = event.shiftKey ? GridCellEditStopReasons.shiftTabKeyDown : GridCellEditStopReasons.tabKeyDown;\n        event.preventDefault(); // Prevent going to the next element in the tab sequence\n      }\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason\n        });\n        apiRef.current.publishEvent('cellEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n      const canStartEditing = apiRef.current.unstable_applyPipeProcessors('canStartEditing', true, {\n        event,\n        cellParams: params,\n        editMode: 'cell'\n      });\n      if (!canStartEditing) {\n        return;\n      }\n      if (isPrintableKey(event)) {\n        reason = GridCellEditStartReasons.printableKeyDown;\n      } else if (isPasteShortcut(event)) {\n        reason = GridCellEditStartReasons.pasteKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Backspace' || event.key === 'Delete') {\n        reason = GridCellEditStartReasons.deleteKeyDown;\n      }\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason,\n          key: event.key\n        });\n        apiRef.current.publishEvent('cellEditStart', newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleCellEditStart = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    const startCellEditModeParams = {\n      id,\n      field\n    };\n    if (reason === GridCellEditStartReasons.printableKeyDown || reason === GridCellEditStartReasons.deleteKeyDown || reason === GridCellEditStartReasons.pasteKeyDown) {\n      startCellEditModeParams.deleteValue = true;\n    }\n    apiRef.current.startCellEditMode(startCellEditModeParams);\n  }, [apiRef]);\n  const handleCellEditStop = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    apiRef.current.runPendingEditCellValueMutation(id, field);\n    let cellToFocusAfter;\n    if (reason === GridCellEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridCellEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridCellEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n    const ignoreModifications = reason === 'escapeKeyDown';\n    apiRef.current.stopCellEditMode({\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter\n    });\n  }, [apiRef]);\n  const runIfNoFieldErrors = callback => async (...args) => {\n    if (callback) {\n      const {\n        id,\n        field\n      } = args[0];\n      const editRowsState = apiRef.current.state.editRows;\n      const hasFieldErrors = editRowsState[id][field]?.error;\n      if (!hasFieldErrors) {\n        callback(...args);\n      }\n    }\n  };\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsCell(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsCell(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsCell(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'cellEditStart', runIfEditModeIsCell(handleCellEditStart));\n  useGridApiEventHandler(apiRef, 'cellEditStop', runIfEditModeIsCell(handleCellEditStop));\n  useGridApiOptionHandler(apiRef, 'cellEditStart', props.onCellEditStart);\n  useGridApiOptionHandler(apiRef, 'cellEditStop', runIfNoFieldErrors(props.onCellEditStop));\n  const getCellMode = React.useCallback((id, field) => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && editingState[id][field];\n    return isEditing ? GridCellModes.Edit : GridCellModes.View;\n  }, [apiRef]);\n  const updateCellModesModel = useEventCallback(newModel => {\n    const isNewModelDifferentFromProp = newModel !== props.cellModesModel;\n    if (onCellModesModelChange && isNewModelDifferentFromProp) {\n      onCellModesModelChange(newModel, {\n        api: apiRef.current\n      });\n    }\n    if (props.cellModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n    setCellModesModel(newModel);\n    cellModesModelRef.current = newModel;\n    apiRef.current.publishEvent('cellModesModelChange', newModel);\n  });\n  const updateFieldInCellModesModel = React.useCallback((id, field, newProps) => {\n    // We use the ref because it always contain the up-to-date value, different from the state\n    // that needs a rerender to reflect the new value\n    const newModel = _extends({}, cellModesModelRef.current);\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newModel[id], {\n        [field]: _extends({}, newProps)\n      });\n    } else {\n      const _newModel$id = newModel[id],\n        otherFields = _objectWithoutPropertiesLoose(_newModel$id, [field].map(_toPropertyKey)); // Ensure that we have a new object, not a reference\n      newModel[id] = otherFields;\n      if (Object.keys(newModel[id]).length === 0) {\n        delete newModel[id];\n      }\n    }\n    updateCellModesModel(newModel);\n  }, [updateCellModesModel]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startCellEditMode = React.useCallback(params => {\n    const {\n        id,\n        field\n      } = params,\n      other = _objectWithoutPropertiesLoose(params, _excluded);\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.View);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.Edit\n    }, other));\n  }, [throwIfNotEditable, throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStartCellEditMode = useEventCallback(params => {\n    const {\n      id,\n      field,\n      deleteValue,\n      initialValue\n    } = params;\n    let newValue = apiRef.current.getCellValue(id, field);\n    if (deleteValue) {\n      const fieldType = apiRef.current.getColumn(field).type;\n      switch (fieldType) {\n        case 'boolean':\n          newValue = false;\n          break;\n        case 'date':\n        case 'dateTime':\n        case 'number':\n          newValue = undefined;\n          break;\n        case 'singleSelect':\n          newValue = null;\n          break;\n        case 'string':\n        default:\n          newValue = '';\n          break;\n      }\n    } else if (initialValue) {\n      newValue = initialValue;\n    }\n    const newProps = {\n      value: newValue,\n      error: false,\n      isProcessingProps: false\n    };\n    updateOrDeleteFieldState(id, field, newProps);\n    apiRef.current.setCellFocus(id, field);\n  });\n  const stopCellEditMode = React.useCallback(params => {\n    const {\n        id,\n        field\n      } = params,\n      other = _objectWithoutPropertiesLoose(params, _excluded2);\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.View\n    }, other));\n  }, [throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStopCellEditMode = useEventCallback(async params => {\n    const {\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter = 'none'\n    } = params;\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    apiRef.current.runPendingEditCellValueMutation(id, field);\n    const finishCellEditMode = () => {\n      updateOrDeleteFieldState(id, field, null);\n      updateFieldInCellModesModel(id, field, null);\n      if (cellToFocusAfter !== 'none') {\n        apiRef.current.moveFocusToRelativeCell(id, field, cellToFocusAfter);\n      }\n    };\n    if (ignoreModifications) {\n      finishCellEditMode();\n      return;\n    }\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const {\n      error,\n      isProcessingProps\n    } = editingState[id][field];\n    if (error || isProcessingProps) {\n      // Attempt to change cell mode to \"view\" was not successful\n      // Update previous mode to allow another attempt\n      prevCellModesModel.current[id][field].mode = GridCellModes.Edit;\n      // Revert the mode in the cellModesModel prop back to \"edit\"\n      updateFieldInCellModesModel(id, field, {\n        mode: GridCellModes.Edit\n      });\n      return;\n    }\n    const rowUpdate = apiRef.current.getRowWithUpdatedValuesFromCellEditing(id, field);\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        prevCellModesModel.current[id][field].mode = GridCellModes.Edit;\n        // Revert the mode in the cellModesModel prop back to \"edit\"\n        updateFieldInCellModesModel(id, field, {\n          mode: GridCellModes.Edit\n        });\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else if (process.env.NODE_ENV !== 'production') {\n          missingOnProcessRowUpdateErrorWarning();\n        }\n      };\n      try {\n        const row = apiRef.current.getRow(id);\n        Promise.resolve(processRowUpdate(rowUpdate, row)).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishCellEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishCellEditMode();\n    }\n  });\n  const setCellEditingEditCellValue = React.useCallback(async params => {\n    const {\n      id,\n      field,\n      value,\n      debounceMs,\n      unstable_skipValueParser: skipValueParser\n    } = params;\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n    if (column.valueParser && !skipValueParser) {\n      parsedValue = column.valueParser(value, row, column, apiRef);\n    }\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue,\n      changeReason: debounceMs ? 'debouncedSetEditCellValue' : 'setEditCellValue'\n    });\n    if (column.preProcessEditCellProps) {\n      const hasChanged = value !== editingState[id][field].value;\n      newProps = _extends({}, newProps, {\n        isProcessingProps: true\n      });\n      updateOrDeleteFieldState(id, field, newProps);\n      newProps = await Promise.resolve(column.preProcessEditCellProps({\n        id,\n        row,\n        props: newProps,\n        hasChanged\n      }));\n    }\n\n    // Check again if the cell is in edit mode because the user may have\n    // discarded the changes while the props were being processed.\n    if (apiRef.current.getCellMode(id, field) === GridCellModes.View) {\n      return false;\n    }\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    newProps = _extends({}, newProps, {\n      isProcessingProps: false\n    });\n    // We don't update the value with the one coming from the props pre-processing\n    // because when the promise resolves it may be already outdated. The only\n    // exception to this rule is when there's no pre-processing.\n    newProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n    updateOrDeleteFieldState(id, field, newProps);\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    return !editingState[id]?.[field]?.error;\n  }, [apiRef, throwIfNotEditable, throwIfNotInMode, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromCellEditing = React.useCallback((id, field) => {\n    const column = apiRef.current.getColumn(field);\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n    if (!editingState[id] || !editingState[id][field]) {\n      return apiRef.current.getRow(id);\n    }\n    const {\n      value\n    } = editingState[id][field];\n    return column.valueSetter ? column.valueSetter(value, row, column, apiRef) : _extends({}, row, {\n      [field]: value\n    });\n  }, [apiRef]);\n  const editingApi = {\n    getCellMode,\n    startCellEditMode,\n    stopCellEditMode\n  };\n  const editingPrivateApi = {\n    setCellEditingEditCellValue,\n    getRowWithUpdatedValuesFromCellEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'public');\n  useGridApiMethod(apiRef, editingPrivateApi, 'private');\n  React.useEffect(() => {\n    if (cellModesModelProp) {\n      updateCellModesModel(cellModesModelProp);\n    }\n  }, [cellModesModelProp, updateCellModesModel]);\n\n  // Run this effect synchronously so that the keyboard event can impact the yet-to-be-rendered input.\n  useEnhancedEffect(() => {\n    const idToIdLookup = gridRowsDataRowIdToIdLookupSelector(apiRef);\n\n    // Update the ref here because updateStateToStopCellEditMode may change it later\n    const copyOfPrevCellModes = prevCellModesModel.current;\n    prevCellModesModel.current = deepClone(cellModesModel); // Do a deep-clone because the attributes might be changed later\n\n    Object.entries(cellModesModel).forEach(([id, fields]) => {\n      Object.entries(fields).forEach(([field, params]) => {\n        const prevMode = copyOfPrevCellModes[id]?.[field]?.mode || GridCellModes.View;\n        const originalId = idToIdLookup[id] ?? id;\n        if (params.mode === GridCellModes.Edit && prevMode === GridCellModes.View) {\n          updateStateToStartCellEditMode(_extends({\n            id: originalId,\n            field\n          }, params));\n        } else if (params.mode === GridCellModes.View && prevMode === GridCellModes.Edit) {\n          updateStateToStopCellEditMode(_extends({\n            id: originalId,\n            field\n          }, params));\n        }\n      });\n    });\n  }, [apiRef, cellModesModel, updateStateToStartCellEditMode, updateStateToStopCellEditMode]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}