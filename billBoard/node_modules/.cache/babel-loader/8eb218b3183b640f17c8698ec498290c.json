{"ast":null,"code":"import { passFilterLogic } from '@mui/x-data-grid/internals';\nexport const TREE_DATA_STRATEGY = 'tree-data';\n/**\n * A node is visible if one of the following criteria is met:\n * - One of its children is passing the filter\n * - It is passing the filter\n */\n\nexport const filterRowTreeFromTreeData = params => {\n  const {\n    apiRef,\n    rowTree,\n    disableChildrenFiltering,\n    isRowMatchingFilters\n  } = params;\n  const filteredRowsLookup = {};\n  const filteredDescendantCountLookup = {};\n  const filterCache = {};\n  const filterResults = {\n    passingFilterItems: null,\n    passingQuickFilterValues: null\n  };\n\n  const filterTreeNode = (node, isParentMatchingFilters, areAncestorsExpanded) => {\n    const shouldSkipFilters = disableChildrenFiltering && node.depth > 0;\n    let isMatchingFilters;\n\n    if (shouldSkipFilters) {\n      isMatchingFilters = null;\n    } else if (!isRowMatchingFilters || node.type === 'footer') {\n      isMatchingFilters = true;\n    } else {\n      const row = apiRef.current.getRow(node.id);\n      isRowMatchingFilters(row, undefined, filterResults);\n      isMatchingFilters = passFilterLogic([filterResults.passingFilterItems], [filterResults.passingQuickFilterValues], params.filterModel, params.apiRef, filterCache);\n    }\n\n    let filteredDescendantCount = 0;\n\n    if (node.type === 'group') {\n      node.children.forEach(childId => {\n        const childNode = rowTree[childId];\n        const childSubTreeSize = filterTreeNode(childNode, isMatchingFilters ?? isParentMatchingFilters, areAncestorsExpanded && !!node.childrenExpanded);\n        filteredDescendantCount += childSubTreeSize;\n      });\n    }\n\n    let shouldPassFilters;\n\n    switch (isMatchingFilters) {\n      case true:\n        {\n          shouldPassFilters = true;\n          break;\n        }\n\n      case false:\n        {\n          shouldPassFilters = filteredDescendantCount > 0;\n          break;\n        }\n\n      default:\n        {\n          shouldPassFilters = isParentMatchingFilters;\n          break;\n        }\n    }\n\n    filteredRowsLookup[node.id] = shouldPassFilters;\n\n    if (!shouldPassFilters) {\n      return 0;\n    }\n\n    filteredDescendantCountLookup[node.id] = filteredDescendantCount;\n\n    if (node.type === 'footer') {\n      return filteredDescendantCount;\n    }\n\n    return filteredDescendantCount + 1;\n  };\n\n  const nodes = Object.values(rowTree);\n\n  for (let i = 0; i < nodes.length; i += 1) {\n    const node = nodes[i];\n\n    if (node.depth === 0) {\n      filterTreeNode(node, true, true);\n    }\n  }\n\n  return {\n    filteredRowsLookup,\n    filteredDescendantCountLookup\n  };\n};","map":{"version":3,"names":["passFilterLogic","TREE_DATA_STRATEGY","filterRowTreeFromTreeData","params","apiRef","rowTree","disableChildrenFiltering","isRowMatchingFilters","filteredRowsLookup","filteredDescendantCountLookup","filterCache","filterResults","passingFilterItems","passingQuickFilterValues","filterTreeNode","node","isParentMatchingFilters","areAncestorsExpanded","shouldSkipFilters","depth","isMatchingFilters","type","row","current","getRow","id","undefined","filterModel","filteredDescendantCount","children","forEach","childId","childNode","childSubTreeSize","childrenExpanded","shouldPassFilters","nodes","Object","values","i","length"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/@mui/x-data-grid-pro/esm/hooks/features/treeData/gridTreeDataUtils.js"],"sourcesContent":["import { passFilterLogic } from '@mui/x-data-grid/internals';\nexport const TREE_DATA_STRATEGY = 'tree-data';\n\n/**\n * A node is visible if one of the following criteria is met:\n * - One of its children is passing the filter\n * - It is passing the filter\n */\nexport const filterRowTreeFromTreeData = params => {\n  const {\n    apiRef,\n    rowTree,\n    disableChildrenFiltering,\n    isRowMatchingFilters\n  } = params;\n  const filteredRowsLookup = {};\n  const filteredDescendantCountLookup = {};\n  const filterCache = {};\n  const filterResults = {\n    passingFilterItems: null,\n    passingQuickFilterValues: null\n  };\n  const filterTreeNode = (node, isParentMatchingFilters, areAncestorsExpanded) => {\n    const shouldSkipFilters = disableChildrenFiltering && node.depth > 0;\n    let isMatchingFilters;\n    if (shouldSkipFilters) {\n      isMatchingFilters = null;\n    } else if (!isRowMatchingFilters || node.type === 'footer') {\n      isMatchingFilters = true;\n    } else {\n      const row = apiRef.current.getRow(node.id);\n      isRowMatchingFilters(row, undefined, filterResults);\n      isMatchingFilters = passFilterLogic([filterResults.passingFilterItems], [filterResults.passingQuickFilterValues], params.filterModel, params.apiRef, filterCache);\n    }\n    let filteredDescendantCount = 0;\n    if (node.type === 'group') {\n      node.children.forEach(childId => {\n        const childNode = rowTree[childId];\n        const childSubTreeSize = filterTreeNode(childNode, isMatchingFilters ?? isParentMatchingFilters, areAncestorsExpanded && !!node.childrenExpanded);\n        filteredDescendantCount += childSubTreeSize;\n      });\n    }\n    let shouldPassFilters;\n    switch (isMatchingFilters) {\n      case true:\n        {\n          shouldPassFilters = true;\n          break;\n        }\n      case false:\n        {\n          shouldPassFilters = filteredDescendantCount > 0;\n          break;\n        }\n      default:\n        {\n          shouldPassFilters = isParentMatchingFilters;\n          break;\n        }\n    }\n    filteredRowsLookup[node.id] = shouldPassFilters;\n    if (!shouldPassFilters) {\n      return 0;\n    }\n    filteredDescendantCountLookup[node.id] = filteredDescendantCount;\n    if (node.type === 'footer') {\n      return filteredDescendantCount;\n    }\n    return filteredDescendantCount + 1;\n  };\n  const nodes = Object.values(rowTree);\n  for (let i = 0; i < nodes.length; i += 1) {\n    const node = nodes[i];\n    if (node.depth === 0) {\n      filterTreeNode(node, true, true);\n    }\n  }\n  return {\n    filteredRowsLookup,\n    filteredDescendantCountLookup\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}