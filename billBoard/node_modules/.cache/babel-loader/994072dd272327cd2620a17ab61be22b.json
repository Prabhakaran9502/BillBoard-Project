{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { ownerDocument, useEventCallback } from '@mui/material/utils';\nimport { getTotalHeaderHeight, isNavigationKey, serializeCellValue, useGridRegisterPipeProcessor, useGridVisibleRows } from '@mui/x-data-grid-pro/internals';\nimport { useGridApiEventHandler, useGridApiMethod, GRID_ACTIONS_COLUMN_TYPE, GRID_CHECKBOX_SELECTION_COL_DEF, GRID_DETAIL_PANEL_TOGGLE_FIELD, gridRowsDataRowIdToIdLookupSelector, gridClasses, gridFocusCellSelector, GRID_REORDER_COL_DEF, useGridSelector, gridSortedRowIdsSelector, gridDimensionsSelector } from '@mui/x-data-grid-pro';\nimport { gridCellSelectionStateSelector } from './gridCellSelectionSelector';\nexport const cellSelectionStateInitializer = (state, props) => _extends({}, state, {\n  cellSelection: _extends({}, props.cellSelectionModel ?? props.initialState?.cellSelection)\n});\n\nfunction isKeyboardEvent(event) {\n  return !!event.key;\n}\n\nconst AUTO_SCROLL_SENSITIVITY = 50; // The distance from the edge to start scrolling\n\nconst AUTO_SCROLL_SPEED = 20; // The speed to scroll once the mouse enters the sensitivity area\n\nexport const useGridCellSelection = (apiRef, props) => {\n  const visibleRows = useGridVisibleRows(apiRef, props);\n  const cellWithVirtualFocus = React.useRef();\n  const lastMouseDownCell = React.useRef();\n  const mousePosition = React.useRef(null);\n  const autoScrollRAF = React.useRef();\n  const sortedRowIds = useGridSelector(apiRef, gridSortedRowIdsSelector);\n  const dimensions = useGridSelector(apiRef, gridDimensionsSelector);\n  const totalHeaderHeight = getTotalHeaderHeight(apiRef, props);\n  const ignoreValueFormatterProp = props.ignoreValueFormatterDuringExport;\n  const ignoreValueFormatter = (typeof ignoreValueFormatterProp === 'object' ? ignoreValueFormatterProp?.clipboardExport : ignoreValueFormatterProp) || false;\n  const clipboardCopyCellDelimiter = props.clipboardCopyCellDelimiter;\n  apiRef.current.registerControlState({\n    stateId: 'cellSelection',\n    propModel: props.cellSelectionModel,\n    propOnChange: props.onCellSelectionModelChange,\n    stateSelector: gridCellSelectionStateSelector,\n    changeEvent: 'cellSelectionChange'\n  });\n\n  const runIfCellSelectionIsEnabled = callback => function () {\n    if (props.cellSelection) {\n      callback(...arguments);\n    }\n  };\n\n  const isCellSelected = React.useCallback((id, field) => {\n    if (!props.cellSelection) {\n      return false;\n    }\n\n    const cellSelectionModel = gridCellSelectionStateSelector(apiRef.current.state);\n    return cellSelectionModel[id] ? !!cellSelectionModel[id][field] : false;\n  }, [apiRef, props.cellSelection]);\n  const getCellSelectionModel = React.useCallback(() => {\n    return gridCellSelectionStateSelector(apiRef.current.state);\n  }, [apiRef]);\n  const setCellSelectionModel = React.useCallback(newModel => {\n    if (!props.cellSelection) {\n      return;\n    }\n\n    apiRef.current.setState(prevState => _extends({}, prevState, {\n      cellSelection: newModel\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef, props.cellSelection]);\n  const selectCellRange = React.useCallback(function (start, end) {\n    let keepOtherSelected = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const startRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(start.id);\n    const startColumnIndex = apiRef.current.getColumnIndex(start.field);\n    const endRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(end.id);\n    const endColumnIndex = apiRef.current.getColumnIndex(end.field);\n    let finalStartRowIndex = startRowIndex;\n    let finalStartColumnIndex = startColumnIndex;\n    let finalEndRowIndex = endRowIndex;\n    let finalEndColumnIndex = endColumnIndex;\n\n    if (finalStartRowIndex > finalEndRowIndex) {\n      finalStartRowIndex = endRowIndex;\n      finalEndRowIndex = startRowIndex;\n    }\n\n    if (finalStartColumnIndex > finalEndColumnIndex) {\n      finalStartColumnIndex = endColumnIndex;\n      finalEndColumnIndex = startColumnIndex;\n    }\n\n    const visibleColumns = apiRef.current.getVisibleColumns();\n    const rowsInRange = visibleRows.rows.slice(finalStartRowIndex, finalEndRowIndex + 1);\n    const columnsInRange = visibleColumns.slice(finalStartColumnIndex, finalEndColumnIndex + 1);\n    const newModel = keepOtherSelected ? apiRef.current.getCellSelectionModel() : {};\n    rowsInRange.forEach(row => {\n      if (!newModel[row.id]) {\n        newModel[row.id] = {};\n      }\n\n      columnsInRange.forEach(column => {\n        newModel[row.id][column.field] = true;\n      }, {});\n    });\n    apiRef.current.setCellSelectionModel(newModel);\n  }, [apiRef, visibleRows.rows]);\n  const getSelectedCellsAsArray = React.useCallback(() => {\n    const model = apiRef.current.getCellSelectionModel();\n    const idToIdLookup = gridRowsDataRowIdToIdLookupSelector(apiRef);\n    return Object.entries(model).reduce((acc, _ref) => {\n      let [id, fields] = _ref;\n      return [...acc, ...Object.entries(fields).reduce((acc2, _ref2) => {\n        let [field, isSelected] = _ref2;\n        return isSelected ? [...acc2, {\n          id: idToIdLookup[id],\n          field\n        }] : acc2;\n      }, [])];\n    }, []);\n  }, [apiRef]);\n  const cellSelectionApi = {\n    isCellSelected,\n    getCellSelectionModel,\n    setCellSelectionModel,\n    selectCellRange,\n    getSelectedCellsAsArray\n  };\n  useGridApiMethod(apiRef, cellSelectionApi, 'public');\n  const hasClickedValidCellForRangeSelection = React.useCallback(params => {\n    if (params.field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      return false;\n    }\n\n    if (params.field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n      return false;\n    }\n\n    const column = apiRef.current.getColumn(params.field);\n\n    if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n      return false;\n    }\n\n    return params.rowNode.type !== 'pinnedRow';\n  }, [apiRef]);\n  const handleMouseUp = useEventCallback(() => {\n    lastMouseDownCell.current = null;\n    apiRef.current.rootElementRef?.current?.classList.remove(gridClasses['root--disableUserSelection']); // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n    stopAutoScroll();\n  });\n  const handleCellMouseDown = React.useCallback((params, event) => {\n    // Skip if the click comes from the right-button or, only on macOS, Ctrl is pressed\n    // Fix for https://github.com/mui/mui-x/pull/6567#issuecomment-1329155578\n    const isMacOs = window.navigator.platform.toUpperCase().indexOf('MAC') >= 0;\n\n    if (event.button !== 0 || event.ctrlKey && isMacOs) {\n      return;\n    }\n\n    if (params.field === GRID_REORDER_COL_DEF.field) {\n      return;\n    }\n\n    const focusedCell = gridFocusCellSelector(apiRef);\n\n    if (hasClickedValidCellForRangeSelection(params) && event.shiftKey && focusedCell) {\n      event.preventDefault();\n    }\n\n    lastMouseDownCell.current = {\n      id: params.id,\n      field: params.field\n    };\n    apiRef.current.rootElementRef?.current?.classList.add(gridClasses['root--disableUserSelection']);\n    const document = ownerDocument(apiRef.current.rootElementRef?.current);\n    document.addEventListener('mouseup', handleMouseUp, {\n      once: true\n    });\n  }, [apiRef, handleMouseUp, hasClickedValidCellForRangeSelection]);\n  const stopAutoScroll = React.useCallback(() => {\n    if (autoScrollRAF.current) {\n      cancelAnimationFrame(autoScrollRAF.current);\n      autoScrollRAF.current = null;\n    }\n  }, []);\n  const handleCellFocusIn = React.useCallback(params => {\n    cellWithVirtualFocus.current = {\n      id: params.id,\n      field: params.field\n    };\n  }, []);\n  const startAutoScroll = React.useCallback(() => {\n    if (autoScrollRAF.current) {\n      return;\n    }\n\n    if (!apiRef.current.virtualScrollerRef?.current) {\n      return;\n    }\n\n    function autoScroll() {\n      if (!mousePosition.current || !apiRef.current.virtualScrollerRef?.current) {\n        return;\n      }\n\n      const {\n        x: mouseX,\n        y: mouseY\n      } = mousePosition.current;\n      const {\n        height,\n        width\n      } = dimensions.viewportInnerSize;\n      let deltaX = 0;\n      let deltaY = 0;\n      let factor = 0;\n\n      if (mouseY <= AUTO_SCROLL_SENSITIVITY && dimensions.hasScrollY) {\n        // When scrolling up, the multiplier increases going closer to the top edge\n        factor = (AUTO_SCROLL_SENSITIVITY - mouseY) / -AUTO_SCROLL_SENSITIVITY;\n        deltaY = AUTO_SCROLL_SPEED;\n      } else if (mouseY >= height - AUTO_SCROLL_SENSITIVITY && dimensions.hasScrollY) {\n        // When scrolling down, the multiplier increases going closer to the bottom edge\n        factor = (mouseY - (height - AUTO_SCROLL_SENSITIVITY)) / AUTO_SCROLL_SENSITIVITY;\n        deltaY = AUTO_SCROLL_SPEED;\n      } else if (mouseX <= AUTO_SCROLL_SENSITIVITY && dimensions.hasScrollX) {\n        // When scrolling left, the multiplier increases going closer to the left edge\n        factor = (AUTO_SCROLL_SENSITIVITY - mouseX) / -AUTO_SCROLL_SENSITIVITY;\n        deltaX = AUTO_SCROLL_SPEED;\n      } else if (mouseX >= width - AUTO_SCROLL_SENSITIVITY && dimensions.hasScrollX) {\n        // When scrolling right, the multiplier increases going closer to the right edge\n        factor = (mouseX - (width - AUTO_SCROLL_SENSITIVITY)) / AUTO_SCROLL_SENSITIVITY;\n        deltaX = AUTO_SCROLL_SPEED;\n      }\n\n      if (deltaX !== 0 || deltaY !== 0) {\n        const {\n          scrollLeft,\n          scrollTop\n        } = apiRef.current.virtualScrollerRef.current;\n        apiRef.current.scroll({\n          top: scrollTop + deltaY * factor,\n          left: scrollLeft + deltaX * factor\n        });\n      }\n\n      autoScrollRAF.current = requestAnimationFrame(autoScroll);\n    }\n\n    autoScroll();\n  }, [apiRef, dimensions]);\n  const handleCellMouseOver = React.useCallback((params, event) => {\n    if (!lastMouseDownCell.current) {\n      return;\n    }\n\n    const {\n      id,\n      field\n    } = params;\n    apiRef.current.selectCellRange(lastMouseDownCell.current, {\n      id,\n      field\n    }, event.ctrlKey || event.metaKey);\n    const virtualScrollerRect = apiRef.current.virtualScrollerRef?.current?.getBoundingClientRect();\n\n    if (!virtualScrollerRect) {\n      return;\n    }\n\n    const {\n      x,\n      y\n    } = virtualScrollerRect;\n    const {\n      height,\n      width\n    } = dimensions.viewportInnerSize;\n    const mouseX = event.clientX - x;\n    const mouseY = event.clientY - y - totalHeaderHeight;\n    mousePosition.current = {\n      x: mouseX,\n      y: mouseY\n    };\n    const hasEnteredVerticalSensitivityArea = mouseY <= AUTO_SCROLL_SENSITIVITY || mouseY >= height - AUTO_SCROLL_SENSITIVITY;\n    const hasEnteredHorizontalSensitivityArea = mouseX <= AUTO_SCROLL_SENSITIVITY || mouseX >= width - AUTO_SCROLL_SENSITIVITY;\n    const hasEnteredSensitivityArea = hasEnteredVerticalSensitivityArea || hasEnteredHorizontalSensitivityArea;\n\n    if (hasEnteredSensitivityArea) {\n      // Mouse has entered the sensitity area for the first time\n      startAutoScroll();\n    } else {\n      // Mouse has left the sensitivity area while auto scroll is on\n      stopAutoScroll();\n    }\n  }, [apiRef, startAutoScroll, stopAutoScroll, totalHeaderHeight, dimensions]);\n  const handleCellClick = useEventCallback((params, event) => {\n    const {\n      id,\n      field\n    } = params;\n\n    if (!hasClickedValidCellForRangeSelection(params)) {\n      return;\n    }\n\n    const focusedCell = gridFocusCellSelector(apiRef);\n\n    if (event.shiftKey && focusedCell) {\n      apiRef.current.selectCellRange(focusedCell, {\n        id,\n        field\n      });\n      cellWithVirtualFocus.current = {\n        id,\n        field\n      };\n      return;\n    }\n\n    if (event.ctrlKey || event.metaKey) {\n      // Add the clicked cell to the selection\n      const prevModel = apiRef.current.getCellSelectionModel();\n      apiRef.current.setCellSelectionModel(_extends({}, prevModel, {\n        [id]: _extends({}, prevModel[id], {\n          [field]: !apiRef.current.isCellSelected(id, field)\n        })\n      }));\n    } else {\n      // Clear the selection and keep only the clicked cell selected\n      apiRef.current.setCellSelectionModel({\n        [id]: {\n          [field]: true\n        }\n      });\n    }\n  });\n  const handleCellKeyDown = useEventCallback((params, event) => {\n    if (!isNavigationKey(event.key) || !cellWithVirtualFocus.current) {\n      return;\n    }\n\n    if (!event.shiftKey) {\n      apiRef.current.setCellSelectionModel({});\n      return;\n    }\n\n    const {\n      current: otherCell\n    } = cellWithVirtualFocus;\n    let endRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(otherCell.id);\n    let endColumnIndex = apiRef.current.getColumnIndex(otherCell.field);\n\n    if (event.key === 'ArrowDown') {\n      endRowIndex += 1;\n    } else if (event.key === 'ArrowUp') {\n      endRowIndex -= 1;\n    } else if (event.key === 'ArrowRight') {\n      endColumnIndex += 1;\n    } else if (event.key === 'ArrowLeft') {\n      endColumnIndex -= 1;\n    }\n\n    if (endRowIndex < 0 || endRowIndex >= visibleRows.rows.length) {\n      return;\n    }\n\n    const visibleColumns = apiRef.current.getVisibleColumns();\n\n    if (endColumnIndex < 0 || endColumnIndex >= visibleColumns.length) {\n      return;\n    }\n\n    cellWithVirtualFocus.current = {\n      id: visibleRows.rows[endRowIndex].id,\n      field: visibleColumns[endColumnIndex].field\n    };\n    apiRef.current.scrollToIndexes({\n      rowIndex: endRowIndex,\n      colIndex: endColumnIndex\n    });\n    const {\n      id,\n      field\n    } = params;\n    apiRef.current.selectCellRange({\n      id,\n      field\n    }, cellWithVirtualFocus.current);\n  });\n  useGridApiEventHandler(apiRef, 'cellClick', runIfCellSelectionIsEnabled(handleCellClick));\n  useGridApiEventHandler(apiRef, 'cellFocusIn', runIfCellSelectionIsEnabled(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfCellSelectionIsEnabled(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'cellMouseDown', runIfCellSelectionIsEnabled(handleCellMouseDown));\n  useGridApiEventHandler(apiRef, 'cellMouseOver', runIfCellSelectionIsEnabled(handleCellMouseOver));\n  React.useEffect(() => {\n    if (props.cellSelectionModel) {\n      apiRef.current.setCellSelectionModel(props.cellSelectionModel);\n    }\n  }, [apiRef, props.cellSelectionModel]);\n  React.useEffect(() => {\n    const rootRef = apiRef.current.rootElementRef?.current;\n    return () => {\n      stopAutoScroll();\n      const document = ownerDocument(rootRef);\n      document.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [apiRef, handleMouseUp, stopAutoScroll]);\n  const checkIfCellIsSelected = React.useCallback((isSelected, _ref3) => {\n    let {\n      id,\n      field\n    } = _ref3;\n    return apiRef.current.isCellSelected(id, field);\n  }, [apiRef]);\n  const addClassesToCells = React.useCallback((classes, _ref4) => {\n    let {\n      id,\n      field\n    } = _ref4;\n\n    if (!visibleRows.range || !apiRef.current.isCellSelected(id, field)) {\n      return classes;\n    }\n\n    const newClasses = [...classes];\n    const rowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(id);\n    const columnIndex = apiRef.current.getColumnIndex(field);\n    const visibleColumns = apiRef.current.getVisibleColumns();\n\n    if (rowIndex > 0) {\n      const {\n        id: previousRowId\n      } = visibleRows.rows[rowIndex - 1];\n\n      if (!apiRef.current.isCellSelected(previousRowId, field)) {\n        newClasses.push(gridClasses['cell--rangeTop']);\n      }\n    } else {\n      newClasses.push(gridClasses['cell--rangeTop']);\n    }\n\n    if (rowIndex + visibleRows.range.firstRowIndex < visibleRows.range.lastRowIndex) {\n      const {\n        id: nextRowId\n      } = visibleRows.rows[rowIndex + 1];\n\n      if (!apiRef.current.isCellSelected(nextRowId, field)) {\n        newClasses.push(gridClasses['cell--rangeBottom']);\n      }\n    } else {\n      newClasses.push(gridClasses['cell--rangeBottom']);\n    }\n\n    if (columnIndex > 0) {\n      const {\n        field: previousColumnField\n      } = visibleColumns[columnIndex - 1];\n\n      if (!apiRef.current.isCellSelected(id, previousColumnField)) {\n        newClasses.push(gridClasses['cell--rangeLeft']);\n      }\n    } else {\n      newClasses.push(gridClasses['cell--rangeLeft']);\n    }\n\n    if (columnIndex < visibleColumns.length - 1) {\n      const {\n        field: nextColumnField\n      } = visibleColumns[columnIndex + 1];\n\n      if (!apiRef.current.isCellSelected(id, nextColumnField)) {\n        newClasses.push(gridClasses['cell--rangeRight']);\n      }\n    } else {\n      newClasses.push(gridClasses['cell--rangeRight']);\n    }\n\n    return newClasses;\n  }, [apiRef, visibleRows.range, visibleRows.rows]);\n  const canUpdateFocus = React.useCallback((initialValue, _ref5) => {\n    let {\n      event,\n      cell\n    } = _ref5;\n\n    if (!cell || !props.cellSelection || !event.shiftKey) {\n      return initialValue;\n    }\n\n    if (isKeyboardEvent(event)) {\n      return isNavigationKey(event.key) ? false : initialValue;\n    }\n\n    const focusedCell = gridFocusCellSelector(apiRef);\n\n    if (hasClickedValidCellForRangeSelection(cell) && focusedCell) {\n      return false;\n    }\n\n    return initialValue;\n  }, [apiRef, props.cellSelection, hasClickedValidCellForRangeSelection]);\n  const handleClipboardCopy = React.useCallback(value => {\n    if (apiRef.current.getSelectedCellsAsArray().length <= 1) {\n      return value;\n    }\n\n    const cellSelectionModel = apiRef.current.getCellSelectionModel();\n    const unsortedSelectedRowIds = Object.keys(cellSelectionModel);\n    const sortedSelectedRowIds = sortedRowIds.filter(id => unsortedSelectedRowIds.includes(`${id}`));\n    const copyData = sortedSelectedRowIds.reduce((acc, rowId) => {\n      const fieldsMap = cellSelectionModel[rowId];\n      const rowString = Object.keys(fieldsMap).reduce((acc2, field) => {\n        let cellData;\n\n        if (fieldsMap[field]) {\n          const cellParams = apiRef.current.getCellParams(rowId, field);\n          cellData = serializeCellValue(cellParams, {\n            csvOptions: {\n              delimiter: clipboardCopyCellDelimiter,\n              shouldAppendQuotes: false,\n              escapeFormulas: false\n            },\n            ignoreValueFormatter\n          });\n        } else {\n          cellData = '';\n        }\n\n        return acc2 === '' ? cellData : [acc2, cellData].join(clipboardCopyCellDelimiter);\n      }, '');\n      return acc === '' ? rowString : [acc, rowString].join('\\r\\n');\n    }, '');\n    return copyData;\n  }, [apiRef, ignoreValueFormatter, clipboardCopyCellDelimiter, sortedRowIds]);\n  useGridRegisterPipeProcessor(apiRef, 'isCellSelected', checkIfCellIsSelected);\n  useGridRegisterPipeProcessor(apiRef, 'cellClassName', addClassesToCells);\n  useGridRegisterPipeProcessor(apiRef, 'canUpdateFocus', canUpdateFocus);\n  useGridRegisterPipeProcessor(apiRef, 'clipboardCopy', handleClipboardCopy);\n};","map":{"version":3,"names":["_extends","React","ownerDocument","useEventCallback","getTotalHeaderHeight","isNavigationKey","serializeCellValue","useGridRegisterPipeProcessor","useGridVisibleRows","useGridApiEventHandler","useGridApiMethod","GRID_ACTIONS_COLUMN_TYPE","GRID_CHECKBOX_SELECTION_COL_DEF","GRID_DETAIL_PANEL_TOGGLE_FIELD","gridRowsDataRowIdToIdLookupSelector","gridClasses","gridFocusCellSelector","GRID_REORDER_COL_DEF","useGridSelector","gridSortedRowIdsSelector","gridDimensionsSelector","gridCellSelectionStateSelector","cellSelectionStateInitializer","state","props","cellSelection","cellSelectionModel","initialState","isKeyboardEvent","event","key","AUTO_SCROLL_SENSITIVITY","AUTO_SCROLL_SPEED","useGridCellSelection","apiRef","visibleRows","cellWithVirtualFocus","useRef","lastMouseDownCell","mousePosition","autoScrollRAF","sortedRowIds","dimensions","totalHeaderHeight","ignoreValueFormatterProp","ignoreValueFormatterDuringExport","ignoreValueFormatter","clipboardExport","clipboardCopyCellDelimiter","current","registerControlState","stateId","propModel","propOnChange","onCellSelectionModelChange","stateSelector","changeEvent","runIfCellSelectionIsEnabled","callback","isCellSelected","useCallback","id","field","getCellSelectionModel","setCellSelectionModel","newModel","setState","prevState","forceUpdate","selectCellRange","start","end","keepOtherSelected","startRowIndex","getRowIndexRelativeToVisibleRows","startColumnIndex","getColumnIndex","endRowIndex","endColumnIndex","finalStartRowIndex","finalStartColumnIndex","finalEndRowIndex","finalEndColumnIndex","visibleColumns","getVisibleColumns","rowsInRange","rows","slice","columnsInRange","forEach","row","column","getSelectedCellsAsArray","model","idToIdLookup","Object","entries","reduce","acc","fields","acc2","isSelected","cellSelectionApi","hasClickedValidCellForRangeSelection","params","getColumn","type","rowNode","handleMouseUp","rootElementRef","classList","remove","stopAutoScroll","handleCellMouseDown","isMacOs","window","navigator","platform","toUpperCase","indexOf","button","ctrlKey","focusedCell","shiftKey","preventDefault","add","document","addEventListener","once","cancelAnimationFrame","handleCellFocusIn","startAutoScroll","virtualScrollerRef","autoScroll","x","mouseX","y","mouseY","height","width","viewportInnerSize","deltaX","deltaY","factor","hasScrollY","hasScrollX","scrollLeft","scrollTop","scroll","top","left","requestAnimationFrame","handleCellMouseOver","metaKey","virtualScrollerRect","getBoundingClientRect","clientX","clientY","hasEnteredVerticalSensitivityArea","hasEnteredHorizontalSensitivityArea","hasEnteredSensitivityArea","handleCellClick","prevModel","handleCellKeyDown","otherCell","length","scrollToIndexes","rowIndex","colIndex","useEffect","rootRef","removeEventListener","checkIfCellIsSelected","addClassesToCells","classes","range","newClasses","columnIndex","previousRowId","push","firstRowIndex","lastRowIndex","nextRowId","previousColumnField","nextColumnField","canUpdateFocus","initialValue","cell","handleClipboardCopy","value","unsortedSelectedRowIds","keys","sortedSelectedRowIds","filter","includes","copyData","rowId","fieldsMap","rowString","cellData","cellParams","getCellParams","csvOptions","delimiter","shouldAppendQuotes","escapeFormulas","join"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/@mui/x-data-grid-premium/esm/hooks/features/cellSelection/useGridCellSelection.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { ownerDocument, useEventCallback } from '@mui/material/utils';\nimport { getTotalHeaderHeight, isNavigationKey, serializeCellValue, useGridRegisterPipeProcessor, useGridVisibleRows } from '@mui/x-data-grid-pro/internals';\nimport { useGridApiEventHandler, useGridApiMethod, GRID_ACTIONS_COLUMN_TYPE, GRID_CHECKBOX_SELECTION_COL_DEF, GRID_DETAIL_PANEL_TOGGLE_FIELD, gridRowsDataRowIdToIdLookupSelector, gridClasses, gridFocusCellSelector, GRID_REORDER_COL_DEF, useGridSelector, gridSortedRowIdsSelector, gridDimensionsSelector } from '@mui/x-data-grid-pro';\nimport { gridCellSelectionStateSelector } from './gridCellSelectionSelector';\nexport const cellSelectionStateInitializer = (state, props) => _extends({}, state, {\n  cellSelection: _extends({}, props.cellSelectionModel ?? props.initialState?.cellSelection)\n});\nfunction isKeyboardEvent(event) {\n  return !!event.key;\n}\nconst AUTO_SCROLL_SENSITIVITY = 50; // The distance from the edge to start scrolling\nconst AUTO_SCROLL_SPEED = 20; // The speed to scroll once the mouse enters the sensitivity area\n\nexport const useGridCellSelection = (apiRef, props) => {\n  const visibleRows = useGridVisibleRows(apiRef, props);\n  const cellWithVirtualFocus = React.useRef();\n  const lastMouseDownCell = React.useRef();\n  const mousePosition = React.useRef(null);\n  const autoScrollRAF = React.useRef();\n  const sortedRowIds = useGridSelector(apiRef, gridSortedRowIdsSelector);\n  const dimensions = useGridSelector(apiRef, gridDimensionsSelector);\n  const totalHeaderHeight = getTotalHeaderHeight(apiRef, props);\n  const ignoreValueFormatterProp = props.ignoreValueFormatterDuringExport;\n  const ignoreValueFormatter = (typeof ignoreValueFormatterProp === 'object' ? ignoreValueFormatterProp?.clipboardExport : ignoreValueFormatterProp) || false;\n  const clipboardCopyCellDelimiter = props.clipboardCopyCellDelimiter;\n  apiRef.current.registerControlState({\n    stateId: 'cellSelection',\n    propModel: props.cellSelectionModel,\n    propOnChange: props.onCellSelectionModelChange,\n    stateSelector: gridCellSelectionStateSelector,\n    changeEvent: 'cellSelectionChange'\n  });\n  const runIfCellSelectionIsEnabled = callback => (...args) => {\n    if (props.cellSelection) {\n      callback(...args);\n    }\n  };\n  const isCellSelected = React.useCallback((id, field) => {\n    if (!props.cellSelection) {\n      return false;\n    }\n    const cellSelectionModel = gridCellSelectionStateSelector(apiRef.current.state);\n    return cellSelectionModel[id] ? !!cellSelectionModel[id][field] : false;\n  }, [apiRef, props.cellSelection]);\n  const getCellSelectionModel = React.useCallback(() => {\n    return gridCellSelectionStateSelector(apiRef.current.state);\n  }, [apiRef]);\n  const setCellSelectionModel = React.useCallback(newModel => {\n    if (!props.cellSelection) {\n      return;\n    }\n    apiRef.current.setState(prevState => _extends({}, prevState, {\n      cellSelection: newModel\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef, props.cellSelection]);\n  const selectCellRange = React.useCallback((start, end, keepOtherSelected = false) => {\n    const startRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(start.id);\n    const startColumnIndex = apiRef.current.getColumnIndex(start.field);\n    const endRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(end.id);\n    const endColumnIndex = apiRef.current.getColumnIndex(end.field);\n    let finalStartRowIndex = startRowIndex;\n    let finalStartColumnIndex = startColumnIndex;\n    let finalEndRowIndex = endRowIndex;\n    let finalEndColumnIndex = endColumnIndex;\n    if (finalStartRowIndex > finalEndRowIndex) {\n      finalStartRowIndex = endRowIndex;\n      finalEndRowIndex = startRowIndex;\n    }\n    if (finalStartColumnIndex > finalEndColumnIndex) {\n      finalStartColumnIndex = endColumnIndex;\n      finalEndColumnIndex = startColumnIndex;\n    }\n    const visibleColumns = apiRef.current.getVisibleColumns();\n    const rowsInRange = visibleRows.rows.slice(finalStartRowIndex, finalEndRowIndex + 1);\n    const columnsInRange = visibleColumns.slice(finalStartColumnIndex, finalEndColumnIndex + 1);\n    const newModel = keepOtherSelected ? apiRef.current.getCellSelectionModel() : {};\n    rowsInRange.forEach(row => {\n      if (!newModel[row.id]) {\n        newModel[row.id] = {};\n      }\n      columnsInRange.forEach(column => {\n        newModel[row.id][column.field] = true;\n      }, {});\n    });\n    apiRef.current.setCellSelectionModel(newModel);\n  }, [apiRef, visibleRows.rows]);\n  const getSelectedCellsAsArray = React.useCallback(() => {\n    const model = apiRef.current.getCellSelectionModel();\n    const idToIdLookup = gridRowsDataRowIdToIdLookupSelector(apiRef);\n    return Object.entries(model).reduce((acc, [id, fields]) => [...acc, ...Object.entries(fields).reduce((acc2, [field, isSelected]) => {\n      return isSelected ? [...acc2, {\n        id: idToIdLookup[id],\n        field\n      }] : acc2;\n    }, [])], []);\n  }, [apiRef]);\n  const cellSelectionApi = {\n    isCellSelected,\n    getCellSelectionModel,\n    setCellSelectionModel,\n    selectCellRange,\n    getSelectedCellsAsArray\n  };\n  useGridApiMethod(apiRef, cellSelectionApi, 'public');\n  const hasClickedValidCellForRangeSelection = React.useCallback(params => {\n    if (params.field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      return false;\n    }\n    if (params.field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n      return false;\n    }\n    const column = apiRef.current.getColumn(params.field);\n    if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n      return false;\n    }\n    return params.rowNode.type !== 'pinnedRow';\n  }, [apiRef]);\n  const handleMouseUp = useEventCallback(() => {\n    lastMouseDownCell.current = null;\n    apiRef.current.rootElementRef?.current?.classList.remove(gridClasses['root--disableUserSelection']);\n\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    stopAutoScroll();\n  });\n  const handleCellMouseDown = React.useCallback((params, event) => {\n    // Skip if the click comes from the right-button or, only on macOS, Ctrl is pressed\n    // Fix for https://github.com/mui/mui-x/pull/6567#issuecomment-1329155578\n    const isMacOs = window.navigator.platform.toUpperCase().indexOf('MAC') >= 0;\n    if (event.button !== 0 || event.ctrlKey && isMacOs) {\n      return;\n    }\n    if (params.field === GRID_REORDER_COL_DEF.field) {\n      return;\n    }\n    const focusedCell = gridFocusCellSelector(apiRef);\n    if (hasClickedValidCellForRangeSelection(params) && event.shiftKey && focusedCell) {\n      event.preventDefault();\n    }\n    lastMouseDownCell.current = {\n      id: params.id,\n      field: params.field\n    };\n    apiRef.current.rootElementRef?.current?.classList.add(gridClasses['root--disableUserSelection']);\n    const document = ownerDocument(apiRef.current.rootElementRef?.current);\n    document.addEventListener('mouseup', handleMouseUp, {\n      once: true\n    });\n  }, [apiRef, handleMouseUp, hasClickedValidCellForRangeSelection]);\n  const stopAutoScroll = React.useCallback(() => {\n    if (autoScrollRAF.current) {\n      cancelAnimationFrame(autoScrollRAF.current);\n      autoScrollRAF.current = null;\n    }\n  }, []);\n  const handleCellFocusIn = React.useCallback(params => {\n    cellWithVirtualFocus.current = {\n      id: params.id,\n      field: params.field\n    };\n  }, []);\n  const startAutoScroll = React.useCallback(() => {\n    if (autoScrollRAF.current) {\n      return;\n    }\n    if (!apiRef.current.virtualScrollerRef?.current) {\n      return;\n    }\n    function autoScroll() {\n      if (!mousePosition.current || !apiRef.current.virtualScrollerRef?.current) {\n        return;\n      }\n      const {\n        x: mouseX,\n        y: mouseY\n      } = mousePosition.current;\n      const {\n        height,\n        width\n      } = dimensions.viewportInnerSize;\n      let deltaX = 0;\n      let deltaY = 0;\n      let factor = 0;\n      if (mouseY <= AUTO_SCROLL_SENSITIVITY && dimensions.hasScrollY) {\n        // When scrolling up, the multiplier increases going closer to the top edge\n        factor = (AUTO_SCROLL_SENSITIVITY - mouseY) / -AUTO_SCROLL_SENSITIVITY;\n        deltaY = AUTO_SCROLL_SPEED;\n      } else if (mouseY >= height - AUTO_SCROLL_SENSITIVITY && dimensions.hasScrollY) {\n        // When scrolling down, the multiplier increases going closer to the bottom edge\n        factor = (mouseY - (height - AUTO_SCROLL_SENSITIVITY)) / AUTO_SCROLL_SENSITIVITY;\n        deltaY = AUTO_SCROLL_SPEED;\n      } else if (mouseX <= AUTO_SCROLL_SENSITIVITY && dimensions.hasScrollX) {\n        // When scrolling left, the multiplier increases going closer to the left edge\n        factor = (AUTO_SCROLL_SENSITIVITY - mouseX) / -AUTO_SCROLL_SENSITIVITY;\n        deltaX = AUTO_SCROLL_SPEED;\n      } else if (mouseX >= width - AUTO_SCROLL_SENSITIVITY && dimensions.hasScrollX) {\n        // When scrolling right, the multiplier increases going closer to the right edge\n        factor = (mouseX - (width - AUTO_SCROLL_SENSITIVITY)) / AUTO_SCROLL_SENSITIVITY;\n        deltaX = AUTO_SCROLL_SPEED;\n      }\n      if (deltaX !== 0 || deltaY !== 0) {\n        const {\n          scrollLeft,\n          scrollTop\n        } = apiRef.current.virtualScrollerRef.current;\n        apiRef.current.scroll({\n          top: scrollTop + deltaY * factor,\n          left: scrollLeft + deltaX * factor\n        });\n      }\n      autoScrollRAF.current = requestAnimationFrame(autoScroll);\n    }\n    autoScroll();\n  }, [apiRef, dimensions]);\n  const handleCellMouseOver = React.useCallback((params, event) => {\n    if (!lastMouseDownCell.current) {\n      return;\n    }\n    const {\n      id,\n      field\n    } = params;\n    apiRef.current.selectCellRange(lastMouseDownCell.current, {\n      id,\n      field\n    }, event.ctrlKey || event.metaKey);\n    const virtualScrollerRect = apiRef.current.virtualScrollerRef?.current?.getBoundingClientRect();\n    if (!virtualScrollerRect) {\n      return;\n    }\n    const {\n      x,\n      y\n    } = virtualScrollerRect;\n    const {\n      height,\n      width\n    } = dimensions.viewportInnerSize;\n    const mouseX = event.clientX - x;\n    const mouseY = event.clientY - y - totalHeaderHeight;\n    mousePosition.current = {\n      x: mouseX,\n      y: mouseY\n    };\n    const hasEnteredVerticalSensitivityArea = mouseY <= AUTO_SCROLL_SENSITIVITY || mouseY >= height - AUTO_SCROLL_SENSITIVITY;\n    const hasEnteredHorizontalSensitivityArea = mouseX <= AUTO_SCROLL_SENSITIVITY || mouseX >= width - AUTO_SCROLL_SENSITIVITY;\n    const hasEnteredSensitivityArea = hasEnteredVerticalSensitivityArea || hasEnteredHorizontalSensitivityArea;\n    if (hasEnteredSensitivityArea) {\n      // Mouse has entered the sensitity area for the first time\n      startAutoScroll();\n    } else {\n      // Mouse has left the sensitivity area while auto scroll is on\n      stopAutoScroll();\n    }\n  }, [apiRef, startAutoScroll, stopAutoScroll, totalHeaderHeight, dimensions]);\n  const handleCellClick = useEventCallback((params, event) => {\n    const {\n      id,\n      field\n    } = params;\n    if (!hasClickedValidCellForRangeSelection(params)) {\n      return;\n    }\n    const focusedCell = gridFocusCellSelector(apiRef);\n    if (event.shiftKey && focusedCell) {\n      apiRef.current.selectCellRange(focusedCell, {\n        id,\n        field\n      });\n      cellWithVirtualFocus.current = {\n        id,\n        field\n      };\n      return;\n    }\n    if (event.ctrlKey || event.metaKey) {\n      // Add the clicked cell to the selection\n      const prevModel = apiRef.current.getCellSelectionModel();\n      apiRef.current.setCellSelectionModel(_extends({}, prevModel, {\n        [id]: _extends({}, prevModel[id], {\n          [field]: !apiRef.current.isCellSelected(id, field)\n        })\n      }));\n    } else {\n      // Clear the selection and keep only the clicked cell selected\n      apiRef.current.setCellSelectionModel({\n        [id]: {\n          [field]: true\n        }\n      });\n    }\n  });\n  const handleCellKeyDown = useEventCallback((params, event) => {\n    if (!isNavigationKey(event.key) || !cellWithVirtualFocus.current) {\n      return;\n    }\n    if (!event.shiftKey) {\n      apiRef.current.setCellSelectionModel({});\n      return;\n    }\n    const {\n      current: otherCell\n    } = cellWithVirtualFocus;\n    let endRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(otherCell.id);\n    let endColumnIndex = apiRef.current.getColumnIndex(otherCell.field);\n    if (event.key === 'ArrowDown') {\n      endRowIndex += 1;\n    } else if (event.key === 'ArrowUp') {\n      endRowIndex -= 1;\n    } else if (event.key === 'ArrowRight') {\n      endColumnIndex += 1;\n    } else if (event.key === 'ArrowLeft') {\n      endColumnIndex -= 1;\n    }\n    if (endRowIndex < 0 || endRowIndex >= visibleRows.rows.length) {\n      return;\n    }\n    const visibleColumns = apiRef.current.getVisibleColumns();\n    if (endColumnIndex < 0 || endColumnIndex >= visibleColumns.length) {\n      return;\n    }\n    cellWithVirtualFocus.current = {\n      id: visibleRows.rows[endRowIndex].id,\n      field: visibleColumns[endColumnIndex].field\n    };\n    apiRef.current.scrollToIndexes({\n      rowIndex: endRowIndex,\n      colIndex: endColumnIndex\n    });\n    const {\n      id,\n      field\n    } = params;\n    apiRef.current.selectCellRange({\n      id,\n      field\n    }, cellWithVirtualFocus.current);\n  });\n  useGridApiEventHandler(apiRef, 'cellClick', runIfCellSelectionIsEnabled(handleCellClick));\n  useGridApiEventHandler(apiRef, 'cellFocusIn', runIfCellSelectionIsEnabled(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfCellSelectionIsEnabled(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'cellMouseDown', runIfCellSelectionIsEnabled(handleCellMouseDown));\n  useGridApiEventHandler(apiRef, 'cellMouseOver', runIfCellSelectionIsEnabled(handleCellMouseOver));\n  React.useEffect(() => {\n    if (props.cellSelectionModel) {\n      apiRef.current.setCellSelectionModel(props.cellSelectionModel);\n    }\n  }, [apiRef, props.cellSelectionModel]);\n  React.useEffect(() => {\n    const rootRef = apiRef.current.rootElementRef?.current;\n    return () => {\n      stopAutoScroll();\n      const document = ownerDocument(rootRef);\n      document.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [apiRef, handleMouseUp, stopAutoScroll]);\n  const checkIfCellIsSelected = React.useCallback((isSelected, {\n    id,\n    field\n  }) => {\n    return apiRef.current.isCellSelected(id, field);\n  }, [apiRef]);\n  const addClassesToCells = React.useCallback((classes, {\n    id,\n    field\n  }) => {\n    if (!visibleRows.range || !apiRef.current.isCellSelected(id, field)) {\n      return classes;\n    }\n    const newClasses = [...classes];\n    const rowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(id);\n    const columnIndex = apiRef.current.getColumnIndex(field);\n    const visibleColumns = apiRef.current.getVisibleColumns();\n    if (rowIndex > 0) {\n      const {\n        id: previousRowId\n      } = visibleRows.rows[rowIndex - 1];\n      if (!apiRef.current.isCellSelected(previousRowId, field)) {\n        newClasses.push(gridClasses['cell--rangeTop']);\n      }\n    } else {\n      newClasses.push(gridClasses['cell--rangeTop']);\n    }\n    if (rowIndex + visibleRows.range.firstRowIndex < visibleRows.range.lastRowIndex) {\n      const {\n        id: nextRowId\n      } = visibleRows.rows[rowIndex + 1];\n      if (!apiRef.current.isCellSelected(nextRowId, field)) {\n        newClasses.push(gridClasses['cell--rangeBottom']);\n      }\n    } else {\n      newClasses.push(gridClasses['cell--rangeBottom']);\n    }\n    if (columnIndex > 0) {\n      const {\n        field: previousColumnField\n      } = visibleColumns[columnIndex - 1];\n      if (!apiRef.current.isCellSelected(id, previousColumnField)) {\n        newClasses.push(gridClasses['cell--rangeLeft']);\n      }\n    } else {\n      newClasses.push(gridClasses['cell--rangeLeft']);\n    }\n    if (columnIndex < visibleColumns.length - 1) {\n      const {\n        field: nextColumnField\n      } = visibleColumns[columnIndex + 1];\n      if (!apiRef.current.isCellSelected(id, nextColumnField)) {\n        newClasses.push(gridClasses['cell--rangeRight']);\n      }\n    } else {\n      newClasses.push(gridClasses['cell--rangeRight']);\n    }\n    return newClasses;\n  }, [apiRef, visibleRows.range, visibleRows.rows]);\n  const canUpdateFocus = React.useCallback((initialValue, {\n    event,\n    cell\n  }) => {\n    if (!cell || !props.cellSelection || !event.shiftKey) {\n      return initialValue;\n    }\n    if (isKeyboardEvent(event)) {\n      return isNavigationKey(event.key) ? false : initialValue;\n    }\n    const focusedCell = gridFocusCellSelector(apiRef);\n    if (hasClickedValidCellForRangeSelection(cell) && focusedCell) {\n      return false;\n    }\n    return initialValue;\n  }, [apiRef, props.cellSelection, hasClickedValidCellForRangeSelection]);\n  const handleClipboardCopy = React.useCallback(value => {\n    if (apiRef.current.getSelectedCellsAsArray().length <= 1) {\n      return value;\n    }\n    const cellSelectionModel = apiRef.current.getCellSelectionModel();\n    const unsortedSelectedRowIds = Object.keys(cellSelectionModel);\n    const sortedSelectedRowIds = sortedRowIds.filter(id => unsortedSelectedRowIds.includes(`${id}`));\n    const copyData = sortedSelectedRowIds.reduce((acc, rowId) => {\n      const fieldsMap = cellSelectionModel[rowId];\n      const rowString = Object.keys(fieldsMap).reduce((acc2, field) => {\n        let cellData;\n        if (fieldsMap[field]) {\n          const cellParams = apiRef.current.getCellParams(rowId, field);\n          cellData = serializeCellValue(cellParams, {\n            csvOptions: {\n              delimiter: clipboardCopyCellDelimiter,\n              shouldAppendQuotes: false,\n              escapeFormulas: false\n            },\n            ignoreValueFormatter\n          });\n        } else {\n          cellData = '';\n        }\n        return acc2 === '' ? cellData : [acc2, cellData].join(clipboardCopyCellDelimiter);\n      }, '');\n      return acc === '' ? rowString : [acc, rowString].join('\\r\\n');\n    }, '');\n    return copyData;\n  }, [apiRef, ignoreValueFormatter, clipboardCopyCellDelimiter, sortedRowIds]);\n  useGridRegisterPipeProcessor(apiRef, 'isCellSelected', checkIfCellIsSelected);\n  useGridRegisterPipeProcessor(apiRef, 'cellClassName', addClassesToCells);\n  useGridRegisterPipeProcessor(apiRef, 'canUpdateFocus', canUpdateFocus);\n  useGridRegisterPipeProcessor(apiRef, 'clipboardCopy', handleClipboardCopy);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}