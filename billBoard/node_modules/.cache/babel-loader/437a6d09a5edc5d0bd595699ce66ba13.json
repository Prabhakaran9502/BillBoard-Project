{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { gridPinnedRowsSelector } from './gridRowsSelector';\nimport { gridDimensionsSelector } from '../dimensions/gridDimensionsSelectors';\nexport const GRID_ROOT_GROUP_ID = `auto-generated-group-node-root`;\nexport const GRID_ID_AUTOGENERATED = Symbol('mui.id_autogenerated');\nexport const buildRootGroup = () => ({\n  type: 'group',\n  id: GRID_ROOT_GROUP_ID,\n  depth: -1,\n  groupingField: null,\n  groupingKey: null,\n  isAutoGenerated: true,\n  children: [],\n  childrenFromPath: {},\n  childrenExpanded: true,\n  parent: null\n});\n/**\n * A helper function to check if the id provided is valid.\n * @param {GridRowId} id Id as [[GridRowId]].\n * @param {GridRowModel | Partial<GridRowModel>} row Row as [[GridRowModel]].\n * @param {string} detailErrorMessage A custom error message to display for invalid IDs\n */\n\nexport function checkGridRowIdIsValid(id, row) {\n  let detailErrorMessage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'A row was provided without id in the rows prop:';\n\n  if (id == null) {\n    throw new Error(['MUI X: The data grid component requires all rows to have a unique `id` property.', 'Alternatively, you can use the `getRowId` prop to specify a custom id for each row.', detailErrorMessage, JSON.stringify(row)].join('\\n'));\n  }\n}\nexport const getRowIdFromRowModel = (rowModel, getRowId, detailErrorMessage) => {\n  const id = getRowId ? getRowId(rowModel) : rowModel.id;\n  checkGridRowIdIsValid(id, rowModel, detailErrorMessage);\n  return id;\n};\nexport const createRowsInternalCache = _ref => {\n  let {\n    rows,\n    getRowId,\n    loading,\n    rowCount\n  } = _ref;\n  const updates = {\n    type: 'full',\n    rows: []\n  };\n  const dataRowIdToModelLookup = {};\n  const dataRowIdToIdLookup = {};\n\n  for (let i = 0; i < rows.length; i += 1) {\n    const model = rows[i];\n    const id = getRowIdFromRowModel(model, getRowId);\n    dataRowIdToModelLookup[id] = model;\n    dataRowIdToIdLookup[id] = id;\n    updates.rows.push(id);\n  }\n\n  return {\n    rowsBeforePartialUpdates: rows,\n    loadingPropBeforePartialUpdates: loading,\n    rowCountPropBeforePartialUpdates: rowCount,\n    updates,\n    dataRowIdToIdLookup,\n    dataRowIdToModelLookup\n  };\n};\nexport const getTopLevelRowCount = _ref2 => {\n  let {\n    tree,\n    rowCountProp = 0\n  } = _ref2;\n  const rootGroupNode = tree[GRID_ROOT_GROUP_ID];\n  return Math.max(rowCountProp, rootGroupNode.children.length + (rootGroupNode.footerId == null ? 0 : 1));\n};\nexport const getRowsStateFromCache = _ref3 => {\n  let {\n    apiRef,\n    rowCountProp = 0,\n    loadingProp,\n    previousTree,\n    previousTreeDepths\n  } = _ref3;\n  const cache = apiRef.current.caches.rows; // 1. Apply the \"rowTreeCreation\" family processing.\n\n  const {\n    tree: unProcessedTree,\n    treeDepths: unProcessedTreeDepths,\n    dataRowIds: unProcessedDataRowIds,\n    groupingName\n  } = apiRef.current.applyStrategyProcessor('rowTreeCreation', {\n    previousTree,\n    previousTreeDepths,\n    updates: cache.updates,\n    dataRowIdToIdLookup: cache.dataRowIdToIdLookup,\n    dataRowIdToModelLookup: cache.dataRowIdToModelLookup\n  }); // 2. Apply the \"hydrateRows\" pipe-processing.\n\n  const groupingParamsWithHydrateRows = apiRef.current.unstable_applyPipeProcessors('hydrateRows', {\n    tree: unProcessedTree,\n    treeDepths: unProcessedTreeDepths,\n    dataRowIdToIdLookup: cache.dataRowIdToIdLookup,\n    dataRowIds: unProcessedDataRowIds,\n    dataRowIdToModelLookup: cache.dataRowIdToModelLookup\n  }); // 3. Reset the cache updates\n\n  apiRef.current.caches.rows.updates = {\n    type: 'partial',\n    actions: {\n      insert: [],\n      modify: [],\n      remove: []\n    },\n    idToActionLookup: {}\n  };\n  return _extends({}, groupingParamsWithHydrateRows, {\n    totalRowCount: Math.max(rowCountProp, groupingParamsWithHydrateRows.dataRowIds.length),\n    totalTopLevelRowCount: getTopLevelRowCount({\n      tree: groupingParamsWithHydrateRows.tree,\n      rowCountProp\n    }),\n    groupingName,\n    loading: loadingProp\n  });\n};\nexport const isAutoGeneratedRow = rowNode => rowNode.type === 'skeletonRow' || rowNode.type === 'footer' || rowNode.type === 'group' && rowNode.isAutoGenerated || rowNode.type === 'pinnedRow' && rowNode.isAutoGenerated;\nexport const getTreeNodeDescendants = (tree, parentId, skipAutoGeneratedRows) => {\n  const node = tree[parentId];\n\n  if (node.type !== 'group') {\n    return [];\n  }\n\n  const validDescendants = [];\n\n  for (let i = 0; i < node.children.length; i += 1) {\n    const child = node.children[i];\n\n    if (!skipAutoGeneratedRows || !isAutoGeneratedRow(tree[child])) {\n      validDescendants.push(child);\n    }\n\n    const childDescendants = getTreeNodeDescendants(tree, child, skipAutoGeneratedRows);\n\n    for (let j = 0; j < childDescendants.length; j += 1) {\n      validDescendants.push(childDescendants[j]);\n    }\n  }\n\n  if (!skipAutoGeneratedRows && node.footerId != null) {\n    validDescendants.push(node.footerId);\n  }\n\n  return validDescendants;\n};\nexport const updateCacheWithNewRows = _ref4 => {\n  let {\n    previousCache,\n    getRowId,\n    updates\n  } = _ref4;\n\n  if (previousCache.updates.type === 'full') {\n    throw new Error('MUI X: Unable to prepare a partial update if a full update is not applied yet.');\n  } // Remove duplicate updates.\n  // A server can batch updates, and send several updates for the same row in one fn call.\n\n\n  const uniqueUpdates = new Map();\n  updates.forEach(update => {\n    const id = getRowIdFromRowModel(update, getRowId, 'A row was provided without id when calling updateRows():');\n\n    if (uniqueUpdates.has(id)) {\n      uniqueUpdates.set(id, _extends({}, uniqueUpdates.get(id), update));\n    } else {\n      uniqueUpdates.set(id, update);\n    }\n  });\n  const partialUpdates = {\n    type: 'partial',\n    actions: {\n      insert: [...(previousCache.updates.actions.insert ?? [])],\n      modify: [...(previousCache.updates.actions.modify ?? [])],\n      remove: [...(previousCache.updates.actions.remove ?? [])]\n    },\n    idToActionLookup: _extends({}, previousCache.updates.idToActionLookup)\n  };\n\n  const dataRowIdToModelLookup = _extends({}, previousCache.dataRowIdToModelLookup);\n\n  const dataRowIdToIdLookup = _extends({}, previousCache.dataRowIdToIdLookup);\n\n  const alreadyAppliedActionsToRemove = {\n    insert: {},\n    modify: {},\n    remove: {}\n  }; // Depending on the action already applied to the data row,\n  // We might want drop the already-applied-update.\n  // For instance:\n  // - if you delete then insert, then you don't want to apply the deletion in the tree.\n  // - if you insert, then modify, then you just want to apply the insertion in the tree.\n\n  uniqueUpdates.forEach((partialRow, id) => {\n    const actionAlreadyAppliedToRow = partialUpdates.idToActionLookup[id]; // Action === \"delete\"\n    // eslint-disable-next-line no-underscore-dangle\n\n    if (partialRow._action === 'delete') {\n      // If the data row has been removed since the last state update,\n      // Then do nothing.\n      if (actionAlreadyAppliedToRow === 'remove' || !dataRowIdToModelLookup[id]) {\n        return;\n      } // If the data row has been inserted / modified since the last state update,\n      // Then drop this \"insert\" / \"modify\" update.\n\n\n      if (actionAlreadyAppliedToRow != null) {\n        alreadyAppliedActionsToRemove[actionAlreadyAppliedToRow][id] = true;\n      } // Remove the data row from the lookups and add it to the \"delete\" update.\n\n\n      partialUpdates.actions.remove.push(id);\n      delete dataRowIdToModelLookup[id];\n      delete dataRowIdToIdLookup[id];\n      return;\n    }\n\n    const oldRow = dataRowIdToModelLookup[id]; // Action === \"modify\"\n\n    if (oldRow) {\n      // If the data row has been removed since the last state update,\n      // Then drop this \"remove\" update and add it to the \"modify\" update instead.\n      if (actionAlreadyAppliedToRow === 'remove') {\n        alreadyAppliedActionsToRemove.remove[id] = true;\n        partialUpdates.actions.modify.push(id);\n      } // If the date has not been inserted / modified since the last state update,\n      // Then add it to the \"modify\" update (if it has been inserted it should just remain \"inserted\").\n      else if (actionAlreadyAppliedToRow == null) {\n        partialUpdates.actions.modify.push(id);\n      } // Update the data row lookups.\n\n\n      dataRowIdToModelLookup[id] = _extends({}, oldRow, partialRow);\n      return;\n    } // Action === \"insert\"\n    // If the data row has been removed since the last state update,\n    // Then drop the \"remove\" update and add it to the \"insert\" update instead.\n\n\n    if (actionAlreadyAppliedToRow === 'remove') {\n      alreadyAppliedActionsToRemove.remove[id] = true;\n      partialUpdates.actions.insert.push(id);\n    } // If the data row has not been inserted since the last state update,\n    // Then add it to the \"insert\" update.\n    // `actionAlreadyAppliedToRow` can't be equal to \"modify\", otherwise we would have an `oldRow` above.\n    else if (actionAlreadyAppliedToRow == null) {\n      partialUpdates.actions.insert.push(id);\n    } // Update the data row lookups.\n\n\n    dataRowIdToModelLookup[id] = partialRow;\n    dataRowIdToIdLookup[id] = id;\n  });\n  const actionTypeWithActionsToRemove = Object.keys(alreadyAppliedActionsToRemove);\n\n  for (let i = 0; i < actionTypeWithActionsToRemove.length; i += 1) {\n    const actionType = actionTypeWithActionsToRemove[i];\n    const idsToRemove = alreadyAppliedActionsToRemove[actionType];\n\n    if (Object.keys(idsToRemove).length > 0) {\n      partialUpdates.actions[actionType] = partialUpdates.actions[actionType].filter(id => !idsToRemove[id]);\n    }\n  }\n\n  return {\n    dataRowIdToModelLookup,\n    dataRowIdToIdLookup,\n    updates: partialUpdates,\n    rowsBeforePartialUpdates: previousCache.rowsBeforePartialUpdates,\n    loadingPropBeforePartialUpdates: previousCache.loadingPropBeforePartialUpdates,\n    rowCountPropBeforePartialUpdates: previousCache.rowCountPropBeforePartialUpdates\n  };\n};\nexport function calculatePinnedRowsHeight(apiRef) {\n  const pinnedRows = gridPinnedRowsSelector(apiRef);\n  const topPinnedRowsHeight = pinnedRows?.top?.reduce((acc, value) => {\n    acc += apiRef.current.unstable_getRowHeight(value.id);\n    return acc;\n  }, 0) || 0;\n  const bottomPinnedRowsHeight = pinnedRows?.bottom?.reduce((acc, value) => {\n    acc += apiRef.current.unstable_getRowHeight(value.id);\n    return acc;\n  }, 0) || 0;\n  return {\n    top: topPinnedRowsHeight,\n    bottom: bottomPinnedRowsHeight\n  };\n}\nexport function getMinimalContentHeight(apiRef) {\n  const dimensions = gridDimensionsSelector(apiRef.current.state);\n  return `var(--DataGrid-overlayHeight, ${2 * dimensions.rowHeight}px)`;\n}","map":{"version":3,"names":["_extends","gridPinnedRowsSelector","gridDimensionsSelector","GRID_ROOT_GROUP_ID","GRID_ID_AUTOGENERATED","Symbol","buildRootGroup","type","id","depth","groupingField","groupingKey","isAutoGenerated","children","childrenFromPath","childrenExpanded","parent","checkGridRowIdIsValid","row","detailErrorMessage","Error","JSON","stringify","join","getRowIdFromRowModel","rowModel","getRowId","createRowsInternalCache","rows","loading","rowCount","updates","dataRowIdToModelLookup","dataRowIdToIdLookup","i","length","model","push","rowsBeforePartialUpdates","loadingPropBeforePartialUpdates","rowCountPropBeforePartialUpdates","getTopLevelRowCount","tree","rowCountProp","rootGroupNode","Math","max","footerId","getRowsStateFromCache","apiRef","loadingProp","previousTree","previousTreeDepths","cache","current","caches","unProcessedTree","treeDepths","unProcessedTreeDepths","dataRowIds","unProcessedDataRowIds","groupingName","applyStrategyProcessor","groupingParamsWithHydrateRows","unstable_applyPipeProcessors","actions","insert","modify","remove","idToActionLookup","totalRowCount","totalTopLevelRowCount","isAutoGeneratedRow","rowNode","getTreeNodeDescendants","parentId","skipAutoGeneratedRows","node","validDescendants","child","childDescendants","j","updateCacheWithNewRows","previousCache","uniqueUpdates","Map","forEach","update","has","set","get","partialUpdates","alreadyAppliedActionsToRemove","partialRow","actionAlreadyAppliedToRow","_action","oldRow","actionTypeWithActionsToRemove","Object","keys","actionType","idsToRemove","filter","calculatePinnedRowsHeight","pinnedRows","topPinnedRowsHeight","top","reduce","acc","value","unstable_getRowHeight","bottomPinnedRowsHeight","bottom","getMinimalContentHeight","dimensions","state","rowHeight"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsUtils.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { gridPinnedRowsSelector } from './gridRowsSelector';\nimport { gridDimensionsSelector } from '../dimensions/gridDimensionsSelectors';\nexport const GRID_ROOT_GROUP_ID = `auto-generated-group-node-root`;\nexport const GRID_ID_AUTOGENERATED = Symbol('mui.id_autogenerated');\nexport const buildRootGroup = () => ({\n  type: 'group',\n  id: GRID_ROOT_GROUP_ID,\n  depth: -1,\n  groupingField: null,\n  groupingKey: null,\n  isAutoGenerated: true,\n  children: [],\n  childrenFromPath: {},\n  childrenExpanded: true,\n  parent: null\n});\n\n/**\n * A helper function to check if the id provided is valid.\n * @param {GridRowId} id Id as [[GridRowId]].\n * @param {GridRowModel | Partial<GridRowModel>} row Row as [[GridRowModel]].\n * @param {string} detailErrorMessage A custom error message to display for invalid IDs\n */\nexport function checkGridRowIdIsValid(id, row, detailErrorMessage = 'A row was provided without id in the rows prop:') {\n  if (id == null) {\n    throw new Error(['MUI X: The data grid component requires all rows to have a unique `id` property.', 'Alternatively, you can use the `getRowId` prop to specify a custom id for each row.', detailErrorMessage, JSON.stringify(row)].join('\\n'));\n  }\n}\nexport const getRowIdFromRowModel = (rowModel, getRowId, detailErrorMessage) => {\n  const id = getRowId ? getRowId(rowModel) : rowModel.id;\n  checkGridRowIdIsValid(id, rowModel, detailErrorMessage);\n  return id;\n};\nexport const createRowsInternalCache = ({\n  rows,\n  getRowId,\n  loading,\n  rowCount\n}) => {\n  const updates = {\n    type: 'full',\n    rows: []\n  };\n  const dataRowIdToModelLookup = {};\n  const dataRowIdToIdLookup = {};\n  for (let i = 0; i < rows.length; i += 1) {\n    const model = rows[i];\n    const id = getRowIdFromRowModel(model, getRowId);\n    dataRowIdToModelLookup[id] = model;\n    dataRowIdToIdLookup[id] = id;\n    updates.rows.push(id);\n  }\n  return {\n    rowsBeforePartialUpdates: rows,\n    loadingPropBeforePartialUpdates: loading,\n    rowCountPropBeforePartialUpdates: rowCount,\n    updates,\n    dataRowIdToIdLookup,\n    dataRowIdToModelLookup\n  };\n};\nexport const getTopLevelRowCount = ({\n  tree,\n  rowCountProp = 0\n}) => {\n  const rootGroupNode = tree[GRID_ROOT_GROUP_ID];\n  return Math.max(rowCountProp, rootGroupNode.children.length + (rootGroupNode.footerId == null ? 0 : 1));\n};\nexport const getRowsStateFromCache = ({\n  apiRef,\n  rowCountProp = 0,\n  loadingProp,\n  previousTree,\n  previousTreeDepths\n}) => {\n  const cache = apiRef.current.caches.rows;\n\n  // 1. Apply the \"rowTreeCreation\" family processing.\n  const {\n    tree: unProcessedTree,\n    treeDepths: unProcessedTreeDepths,\n    dataRowIds: unProcessedDataRowIds,\n    groupingName\n  } = apiRef.current.applyStrategyProcessor('rowTreeCreation', {\n    previousTree,\n    previousTreeDepths,\n    updates: cache.updates,\n    dataRowIdToIdLookup: cache.dataRowIdToIdLookup,\n    dataRowIdToModelLookup: cache.dataRowIdToModelLookup\n  });\n\n  // 2. Apply the \"hydrateRows\" pipe-processing.\n  const groupingParamsWithHydrateRows = apiRef.current.unstable_applyPipeProcessors('hydrateRows', {\n    tree: unProcessedTree,\n    treeDepths: unProcessedTreeDepths,\n    dataRowIdToIdLookup: cache.dataRowIdToIdLookup,\n    dataRowIds: unProcessedDataRowIds,\n    dataRowIdToModelLookup: cache.dataRowIdToModelLookup\n  });\n\n  // 3. Reset the cache updates\n  apiRef.current.caches.rows.updates = {\n    type: 'partial',\n    actions: {\n      insert: [],\n      modify: [],\n      remove: []\n    },\n    idToActionLookup: {}\n  };\n  return _extends({}, groupingParamsWithHydrateRows, {\n    totalRowCount: Math.max(rowCountProp, groupingParamsWithHydrateRows.dataRowIds.length),\n    totalTopLevelRowCount: getTopLevelRowCount({\n      tree: groupingParamsWithHydrateRows.tree,\n      rowCountProp\n    }),\n    groupingName,\n    loading: loadingProp\n  });\n};\nexport const isAutoGeneratedRow = rowNode => rowNode.type === 'skeletonRow' || rowNode.type === 'footer' || rowNode.type === 'group' && rowNode.isAutoGenerated || rowNode.type === 'pinnedRow' && rowNode.isAutoGenerated;\nexport const getTreeNodeDescendants = (tree, parentId, skipAutoGeneratedRows) => {\n  const node = tree[parentId];\n  if (node.type !== 'group') {\n    return [];\n  }\n  const validDescendants = [];\n  for (let i = 0; i < node.children.length; i += 1) {\n    const child = node.children[i];\n    if (!skipAutoGeneratedRows || !isAutoGeneratedRow(tree[child])) {\n      validDescendants.push(child);\n    }\n    const childDescendants = getTreeNodeDescendants(tree, child, skipAutoGeneratedRows);\n    for (let j = 0; j < childDescendants.length; j += 1) {\n      validDescendants.push(childDescendants[j]);\n    }\n  }\n  if (!skipAutoGeneratedRows && node.footerId != null) {\n    validDescendants.push(node.footerId);\n  }\n  return validDescendants;\n};\nexport const updateCacheWithNewRows = ({\n  previousCache,\n  getRowId,\n  updates\n}) => {\n  if (previousCache.updates.type === 'full') {\n    throw new Error('MUI X: Unable to prepare a partial update if a full update is not applied yet.');\n  }\n\n  // Remove duplicate updates.\n  // A server can batch updates, and send several updates for the same row in one fn call.\n  const uniqueUpdates = new Map();\n  updates.forEach(update => {\n    const id = getRowIdFromRowModel(update, getRowId, 'A row was provided without id when calling updateRows():');\n    if (uniqueUpdates.has(id)) {\n      uniqueUpdates.set(id, _extends({}, uniqueUpdates.get(id), update));\n    } else {\n      uniqueUpdates.set(id, update);\n    }\n  });\n  const partialUpdates = {\n    type: 'partial',\n    actions: {\n      insert: [...(previousCache.updates.actions.insert ?? [])],\n      modify: [...(previousCache.updates.actions.modify ?? [])],\n      remove: [...(previousCache.updates.actions.remove ?? [])]\n    },\n    idToActionLookup: _extends({}, previousCache.updates.idToActionLookup)\n  };\n  const dataRowIdToModelLookup = _extends({}, previousCache.dataRowIdToModelLookup);\n  const dataRowIdToIdLookup = _extends({}, previousCache.dataRowIdToIdLookup);\n  const alreadyAppliedActionsToRemove = {\n    insert: {},\n    modify: {},\n    remove: {}\n  };\n\n  // Depending on the action already applied to the data row,\n  // We might want drop the already-applied-update.\n  // For instance:\n  // - if you delete then insert, then you don't want to apply the deletion in the tree.\n  // - if you insert, then modify, then you just want to apply the insertion in the tree.\n  uniqueUpdates.forEach((partialRow, id) => {\n    const actionAlreadyAppliedToRow = partialUpdates.idToActionLookup[id];\n\n    // Action === \"delete\"\n    // eslint-disable-next-line no-underscore-dangle\n    if (partialRow._action === 'delete') {\n      // If the data row has been removed since the last state update,\n      // Then do nothing.\n      if (actionAlreadyAppliedToRow === 'remove' || !dataRowIdToModelLookup[id]) {\n        return;\n      }\n\n      // If the data row has been inserted / modified since the last state update,\n      // Then drop this \"insert\" / \"modify\" update.\n      if (actionAlreadyAppliedToRow != null) {\n        alreadyAppliedActionsToRemove[actionAlreadyAppliedToRow][id] = true;\n      }\n\n      // Remove the data row from the lookups and add it to the \"delete\" update.\n      partialUpdates.actions.remove.push(id);\n      delete dataRowIdToModelLookup[id];\n      delete dataRowIdToIdLookup[id];\n      return;\n    }\n    const oldRow = dataRowIdToModelLookup[id];\n\n    // Action === \"modify\"\n    if (oldRow) {\n      // If the data row has been removed since the last state update,\n      // Then drop this \"remove\" update and add it to the \"modify\" update instead.\n      if (actionAlreadyAppliedToRow === 'remove') {\n        alreadyAppliedActionsToRemove.remove[id] = true;\n        partialUpdates.actions.modify.push(id);\n      }\n      // If the date has not been inserted / modified since the last state update,\n      // Then add it to the \"modify\" update (if it has been inserted it should just remain \"inserted\").\n      else if (actionAlreadyAppliedToRow == null) {\n        partialUpdates.actions.modify.push(id);\n      }\n\n      // Update the data row lookups.\n      dataRowIdToModelLookup[id] = _extends({}, oldRow, partialRow);\n      return;\n    }\n\n    // Action === \"insert\"\n    // If the data row has been removed since the last state update,\n    // Then drop the \"remove\" update and add it to the \"insert\" update instead.\n    if (actionAlreadyAppliedToRow === 'remove') {\n      alreadyAppliedActionsToRemove.remove[id] = true;\n      partialUpdates.actions.insert.push(id);\n    }\n    // If the data row has not been inserted since the last state update,\n    // Then add it to the \"insert\" update.\n    // `actionAlreadyAppliedToRow` can't be equal to \"modify\", otherwise we would have an `oldRow` above.\n    else if (actionAlreadyAppliedToRow == null) {\n      partialUpdates.actions.insert.push(id);\n    }\n\n    // Update the data row lookups.\n    dataRowIdToModelLookup[id] = partialRow;\n    dataRowIdToIdLookup[id] = id;\n  });\n  const actionTypeWithActionsToRemove = Object.keys(alreadyAppliedActionsToRemove);\n  for (let i = 0; i < actionTypeWithActionsToRemove.length; i += 1) {\n    const actionType = actionTypeWithActionsToRemove[i];\n    const idsToRemove = alreadyAppliedActionsToRemove[actionType];\n    if (Object.keys(idsToRemove).length > 0) {\n      partialUpdates.actions[actionType] = partialUpdates.actions[actionType].filter(id => !idsToRemove[id]);\n    }\n  }\n  return {\n    dataRowIdToModelLookup,\n    dataRowIdToIdLookup,\n    updates: partialUpdates,\n    rowsBeforePartialUpdates: previousCache.rowsBeforePartialUpdates,\n    loadingPropBeforePartialUpdates: previousCache.loadingPropBeforePartialUpdates,\n    rowCountPropBeforePartialUpdates: previousCache.rowCountPropBeforePartialUpdates\n  };\n};\nexport function calculatePinnedRowsHeight(apiRef) {\n  const pinnedRows = gridPinnedRowsSelector(apiRef);\n  const topPinnedRowsHeight = pinnedRows?.top?.reduce((acc, value) => {\n    acc += apiRef.current.unstable_getRowHeight(value.id);\n    return acc;\n  }, 0) || 0;\n  const bottomPinnedRowsHeight = pinnedRows?.bottom?.reduce((acc, value) => {\n    acc += apiRef.current.unstable_getRowHeight(value.id);\n    return acc;\n  }, 0) || 0;\n  return {\n    top: topPinnedRowsHeight,\n    bottom: bottomPinnedRowsHeight\n  };\n}\nexport function getMinimalContentHeight(apiRef) {\n  const dimensions = gridDimensionsSelector(apiRef.current.state);\n  return `var(--DataGrid-overlayHeight, ${2 * dimensions.rowHeight}px)`;\n}"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,SAASC,sBAAT,QAAuC,oBAAvC;AACA,SAASC,sBAAT,QAAuC,uCAAvC;AACA,OAAO,MAAMC,kBAAkB,GAAI,gCAA5B;AACP,OAAO,MAAMC,qBAAqB,GAAGC,MAAM,CAAC,sBAAD,CAApC;AACP,OAAO,MAAMC,cAAc,GAAG,OAAO;EACnCC,IAAI,EAAE,OAD6B;EAEnCC,EAAE,EAAEL,kBAF+B;EAGnCM,KAAK,EAAE,CAAC,CAH2B;EAInCC,aAAa,EAAE,IAJoB;EAKnCC,WAAW,EAAE,IALsB;EAMnCC,eAAe,EAAE,IANkB;EAOnCC,QAAQ,EAAE,EAPyB;EAQnCC,gBAAgB,EAAE,EARiB;EASnCC,gBAAgB,EAAE,IATiB;EAUnCC,MAAM,EAAE;AAV2B,CAAP,CAAvB;AAaP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,qBAAT,CAA+BT,EAA/B,EAAmCU,GAAnC,EAAgH;EAAA,IAAxEC,kBAAwE,uEAAnD,iDAAmD;;EACrH,IAAIX,EAAE,IAAI,IAAV,EAAgB;IACd,MAAM,IAAIY,KAAJ,CAAU,CAAC,kFAAD,EAAqF,qFAArF,EAA4KD,kBAA5K,EAAgME,IAAI,CAACC,SAAL,CAAeJ,GAAf,CAAhM,EAAqNK,IAArN,CAA0N,IAA1N,CAAV,CAAN;EACD;AACF;AACD,OAAO,MAAMC,oBAAoB,GAAG,CAACC,QAAD,EAAWC,QAAX,EAAqBP,kBAArB,KAA4C;EAC9E,MAAMX,EAAE,GAAGkB,QAAQ,GAAGA,QAAQ,CAACD,QAAD,CAAX,GAAwBA,QAAQ,CAACjB,EAApD;EACAS,qBAAqB,CAACT,EAAD,EAAKiB,QAAL,EAAeN,kBAAf,CAArB;EACA,OAAOX,EAAP;AACD,CAJM;AAKP,OAAO,MAAMmB,uBAAuB,GAAG,QAKjC;EAAA,IALkC;IACtCC,IADsC;IAEtCF,QAFsC;IAGtCG,OAHsC;IAItCC;EAJsC,CAKlC;EACJ,MAAMC,OAAO,GAAG;IACdxB,IAAI,EAAE,MADQ;IAEdqB,IAAI,EAAE;EAFQ,CAAhB;EAIA,MAAMI,sBAAsB,GAAG,EAA/B;EACA,MAAMC,mBAAmB,GAAG,EAA5B;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,IAAI,CAACO,MAAzB,EAAiCD,CAAC,IAAI,CAAtC,EAAyC;IACvC,MAAME,KAAK,GAAGR,IAAI,CAACM,CAAD,CAAlB;IACA,MAAM1B,EAAE,GAAGgB,oBAAoB,CAACY,KAAD,EAAQV,QAAR,CAA/B;IACAM,sBAAsB,CAACxB,EAAD,CAAtB,GAA6B4B,KAA7B;IACAH,mBAAmB,CAACzB,EAAD,CAAnB,GAA0BA,EAA1B;IACAuB,OAAO,CAACH,IAAR,CAAaS,IAAb,CAAkB7B,EAAlB;EACD;;EACD,OAAO;IACL8B,wBAAwB,EAAEV,IADrB;IAELW,+BAA+B,EAAEV,OAF5B;IAGLW,gCAAgC,EAAEV,QAH7B;IAILC,OAJK;IAKLE,mBALK;IAMLD;EANK,CAAP;AAQD,CA3BM;AA4BP,OAAO,MAAMS,mBAAmB,GAAG,SAG7B;EAAA,IAH8B;IAClCC,IADkC;IAElCC,YAAY,GAAG;EAFmB,CAG9B;EACJ,MAAMC,aAAa,GAAGF,IAAI,CAACvC,kBAAD,CAA1B;EACA,OAAO0C,IAAI,CAACC,GAAL,CAASH,YAAT,EAAuBC,aAAa,CAAC/B,QAAd,CAAuBsB,MAAvB,IAAiCS,aAAa,CAACG,QAAd,IAA0B,IAA1B,GAAiC,CAAjC,GAAqC,CAAtE,CAAvB,CAAP;AACD,CANM;AAOP,OAAO,MAAMC,qBAAqB,GAAG,SAM/B;EAAA,IANgC;IACpCC,MADoC;IAEpCN,YAAY,GAAG,CAFqB;IAGpCO,WAHoC;IAIpCC,YAJoC;IAKpCC;EALoC,CAMhC;EACJ,MAAMC,KAAK,GAAGJ,MAAM,CAACK,OAAP,CAAeC,MAAf,CAAsB3B,IAApC,CADI,CAGJ;;EACA,MAAM;IACJc,IAAI,EAAEc,eADF;IAEJC,UAAU,EAAEC,qBAFR;IAGJC,UAAU,EAAEC,qBAHR;IAIJC;EAJI,IAKFZ,MAAM,CAACK,OAAP,CAAeQ,sBAAf,CAAsC,iBAAtC,EAAyD;IAC3DX,YAD2D;IAE3DC,kBAF2D;IAG3DrB,OAAO,EAAEsB,KAAK,CAACtB,OAH4C;IAI3DE,mBAAmB,EAAEoB,KAAK,CAACpB,mBAJgC;IAK3DD,sBAAsB,EAAEqB,KAAK,CAACrB;EAL6B,CAAzD,CALJ,CAJI,CAiBJ;;EACA,MAAM+B,6BAA6B,GAAGd,MAAM,CAACK,OAAP,CAAeU,4BAAf,CAA4C,aAA5C,EAA2D;IAC/FtB,IAAI,EAAEc,eADyF;IAE/FC,UAAU,EAAEC,qBAFmF;IAG/FzB,mBAAmB,EAAEoB,KAAK,CAACpB,mBAHoE;IAI/F0B,UAAU,EAAEC,qBAJmF;IAK/F5B,sBAAsB,EAAEqB,KAAK,CAACrB;EALiE,CAA3D,CAAtC,CAlBI,CA0BJ;;EACAiB,MAAM,CAACK,OAAP,CAAeC,MAAf,CAAsB3B,IAAtB,CAA2BG,OAA3B,GAAqC;IACnCxB,IAAI,EAAE,SAD6B;IAEnC0D,OAAO,EAAE;MACPC,MAAM,EAAE,EADD;MAEPC,MAAM,EAAE,EAFD;MAGPC,MAAM,EAAE;IAHD,CAF0B;IAOnCC,gBAAgB,EAAE;EAPiB,CAArC;EASA,OAAOrE,QAAQ,CAAC,EAAD,EAAK+D,6BAAL,EAAoC;IACjDO,aAAa,EAAEzB,IAAI,CAACC,GAAL,CAASH,YAAT,EAAuBoB,6BAA6B,CAACJ,UAA9B,CAAyCxB,MAAhE,CADkC;IAEjDoC,qBAAqB,EAAE9B,mBAAmB,CAAC;MACzCC,IAAI,EAAEqB,6BAA6B,CAACrB,IADK;MAEzCC;IAFyC,CAAD,CAFO;IAMjDkB,YANiD;IAOjDhC,OAAO,EAAEqB;EAPwC,CAApC,CAAf;AASD,CAnDM;AAoDP,OAAO,MAAMsB,kBAAkB,GAAGC,OAAO,IAAIA,OAAO,CAAClE,IAAR,KAAiB,aAAjB,IAAkCkE,OAAO,CAAClE,IAAR,KAAiB,QAAnD,IAA+DkE,OAAO,CAAClE,IAAR,KAAiB,OAAjB,IAA4BkE,OAAO,CAAC7D,eAAnG,IAAsH6D,OAAO,CAAClE,IAAR,KAAiB,WAAjB,IAAgCkE,OAAO,CAAC7D,eAApM;AACP,OAAO,MAAM8D,sBAAsB,GAAG,CAAChC,IAAD,EAAOiC,QAAP,EAAiBC,qBAAjB,KAA2C;EAC/E,MAAMC,IAAI,GAAGnC,IAAI,CAACiC,QAAD,CAAjB;;EACA,IAAIE,IAAI,CAACtE,IAAL,KAAc,OAAlB,EAA2B;IACzB,OAAO,EAAP;EACD;;EACD,MAAMuE,gBAAgB,GAAG,EAAzB;;EACA,KAAK,IAAI5C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG2C,IAAI,CAAChE,QAAL,CAAcsB,MAAlC,EAA0CD,CAAC,IAAI,CAA/C,EAAkD;IAChD,MAAM6C,KAAK,GAAGF,IAAI,CAAChE,QAAL,CAAcqB,CAAd,CAAd;;IACA,IAAI,CAAC0C,qBAAD,IAA0B,CAACJ,kBAAkB,CAAC9B,IAAI,CAACqC,KAAD,CAAL,CAAjD,EAAgE;MAC9DD,gBAAgB,CAACzC,IAAjB,CAAsB0C,KAAtB;IACD;;IACD,MAAMC,gBAAgB,GAAGN,sBAAsB,CAAChC,IAAD,EAAOqC,KAAP,EAAcH,qBAAd,CAA/C;;IACA,KAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,gBAAgB,CAAC7C,MAArC,EAA6C8C,CAAC,IAAI,CAAlD,EAAqD;MACnDH,gBAAgB,CAACzC,IAAjB,CAAsB2C,gBAAgB,CAACC,CAAD,CAAtC;IACD;EACF;;EACD,IAAI,CAACL,qBAAD,IAA0BC,IAAI,CAAC9B,QAAL,IAAiB,IAA/C,EAAqD;IACnD+B,gBAAgB,CAACzC,IAAjB,CAAsBwC,IAAI,CAAC9B,QAA3B;EACD;;EACD,OAAO+B,gBAAP;AACD,CApBM;AAqBP,OAAO,MAAMI,sBAAsB,GAAG,SAIhC;EAAA,IAJiC;IACrCC,aADqC;IAErCzD,QAFqC;IAGrCK;EAHqC,CAIjC;;EACJ,IAAIoD,aAAa,CAACpD,OAAd,CAAsBxB,IAAtB,KAA+B,MAAnC,EAA2C;IACzC,MAAM,IAAIa,KAAJ,CAAU,gFAAV,CAAN;EACD,CAHG,CAKJ;EACA;;;EACA,MAAMgE,aAAa,GAAG,IAAIC,GAAJ,EAAtB;EACAtD,OAAO,CAACuD,OAAR,CAAgBC,MAAM,IAAI;IACxB,MAAM/E,EAAE,GAAGgB,oBAAoB,CAAC+D,MAAD,EAAS7D,QAAT,EAAmB,0DAAnB,CAA/B;;IACA,IAAI0D,aAAa,CAACI,GAAd,CAAkBhF,EAAlB,CAAJ,EAA2B;MACzB4E,aAAa,CAACK,GAAd,CAAkBjF,EAAlB,EAAsBR,QAAQ,CAAC,EAAD,EAAKoF,aAAa,CAACM,GAAd,CAAkBlF,EAAlB,CAAL,EAA4B+E,MAA5B,CAA9B;IACD,CAFD,MAEO;MACLH,aAAa,CAACK,GAAd,CAAkBjF,EAAlB,EAAsB+E,MAAtB;IACD;EACF,CAPD;EAQA,MAAMI,cAAc,GAAG;IACrBpF,IAAI,EAAE,SADe;IAErB0D,OAAO,EAAE;MACPC,MAAM,EAAE,CAAC,IAAIiB,aAAa,CAACpD,OAAd,CAAsBkC,OAAtB,CAA8BC,MAA9B,IAAwC,EAA5C,CAAD,CADD;MAEPC,MAAM,EAAE,CAAC,IAAIgB,aAAa,CAACpD,OAAd,CAAsBkC,OAAtB,CAA8BE,MAA9B,IAAwC,EAA5C,CAAD,CAFD;MAGPC,MAAM,EAAE,CAAC,IAAIe,aAAa,CAACpD,OAAd,CAAsBkC,OAAtB,CAA8BG,MAA9B,IAAwC,EAA5C,CAAD;IAHD,CAFY;IAOrBC,gBAAgB,EAAErE,QAAQ,CAAC,EAAD,EAAKmF,aAAa,CAACpD,OAAd,CAAsBsC,gBAA3B;EAPL,CAAvB;;EASA,MAAMrC,sBAAsB,GAAGhC,QAAQ,CAAC,EAAD,EAAKmF,aAAa,CAACnD,sBAAnB,CAAvC;;EACA,MAAMC,mBAAmB,GAAGjC,QAAQ,CAAC,EAAD,EAAKmF,aAAa,CAAClD,mBAAnB,CAApC;;EACA,MAAM2D,6BAA6B,GAAG;IACpC1B,MAAM,EAAE,EAD4B;IAEpCC,MAAM,EAAE,EAF4B;IAGpCC,MAAM,EAAE;EAH4B,CAAtC,CA3BI,CAiCJ;EACA;EACA;EACA;EACA;;EACAgB,aAAa,CAACE,OAAd,CAAsB,CAACO,UAAD,EAAarF,EAAb,KAAoB;IACxC,MAAMsF,yBAAyB,GAAGH,cAAc,CAACtB,gBAAf,CAAgC7D,EAAhC,CAAlC,CADwC,CAGxC;IACA;;IACA,IAAIqF,UAAU,CAACE,OAAX,KAAuB,QAA3B,EAAqC;MACnC;MACA;MACA,IAAID,yBAAyB,KAAK,QAA9B,IAA0C,CAAC9D,sBAAsB,CAACxB,EAAD,CAArE,EAA2E;QACzE;MACD,CALkC,CAOnC;MACA;;;MACA,IAAIsF,yBAAyB,IAAI,IAAjC,EAAuC;QACrCF,6BAA6B,CAACE,yBAAD,CAA7B,CAAyDtF,EAAzD,IAA+D,IAA/D;MACD,CAXkC,CAanC;;;MACAmF,cAAc,CAAC1B,OAAf,CAAuBG,MAAvB,CAA8B/B,IAA9B,CAAmC7B,EAAnC;MACA,OAAOwB,sBAAsB,CAACxB,EAAD,CAA7B;MACA,OAAOyB,mBAAmB,CAACzB,EAAD,CAA1B;MACA;IACD;;IACD,MAAMwF,MAAM,GAAGhE,sBAAsB,CAACxB,EAAD,CAArC,CAxBwC,CA0BxC;;IACA,IAAIwF,MAAJ,EAAY;MACV;MACA;MACA,IAAIF,yBAAyB,KAAK,QAAlC,EAA4C;QAC1CF,6BAA6B,CAACxB,MAA9B,CAAqC5D,EAArC,IAA2C,IAA3C;QACAmF,cAAc,CAAC1B,OAAf,CAAuBE,MAAvB,CAA8B9B,IAA9B,CAAmC7B,EAAnC;MACD,CAHD,CAIA;MACA;MALA,KAMK,IAAIsF,yBAAyB,IAAI,IAAjC,EAAuC;QAC1CH,cAAc,CAAC1B,OAAf,CAAuBE,MAAvB,CAA8B9B,IAA9B,CAAmC7B,EAAnC;MACD,CAXS,CAaV;;;MACAwB,sBAAsB,CAACxB,EAAD,CAAtB,GAA6BR,QAAQ,CAAC,EAAD,EAAKgG,MAAL,EAAaH,UAAb,CAArC;MACA;IACD,CA3CuC,CA6CxC;IACA;IACA;;;IACA,IAAIC,yBAAyB,KAAK,QAAlC,EAA4C;MAC1CF,6BAA6B,CAACxB,MAA9B,CAAqC5D,EAArC,IAA2C,IAA3C;MACAmF,cAAc,CAAC1B,OAAf,CAAuBC,MAAvB,CAA8B7B,IAA9B,CAAmC7B,EAAnC;IACD,CAHD,CAIA;IACA;IACA;IANA,KAOK,IAAIsF,yBAAyB,IAAI,IAAjC,EAAuC;MAC1CH,cAAc,CAAC1B,OAAf,CAAuBC,MAAvB,CAA8B7B,IAA9B,CAAmC7B,EAAnC;IACD,CAzDuC,CA2DxC;;;IACAwB,sBAAsB,CAACxB,EAAD,CAAtB,GAA6BqF,UAA7B;IACA5D,mBAAmB,CAACzB,EAAD,CAAnB,GAA0BA,EAA1B;EACD,CA9DD;EA+DA,MAAMyF,6BAA6B,GAAGC,MAAM,CAACC,IAAP,CAAYP,6BAAZ,CAAtC;;EACA,KAAK,IAAI1D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG+D,6BAA6B,CAAC9D,MAAlD,EAA0DD,CAAC,IAAI,CAA/D,EAAkE;IAChE,MAAMkE,UAAU,GAAGH,6BAA6B,CAAC/D,CAAD,CAAhD;IACA,MAAMmE,WAAW,GAAGT,6BAA6B,CAACQ,UAAD,CAAjD;;IACA,IAAIF,MAAM,CAACC,IAAP,CAAYE,WAAZ,EAAyBlE,MAAzB,GAAkC,CAAtC,EAAyC;MACvCwD,cAAc,CAAC1B,OAAf,CAAuBmC,UAAvB,IAAqCT,cAAc,CAAC1B,OAAf,CAAuBmC,UAAvB,EAAmCE,MAAnC,CAA0C9F,EAAE,IAAI,CAAC6F,WAAW,CAAC7F,EAAD,CAA5D,CAArC;IACD;EACF;;EACD,OAAO;IACLwB,sBADK;IAELC,mBAFK;IAGLF,OAAO,EAAE4D,cAHJ;IAILrD,wBAAwB,EAAE6C,aAAa,CAAC7C,wBAJnC;IAKLC,+BAA+B,EAAE4C,aAAa,CAAC5C,+BAL1C;IAMLC,gCAAgC,EAAE2C,aAAa,CAAC3C;EAN3C,CAAP;AAQD,CAzHM;AA0HP,OAAO,SAAS+D,yBAAT,CAAmCtD,MAAnC,EAA2C;EAChD,MAAMuD,UAAU,GAAGvG,sBAAsB,CAACgD,MAAD,CAAzC;EACA,MAAMwD,mBAAmB,GAAGD,UAAU,EAAEE,GAAZ,EAAiBC,MAAjB,CAAwB,CAACC,GAAD,EAAMC,KAAN,KAAgB;IAClED,GAAG,IAAI3D,MAAM,CAACK,OAAP,CAAewD,qBAAf,CAAqCD,KAAK,CAACrG,EAA3C,CAAP;IACA,OAAOoG,GAAP;EACD,CAH2B,EAGzB,CAHyB,KAGnB,CAHT;EAIA,MAAMG,sBAAsB,GAAGP,UAAU,EAAEQ,MAAZ,EAAoBL,MAApB,CAA2B,CAACC,GAAD,EAAMC,KAAN,KAAgB;IACxED,GAAG,IAAI3D,MAAM,CAACK,OAAP,CAAewD,qBAAf,CAAqCD,KAAK,CAACrG,EAA3C,CAAP;IACA,OAAOoG,GAAP;EACD,CAH8B,EAG5B,CAH4B,KAGtB,CAHT;EAIA,OAAO;IACLF,GAAG,EAAED,mBADA;IAELO,MAAM,EAAED;EAFH,CAAP;AAID;AACD,OAAO,SAASE,uBAAT,CAAiChE,MAAjC,EAAyC;EAC9C,MAAMiE,UAAU,GAAGhH,sBAAsB,CAAC+C,MAAM,CAACK,OAAP,CAAe6D,KAAhB,CAAzC;EACA,OAAQ,iCAAgC,IAAID,UAAU,CAACE,SAAU,KAAjE;AACD"},"metadata":{},"sourceType":"module"}