{"ast":null,"code":"import { gridVisibleColumnDefinitionsSelector } from '../features/columns/gridColumnsSelector';\nimport { useGridSelector } from './useGridSelector';\nimport { useGridRootProps } from './useGridRootProps';\nimport { gridColumnGroupsHeaderMaxDepthSelector } from '../features/columnGrouping/gridColumnGroupsSelector';\nimport { gridPinnedRowsCountSelector, gridRowCountSelector } from '../features/rows/gridRowsSelector';\nimport { useGridPrivateApiContext } from './useGridPrivateApiContext';\nimport { isMultipleRowSelectionEnabled } from '../features/rowSelection/utils';\nexport const useGridAriaAttributes = () => {\n  const apiRef = useGridPrivateApiContext();\n  const rootProps = useGridRootProps();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const totalRowCount = useGridSelector(apiRef, gridRowCountSelector);\n  const headerGroupingMaxDepth = useGridSelector(apiRef, gridColumnGroupsHeaderMaxDepthSelector);\n  const pinnedRowsCount = useGridSelector(apiRef, gridPinnedRowsCountSelector);\n  let role = 'grid';\n\n  if (rootProps.treeData) {\n    role = 'treegrid';\n  }\n\n  return {\n    role,\n    'aria-colcount': visibleColumns.length,\n    'aria-rowcount': headerGroupingMaxDepth + 1 + pinnedRowsCount + totalRowCount,\n    'aria-multiselectable': isMultipleRowSelectionEnabled(rootProps)\n  };\n};","map":{"version":3,"names":["gridVisibleColumnDefinitionsSelector","useGridSelector","useGridRootProps","gridColumnGroupsHeaderMaxDepthSelector","gridPinnedRowsCountSelector","gridRowCountSelector","useGridPrivateApiContext","isMultipleRowSelectionEnabled","useGridAriaAttributes","apiRef","rootProps","visibleColumns","totalRowCount","headerGroupingMaxDepth","pinnedRowsCount","role","treeData","length"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/@mui/x-data-grid/hooks/utils/useGridAriaAttributes.js"],"sourcesContent":["import { gridVisibleColumnDefinitionsSelector } from '../features/columns/gridColumnsSelector';\nimport { useGridSelector } from './useGridSelector';\nimport { useGridRootProps } from './useGridRootProps';\nimport { gridColumnGroupsHeaderMaxDepthSelector } from '../features/columnGrouping/gridColumnGroupsSelector';\nimport { gridPinnedRowsCountSelector, gridRowCountSelector } from '../features/rows/gridRowsSelector';\nimport { useGridPrivateApiContext } from './useGridPrivateApiContext';\nimport { isMultipleRowSelectionEnabled } from '../features/rowSelection/utils';\nexport const useGridAriaAttributes = () => {\n  const apiRef = useGridPrivateApiContext();\n  const rootProps = useGridRootProps();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const totalRowCount = useGridSelector(apiRef, gridRowCountSelector);\n  const headerGroupingMaxDepth = useGridSelector(apiRef, gridColumnGroupsHeaderMaxDepthSelector);\n  const pinnedRowsCount = useGridSelector(apiRef, gridPinnedRowsCountSelector);\n  let role = 'grid';\n  if (rootProps.treeData) {\n    role = 'treegrid';\n  }\n  return {\n    role,\n    'aria-colcount': visibleColumns.length,\n    'aria-rowcount': headerGroupingMaxDepth + 1 + pinnedRowsCount + totalRowCount,\n    'aria-multiselectable': isMultipleRowSelectionEnabled(rootProps)\n  };\n};"],"mappings":"AAAA,SAASA,oCAAT,QAAqD,yCAArD;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,sCAAT,QAAuD,qDAAvD;AACA,SAASC,2BAAT,EAAsCC,oBAAtC,QAAkE,mCAAlE;AACA,SAASC,wBAAT,QAAyC,4BAAzC;AACA,SAASC,6BAAT,QAA8C,gCAA9C;AACA,OAAO,MAAMC,qBAAqB,GAAG,MAAM;EACzC,MAAMC,MAAM,GAAGH,wBAAwB,EAAvC;EACA,MAAMI,SAAS,GAAGR,gBAAgB,EAAlC;EACA,MAAMS,cAAc,GAAGV,eAAe,CAACQ,MAAD,EAAST,oCAAT,CAAtC;EACA,MAAMY,aAAa,GAAGX,eAAe,CAACQ,MAAD,EAASJ,oBAAT,CAArC;EACA,MAAMQ,sBAAsB,GAAGZ,eAAe,CAACQ,MAAD,EAASN,sCAAT,CAA9C;EACA,MAAMW,eAAe,GAAGb,eAAe,CAACQ,MAAD,EAASL,2BAAT,CAAvC;EACA,IAAIW,IAAI,GAAG,MAAX;;EACA,IAAIL,SAAS,CAACM,QAAd,EAAwB;IACtBD,IAAI,GAAG,UAAP;EACD;;EACD,OAAO;IACLA,IADK;IAEL,iBAAiBJ,cAAc,CAACM,MAF3B;IAGL,iBAAiBJ,sBAAsB,GAAG,CAAzB,GAA6BC,eAA7B,GAA+CF,aAH3D;IAIL,wBAAwBL,6BAA6B,CAACG,SAAD;EAJhD,CAAP;AAMD,CAjBM"},"metadata":{},"sourceType":"module"}