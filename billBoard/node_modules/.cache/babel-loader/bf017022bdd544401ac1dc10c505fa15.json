{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"desktopModeMediaQuery\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport { useThemeProps } from '@mui/material/styles';\nimport { refType } from '@mui/utils';\nimport { DesktopDateRangePicker } from '../DesktopDateRangePicker';\nimport { MobileDateRangePicker } from '../MobileDateRangePicker';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * Demos:\n *\n * - [DateRangePicker](https://mui.com/x/react-date-pickers/date-range-picker/)\n * - [Validation](https://mui.com/x/react-date-pickers/validation/)\n *\n * API:\n *\n * - [DateRangePicker API](https://mui.com/x/api/date-pickers/date-range-picker/)\n */\n\nconst DateRangePicker = /*#__PURE__*/React.forwardRef(function DateRangePicker(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiDateRangePicker'\n  });\n\n  const {\n    desktopModeMediaQuery = '@media (pointer: fine)'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded); // defaults to `true` in environments where `window.matchMedia` would not be available (i.e. test/jsdom)\n\n\n  const isDesktop = useMediaQuery(desktopModeMediaQuery, {\n    defaultMatches: true\n  });\n\n  if (isDesktop) {\n    return /*#__PURE__*/_jsx(DesktopDateRangePicker, _extends({\n      ref: ref\n    }, other));\n  }\n\n  return /*#__PURE__*/_jsx(MobileDateRangePicker, _extends({\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? DateRangePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the main element is focused during the first mount.\n   * This main element is:\n   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).\n   * - the `input` element if there is a field rendered.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * The number of calendars to render on **desktop**.\n   * @default 2\n   */\n  calendars: PropTypes.oneOf([1, 2, 3]),\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the popover or modal will close after submitting the full date.\n   * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  closeOnSelect: PropTypes.bool,\n\n  /**\n   * Position the current month is rendered in.\n   * @default 1\n   */\n  currentMonthCalendarPosition: PropTypes.oneOf([1, 2, 3]),\n\n  /**\n   * Formats the day of week displayed in the calendar header.\n   * @param {TDate} date The date of the day of week provided by the adapter.\n   * @returns {string} The name to display.\n   * @default (date: TDate) => adapter.format(date, 'weekdayShort').charAt(0).toUpperCase()\n   */\n  dayOfWeekFormatter: PropTypes.func,\n\n  /**\n   * The initial position in the edited date range.\n   * Used when the component is not controlled.\n   * @default 'start'\n   */\n  defaultRangePosition: PropTypes.oneOf(['end', 'start']),\n\n  /**\n   * The default value.\n   * Used when the component is not controlled.\n   */\n  defaultValue: PropTypes.arrayOf(PropTypes.object),\n\n  /**\n   * CSS media query when `Mobile` mode will be changed to `Desktop`.\n   * @default '@media (pointer: fine)'\n   * @example '@media (min-width: 720px)' or theme.breakpoints.up(\"sm\")\n   */\n  desktopModeMediaQuery: PropTypes.string,\n\n  /**\n   * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.\n   * @default false\n   */\n  disableAutoMonthSwitching: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, editing dates by dragging is disabled.\n   * @default false\n   */\n  disableDragEditing: PropTypes.bool,\n\n  /**\n   * If `true`, disable values after the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * If `true`, today's date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\n   * If `true`, the open picker button will not be rendered (renders only the field).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * If `true`, disable values before the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * If `true`, the week number will be display in the calendar.\n   */\n  displayWeekNumber: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  enableAccessibleFieldDOMStructure: PropTypes.any,\n\n  /**\n   * The day view will show as many weeks as needed after the end of the current month to match this value.\n   * Put it to 6 to have a fixed number of weeks in Gregorian calendars\n   */\n  fixedWeekNumber: PropTypes.number,\n\n  /**\n   * Format of the date when rendered in the input(s).\n   * Defaults to localized format based on the used `views`.\n   */\n  format: PropTypes.string,\n\n  /**\n   * Density of the format when rendered in the input.\n   * Setting `formatDensity` to `\"spacious\"` will add a space before and after each `/`, `-` and `.` character.\n   * @default \"dense\"\n   */\n  formatDensity: PropTypes.oneOf(['dense', 'spacious']),\n\n  /**\n   * Pass a ref to the `input` element.\n   * Ignored if the field has several inputs.\n   */\n  inputRef: refType,\n\n  /**\n   * The label content.\n   * Ignored if the field has several inputs.\n   */\n  label: PropTypes.node,\n\n  /**\n   * If `true`, calls `renderLoading` instead of rendering the day calendar.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Locale for components texts.\n   * Allows overriding texts coming from `LocalizationProvider` and `theme`.\n   */\n  localeText: PropTypes.object,\n\n  /**\n   * Maximal selectable date.\n   */\n  maxDate: PropTypes.object,\n\n  /**\n   * Minimal selectable date.\n   */\n  minDate: PropTypes.object,\n\n  /**\n   * Name attribute used by the `input` element in the Field.\n   * Ignored if the field has several inputs.\n   */\n  name: PropTypes.string,\n\n  /**\n   * Callback fired when the value is accepted.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The value that was just accepted.\n   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value changes.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The new value.\n   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see `open`).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the error associated to the current value changes.\n   * If the error has a non-null value, then the `TextField` will be rendered in `error` state.\n   *\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TError} error The new error describing why the current value is not valid.\n   * @param {TValue} value The value associated to the error.\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback fired on month change.\n   * @template TDate\n   * @param {TDate} month The new month.\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see `open`).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Callback fired when the range position changes.\n   * @param {RangePosition} rangePosition The new range position.\n   */\n  onRangePositionChange: PropTypes.func,\n\n  /**\n   * Callback fired when the selected sections change.\n   * @param {FieldSelectedSections} newValue The new selected sections.\n   */\n  onSelectedSectionsChange: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   * @default false\n   */\n  open: PropTypes.bool,\n\n  /**\n   * The position in the currently edited date range.\n   * Used when the component position is controlled.\n   */\n  rangePosition: PropTypes.oneOf(['end', 'start']),\n  readOnly: PropTypes.bool,\n\n  /**\n   * If `true`, disable heavy animations.\n   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * The date used to generate the new value when both `value` and `defaultValue` are empty.\n   * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.\n   */\n  referenceDate: PropTypes.object,\n\n  /**\n   * Component rendered on the \"day\" view when `props.loading` is true.\n   * @returns {React.ReactNode} The node to render when loading.\n   * @default () => \"...\"\n   */\n  renderLoading: PropTypes.func,\n\n  /**\n   * The currently selected sections.\n   * This prop accepts four formats:\n   * 1. If a number is provided, the section at this index will be selected.\n   * 2. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.\n   * 3. If `\"all\"` is provided, all the sections will be selected.\n   * 4. If `null` is provided, no section will be selected.\n   * If not provided, the selected sections will be handled internally.\n   */\n  selectedSections: PropTypes.oneOfType([PropTypes.oneOf(['all', 'day', 'empty', 'hours', 'meridiem', 'minutes', 'month', 'seconds', 'weekDay', 'year']), PropTypes.number]),\n\n  /**\n   * Disable specific date.\n   *\n   * Warning: This function can be called multiple times (for example when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.\n   *\n   * @template TDate\n   * @param {TDate} day The date to test.\n   * @param {string} position The date to test, 'start' or 'end'.\n   * @returns {boolean} Returns `true` if the date should be disabled.\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\n   * If `true`, days outside the current month are rendered:\n   *\n   * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.\n   *\n   * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.\n   *\n   * - ignored if `calendars` equals more than `1` on range pickers.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n\n  /**\n   * Overridable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * Choose which timezone to use for the value.\n   * Example: \"default\", \"system\", \"UTC\", \"America/New_York\".\n   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.\n   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.\n   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.\n   */\n  timezone: PropTypes.string,\n\n  /**\n   * The selected value.\n   * Used when the component is controlled.\n   */\n  value: PropTypes.arrayOf(PropTypes.object),\n\n  /**\n   * Define custom view renderers for each section.\n   * If `null`, the section will only have field editing.\n   * If `undefined`, internally defined view will be used.\n   */\n  viewRenderers: PropTypes.shape({\n    day: PropTypes.func\n  })\n} : void 0;\nexport { DateRangePicker };","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","useMediaQuery","useThemeProps","refType","DesktopDateRangePicker","MobileDateRangePicker","jsx","_jsx","DateRangePicker","forwardRef","inProps","ref","props","name","desktopModeMediaQuery","other","isDesktop","defaultMatches","process","env","NODE_ENV","propTypes","autoFocus","bool","calendars","oneOf","className","string","closeOnSelect","currentMonthCalendarPosition","dayOfWeekFormatter","func","defaultRangePosition","defaultValue","arrayOf","object","disableAutoMonthSwitching","disabled","disableDragEditing","disableFuture","disableHighlightToday","disableOpenPicker","disablePast","displayWeekNumber","enableAccessibleFieldDOMStructure","any","fixedWeekNumber","number","format","formatDensity","inputRef","label","node","loading","localeText","maxDate","minDate","onAccept","onChange","onClose","onError","onMonthChange","onOpen","onRangePositionChange","onSelectedSectionsChange","open","rangePosition","readOnly","reduceAnimations","referenceDate","renderLoading","selectedSections","oneOfType","shouldDisableDate","showDaysOutsideCurrentMonth","slotProps","slots","sx","timezone","value","viewRenderers","shape","day"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/@mui/x-date-pickers-pro/DateRangePicker/DateRangePicker.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"desktopModeMediaQuery\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport { useThemeProps } from '@mui/material/styles';\nimport { refType } from '@mui/utils';\nimport { DesktopDateRangePicker } from '../DesktopDateRangePicker';\nimport { MobileDateRangePicker } from '../MobileDateRangePicker';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * Demos:\n *\n * - [DateRangePicker](https://mui.com/x/react-date-pickers/date-range-picker/)\n * - [Validation](https://mui.com/x/react-date-pickers/validation/)\n *\n * API:\n *\n * - [DateRangePicker API](https://mui.com/x/api/date-pickers/date-range-picker/)\n */\nconst DateRangePicker = /*#__PURE__*/React.forwardRef(function DateRangePicker(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiDateRangePicker'\n  });\n  const {\n      desktopModeMediaQuery = '@media (pointer: fine)'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  // defaults to `true` in environments where `window.matchMedia` would not be available (i.e. test/jsdom)\n  const isDesktop = useMediaQuery(desktopModeMediaQuery, {\n    defaultMatches: true\n  });\n  if (isDesktop) {\n    return /*#__PURE__*/_jsx(DesktopDateRangePicker, _extends({\n      ref: ref\n    }, other));\n  }\n  return /*#__PURE__*/_jsx(MobileDateRangePicker, _extends({\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? DateRangePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * If `true`, the main element is focused during the first mount.\n   * This main element is:\n   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).\n   * - the `input` element if there is a field rendered.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * The number of calendars to render on **desktop**.\n   * @default 2\n   */\n  calendars: PropTypes.oneOf([1, 2, 3]),\n  className: PropTypes.string,\n  /**\n   * If `true`, the popover or modal will close after submitting the full date.\n   * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  closeOnSelect: PropTypes.bool,\n  /**\n   * Position the current month is rendered in.\n   * @default 1\n   */\n  currentMonthCalendarPosition: PropTypes.oneOf([1, 2, 3]),\n  /**\n   * Formats the day of week displayed in the calendar header.\n   * @param {TDate} date The date of the day of week provided by the adapter.\n   * @returns {string} The name to display.\n   * @default (date: TDate) => adapter.format(date, 'weekdayShort').charAt(0).toUpperCase()\n   */\n  dayOfWeekFormatter: PropTypes.func,\n  /**\n   * The initial position in the edited date range.\n   * Used when the component is not controlled.\n   * @default 'start'\n   */\n  defaultRangePosition: PropTypes.oneOf(['end', 'start']),\n  /**\n   * The default value.\n   * Used when the component is not controlled.\n   */\n  defaultValue: PropTypes.arrayOf(PropTypes.object),\n  /**\n   * CSS media query when `Mobile` mode will be changed to `Desktop`.\n   * @default '@media (pointer: fine)'\n   * @example '@media (min-width: 720px)' or theme.breakpoints.up(\"sm\")\n   */\n  desktopModeMediaQuery: PropTypes.string,\n  /**\n   * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.\n   * @default false\n   */\n  disableAutoMonthSwitching: PropTypes.bool,\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, editing dates by dragging is disabled.\n   * @default false\n   */\n  disableDragEditing: PropTypes.bool,\n  /**\n   * If `true`, disable values after the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n  /**\n   * If `true`, today's date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n  /**\n   * If `true`, the open picker button will not be rendered (renders only the field).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n  /**\n   * If `true`, disable values before the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n  /**\n   * If `true`, the week number will be display in the calendar.\n   */\n  displayWeekNumber: PropTypes.bool,\n  /**\n   * @default false\n   */\n  enableAccessibleFieldDOMStructure: PropTypes.any,\n  /**\n   * The day view will show as many weeks as needed after the end of the current month to match this value.\n   * Put it to 6 to have a fixed number of weeks in Gregorian calendars\n   */\n  fixedWeekNumber: PropTypes.number,\n  /**\n   * Format of the date when rendered in the input(s).\n   * Defaults to localized format based on the used `views`.\n   */\n  format: PropTypes.string,\n  /**\n   * Density of the format when rendered in the input.\n   * Setting `formatDensity` to `\"spacious\"` will add a space before and after each `/`, `-` and `.` character.\n   * @default \"dense\"\n   */\n  formatDensity: PropTypes.oneOf(['dense', 'spacious']),\n  /**\n   * Pass a ref to the `input` element.\n   * Ignored if the field has several inputs.\n   */\n  inputRef: refType,\n  /**\n   * The label content.\n   * Ignored if the field has several inputs.\n   */\n  label: PropTypes.node,\n  /**\n   * If `true`, calls `renderLoading` instead of rendering the day calendar.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n  /**\n   * Locale for components texts.\n   * Allows overriding texts coming from `LocalizationProvider` and `theme`.\n   */\n  localeText: PropTypes.object,\n  /**\n   * Maximal selectable date.\n   */\n  maxDate: PropTypes.object,\n  /**\n   * Minimal selectable date.\n   */\n  minDate: PropTypes.object,\n  /**\n   * Name attribute used by the `input` element in the Field.\n   * Ignored if the field has several inputs.\n   */\n  name: PropTypes.string,\n  /**\n   * Callback fired when the value is accepted.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The value that was just accepted.\n   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.\n   */\n  onAccept: PropTypes.func,\n  /**\n   * Callback fired when the value changes.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The new value.\n   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see `open`).\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the error associated to the current value changes.\n   * If the error has a non-null value, then the `TextField` will be rendered in `error` state.\n   *\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TError} error The new error describing why the current value is not valid.\n   * @param {TValue} value The value associated to the error.\n   */\n  onError: PropTypes.func,\n  /**\n   * Callback fired on month change.\n   * @template TDate\n   * @param {TDate} month The new month.\n   */\n  onMonthChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see `open`).\n   */\n  onOpen: PropTypes.func,\n  /**\n   * Callback fired when the range position changes.\n   * @param {RangePosition} rangePosition The new range position.\n   */\n  onRangePositionChange: PropTypes.func,\n  /**\n   * Callback fired when the selected sections change.\n   * @param {FieldSelectedSections} newValue The new selected sections.\n   */\n  onSelectedSectionsChange: PropTypes.func,\n  /**\n   * Control the popup or dialog open state.\n   * @default false\n   */\n  open: PropTypes.bool,\n  /**\n   * The position in the currently edited date range.\n   * Used when the component position is controlled.\n   */\n  rangePosition: PropTypes.oneOf(['end', 'start']),\n  readOnly: PropTypes.bool,\n  /**\n   * If `true`, disable heavy animations.\n   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13\n   */\n  reduceAnimations: PropTypes.bool,\n  /**\n   * The date used to generate the new value when both `value` and `defaultValue` are empty.\n   * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.\n   */\n  referenceDate: PropTypes.object,\n  /**\n   * Component rendered on the \"day\" view when `props.loading` is true.\n   * @returns {React.ReactNode} The node to render when loading.\n   * @default () => \"...\"\n   */\n  renderLoading: PropTypes.func,\n  /**\n   * The currently selected sections.\n   * This prop accepts four formats:\n   * 1. If a number is provided, the section at this index will be selected.\n   * 2. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.\n   * 3. If `\"all\"` is provided, all the sections will be selected.\n   * 4. If `null` is provided, no section will be selected.\n   * If not provided, the selected sections will be handled internally.\n   */\n  selectedSections: PropTypes.oneOfType([PropTypes.oneOf(['all', 'day', 'empty', 'hours', 'meridiem', 'minutes', 'month', 'seconds', 'weekDay', 'year']), PropTypes.number]),\n  /**\n   * Disable specific date.\n   *\n   * Warning: This function can be called multiple times (for example when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.\n   *\n   * @template TDate\n   * @param {TDate} day The date to test.\n   * @param {string} position The date to test, 'start' or 'end'.\n   * @returns {boolean} Returns `true` if the date should be disabled.\n   */\n  shouldDisableDate: PropTypes.func,\n  /**\n   * If `true`, days outside the current month are rendered:\n   *\n   * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.\n   *\n   * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.\n   *\n   * - ignored if `calendars` equals more than `1` on range pickers.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n  /**\n   * Overridable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Choose which timezone to use for the value.\n   * Example: \"default\", \"system\", \"UTC\", \"America/New_York\".\n   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.\n   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.\n   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.\n   */\n  timezone: PropTypes.string,\n  /**\n   * The selected value.\n   * Used when the component is controlled.\n   */\n  value: PropTypes.arrayOf(PropTypes.object),\n  /**\n   * Define custom view renderers for each section.\n   * If `null`, the section will only have field editing.\n   * If `undefined`, internally defined view will be used.\n   */\n  viewRenderers: PropTypes.shape({\n    day: PropTypes.func\n  })\n} : void 0;\nexport { DateRangePicker };"],"mappings":"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"},"metadata":{},"sourceType":"module"}