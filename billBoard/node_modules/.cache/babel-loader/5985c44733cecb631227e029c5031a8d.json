{"ast":null,"code":"import { createSelector, createSelectorMemoized } from '../../../utils/createSelector';\n/**\n * Get the columns state\n * @category Virtualization\n */\n\nexport const gridVirtualizationSelector = state => state.virtualization;\n/**\n * Get the enabled state for virtualization\n * @category Virtualization\n */\n\nexport const gridVirtualizationEnabledSelector = createSelector(gridVirtualizationSelector, state => state.enabled);\n/**\n * Get the enabled state for virtualization\n * @category Virtualization\n */\n\nexport const gridVirtualizationColumnEnabledSelector = createSelector(gridVirtualizationSelector, state => state.enabledForColumns);\n/**\n * Get the render context\n * @category Virtualization\n * @ignore - do not document.\n */\n\nexport const gridRenderContextSelector = createSelector(gridVirtualizationSelector, state => state.renderContext);\n/**\n * Get the render context, with only columns filled in.\n * This is cached, so it can be used to only re-render when the column interval changes.\n * @category Virtualization\n * @ignore - do not document.\n */\n\nexport const gridRenderContextColumnsSelector = createSelectorMemoized(state => state.virtualization.renderContext.firstColumnIndex, state => state.virtualization.renderContext.lastColumnIndex, (firstColumnIndex, lastColumnIndex) => ({\n  firstColumnIndex,\n  lastColumnIndex\n}));","map":{"version":3,"names":["createSelector","createSelectorMemoized","gridVirtualizationSelector","state","virtualization","gridVirtualizationEnabledSelector","enabled","gridVirtualizationColumnEnabledSelector","enabledForColumns","gridRenderContextSelector","renderContext","gridRenderContextColumnsSelector","firstColumnIndex","lastColumnIndex"],"sources":["C:/Users/kb/node_modules/@mui/x-data-grid/hooks/features/virtualization/gridVirtualizationSelectors.js"],"sourcesContent":["import { createSelector, createSelectorMemoized } from '../../../utils/createSelector';\n/**\n * Get the columns state\n * @category Virtualization\n */\nexport const gridVirtualizationSelector = state => state.virtualization;\n\n/**\n * Get the enabled state for virtualization\n * @category Virtualization\n */\nexport const gridVirtualizationEnabledSelector = createSelector(gridVirtualizationSelector, state => state.enabled);\n\n/**\n * Get the enabled state for virtualization\n * @category Virtualization\n */\nexport const gridVirtualizationColumnEnabledSelector = createSelector(gridVirtualizationSelector, state => state.enabledForColumns);\n\n/**\n * Get the render context\n * @category Virtualization\n * @ignore - do not document.\n */\nexport const gridRenderContextSelector = createSelector(gridVirtualizationSelector, state => state.renderContext);\n\n/**\n * Get the render context, with only columns filled in.\n * This is cached, so it can be used to only re-render when the column interval changes.\n * @category Virtualization\n * @ignore - do not document.\n */\nexport const gridRenderContextColumnsSelector = createSelectorMemoized(state => state.virtualization.renderContext.firstColumnIndex, state => state.virtualization.renderContext.lastColumnIndex, (firstColumnIndex, lastColumnIndex) => ({\n  firstColumnIndex,\n  lastColumnIndex\n}));"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,sBAAzB,QAAuD,+BAAvD;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,0BAA0B,GAAGC,KAAK,IAAIA,KAAK,CAACC,cAAlD;AAEP;AACA;AACA;AACA;;AACA,OAAO,MAAMC,iCAAiC,GAAGL,cAAc,CAACE,0BAAD,EAA6BC,KAAK,IAAIA,KAAK,CAACG,OAA5C,CAAxD;AAEP;AACA;AACA;AACA;;AACA,OAAO,MAAMC,uCAAuC,GAAGP,cAAc,CAACE,0BAAD,EAA6BC,KAAK,IAAIA,KAAK,CAACK,iBAA5C,CAA9D;AAEP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,yBAAyB,GAAGT,cAAc,CAACE,0BAAD,EAA6BC,KAAK,IAAIA,KAAK,CAACO,aAA5C,CAAhD;AAEP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,gCAAgC,GAAGV,sBAAsB,CAACE,KAAK,IAAIA,KAAK,CAACC,cAAN,CAAqBM,aAArB,CAAmCE,gBAA7C,EAA+DT,KAAK,IAAIA,KAAK,CAACC,cAAN,CAAqBM,aAArB,CAAmCG,eAA3G,EAA4H,CAACD,gBAAD,EAAmBC,eAAnB,MAAwC;EACxOD,gBADwO;EAExOC;AAFwO,CAAxC,CAA5H,CAA/D"},"metadata":{},"sourceType":"module"}