{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_ownerDocument as ownerDocument } from '@mui/utils';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridExpandedRowCountSelector } from '../filter/gridFilterSelector';\nimport { gridColumnDefinitionsSelector, gridColumnVisibilityModelSelector } from '../columns/gridColumnsSelector';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { GRID_ID_AUTOGENERATED } from '../rows/gridRowsUtils';\nimport { defaultGetRowsToExport, getColumnsToExport } from './utils';\nimport { getDerivedPaginationModel } from '../pagination/useGridPaginationModel';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GridPrintExportMenuItem } from '../../../components/toolbar/GridToolbarExport';\nimport { getTotalHeaderHeight } from '../columns/gridColumnsUtils';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF } from '../../../colDef/gridCheckboxSelectionColDef';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction raf() {\n  return new Promise(resolve => {\n    requestAnimationFrame(() => {\n      resolve();\n    });\n  });\n}\n\nfunction buildPrintWindow(title) {\n  const iframeEl = document.createElement('iframe');\n  iframeEl.style.position = 'absolute';\n  iframeEl.style.width = '0px';\n  iframeEl.style.height = '0px';\n  iframeEl.title = title || document.title;\n  return iframeEl;\n}\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridParamsApi (method)\n */\n\n\nexport const useGridPrintExport = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridPrintExport');\n  const doc = React.useRef(null);\n  const previousGridState = React.useRef(null);\n  const previousColumnVisibility = React.useRef({});\n  const previousRows = React.useRef([]);\n  const previousVirtualizationState = React.useRef();\n  React.useEffect(() => {\n    doc.current = ownerDocument(apiRef.current.rootElementRef.current);\n  }, [apiRef]); // Returns a promise because updateColumns triggers state update and\n  // the new state needs to be in place before the grid can be sized correctly\n\n  const updateGridColumnsForPrint = React.useCallback((fields, allColumns, includeCheckboxes) => new Promise(resolve => {\n    const exportedColumnFields = getColumnsToExport({\n      apiRef,\n      options: {\n        fields,\n        allColumns\n      }\n    }).map(column => column.field);\n    const columns = gridColumnDefinitionsSelector(apiRef);\n    const newColumnVisibilityModel = {};\n    columns.forEach(column => {\n      newColumnVisibilityModel[column.field] = exportedColumnFields.includes(column.field);\n    });\n\n    if (includeCheckboxes) {\n      newColumnVisibilityModel[GRID_CHECKBOX_SELECTION_COL_DEF.field] = true;\n    }\n\n    apiRef.current.setColumnVisibilityModel(newColumnVisibilityModel);\n    resolve();\n  }), [apiRef]);\n  const updateGridRowsForPrint = React.useCallback(getRowsToExport => {\n    const rowsToExportIds = getRowsToExport({\n      apiRef\n    });\n    const newRows = rowsToExportIds.reduce((acc, id) => {\n      const row = apiRef.current.getRow(id);\n\n      if (!row[GRID_ID_AUTOGENERATED]) {\n        acc.push(row);\n      }\n\n      return acc;\n    }, []);\n    apiRef.current.setRows(newRows);\n  }, [apiRef]);\n  const handlePrintWindowLoad = React.useCallback((printWindow, options) => {\n    const normalizeOptions = _extends({\n      copyStyles: true,\n      hideToolbar: false,\n      hideFooter: false,\n      includeCheckboxes: false\n    }, options);\n\n    const printDoc = printWindow.contentDocument;\n\n    if (!printDoc) {\n      return;\n    }\n\n    const rowsMeta = gridRowsMetaSelector(apiRef.current.state);\n    const gridRootElement = apiRef.current.rootElementRef.current;\n    const gridClone = gridRootElement.cloneNode(true); // Allow to overflow to not hide the border of the last row\n\n    const gridMain = gridClone.querySelector(`.${gridClasses.main}`);\n    gridMain.style.overflow = 'visible'; // See https://support.google.com/chrome/thread/191619088?hl=en&msgid=193009642\n\n    gridClone.style.contain = 'size';\n    let gridToolbarElementHeight = gridRootElement.querySelector(`.${gridClasses.toolbarContainer}`)?.offsetHeight || 0;\n    let gridFooterElementHeight = gridRootElement.querySelector(`.${gridClasses.footerContainer}`)?.offsetHeight || 0;\n\n    if (normalizeOptions.hideToolbar) {\n      gridClone.querySelector(`.${gridClasses.toolbarContainer}`)?.remove();\n      gridToolbarElementHeight = 0;\n    }\n\n    if (normalizeOptions.hideFooter) {\n      gridClone.querySelector(`.${gridClasses.footerContainer}`)?.remove();\n      gridFooterElementHeight = 0;\n    } // Expand container height to accommodate all rows\n\n\n    const computedTotalHeight = rowsMeta.currentPageTotalHeight + getTotalHeaderHeight(apiRef, props) + gridToolbarElementHeight + gridFooterElementHeight;\n    gridClone.style.height = `${computedTotalHeight}px`; // The height above does not include grid border width, so we need to exclude it\n\n    gridClone.style.boxSizing = 'content-box'; // the footer is always being placed at the bottom of the page as if all rows are exported\n    // so if getRowsToExport is being used to only export a subset of rows then we need to\n    // adjust the footer position to be correctly placed at the bottom of the grid\n\n    const gridFooterElement = gridClone.querySelector(`.${gridClasses.footerContainer}`);\n    gridFooterElement.style.position = 'absolute';\n    gridFooterElement.style.width = '100%';\n    gridFooterElement.style.top = `${computedTotalHeight - gridFooterElementHeight}px`; // printDoc.body.appendChild(gridClone); should be enough but a clone isolation bug in Safari\n    // prevents us to do it\n\n    const container = document.createElement('div');\n    container.appendChild(gridClone); // To avoid an empty page in start on Chromium based browsers\n\n    printDoc.body.style.marginTop = '0px';\n    printDoc.body.innerHTML = container.innerHTML;\n    const defaultPageStyle = typeof normalizeOptions.pageStyle === 'function' ? normalizeOptions.pageStyle() : normalizeOptions.pageStyle;\n\n    if (typeof defaultPageStyle === 'string') {\n      // TODO custom styles should always win\n      const styleElement = printDoc.createElement('style');\n      styleElement.appendChild(printDoc.createTextNode(defaultPageStyle));\n      printDoc.head.appendChild(styleElement);\n    }\n\n    if (normalizeOptions.bodyClassName) {\n      printDoc.body.classList.add(...normalizeOptions.bodyClassName.split(' '));\n    }\n\n    const stylesheetLoadPromises = [];\n\n    if (normalizeOptions.copyStyles) {\n      const rootCandidate = gridRootElement.getRootNode();\n      const root = rootCandidate.constructor.name === 'ShadowRoot' ? rootCandidate : doc.current;\n      const headStyleElements = root.querySelectorAll(\"style, link[rel='stylesheet']\");\n\n      for (let i = 0; i < headStyleElements.length; i += 1) {\n        const node = headStyleElements[i];\n\n        if (node.tagName === 'STYLE') {\n          const newHeadStyleElements = printDoc.createElement(node.tagName);\n          const sheet = node.sheet;\n\n          if (sheet) {\n            let styleCSS = ''; // NOTE: for-of is not supported by IE\n\n            for (let j = 0; j < sheet.cssRules.length; j += 1) {\n              if (typeof sheet.cssRules[j].cssText === 'string') {\n                styleCSS += `${sheet.cssRules[j].cssText}\\r\\n`;\n              }\n            }\n\n            newHeadStyleElements.appendChild(printDoc.createTextNode(styleCSS));\n            printDoc.head.appendChild(newHeadStyleElements);\n          }\n        } else if (node.getAttribute('href')) {\n          // If `href` tag is empty, avoid loading these links\n          const newHeadStyleElements = printDoc.createElement(node.tagName);\n\n          for (let j = 0; j < node.attributes.length; j += 1) {\n            const attr = node.attributes[j];\n\n            if (attr) {\n              newHeadStyleElements.setAttribute(attr.nodeName, attr.nodeValue || '');\n            }\n          }\n\n          stylesheetLoadPromises.push(new Promise(resolve => {\n            newHeadStyleElements.addEventListener('load', () => resolve());\n          }));\n          printDoc.head.appendChild(newHeadStyleElements);\n        }\n      }\n    } // Trigger print\n\n\n    if (process.env.NODE_ENV !== 'test') {\n      // wait for remote stylesheets to load\n      Promise.all(stylesheetLoadPromises).then(() => {\n        printWindow.contentWindow.print();\n      });\n    }\n  }, [apiRef, doc, props]);\n  const handlePrintWindowAfterPrint = React.useCallback(printWindow => {\n    // Remove the print iframe\n    doc.current.body.removeChild(printWindow); // Revert grid to previous state\n\n    apiRef.current.restoreState(previousGridState.current || {});\n\n    if (!previousGridState.current?.columns?.columnVisibilityModel) {\n      // if the apiRef.current.exportState(); did not exported the column visibility, we update it\n      apiRef.current.setColumnVisibilityModel(previousColumnVisibility.current);\n    }\n\n    apiRef.current.setState(state => _extends({}, state, {\n      virtualization: previousVirtualizationState.current\n    }));\n    apiRef.current.setRows(previousRows.current); // Clear local state\n\n    previousGridState.current = null;\n    previousColumnVisibility.current = {};\n    previousRows.current = [];\n  }, [apiRef]);\n  const exportDataAsPrint = React.useCallback(async options => {\n    logger.debug(`Export data as Print`);\n\n    if (!apiRef.current.rootElementRef.current) {\n      throw new Error('MUI X: No grid root element available.');\n    }\n\n    previousGridState.current = apiRef.current.exportState(); // It appends that the visibility model is not exported, especially if columnVisibility is not controlled\n\n    previousColumnVisibility.current = gridColumnVisibilityModelSelector(apiRef);\n    previousRows.current = apiRef.current.getSortedRows().filter(row => !row[GRID_ID_AUTOGENERATED]);\n\n    if (props.pagination) {\n      const visibleRowCount = gridExpandedRowCountSelector(apiRef);\n      const paginationModel = {\n        page: 0,\n        pageSize: visibleRowCount\n      };\n      apiRef.current.setState(state => _extends({}, state, {\n        pagination: _extends({}, state.pagination, {\n          paginationModel: getDerivedPaginationModel(state.pagination, // Using signature `DataGridPro` to allow more than 100 rows in the print export\n          'DataGridPro', paginationModel)\n        })\n      }));\n    }\n\n    previousVirtualizationState.current = apiRef.current.state.virtualization;\n    apiRef.current.setState(state => _extends({}, state, {\n      virtualization: _extends({}, state.virtualization, {\n        enabled: false,\n        enabledForColumns: false\n      })\n    }));\n    await updateGridColumnsForPrint(options?.fields, options?.allColumns, options?.includeCheckboxes);\n    updateGridRowsForPrint(options?.getRowsToExport ?? defaultGetRowsToExport);\n    await raf(); // wait for the state changes to take action\n\n    const printWindow = buildPrintWindow(options?.fileName);\n\n    if (process.env.NODE_ENV === 'test') {\n      doc.current.body.appendChild(printWindow); // In test env, run the all pipeline without waiting for loading\n\n      handlePrintWindowLoad(printWindow, options);\n      handlePrintWindowAfterPrint(printWindow);\n    } else {\n      printWindow.onload = () => {\n        handlePrintWindowLoad(printWindow, options);\n        const mediaQueryList = printWindow.contentWindow.matchMedia('print');\n        mediaQueryList.addEventListener('change', mql => {\n          const isAfterPrint = mql.matches === false;\n\n          if (isAfterPrint) {\n            handlePrintWindowAfterPrint(printWindow);\n          }\n        });\n      };\n\n      doc.current.body.appendChild(printWindow);\n    }\n  }, [props, logger, apiRef, handlePrintWindowLoad, handlePrintWindowAfterPrint, updateGridColumnsForPrint, updateGridRowsForPrint]);\n  const printExportApi = {\n    exportDataAsPrint\n  };\n  useGridApiMethod(apiRef, printExportApi, 'public');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const addExportMenuButtons = React.useCallback((initialValue, options) => {\n    if (options.printOptions?.disableToolbarButton) {\n      return initialValue;\n    }\n\n    return [...initialValue, {\n      component: /*#__PURE__*/_jsx(GridPrintExportMenuItem, {\n        options: options.printOptions\n      }),\n      componentName: 'printExport'\n    }];\n  }, []);\n  useGridRegisterPipeProcessor(apiRef, 'exportMenu', addExportMenuButtons);\n};","map":{"version":3,"names":["_extends","React","unstable_ownerDocument","ownerDocument","useGridLogger","gridExpandedRowCountSelector","gridColumnDefinitionsSelector","gridColumnVisibilityModelSelector","gridClasses","useGridApiMethod","gridRowsMetaSelector","GRID_ID_AUTOGENERATED","defaultGetRowsToExport","getColumnsToExport","getDerivedPaginationModel","useGridRegisterPipeProcessor","GridPrintExportMenuItem","getTotalHeaderHeight","GRID_CHECKBOX_SELECTION_COL_DEF","jsx","_jsx","raf","Promise","resolve","requestAnimationFrame","buildPrintWindow","title","iframeEl","document","createElement","style","position","width","height","useGridPrintExport","apiRef","props","logger","doc","useRef","previousGridState","previousColumnVisibility","previousRows","previousVirtualizationState","useEffect","current","rootElementRef","updateGridColumnsForPrint","useCallback","fields","allColumns","includeCheckboxes","exportedColumnFields","options","map","column","field","columns","newColumnVisibilityModel","forEach","includes","setColumnVisibilityModel","updateGridRowsForPrint","getRowsToExport","rowsToExportIds","newRows","reduce","acc","id","row","getRow","push","setRows","handlePrintWindowLoad","printWindow","normalizeOptions","copyStyles","hideToolbar","hideFooter","printDoc","contentDocument","rowsMeta","state","gridRootElement","gridClone","cloneNode","gridMain","querySelector","main","overflow","contain","gridToolbarElementHeight","toolbarContainer","offsetHeight","gridFooterElementHeight","footerContainer","remove","computedTotalHeight","currentPageTotalHeight","boxSizing","gridFooterElement","top","container","appendChild","body","marginTop","innerHTML","defaultPageStyle","pageStyle","styleElement","createTextNode","head","bodyClassName","classList","add","split","stylesheetLoadPromises","rootCandidate","getRootNode","root","constructor","name","headStyleElements","querySelectorAll","i","length","node","tagName","newHeadStyleElements","sheet","styleCSS","j","cssRules","cssText","getAttribute","attributes","attr","setAttribute","nodeName","nodeValue","addEventListener","process","env","NODE_ENV","all","then","contentWindow","print","handlePrintWindowAfterPrint","removeChild","restoreState","columnVisibilityModel","setState","virtualization","exportDataAsPrint","debug","Error","exportState","getSortedRows","filter","pagination","visibleRowCount","paginationModel","page","pageSize","enabled","enabledForColumns","fileName","onload","mediaQueryList","matchMedia","mql","isAfterPrint","matches","printExportApi","addExportMenuButtons","initialValue","printOptions","disableToolbarButton","component","componentName"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/@mui/x-data-grid/hooks/features/export/useGridPrintExport.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_ownerDocument as ownerDocument } from '@mui/utils';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridExpandedRowCountSelector } from '../filter/gridFilterSelector';\nimport { gridColumnDefinitionsSelector, gridColumnVisibilityModelSelector } from '../columns/gridColumnsSelector';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { GRID_ID_AUTOGENERATED } from '../rows/gridRowsUtils';\nimport { defaultGetRowsToExport, getColumnsToExport } from './utils';\nimport { getDerivedPaginationModel } from '../pagination/useGridPaginationModel';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GridPrintExportMenuItem } from '../../../components/toolbar/GridToolbarExport';\nimport { getTotalHeaderHeight } from '../columns/gridColumnsUtils';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF } from '../../../colDef/gridCheckboxSelectionColDef';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction raf() {\n  return new Promise(resolve => {\n    requestAnimationFrame(() => {\n      resolve();\n    });\n  });\n}\nfunction buildPrintWindow(title) {\n  const iframeEl = document.createElement('iframe');\n  iframeEl.style.position = 'absolute';\n  iframeEl.style.width = '0px';\n  iframeEl.style.height = '0px';\n  iframeEl.title = title || document.title;\n  return iframeEl;\n}\n\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridParamsApi (method)\n */\nexport const useGridPrintExport = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridPrintExport');\n  const doc = React.useRef(null);\n  const previousGridState = React.useRef(null);\n  const previousColumnVisibility = React.useRef({});\n  const previousRows = React.useRef([]);\n  const previousVirtualizationState = React.useRef();\n  React.useEffect(() => {\n    doc.current = ownerDocument(apiRef.current.rootElementRef.current);\n  }, [apiRef]);\n\n  // Returns a promise because updateColumns triggers state update and\n  // the new state needs to be in place before the grid can be sized correctly\n  const updateGridColumnsForPrint = React.useCallback((fields, allColumns, includeCheckboxes) => new Promise(resolve => {\n    const exportedColumnFields = getColumnsToExport({\n      apiRef,\n      options: {\n        fields,\n        allColumns\n      }\n    }).map(column => column.field);\n    const columns = gridColumnDefinitionsSelector(apiRef);\n    const newColumnVisibilityModel = {};\n    columns.forEach(column => {\n      newColumnVisibilityModel[column.field] = exportedColumnFields.includes(column.field);\n    });\n    if (includeCheckboxes) {\n      newColumnVisibilityModel[GRID_CHECKBOX_SELECTION_COL_DEF.field] = true;\n    }\n    apiRef.current.setColumnVisibilityModel(newColumnVisibilityModel);\n    resolve();\n  }), [apiRef]);\n  const updateGridRowsForPrint = React.useCallback(getRowsToExport => {\n    const rowsToExportIds = getRowsToExport({\n      apiRef\n    });\n    const newRows = rowsToExportIds.reduce((acc, id) => {\n      const row = apiRef.current.getRow(id);\n      if (!row[GRID_ID_AUTOGENERATED]) {\n        acc.push(row);\n      }\n      return acc;\n    }, []);\n    apiRef.current.setRows(newRows);\n  }, [apiRef]);\n  const handlePrintWindowLoad = React.useCallback((printWindow, options) => {\n    const normalizeOptions = _extends({\n      copyStyles: true,\n      hideToolbar: false,\n      hideFooter: false,\n      includeCheckboxes: false\n    }, options);\n    const printDoc = printWindow.contentDocument;\n    if (!printDoc) {\n      return;\n    }\n    const rowsMeta = gridRowsMetaSelector(apiRef.current.state);\n    const gridRootElement = apiRef.current.rootElementRef.current;\n    const gridClone = gridRootElement.cloneNode(true);\n\n    // Allow to overflow to not hide the border of the last row\n    const gridMain = gridClone.querySelector(`.${gridClasses.main}`);\n    gridMain.style.overflow = 'visible';\n\n    // See https://support.google.com/chrome/thread/191619088?hl=en&msgid=193009642\n    gridClone.style.contain = 'size';\n    let gridToolbarElementHeight = gridRootElement.querySelector(`.${gridClasses.toolbarContainer}`)?.offsetHeight || 0;\n    let gridFooterElementHeight = gridRootElement.querySelector(`.${gridClasses.footerContainer}`)?.offsetHeight || 0;\n    if (normalizeOptions.hideToolbar) {\n      gridClone.querySelector(`.${gridClasses.toolbarContainer}`)?.remove();\n      gridToolbarElementHeight = 0;\n    }\n    if (normalizeOptions.hideFooter) {\n      gridClone.querySelector(`.${gridClasses.footerContainer}`)?.remove();\n      gridFooterElementHeight = 0;\n    }\n\n    // Expand container height to accommodate all rows\n    const computedTotalHeight = rowsMeta.currentPageTotalHeight + getTotalHeaderHeight(apiRef, props) + gridToolbarElementHeight + gridFooterElementHeight;\n    gridClone.style.height = `${computedTotalHeight}px`;\n    // The height above does not include grid border width, so we need to exclude it\n    gridClone.style.boxSizing = 'content-box';\n\n    // the footer is always being placed at the bottom of the page as if all rows are exported\n    // so if getRowsToExport is being used to only export a subset of rows then we need to\n    // adjust the footer position to be correctly placed at the bottom of the grid\n    const gridFooterElement = gridClone.querySelector(`.${gridClasses.footerContainer}`);\n    gridFooterElement.style.position = 'absolute';\n    gridFooterElement.style.width = '100%';\n    gridFooterElement.style.top = `${computedTotalHeight - gridFooterElementHeight}px`;\n\n    // printDoc.body.appendChild(gridClone); should be enough but a clone isolation bug in Safari\n    // prevents us to do it\n    const container = document.createElement('div');\n    container.appendChild(gridClone);\n    // To avoid an empty page in start on Chromium based browsers\n    printDoc.body.style.marginTop = '0px';\n    printDoc.body.innerHTML = container.innerHTML;\n    const defaultPageStyle = typeof normalizeOptions.pageStyle === 'function' ? normalizeOptions.pageStyle() : normalizeOptions.pageStyle;\n    if (typeof defaultPageStyle === 'string') {\n      // TODO custom styles should always win\n      const styleElement = printDoc.createElement('style');\n      styleElement.appendChild(printDoc.createTextNode(defaultPageStyle));\n      printDoc.head.appendChild(styleElement);\n    }\n    if (normalizeOptions.bodyClassName) {\n      printDoc.body.classList.add(...normalizeOptions.bodyClassName.split(' '));\n    }\n    const stylesheetLoadPromises = [];\n    if (normalizeOptions.copyStyles) {\n      const rootCandidate = gridRootElement.getRootNode();\n      const root = rootCandidate.constructor.name === 'ShadowRoot' ? rootCandidate : doc.current;\n      const headStyleElements = root.querySelectorAll(\"style, link[rel='stylesheet']\");\n      for (let i = 0; i < headStyleElements.length; i += 1) {\n        const node = headStyleElements[i];\n        if (node.tagName === 'STYLE') {\n          const newHeadStyleElements = printDoc.createElement(node.tagName);\n          const sheet = node.sheet;\n          if (sheet) {\n            let styleCSS = '';\n            // NOTE: for-of is not supported by IE\n            for (let j = 0; j < sheet.cssRules.length; j += 1) {\n              if (typeof sheet.cssRules[j].cssText === 'string') {\n                styleCSS += `${sheet.cssRules[j].cssText}\\r\\n`;\n              }\n            }\n            newHeadStyleElements.appendChild(printDoc.createTextNode(styleCSS));\n            printDoc.head.appendChild(newHeadStyleElements);\n          }\n        } else if (node.getAttribute('href')) {\n          // If `href` tag is empty, avoid loading these links\n\n          const newHeadStyleElements = printDoc.createElement(node.tagName);\n          for (let j = 0; j < node.attributes.length; j += 1) {\n            const attr = node.attributes[j];\n            if (attr) {\n              newHeadStyleElements.setAttribute(attr.nodeName, attr.nodeValue || '');\n            }\n          }\n          stylesheetLoadPromises.push(new Promise(resolve => {\n            newHeadStyleElements.addEventListener('load', () => resolve());\n          }));\n          printDoc.head.appendChild(newHeadStyleElements);\n        }\n      }\n    }\n\n    // Trigger print\n    if (process.env.NODE_ENV !== 'test') {\n      // wait for remote stylesheets to load\n      Promise.all(stylesheetLoadPromises).then(() => {\n        printWindow.contentWindow.print();\n      });\n    }\n  }, [apiRef, doc, props]);\n  const handlePrintWindowAfterPrint = React.useCallback(printWindow => {\n    // Remove the print iframe\n    doc.current.body.removeChild(printWindow);\n\n    // Revert grid to previous state\n    apiRef.current.restoreState(previousGridState.current || {});\n    if (!previousGridState.current?.columns?.columnVisibilityModel) {\n      // if the apiRef.current.exportState(); did not exported the column visibility, we update it\n      apiRef.current.setColumnVisibilityModel(previousColumnVisibility.current);\n    }\n    apiRef.current.setState(state => _extends({}, state, {\n      virtualization: previousVirtualizationState.current\n    }));\n    apiRef.current.setRows(previousRows.current);\n\n    // Clear local state\n    previousGridState.current = null;\n    previousColumnVisibility.current = {};\n    previousRows.current = [];\n  }, [apiRef]);\n  const exportDataAsPrint = React.useCallback(async options => {\n    logger.debug(`Export data as Print`);\n    if (!apiRef.current.rootElementRef.current) {\n      throw new Error('MUI X: No grid root element available.');\n    }\n    previousGridState.current = apiRef.current.exportState();\n    // It appends that the visibility model is not exported, especially if columnVisibility is not controlled\n    previousColumnVisibility.current = gridColumnVisibilityModelSelector(apiRef);\n    previousRows.current = apiRef.current.getSortedRows().filter(row => !row[GRID_ID_AUTOGENERATED]);\n    if (props.pagination) {\n      const visibleRowCount = gridExpandedRowCountSelector(apiRef);\n      const paginationModel = {\n        page: 0,\n        pageSize: visibleRowCount\n      };\n      apiRef.current.setState(state => _extends({}, state, {\n        pagination: _extends({}, state.pagination, {\n          paginationModel: getDerivedPaginationModel(state.pagination,\n          // Using signature `DataGridPro` to allow more than 100 rows in the print export\n          'DataGridPro', paginationModel)\n        })\n      }));\n    }\n    previousVirtualizationState.current = apiRef.current.state.virtualization;\n    apiRef.current.setState(state => _extends({}, state, {\n      virtualization: _extends({}, state.virtualization, {\n        enabled: false,\n        enabledForColumns: false\n      })\n    }));\n    await updateGridColumnsForPrint(options?.fields, options?.allColumns, options?.includeCheckboxes);\n    updateGridRowsForPrint(options?.getRowsToExport ?? defaultGetRowsToExport);\n    await raf(); // wait for the state changes to take action\n    const printWindow = buildPrintWindow(options?.fileName);\n    if (process.env.NODE_ENV === 'test') {\n      doc.current.body.appendChild(printWindow);\n      // In test env, run the all pipeline without waiting for loading\n      handlePrintWindowLoad(printWindow, options);\n      handlePrintWindowAfterPrint(printWindow);\n    } else {\n      printWindow.onload = () => {\n        handlePrintWindowLoad(printWindow, options);\n        const mediaQueryList = printWindow.contentWindow.matchMedia('print');\n        mediaQueryList.addEventListener('change', mql => {\n          const isAfterPrint = mql.matches === false;\n          if (isAfterPrint) {\n            handlePrintWindowAfterPrint(printWindow);\n          }\n        });\n      };\n      doc.current.body.appendChild(printWindow);\n    }\n  }, [props, logger, apiRef, handlePrintWindowLoad, handlePrintWindowAfterPrint, updateGridColumnsForPrint, updateGridRowsForPrint]);\n  const printExportApi = {\n    exportDataAsPrint\n  };\n  useGridApiMethod(apiRef, printExportApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const addExportMenuButtons = React.useCallback((initialValue, options) => {\n    if (options.printOptions?.disableToolbarButton) {\n      return initialValue;\n    }\n    return [...initialValue, {\n      component: /*#__PURE__*/_jsx(GridPrintExportMenuItem, {\n        options: options.printOptions\n      }),\n      componentName: 'printExport'\n    }];\n  }, []);\n  useGridRegisterPipeProcessor(apiRef, 'exportMenu', addExportMenuButtons);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}