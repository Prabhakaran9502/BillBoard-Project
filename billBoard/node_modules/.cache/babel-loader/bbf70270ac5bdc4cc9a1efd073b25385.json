{"ast":null,"code":"import { createSelector, createSelectorMemoized } from '../../../utils/createSelector';\nimport { gridSortedRowEntriesSelector } from '../sorting/gridSortingSelector';\nimport { gridColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { gridRowMaximumTreeDepthSelector, gridRowTreeSelector } from '../rows/gridRowsSelector';\n/**\n * @category Filtering\n */\n\nconst gridFilterStateSelector = state => state.filter;\n/**\n * Get the current filter model.\n * @category Filtering\n */\n\n\nexport const gridFilterModelSelector = createSelector(gridFilterStateSelector, filterState => filterState.filterModel);\n/**\n * Get the current quick filter values.\n * @category Filtering\n */\n\nexport const gridQuickFilterValuesSelector = createSelector(gridFilterModelSelector, filterModel => filterModel.quickFilterValues);\n/**\n * @category Visible rows\n * @ignore - do not document.\n */\n\nexport const gridVisibleRowsLookupSelector = state => state.visibleRowsLookup;\n/**\n * @category Filtering\n * @ignore - do not document.\n */\n\nexport const gridFilteredRowsLookupSelector = createSelector(gridFilterStateSelector, filterState => filterState.filteredRowsLookup);\n/**\n * @category Filtering\n * @ignore - do not document.\n */\n\nexport const gridFilteredDescendantCountLookupSelector = createSelector(gridFilterStateSelector, filterState => filterState.filteredDescendantCountLookup);\n/**\n * Get the id and the model of the rows accessible after the filtering process.\n * Does not contain the collapsed children.\n * @category Filtering\n */\n\nexport const gridExpandedSortedRowEntriesSelector = createSelectorMemoized(gridVisibleRowsLookupSelector, gridSortedRowEntriesSelector, (visibleRowsLookup, sortedRows) => sortedRows.filter(row => visibleRowsLookup[row.id] !== false));\n/**\n * Get the id of the rows accessible after the filtering process.\n * Does not contain the collapsed children.\n * @category Filtering\n */\n\nexport const gridExpandedSortedRowIdsSelector = createSelectorMemoized(gridExpandedSortedRowEntriesSelector, visibleSortedRowEntries => visibleSortedRowEntries.map(row => row.id));\n/**\n * Get the id and the model of the rows accessible after the filtering process.\n * Contains the collapsed children.\n * @category Filtering\n */\n\nexport const gridFilteredSortedRowEntriesSelector = createSelectorMemoized(gridFilteredRowsLookupSelector, gridSortedRowEntriesSelector, (filteredRowsLookup, sortedRows) => sortedRows.filter(row => filteredRowsLookup[row.id] !== false));\n/**\n * Get the id of the rows accessible after the filtering process.\n * Contains the collapsed children.\n * @category Filtering\n */\n\nexport const gridFilteredSortedRowIdsSelector = createSelectorMemoized(gridFilteredSortedRowEntriesSelector, filteredSortedRowEntries => filteredSortedRowEntries.map(row => row.id));\n/**\n * Get the id and the model of the top level rows accessible after the filtering process.\n * @category Filtering\n */\n\nexport const gridFilteredSortedTopLevelRowEntriesSelector = createSelectorMemoized(gridExpandedSortedRowEntriesSelector, gridRowTreeSelector, gridRowMaximumTreeDepthSelector, (visibleSortedRows, rowTree, rowTreeDepth) => {\n  if (rowTreeDepth < 2) {\n    return visibleSortedRows;\n  }\n\n  return visibleSortedRows.filter(row => rowTree[row.id]?.depth === 0);\n});\n/**\n * Get the amount of rows accessible after the filtering process.\n * @category Filtering\n */\n\nexport const gridExpandedRowCountSelector = createSelector(gridExpandedSortedRowEntriesSelector, visibleSortedRows => visibleSortedRows.length);\n/**\n * Get the amount of top level rows accessible after the filtering process.\n * @category Filtering\n */\n\nexport const gridFilteredTopLevelRowCountSelector = createSelector(gridFilteredSortedTopLevelRowEntriesSelector, visibleSortedTopLevelRows => visibleSortedTopLevelRows.length);\n/**\n * @category Filtering\n * @ignore - do not document.\n */\n\nexport const gridFilterActiveItemsSelector = createSelectorMemoized(gridFilterModelSelector, gridColumnLookupSelector, (filterModel, columnLookup) => filterModel.items?.filter(item => {\n  if (!item.field) {\n    return false;\n  }\n\n  const column = columnLookup[item.field];\n\n  if (!column?.filterOperators || column?.filterOperators?.length === 0) {\n    return false;\n  }\n\n  const filterOperator = column.filterOperators.find(operator => operator.value === item.operator);\n\n  if (!filterOperator) {\n    return false;\n  }\n\n  return !filterOperator.InputComponent || item.value != null && item.value?.toString() !== '';\n}));\n/**\n * @category Filtering\n * @ignore - do not document.\n */\n\nexport const gridFilterActiveItemsLookupSelector = createSelectorMemoized(gridFilterActiveItemsSelector, activeFilters => {\n  const result = activeFilters.reduce((res, filterItem) => {\n    if (!res[filterItem.field]) {\n      res[filterItem.field] = [filterItem];\n    } else {\n      res[filterItem.field].push(filterItem);\n    }\n\n    return res;\n  }, {});\n  return result;\n});","map":{"version":3,"names":["createSelector","createSelectorMemoized","gridSortedRowEntriesSelector","gridColumnLookupSelector","gridRowMaximumTreeDepthSelector","gridRowTreeSelector","gridFilterStateSelector","state","filter","gridFilterModelSelector","filterState","filterModel","gridQuickFilterValuesSelector","quickFilterValues","gridVisibleRowsLookupSelector","visibleRowsLookup","gridFilteredRowsLookupSelector","filteredRowsLookup","gridFilteredDescendantCountLookupSelector","filteredDescendantCountLookup","gridExpandedSortedRowEntriesSelector","sortedRows","row","id","gridExpandedSortedRowIdsSelector","visibleSortedRowEntries","map","gridFilteredSortedRowEntriesSelector","gridFilteredSortedRowIdsSelector","filteredSortedRowEntries","gridFilteredSortedTopLevelRowEntriesSelector","visibleSortedRows","rowTree","rowTreeDepth","depth","gridExpandedRowCountSelector","length","gridFilteredTopLevelRowCountSelector","visibleSortedTopLevelRows","gridFilterActiveItemsSelector","columnLookup","items","item","field","column","filterOperators","filterOperator","find","operator","value","InputComponent","toString","gridFilterActiveItemsLookupSelector","activeFilters","result","reduce","res","filterItem","push"],"sources":["C:/Users/kb/node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterSelector.js"],"sourcesContent":["import { createSelector, createSelectorMemoized } from '../../../utils/createSelector';\nimport { gridSortedRowEntriesSelector } from '../sorting/gridSortingSelector';\nimport { gridColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { gridRowMaximumTreeDepthSelector, gridRowTreeSelector } from '../rows/gridRowsSelector';\n\n/**\n * @category Filtering\n */\nconst gridFilterStateSelector = state => state.filter;\n\n/**\n * Get the current filter model.\n * @category Filtering\n */\nexport const gridFilterModelSelector = createSelector(gridFilterStateSelector, filterState => filterState.filterModel);\n\n/**\n * Get the current quick filter values.\n * @category Filtering\n */\nexport const gridQuickFilterValuesSelector = createSelector(gridFilterModelSelector, filterModel => filterModel.quickFilterValues);\n\n/**\n * @category Visible rows\n * @ignore - do not document.\n */\nexport const gridVisibleRowsLookupSelector = state => state.visibleRowsLookup;\n\n/**\n * @category Filtering\n * @ignore - do not document.\n */\nexport const gridFilteredRowsLookupSelector = createSelector(gridFilterStateSelector, filterState => filterState.filteredRowsLookup);\n\n/**\n * @category Filtering\n * @ignore - do not document.\n */\nexport const gridFilteredDescendantCountLookupSelector = createSelector(gridFilterStateSelector, filterState => filterState.filteredDescendantCountLookup);\n\n/**\n * Get the id and the model of the rows accessible after the filtering process.\n * Does not contain the collapsed children.\n * @category Filtering\n */\nexport const gridExpandedSortedRowEntriesSelector = createSelectorMemoized(gridVisibleRowsLookupSelector, gridSortedRowEntriesSelector, (visibleRowsLookup, sortedRows) => sortedRows.filter(row => visibleRowsLookup[row.id] !== false));\n\n/**\n * Get the id of the rows accessible after the filtering process.\n * Does not contain the collapsed children.\n * @category Filtering\n */\nexport const gridExpandedSortedRowIdsSelector = createSelectorMemoized(gridExpandedSortedRowEntriesSelector, visibleSortedRowEntries => visibleSortedRowEntries.map(row => row.id));\n\n/**\n * Get the id and the model of the rows accessible after the filtering process.\n * Contains the collapsed children.\n * @category Filtering\n */\nexport const gridFilteredSortedRowEntriesSelector = createSelectorMemoized(gridFilteredRowsLookupSelector, gridSortedRowEntriesSelector, (filteredRowsLookup, sortedRows) => sortedRows.filter(row => filteredRowsLookup[row.id] !== false));\n\n/**\n * Get the id of the rows accessible after the filtering process.\n * Contains the collapsed children.\n * @category Filtering\n */\nexport const gridFilteredSortedRowIdsSelector = createSelectorMemoized(gridFilteredSortedRowEntriesSelector, filteredSortedRowEntries => filteredSortedRowEntries.map(row => row.id));\n\n/**\n * Get the id and the model of the top level rows accessible after the filtering process.\n * @category Filtering\n */\nexport const gridFilteredSortedTopLevelRowEntriesSelector = createSelectorMemoized(gridExpandedSortedRowEntriesSelector, gridRowTreeSelector, gridRowMaximumTreeDepthSelector, (visibleSortedRows, rowTree, rowTreeDepth) => {\n  if (rowTreeDepth < 2) {\n    return visibleSortedRows;\n  }\n  return visibleSortedRows.filter(row => rowTree[row.id]?.depth === 0);\n});\n\n/**\n * Get the amount of rows accessible after the filtering process.\n * @category Filtering\n */\nexport const gridExpandedRowCountSelector = createSelector(gridExpandedSortedRowEntriesSelector, visibleSortedRows => visibleSortedRows.length);\n\n/**\n * Get the amount of top level rows accessible after the filtering process.\n * @category Filtering\n */\nexport const gridFilteredTopLevelRowCountSelector = createSelector(gridFilteredSortedTopLevelRowEntriesSelector, visibleSortedTopLevelRows => visibleSortedTopLevelRows.length);\n\n/**\n * @category Filtering\n * @ignore - do not document.\n */\nexport const gridFilterActiveItemsSelector = createSelectorMemoized(gridFilterModelSelector, gridColumnLookupSelector, (filterModel, columnLookup) => filterModel.items?.filter(item => {\n  if (!item.field) {\n    return false;\n  }\n  const column = columnLookup[item.field];\n  if (!column?.filterOperators || column?.filterOperators?.length === 0) {\n    return false;\n  }\n  const filterOperator = column.filterOperators.find(operator => operator.value === item.operator);\n  if (!filterOperator) {\n    return false;\n  }\n  return !filterOperator.InputComponent || item.value != null && item.value?.toString() !== '';\n}));\n/**\n * @category Filtering\n * @ignore - do not document.\n */\nexport const gridFilterActiveItemsLookupSelector = createSelectorMemoized(gridFilterActiveItemsSelector, activeFilters => {\n  const result = activeFilters.reduce((res, filterItem) => {\n    if (!res[filterItem.field]) {\n      res[filterItem.field] = [filterItem];\n    } else {\n      res[filterItem.field].push(filterItem);\n    }\n    return res;\n  }, {});\n  return result;\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}