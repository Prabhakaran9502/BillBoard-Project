{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { gridDensityFactorSelector } from '../density';\nimport { useGridLogger, useGridSelector, useGridApiMethod, useGridApiEventHandler } from '../../utils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { gridPageCountSelector, gridPaginationModelSelector } from './gridPaginationSelector';\nimport { getPageCount, defaultPageSize, throwIfPageSizeExceedsTheLimit, getDefaultGridPaginationModel, getValidPage } from './gridPaginationUtils';\nexport const getDerivedPaginationModel = (paginationState, signature, paginationModelProp) => {\n  let paginationModel = paginationState.paginationModel;\n  const rowCount = paginationState.rowCount;\n  const pageSize = paginationModelProp?.pageSize ?? paginationModel.pageSize;\n  const page = paginationModelProp?.page ?? paginationModel.page;\n  const pageCount = getPageCount(rowCount, pageSize, page);\n\n  if (paginationModelProp && (paginationModelProp?.page !== paginationModel.page || paginationModelProp?.pageSize !== paginationModel.pageSize)) {\n    paginationModel = paginationModelProp;\n  }\n\n  const validPage = getValidPage(paginationModel.page, pageCount);\n\n  if (validPage !== paginationModel.page) {\n    paginationModel = _extends({}, paginationModel, {\n      page: validPage\n    });\n  }\n\n  throwIfPageSizeExceedsTheLimit(paginationModel.pageSize, signature);\n  return paginationModel;\n};\n/**\n * @requires useGridFilter (state)\n * @requires useGridDimensions (event) - can be after\n */\n\nexport const useGridPaginationModel = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridPaginationModel');\n  const densityFactor = useGridSelector(apiRef, gridDensityFactorSelector);\n  const rowHeight = Math.floor(props.rowHeight * densityFactor);\n  apiRef.current.registerControlState({\n    stateId: 'paginationModel',\n    propModel: props.paginationModel,\n    propOnChange: props.onPaginationModelChange,\n    stateSelector: gridPaginationModelSelector,\n    changeEvent: 'paginationModelChange'\n  });\n  /**\n   * API METHODS\n   */\n\n  const setPage = React.useCallback(page => {\n    const currentModel = gridPaginationModelSelector(apiRef);\n\n    if (page === currentModel.page) {\n      return;\n    }\n\n    logger.debug(`Setting page to ${page}`);\n    apiRef.current.setPaginationModel({\n      page,\n      pageSize: currentModel.pageSize\n    });\n  }, [apiRef, logger]);\n  const setPageSize = React.useCallback(pageSize => {\n    const currentModel = gridPaginationModelSelector(apiRef);\n\n    if (pageSize === currentModel.pageSize) {\n      return;\n    }\n\n    logger.debug(`Setting page size to ${pageSize}`);\n    apiRef.current.setPaginationModel({\n      pageSize,\n      page: currentModel.page\n    });\n  }, [apiRef, logger]);\n  const setPaginationModel = React.useCallback(paginationModel => {\n    const currentModel = gridPaginationModelSelector(apiRef);\n\n    if (paginationModel === currentModel) {\n      return;\n    }\n\n    logger.debug(\"Setting 'paginationModel' to\", paginationModel);\n    apiRef.current.setState(state => _extends({}, state, {\n      pagination: _extends({}, state.pagination, {\n        paginationModel: getDerivedPaginationModel(state.pagination, props.signature, paginationModel)\n      })\n    }));\n  }, [apiRef, logger, props.signature]);\n  const paginationModelApi = {\n    setPage,\n    setPageSize,\n    setPaginationModel\n  };\n  useGridApiMethod(apiRef, paginationModelApi, 'public');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    const paginationModel = gridPaginationModelSelector(apiRef);\n    const shouldExportPaginationModel = // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels || // Always export if the `paginationModel` is controlled\n    props.paginationModel != null || // Always export if the `paginationModel` has been initialized\n    props.initialState?.pagination?.paginationModel != null || // Export if `page` or `pageSize` is not equal to the default value\n    paginationModel.page !== 0 && paginationModel.pageSize !== defaultPageSize(props.autoPageSize);\n\n    if (!shouldExportPaginationModel) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      pagination: _extends({}, prevState.pagination, {\n        paginationModel\n      })\n    });\n  }, [apiRef, props.paginationModel, props.initialState?.pagination?.paginationModel, props.autoPageSize]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const paginationModel = context.stateToRestore.pagination?.paginationModel ? _extends({}, getDefaultGridPaginationModel(props.autoPageSize), context.stateToRestore.pagination?.paginationModel) : gridPaginationModelSelector(apiRef);\n    apiRef.current.setState(state => _extends({}, state, {\n      pagination: _extends({}, state.pagination, {\n        paginationModel: getDerivedPaginationModel(state.pagination, props.signature, paginationModel)\n      })\n    }));\n    return params;\n  }, [apiRef, props.autoPageSize, props.signature]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  /**\n   * EVENTS\n   */\n\n  const handlePaginationModelChange = () => {\n    const paginationModel = gridPaginationModelSelector(apiRef);\n\n    if (apiRef.current.virtualScrollerRef?.current) {\n      apiRef.current.scrollToIndexes({\n        rowIndex: paginationModel.page * paginationModel.pageSize\n      });\n    }\n  };\n\n  const handleUpdateAutoPageSize = React.useCallback(() => {\n    if (!props.autoPageSize) {\n      return;\n    }\n\n    const dimensions = apiRef.current.getRootDimensions();\n    const maximumPageSizeWithoutScrollBar = Math.floor(dimensions.viewportInnerSize.height / rowHeight);\n    apiRef.current.setPageSize(maximumPageSizeWithoutScrollBar);\n  }, [apiRef, props.autoPageSize, rowHeight]);\n  const handleRowCountChange = React.useCallback(newRowCount => {\n    if (newRowCount == null) {\n      return;\n    }\n\n    const paginationModel = gridPaginationModelSelector(apiRef);\n    const pageCount = gridPageCountSelector(apiRef);\n\n    if (paginationModel.page > pageCount - 1) {\n      apiRef.current.setPage(Math.max(0, pageCount - 1));\n    }\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'viewportInnerSizeChange', handleUpdateAutoPageSize);\n  useGridApiEventHandler(apiRef, 'paginationModelChange', handlePaginationModelChange);\n  useGridApiEventHandler(apiRef, 'rowCountChange', handleRowCountChange);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    apiRef.current.setState(state => _extends({}, state, {\n      pagination: _extends({}, state.pagination, {\n        paginationModel: getDerivedPaginationModel(state.pagination, props.signature, props.paginationModel)\n      })\n    }));\n  }, [apiRef, props.paginationModel, props.paginationMode, props.signature]);\n  React.useEffect(handleUpdateAutoPageSize, [handleUpdateAutoPageSize]);\n};","map":{"version":3,"names":["_extends","React","gridDensityFactorSelector","useGridLogger","useGridSelector","useGridApiMethod","useGridApiEventHandler","useGridRegisterPipeProcessor","gridPageCountSelector","gridPaginationModelSelector","getPageCount","defaultPageSize","throwIfPageSizeExceedsTheLimit","getDefaultGridPaginationModel","getValidPage","getDerivedPaginationModel","paginationState","signature","paginationModelProp","paginationModel","rowCount","pageSize","page","pageCount","validPage","useGridPaginationModel","apiRef","props","logger","densityFactor","rowHeight","Math","floor","current","registerControlState","stateId","propModel","propOnChange","onPaginationModelChange","stateSelector","changeEvent","setPage","useCallback","currentModel","debug","setPaginationModel","setPageSize","setState","state","pagination","paginationModelApi","stateExportPreProcessing","prevState","context","shouldExportPaginationModel","exportOnlyDirtyModels","initialState","autoPageSize","stateRestorePreProcessing","params","stateToRestore","handlePaginationModelChange","virtualScrollerRef","scrollToIndexes","rowIndex","handleUpdateAutoPageSize","dimensions","getRootDimensions","maximumPageSizeWithoutScrollBar","viewportInnerSize","height","handleRowCountChange","newRowCount","max","useEffect","paginationMode"],"sources":["C:/Users/kb/node_modules/@mui/x-data-grid/hooks/features/pagination/useGridPaginationModel.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { gridDensityFactorSelector } from '../density';\nimport { useGridLogger, useGridSelector, useGridApiMethod, useGridApiEventHandler } from '../../utils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { gridPageCountSelector, gridPaginationModelSelector } from './gridPaginationSelector';\nimport { getPageCount, defaultPageSize, throwIfPageSizeExceedsTheLimit, getDefaultGridPaginationModel, getValidPage } from './gridPaginationUtils';\nexport const getDerivedPaginationModel = (paginationState, signature, paginationModelProp) => {\n  let paginationModel = paginationState.paginationModel;\n  const rowCount = paginationState.rowCount;\n  const pageSize = paginationModelProp?.pageSize ?? paginationModel.pageSize;\n  const page = paginationModelProp?.page ?? paginationModel.page;\n  const pageCount = getPageCount(rowCount, pageSize, page);\n  if (paginationModelProp && (paginationModelProp?.page !== paginationModel.page || paginationModelProp?.pageSize !== paginationModel.pageSize)) {\n    paginationModel = paginationModelProp;\n  }\n  const validPage = getValidPage(paginationModel.page, pageCount);\n  if (validPage !== paginationModel.page) {\n    paginationModel = _extends({}, paginationModel, {\n      page: validPage\n    });\n  }\n  throwIfPageSizeExceedsTheLimit(paginationModel.pageSize, signature);\n  return paginationModel;\n};\n\n/**\n * @requires useGridFilter (state)\n * @requires useGridDimensions (event) - can be after\n */\nexport const useGridPaginationModel = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridPaginationModel');\n  const densityFactor = useGridSelector(apiRef, gridDensityFactorSelector);\n  const rowHeight = Math.floor(props.rowHeight * densityFactor);\n  apiRef.current.registerControlState({\n    stateId: 'paginationModel',\n    propModel: props.paginationModel,\n    propOnChange: props.onPaginationModelChange,\n    stateSelector: gridPaginationModelSelector,\n    changeEvent: 'paginationModelChange'\n  });\n\n  /**\n   * API METHODS\n   */\n  const setPage = React.useCallback(page => {\n    const currentModel = gridPaginationModelSelector(apiRef);\n    if (page === currentModel.page) {\n      return;\n    }\n    logger.debug(`Setting page to ${page}`);\n    apiRef.current.setPaginationModel({\n      page,\n      pageSize: currentModel.pageSize\n    });\n  }, [apiRef, logger]);\n  const setPageSize = React.useCallback(pageSize => {\n    const currentModel = gridPaginationModelSelector(apiRef);\n    if (pageSize === currentModel.pageSize) {\n      return;\n    }\n    logger.debug(`Setting page size to ${pageSize}`);\n    apiRef.current.setPaginationModel({\n      pageSize,\n      page: currentModel.page\n    });\n  }, [apiRef, logger]);\n  const setPaginationModel = React.useCallback(paginationModel => {\n    const currentModel = gridPaginationModelSelector(apiRef);\n    if (paginationModel === currentModel) {\n      return;\n    }\n    logger.debug(\"Setting 'paginationModel' to\", paginationModel);\n    apiRef.current.setState(state => _extends({}, state, {\n      pagination: _extends({}, state.pagination, {\n        paginationModel: getDerivedPaginationModel(state.pagination, props.signature, paginationModel)\n      })\n    }));\n  }, [apiRef, logger, props.signature]);\n  const paginationModelApi = {\n    setPage,\n    setPageSize,\n    setPaginationModel\n  };\n  useGridApiMethod(apiRef, paginationModelApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    const paginationModel = gridPaginationModelSelector(apiRef);\n    const shouldExportPaginationModel =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the `paginationModel` is controlled\n    props.paginationModel != null ||\n    // Always export if the `paginationModel` has been initialized\n    props.initialState?.pagination?.paginationModel != null ||\n    // Export if `page` or `pageSize` is not equal to the default value\n    paginationModel.page !== 0 && paginationModel.pageSize !== defaultPageSize(props.autoPageSize);\n    if (!shouldExportPaginationModel) {\n      return prevState;\n    }\n    return _extends({}, prevState, {\n      pagination: _extends({}, prevState.pagination, {\n        paginationModel\n      })\n    });\n  }, [apiRef, props.paginationModel, props.initialState?.pagination?.paginationModel, props.autoPageSize]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const paginationModel = context.stateToRestore.pagination?.paginationModel ? _extends({}, getDefaultGridPaginationModel(props.autoPageSize), context.stateToRestore.pagination?.paginationModel) : gridPaginationModelSelector(apiRef);\n    apiRef.current.setState(state => _extends({}, state, {\n      pagination: _extends({}, state.pagination, {\n        paginationModel: getDerivedPaginationModel(state.pagination, props.signature, paginationModel)\n      })\n    }));\n    return params;\n  }, [apiRef, props.autoPageSize, props.signature]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n\n  /**\n   * EVENTS\n   */\n  const handlePaginationModelChange = () => {\n    const paginationModel = gridPaginationModelSelector(apiRef);\n    if (apiRef.current.virtualScrollerRef?.current) {\n      apiRef.current.scrollToIndexes({\n        rowIndex: paginationModel.page * paginationModel.pageSize\n      });\n    }\n  };\n  const handleUpdateAutoPageSize = React.useCallback(() => {\n    if (!props.autoPageSize) {\n      return;\n    }\n    const dimensions = apiRef.current.getRootDimensions();\n    const maximumPageSizeWithoutScrollBar = Math.floor(dimensions.viewportInnerSize.height / rowHeight);\n    apiRef.current.setPageSize(maximumPageSizeWithoutScrollBar);\n  }, [apiRef, props.autoPageSize, rowHeight]);\n  const handleRowCountChange = React.useCallback(newRowCount => {\n    if (newRowCount == null) {\n      return;\n    }\n    const paginationModel = gridPaginationModelSelector(apiRef);\n    const pageCount = gridPageCountSelector(apiRef);\n    if (paginationModel.page > pageCount - 1) {\n      apiRef.current.setPage(Math.max(0, pageCount - 1));\n    }\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'viewportInnerSizeChange', handleUpdateAutoPageSize);\n  useGridApiEventHandler(apiRef, 'paginationModelChange', handlePaginationModelChange);\n  useGridApiEventHandler(apiRef, 'rowCountChange', handleRowCountChange);\n\n  /**\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    apiRef.current.setState(state => _extends({}, state, {\n      pagination: _extends({}, state.pagination, {\n        paginationModel: getDerivedPaginationModel(state.pagination, props.signature, props.paginationModel)\n      })\n    }));\n  }, [apiRef, props.paginationModel, props.paginationMode, props.signature]);\n  React.useEffect(handleUpdateAutoPageSize, [handleUpdateAutoPageSize]);\n};"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,yBAAT,QAA0C,YAA1C;AACA,SAASC,aAAT,EAAwBC,eAAxB,EAAyCC,gBAAzC,EAA2DC,sBAA3D,QAAyF,aAAzF;AACA,SAASC,4BAAT,QAA6C,2BAA7C;AACA,SAASC,qBAAT,EAAgCC,2BAAhC,QAAmE,0BAAnE;AACA,SAASC,YAAT,EAAuBC,eAAvB,EAAwCC,8BAAxC,EAAwEC,6BAAxE,EAAuGC,YAAvG,QAA2H,uBAA3H;AACA,OAAO,MAAMC,yBAAyB,GAAG,CAACC,eAAD,EAAkBC,SAAlB,EAA6BC,mBAA7B,KAAqD;EAC5F,IAAIC,eAAe,GAAGH,eAAe,CAACG,eAAtC;EACA,MAAMC,QAAQ,GAAGJ,eAAe,CAACI,QAAjC;EACA,MAAMC,QAAQ,GAAGH,mBAAmB,EAAEG,QAArB,IAAiCF,eAAe,CAACE,QAAlE;EACA,MAAMC,IAAI,GAAGJ,mBAAmB,EAAEI,IAArB,IAA6BH,eAAe,CAACG,IAA1D;EACA,MAAMC,SAAS,GAAGb,YAAY,CAACU,QAAD,EAAWC,QAAX,EAAqBC,IAArB,CAA9B;;EACA,IAAIJ,mBAAmB,KAAKA,mBAAmB,EAAEI,IAArB,KAA8BH,eAAe,CAACG,IAA9C,IAAsDJ,mBAAmB,EAAEG,QAArB,KAAkCF,eAAe,CAACE,QAA7G,CAAvB,EAA+I;IAC7IF,eAAe,GAAGD,mBAAlB;EACD;;EACD,MAAMM,SAAS,GAAGV,YAAY,CAACK,eAAe,CAACG,IAAjB,EAAuBC,SAAvB,CAA9B;;EACA,IAAIC,SAAS,KAAKL,eAAe,CAACG,IAAlC,EAAwC;IACtCH,eAAe,GAAGnB,QAAQ,CAAC,EAAD,EAAKmB,eAAL,EAAsB;MAC9CG,IAAI,EAAEE;IADwC,CAAtB,CAA1B;EAGD;;EACDZ,8BAA8B,CAACO,eAAe,CAACE,QAAjB,EAA2BJ,SAA3B,CAA9B;EACA,OAAOE,eAAP;AACD,CAjBM;AAmBP;AACA;AACA;AACA;;AACA,OAAO,MAAMM,sBAAsB,GAAG,CAACC,MAAD,EAASC,KAAT,KAAmB;EACvD,MAAMC,MAAM,GAAGzB,aAAa,CAACuB,MAAD,EAAS,wBAAT,CAA5B;EACA,MAAMG,aAAa,GAAGzB,eAAe,CAACsB,MAAD,EAASxB,yBAAT,CAArC;EACA,MAAM4B,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWL,KAAK,CAACG,SAAN,GAAkBD,aAA7B,CAAlB;EACAH,MAAM,CAACO,OAAP,CAAeC,oBAAf,CAAoC;IAClCC,OAAO,EAAE,iBADyB;IAElCC,SAAS,EAAET,KAAK,CAACR,eAFiB;IAGlCkB,YAAY,EAAEV,KAAK,CAACW,uBAHc;IAIlCC,aAAa,EAAE9B,2BAJmB;IAKlC+B,WAAW,EAAE;EALqB,CAApC;EAQA;AACF;AACA;;EACE,MAAMC,OAAO,GAAGxC,KAAK,CAACyC,WAAN,CAAkBpB,IAAI,IAAI;IACxC,MAAMqB,YAAY,GAAGlC,2BAA2B,CAACiB,MAAD,CAAhD;;IACA,IAAIJ,IAAI,KAAKqB,YAAY,CAACrB,IAA1B,EAAgC;MAC9B;IACD;;IACDM,MAAM,CAACgB,KAAP,CAAc,mBAAkBtB,IAAK,EAArC;IACAI,MAAM,CAACO,OAAP,CAAeY,kBAAf,CAAkC;MAChCvB,IADgC;MAEhCD,QAAQ,EAAEsB,YAAY,CAACtB;IAFS,CAAlC;EAID,CAVe,EAUb,CAACK,MAAD,EAASE,MAAT,CAVa,CAAhB;EAWA,MAAMkB,WAAW,GAAG7C,KAAK,CAACyC,WAAN,CAAkBrB,QAAQ,IAAI;IAChD,MAAMsB,YAAY,GAAGlC,2BAA2B,CAACiB,MAAD,CAAhD;;IACA,IAAIL,QAAQ,KAAKsB,YAAY,CAACtB,QAA9B,EAAwC;MACtC;IACD;;IACDO,MAAM,CAACgB,KAAP,CAAc,wBAAuBvB,QAAS,EAA9C;IACAK,MAAM,CAACO,OAAP,CAAeY,kBAAf,CAAkC;MAChCxB,QADgC;MAEhCC,IAAI,EAAEqB,YAAY,CAACrB;IAFa,CAAlC;EAID,CAVmB,EAUjB,CAACI,MAAD,EAASE,MAAT,CAViB,CAApB;EAWA,MAAMiB,kBAAkB,GAAG5C,KAAK,CAACyC,WAAN,CAAkBvB,eAAe,IAAI;IAC9D,MAAMwB,YAAY,GAAGlC,2BAA2B,CAACiB,MAAD,CAAhD;;IACA,IAAIP,eAAe,KAAKwB,YAAxB,EAAsC;MACpC;IACD;;IACDf,MAAM,CAACgB,KAAP,CAAa,8BAAb,EAA6CzB,eAA7C;IACAO,MAAM,CAACO,OAAP,CAAec,QAAf,CAAwBC,KAAK,IAAIhD,QAAQ,CAAC,EAAD,EAAKgD,KAAL,EAAY;MACnDC,UAAU,EAAEjD,QAAQ,CAAC,EAAD,EAAKgD,KAAK,CAACC,UAAX,EAAuB;QACzC9B,eAAe,EAAEJ,yBAAyB,CAACiC,KAAK,CAACC,UAAP,EAAmBtB,KAAK,CAACV,SAAzB,EAAoCE,eAApC;MADD,CAAvB;IAD+B,CAAZ,CAAzC;EAKD,CAX0B,EAWxB,CAACO,MAAD,EAASE,MAAT,EAAiBD,KAAK,CAACV,SAAvB,CAXwB,CAA3B;EAYA,MAAMiC,kBAAkB,GAAG;IACzBT,OADyB;IAEzBK,WAFyB;IAGzBD;EAHyB,CAA3B;EAKAxC,gBAAgB,CAACqB,MAAD,EAASwB,kBAAT,EAA6B,QAA7B,CAAhB;EAEA;AACF;AACA;;EACE,MAAMC,wBAAwB,GAAGlD,KAAK,CAACyC,WAAN,CAAkB,CAACU,SAAD,EAAYC,OAAZ,KAAwB;IACzE,MAAMlC,eAAe,GAAGV,2BAA2B,CAACiB,MAAD,CAAnD;IACA,MAAM4B,2BAA2B,GACjC;IACA,CAACD,OAAO,CAACE,qBAAT,IACA;IACA5B,KAAK,CAACR,eAAN,IAAyB,IAFzB,IAGA;IACAQ,KAAK,CAAC6B,YAAN,EAAoBP,UAApB,EAAgC9B,eAAhC,IAAmD,IAJnD,IAKA;IACAA,eAAe,CAACG,IAAhB,KAAyB,CAAzB,IAA8BH,eAAe,CAACE,QAAhB,KAA6BV,eAAe,CAACgB,KAAK,CAAC8B,YAAP,CAR1E;;IASA,IAAI,CAACH,2BAAL,EAAkC;MAChC,OAAOF,SAAP;IACD;;IACD,OAAOpD,QAAQ,CAAC,EAAD,EAAKoD,SAAL,EAAgB;MAC7BH,UAAU,EAAEjD,QAAQ,CAAC,EAAD,EAAKoD,SAAS,CAACH,UAAf,EAA2B;QAC7C9B;MAD6C,CAA3B;IADS,CAAhB,CAAf;EAKD,CAnBgC,EAmB9B,CAACO,MAAD,EAASC,KAAK,CAACR,eAAf,EAAgCQ,KAAK,CAAC6B,YAAN,EAAoBP,UAApB,EAAgC9B,eAAhE,EAAiFQ,KAAK,CAAC8B,YAAvF,CAnB8B,CAAjC;EAoBA,MAAMC,yBAAyB,GAAGzD,KAAK,CAACyC,WAAN,CAAkB,CAACiB,MAAD,EAASN,OAAT,KAAqB;IACvE,MAAMlC,eAAe,GAAGkC,OAAO,CAACO,cAAR,CAAuBX,UAAvB,EAAmC9B,eAAnC,GAAqDnB,QAAQ,CAAC,EAAD,EAAKa,6BAA6B,CAACc,KAAK,CAAC8B,YAAP,CAAlC,EAAwDJ,OAAO,CAACO,cAAR,CAAuBX,UAAvB,EAAmC9B,eAA3F,CAA7D,GAA2KV,2BAA2B,CAACiB,MAAD,CAA9N;IACAA,MAAM,CAACO,OAAP,CAAec,QAAf,CAAwBC,KAAK,IAAIhD,QAAQ,CAAC,EAAD,EAAKgD,KAAL,EAAY;MACnDC,UAAU,EAAEjD,QAAQ,CAAC,EAAD,EAAKgD,KAAK,CAACC,UAAX,EAAuB;QACzC9B,eAAe,EAAEJ,yBAAyB,CAACiC,KAAK,CAACC,UAAP,EAAmBtB,KAAK,CAACV,SAAzB,EAAoCE,eAApC;MADD,CAAvB;IAD+B,CAAZ,CAAzC;IAKA,OAAOwC,MAAP;EACD,CARiC,EAQ/B,CAACjC,MAAD,EAASC,KAAK,CAAC8B,YAAf,EAA6B9B,KAAK,CAACV,SAAnC,CAR+B,CAAlC;EASAV,4BAA4B,CAACmB,MAAD,EAAS,aAAT,EAAwByB,wBAAxB,CAA5B;EACA5C,4BAA4B,CAACmB,MAAD,EAAS,cAAT,EAAyBgC,yBAAzB,CAA5B;EAEA;AACF;AACA;;EACE,MAAMG,2BAA2B,GAAG,MAAM;IACxC,MAAM1C,eAAe,GAAGV,2BAA2B,CAACiB,MAAD,CAAnD;;IACA,IAAIA,MAAM,CAACO,OAAP,CAAe6B,kBAAf,EAAmC7B,OAAvC,EAAgD;MAC9CP,MAAM,CAACO,OAAP,CAAe8B,eAAf,CAA+B;QAC7BC,QAAQ,EAAE7C,eAAe,CAACG,IAAhB,GAAuBH,eAAe,CAACE;MADpB,CAA/B;IAGD;EACF,CAPD;;EAQA,MAAM4C,wBAAwB,GAAGhE,KAAK,CAACyC,WAAN,CAAkB,MAAM;IACvD,IAAI,CAACf,KAAK,CAAC8B,YAAX,EAAyB;MACvB;IACD;;IACD,MAAMS,UAAU,GAAGxC,MAAM,CAACO,OAAP,CAAekC,iBAAf,EAAnB;IACA,MAAMC,+BAA+B,GAAGrC,IAAI,CAACC,KAAL,CAAWkC,UAAU,CAACG,iBAAX,CAA6BC,MAA7B,GAAsCxC,SAAjD,CAAxC;IACAJ,MAAM,CAACO,OAAP,CAAea,WAAf,CAA2BsB,+BAA3B;EACD,CAPgC,EAO9B,CAAC1C,MAAD,EAASC,KAAK,CAAC8B,YAAf,EAA6B3B,SAA7B,CAP8B,CAAjC;EAQA,MAAMyC,oBAAoB,GAAGtE,KAAK,CAACyC,WAAN,CAAkB8B,WAAW,IAAI;IAC5D,IAAIA,WAAW,IAAI,IAAnB,EAAyB;MACvB;IACD;;IACD,MAAMrD,eAAe,GAAGV,2BAA2B,CAACiB,MAAD,CAAnD;IACA,MAAMH,SAAS,GAAGf,qBAAqB,CAACkB,MAAD,CAAvC;;IACA,IAAIP,eAAe,CAACG,IAAhB,GAAuBC,SAAS,GAAG,CAAvC,EAA0C;MACxCG,MAAM,CAACO,OAAP,CAAeQ,OAAf,CAAuBV,IAAI,CAAC0C,GAAL,CAAS,CAAT,EAAYlD,SAAS,GAAG,CAAxB,CAAvB;IACD;EACF,CAT4B,EAS1B,CAACG,MAAD,CAT0B,CAA7B;EAUApB,sBAAsB,CAACoB,MAAD,EAAS,yBAAT,EAAoCuC,wBAApC,CAAtB;EACA3D,sBAAsB,CAACoB,MAAD,EAAS,uBAAT,EAAkCmC,2BAAlC,CAAtB;EACAvD,sBAAsB,CAACoB,MAAD,EAAS,gBAAT,EAA2B6C,oBAA3B,CAAtB;EAEA;AACF;AACA;;EACEtE,KAAK,CAACyE,SAAN,CAAgB,MAAM;IACpBhD,MAAM,CAACO,OAAP,CAAec,QAAf,CAAwBC,KAAK,IAAIhD,QAAQ,CAAC,EAAD,EAAKgD,KAAL,EAAY;MACnDC,UAAU,EAAEjD,QAAQ,CAAC,EAAD,EAAKgD,KAAK,CAACC,UAAX,EAAuB;QACzC9B,eAAe,EAAEJ,yBAAyB,CAACiC,KAAK,CAACC,UAAP,EAAmBtB,KAAK,CAACV,SAAzB,EAAoCU,KAAK,CAACR,eAA1C;MADD,CAAvB;IAD+B,CAAZ,CAAzC;EAKD,CAND,EAMG,CAACO,MAAD,EAASC,KAAK,CAACR,eAAf,EAAgCQ,KAAK,CAACgD,cAAtC,EAAsDhD,KAAK,CAACV,SAA5D,CANH;EAOAhB,KAAK,CAACyE,SAAN,CAAgBT,wBAAhB,EAA0C,CAACA,wBAAD,CAA1C;AACD,CAvIM"},"metadata":{},"sourceType":"module"}