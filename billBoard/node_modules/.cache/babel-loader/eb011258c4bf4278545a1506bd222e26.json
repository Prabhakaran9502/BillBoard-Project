{"ast":null,"code":"import * as React from 'react';\nimport { gridColumnLookupSelector, gridRowTreeSelector, useFirstRender, GRID_CHECKBOX_SELECTION_FIELD } from '@mui/x-data-grid-pro';\nimport { useGridRegisterPipeProcessor, useGridRegisterStrategyProcessor, sortRowTree, createRowTree, updateRowTree, getVisibleRowsLookup } from '@mui/x-data-grid-pro/internals';\nimport { gridRowGroupingModelSelector, gridRowGroupingSanitizedModelSelector } from './gridRowGroupingSelector';\nimport { createGroupingColDefForAllGroupingCriteria, createGroupingColDefForOneGroupingCriteria } from './createGroupingColDef';\nimport { filterRowTreeFromGroupingColumns, getColDefOverrides, ROW_GROUPING_STRATEGY, isGroupingColumn, setStrategyAvailability, getCellGroupingCriteria, getGroupingRules } from './gridRowGroupingUtils';\nexport const useGridRowGroupingPreProcessors = (apiRef, props) => {\n  const getGroupingColDefs = React.useCallback(columnsState => {\n    if (props.disableRowGrouping) {\n      return [];\n    }\n\n    const groupingColDefProp = props.groupingColDef; // We can't use `gridGroupingRowsSanitizedModelSelector` here because the new columns are not in the state yet\n\n    const rowGroupingModel = gridRowGroupingModelSelector(apiRef).filter(field => !!columnsState.lookup[field]);\n\n    if (rowGroupingModel.length === 0) {\n      return [];\n    }\n\n    switch (props.rowGroupingColumnMode) {\n      case 'single':\n        {\n          return [createGroupingColDefForAllGroupingCriteria({\n            apiRef,\n            rowGroupingModel,\n            colDefOverride: getColDefOverrides(groupingColDefProp, rowGroupingModel),\n            columnsLookup: columnsState.lookup\n          })];\n        }\n\n      case 'multiple':\n        {\n          return rowGroupingModel.map(groupingCriteria => createGroupingColDefForOneGroupingCriteria({\n            groupingCriteria,\n            colDefOverride: getColDefOverrides(groupingColDefProp, [groupingCriteria]),\n            groupedByColDef: columnsState.lookup[groupingCriteria],\n            columnsLookup: columnsState.lookup\n          }));\n        }\n\n      default:\n        {\n          return [];\n        }\n    }\n  }, [apiRef, props.groupingColDef, props.rowGroupingColumnMode, props.disableRowGrouping]);\n  const updateGroupingColumn = React.useCallback(columnsState => {\n    const groupingColDefs = getGroupingColDefs(columnsState);\n    let newColumnFields = [];\n    const newColumnsLookup = {}; // We only keep the non-grouping columns\n\n    columnsState.orderedFields.forEach(field => {\n      if (!isGroupingColumn(field)) {\n        newColumnFields.push(field);\n        newColumnsLookup[field] = columnsState.lookup[field];\n      }\n    }); // We add the grouping column\n\n    groupingColDefs.forEach(groupingColDef => {\n      const matchingGroupingColDef = columnsState.lookup[groupingColDef.field];\n\n      if (matchingGroupingColDef) {\n        groupingColDef.width = matchingGroupingColDef.width;\n        groupingColDef.flex = matchingGroupingColDef.flex;\n      }\n\n      newColumnsLookup[groupingColDef.field] = groupingColDef;\n    });\n    const startIndex = newColumnFields[0] === GRID_CHECKBOX_SELECTION_FIELD ? 1 : 0;\n    newColumnFields = [...newColumnFields.slice(0, startIndex), ...groupingColDefs.map(colDef => colDef.field), ...newColumnFields.slice(startIndex)];\n    columnsState.orderedFields = newColumnFields;\n    columnsState.lookup = newColumnsLookup;\n    return columnsState;\n  }, [getGroupingColDefs]);\n  const createRowTreeForRowGrouping = React.useCallback(params => {\n    const sanitizedRowGroupingModel = gridRowGroupingSanitizedModelSelector(apiRef);\n    const columnsLookup = gridColumnLookupSelector(apiRef);\n    const groupingRules = getGroupingRules({\n      sanitizedRowGroupingModel,\n      columnsLookup\n    });\n    apiRef.current.caches.rowGrouping.rulesOnLastRowTreeCreation = groupingRules;\n\n    const getRowTreeBuilderNode = rowId => {\n      const row = params.dataRowIdToModelLookup[rowId];\n      const parentPath = groupingRules.map(groupingRule => getCellGroupingCriteria({\n        row,\n        groupingRule,\n        colDef: columnsLookup[groupingRule.field],\n        apiRef\n      })).filter(cell => cell.key != null);\n      const leafGroupingCriteria = {\n        key: rowId.toString(),\n        field: null\n      };\n      return {\n        path: [...parentPath, leafGroupingCriteria],\n        id: rowId\n      };\n    };\n\n    if (params.updates.type === 'full') {\n      return createRowTree({\n        previousTree: params.previousTree,\n        nodes: params.updates.rows.map(getRowTreeBuilderNode),\n        defaultGroupingExpansionDepth: props.defaultGroupingExpansionDepth,\n        isGroupExpandedByDefault: props.isGroupExpandedByDefault,\n        groupingName: ROW_GROUPING_STRATEGY\n      });\n    }\n\n    return updateRowTree({\n      nodes: {\n        inserted: params.updates.actions.insert.map(getRowTreeBuilderNode),\n        modified: params.updates.actions.modify.map(getRowTreeBuilderNode),\n        removed: params.updates.actions.remove\n      },\n      previousTree: params.previousTree,\n      previousTreeDepth: params.previousTreeDepths,\n      defaultGroupingExpansionDepth: props.defaultGroupingExpansionDepth,\n      isGroupExpandedByDefault: props.isGroupExpandedByDefault,\n      groupingName: ROW_GROUPING_STRATEGY\n    });\n  }, [apiRef, props.defaultGroupingExpansionDepth, props.isGroupExpandedByDefault]);\n  const filterRows = React.useCallback(params => {\n    const rowTree = gridRowTreeSelector(apiRef);\n    return filterRowTreeFromGroupingColumns({\n      rowTree,\n      isRowMatchingFilters: params.isRowMatchingFilters,\n      filterModel: params.filterModel,\n      apiRef\n    });\n  }, [apiRef]);\n  const sortRows = React.useCallback(params => {\n    const rowTree = gridRowTreeSelector(apiRef);\n    return sortRowTree({\n      rowTree,\n      sortRowList: params.sortRowList,\n      disableChildrenSorting: false,\n      shouldRenderGroupBelowLeaves: true\n    });\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'hydrateColumns', updateGroupingColumn);\n  useGridRegisterStrategyProcessor(apiRef, ROW_GROUPING_STRATEGY, 'rowTreeCreation', createRowTreeForRowGrouping);\n  useGridRegisterStrategyProcessor(apiRef, ROW_GROUPING_STRATEGY, 'filtering', filterRows);\n  useGridRegisterStrategyProcessor(apiRef, ROW_GROUPING_STRATEGY, 'sorting', sortRows);\n  useGridRegisterStrategyProcessor(apiRef, ROW_GROUPING_STRATEGY, 'visibleRowsLookupCreation', getVisibleRowsLookup);\n  /**\n   * 1ST RENDER\n   */\n\n  useFirstRender(() => {\n    setStrategyAvailability(apiRef, props.disableRowGrouping);\n  });\n  /**\n   * EFFECTS\n   */\n\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (!isFirstRender.current) {\n      setStrategyAvailability(apiRef, props.disableRowGrouping);\n    } else {\n      isFirstRender.current = false;\n    }\n  }, [apiRef, props.disableRowGrouping]);\n};","map":{"version":3,"names":["React","gridColumnLookupSelector","gridRowTreeSelector","useFirstRender","GRID_CHECKBOX_SELECTION_FIELD","useGridRegisterPipeProcessor","useGridRegisterStrategyProcessor","sortRowTree","createRowTree","updateRowTree","getVisibleRowsLookup","gridRowGroupingModelSelector","gridRowGroupingSanitizedModelSelector","createGroupingColDefForAllGroupingCriteria","createGroupingColDefForOneGroupingCriteria","filterRowTreeFromGroupingColumns","getColDefOverrides","ROW_GROUPING_STRATEGY","isGroupingColumn","setStrategyAvailability","getCellGroupingCriteria","getGroupingRules","useGridRowGroupingPreProcessors","apiRef","props","getGroupingColDefs","useCallback","columnsState","disableRowGrouping","groupingColDefProp","groupingColDef","rowGroupingModel","filter","field","lookup","length","rowGroupingColumnMode","colDefOverride","columnsLookup","map","groupingCriteria","groupedByColDef","updateGroupingColumn","groupingColDefs","newColumnFields","newColumnsLookup","orderedFields","forEach","push","matchingGroupingColDef","width","flex","startIndex","slice","colDef","createRowTreeForRowGrouping","params","sanitizedRowGroupingModel","groupingRules","current","caches","rowGrouping","rulesOnLastRowTreeCreation","getRowTreeBuilderNode","rowId","row","dataRowIdToModelLookup","parentPath","groupingRule","cell","key","leafGroupingCriteria","toString","path","id","updates","type","previousTree","nodes","rows","defaultGroupingExpansionDepth","isGroupExpandedByDefault","groupingName","inserted","actions","insert","modified","modify","removed","remove","previousTreeDepth","previousTreeDepths","filterRows","rowTree","isRowMatchingFilters","filterModel","sortRows","sortRowList","disableChildrenSorting","shouldRenderGroupBelowLeaves","isFirstRender","useRef","useEffect"],"sources":["C:/Users/kb/node_modules/@mui/x-data-grid-premium/esm/hooks/features/rowGrouping/useGridRowGroupingPreProcessors.js"],"sourcesContent":["import * as React from 'react';\nimport { gridColumnLookupSelector, gridRowTreeSelector, useFirstRender, GRID_CHECKBOX_SELECTION_FIELD } from '@mui/x-data-grid-pro';\nimport { useGridRegisterPipeProcessor, useGridRegisterStrategyProcessor, sortRowTree, createRowTree, updateRowTree, getVisibleRowsLookup } from '@mui/x-data-grid-pro/internals';\nimport { gridRowGroupingModelSelector, gridRowGroupingSanitizedModelSelector } from './gridRowGroupingSelector';\nimport { createGroupingColDefForAllGroupingCriteria, createGroupingColDefForOneGroupingCriteria } from './createGroupingColDef';\nimport { filterRowTreeFromGroupingColumns, getColDefOverrides, ROW_GROUPING_STRATEGY, isGroupingColumn, setStrategyAvailability, getCellGroupingCriteria, getGroupingRules } from './gridRowGroupingUtils';\nexport const useGridRowGroupingPreProcessors = (apiRef, props) => {\n  const getGroupingColDefs = React.useCallback(columnsState => {\n    if (props.disableRowGrouping) {\n      return [];\n    }\n    const groupingColDefProp = props.groupingColDef;\n\n    // We can't use `gridGroupingRowsSanitizedModelSelector` here because the new columns are not in the state yet\n    const rowGroupingModel = gridRowGroupingModelSelector(apiRef).filter(field => !!columnsState.lookup[field]);\n    if (rowGroupingModel.length === 0) {\n      return [];\n    }\n    switch (props.rowGroupingColumnMode) {\n      case 'single':\n        {\n          return [createGroupingColDefForAllGroupingCriteria({\n            apiRef,\n            rowGroupingModel,\n            colDefOverride: getColDefOverrides(groupingColDefProp, rowGroupingModel),\n            columnsLookup: columnsState.lookup\n          })];\n        }\n      case 'multiple':\n        {\n          return rowGroupingModel.map(groupingCriteria => createGroupingColDefForOneGroupingCriteria({\n            groupingCriteria,\n            colDefOverride: getColDefOverrides(groupingColDefProp, [groupingCriteria]),\n            groupedByColDef: columnsState.lookup[groupingCriteria],\n            columnsLookup: columnsState.lookup\n          }));\n        }\n      default:\n        {\n          return [];\n        }\n    }\n  }, [apiRef, props.groupingColDef, props.rowGroupingColumnMode, props.disableRowGrouping]);\n  const updateGroupingColumn = React.useCallback(columnsState => {\n    const groupingColDefs = getGroupingColDefs(columnsState);\n    let newColumnFields = [];\n    const newColumnsLookup = {};\n\n    // We only keep the non-grouping columns\n    columnsState.orderedFields.forEach(field => {\n      if (!isGroupingColumn(field)) {\n        newColumnFields.push(field);\n        newColumnsLookup[field] = columnsState.lookup[field];\n      }\n    });\n\n    // We add the grouping column\n    groupingColDefs.forEach(groupingColDef => {\n      const matchingGroupingColDef = columnsState.lookup[groupingColDef.field];\n      if (matchingGroupingColDef) {\n        groupingColDef.width = matchingGroupingColDef.width;\n        groupingColDef.flex = matchingGroupingColDef.flex;\n      }\n      newColumnsLookup[groupingColDef.field] = groupingColDef;\n    });\n    const startIndex = newColumnFields[0] === GRID_CHECKBOX_SELECTION_FIELD ? 1 : 0;\n    newColumnFields = [...newColumnFields.slice(0, startIndex), ...groupingColDefs.map(colDef => colDef.field), ...newColumnFields.slice(startIndex)];\n    columnsState.orderedFields = newColumnFields;\n    columnsState.lookup = newColumnsLookup;\n    return columnsState;\n  }, [getGroupingColDefs]);\n  const createRowTreeForRowGrouping = React.useCallback(params => {\n    const sanitizedRowGroupingModel = gridRowGroupingSanitizedModelSelector(apiRef);\n    const columnsLookup = gridColumnLookupSelector(apiRef);\n    const groupingRules = getGroupingRules({\n      sanitizedRowGroupingModel,\n      columnsLookup\n    });\n    apiRef.current.caches.rowGrouping.rulesOnLastRowTreeCreation = groupingRules;\n    const getRowTreeBuilderNode = rowId => {\n      const row = params.dataRowIdToModelLookup[rowId];\n      const parentPath = groupingRules.map(groupingRule => getCellGroupingCriteria({\n        row,\n        groupingRule,\n        colDef: columnsLookup[groupingRule.field],\n        apiRef\n      })).filter(cell => cell.key != null);\n      const leafGroupingCriteria = {\n        key: rowId.toString(),\n        field: null\n      };\n      return {\n        path: [...parentPath, leafGroupingCriteria],\n        id: rowId\n      };\n    };\n    if (params.updates.type === 'full') {\n      return createRowTree({\n        previousTree: params.previousTree,\n        nodes: params.updates.rows.map(getRowTreeBuilderNode),\n        defaultGroupingExpansionDepth: props.defaultGroupingExpansionDepth,\n        isGroupExpandedByDefault: props.isGroupExpandedByDefault,\n        groupingName: ROW_GROUPING_STRATEGY\n      });\n    }\n    return updateRowTree({\n      nodes: {\n        inserted: params.updates.actions.insert.map(getRowTreeBuilderNode),\n        modified: params.updates.actions.modify.map(getRowTreeBuilderNode),\n        removed: params.updates.actions.remove\n      },\n      previousTree: params.previousTree,\n      previousTreeDepth: params.previousTreeDepths,\n      defaultGroupingExpansionDepth: props.defaultGroupingExpansionDepth,\n      isGroupExpandedByDefault: props.isGroupExpandedByDefault,\n      groupingName: ROW_GROUPING_STRATEGY\n    });\n  }, [apiRef, props.defaultGroupingExpansionDepth, props.isGroupExpandedByDefault]);\n  const filterRows = React.useCallback(params => {\n    const rowTree = gridRowTreeSelector(apiRef);\n    return filterRowTreeFromGroupingColumns({\n      rowTree,\n      isRowMatchingFilters: params.isRowMatchingFilters,\n      filterModel: params.filterModel,\n      apiRef\n    });\n  }, [apiRef]);\n  const sortRows = React.useCallback(params => {\n    const rowTree = gridRowTreeSelector(apiRef);\n    return sortRowTree({\n      rowTree,\n      sortRowList: params.sortRowList,\n      disableChildrenSorting: false,\n      shouldRenderGroupBelowLeaves: true\n    });\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'hydrateColumns', updateGroupingColumn);\n  useGridRegisterStrategyProcessor(apiRef, ROW_GROUPING_STRATEGY, 'rowTreeCreation', createRowTreeForRowGrouping);\n  useGridRegisterStrategyProcessor(apiRef, ROW_GROUPING_STRATEGY, 'filtering', filterRows);\n  useGridRegisterStrategyProcessor(apiRef, ROW_GROUPING_STRATEGY, 'sorting', sortRows);\n  useGridRegisterStrategyProcessor(apiRef, ROW_GROUPING_STRATEGY, 'visibleRowsLookupCreation', getVisibleRowsLookup);\n\n  /**\n   * 1ST RENDER\n   */\n  useFirstRender(() => {\n    setStrategyAvailability(apiRef, props.disableRowGrouping);\n  });\n\n  /**\n   * EFFECTS\n   */\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (!isFirstRender.current) {\n      setStrategyAvailability(apiRef, props.disableRowGrouping);\n    } else {\n      isFirstRender.current = false;\n    }\n  }, [apiRef, props.disableRowGrouping]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}