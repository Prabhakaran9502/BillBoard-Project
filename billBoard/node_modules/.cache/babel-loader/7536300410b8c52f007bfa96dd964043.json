{"ast":null,"code":"import * as React from 'react';\nimport { useTheme } from '@mui/material/styles';\nimport { gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { gridExpandedSortedRowEntriesSelector } from '../filter/gridFilterSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF } from '../../../colDef/gridCheckboxSelectionColDef';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { isNavigationKey } from '../../../utils/keyboardUtils';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../../../constants/gridDetailPanelToggleField';\nimport { gridPinnedRowsSelector } from '../rows/gridRowsSelector';\nimport { gridFocusColumnGroupHeaderSelector } from '../focus';\nimport { gridColumnGroupsHeaderMaxDepthSelector } from '../columnGrouping/gridColumnGroupsSelector';\nimport { gridHeaderFilteringEditFieldSelector, gridHeaderFilteringMenuSelector } from '../headerFiltering/gridHeaderFilteringSelectors';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { isEventTargetInPortal } from '../../../utils/domUtils';\n\nfunction enrichPageRowsWithPinnedRows(apiRef, rows) {\n  const pinnedRows = gridPinnedRowsSelector(apiRef) || {};\n  return [...(pinnedRows.top || []), ...rows, ...(pinnedRows.bottom || [])];\n}\n\nconst getLeftColumnIndex = _ref => {\n  let {\n    currentColIndex,\n    firstColIndex,\n    lastColIndex,\n    direction\n  } = _ref;\n\n  if (direction === 'rtl') {\n    if (currentColIndex < lastColIndex) {\n      return currentColIndex + 1;\n    }\n  } else if (direction === 'ltr') {\n    if (currentColIndex > firstColIndex) {\n      return currentColIndex - 1;\n    }\n  }\n\n  return null;\n};\n\nconst getRightColumnIndex = _ref2 => {\n  let {\n    currentColIndex,\n    firstColIndex,\n    lastColIndex,\n    direction\n  } = _ref2;\n\n  if (direction === 'rtl') {\n    if (currentColIndex > firstColIndex) {\n      return currentColIndex - 1;\n    }\n  } else if (direction === 'ltr') {\n    if (currentColIndex < lastColIndex) {\n      return currentColIndex + 1;\n    }\n  }\n\n  return null;\n};\n/**\n * @requires useGridSorting (method) - can be after\n * @requires useGridFilter (state) - can be after\n * @requires useGridColumns (state, method) - can be after\n * @requires useGridDimensions (method) - can be after\n * @requires useGridFocus (method) - can be after\n * @requires useGridScroll (method) - can be after\n * @requires useGridColumnSpanning (method) - can be after\n */\n\n\nexport const useGridKeyboardNavigation = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridKeyboardNavigation');\n  const initialCurrentPageRows = useGridVisibleRows(apiRef, props).rows;\n  const theme = useTheme();\n  const currentPageRows = React.useMemo(() => enrichPageRowsWithPinnedRows(apiRef, initialCurrentPageRows), [apiRef, initialCurrentPageRows]);\n  const headerFilteringEnabled = props.signature !== 'DataGrid' && props.headerFilters;\n  /**\n   * @param {number} colIndex Index of the column to focus\n   * @param {number} rowIndex index of the row to focus\n   * @param {string} closestColumnToUse Which closest column cell to use when the cell is spanned by `colSpan`.\n   * TODO replace with apiRef.current.moveFocusToRelativeCell()\n   */\n\n  const goToCell = React.useCallback(function (colIndex, rowId) {\n    let closestColumnToUse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'left';\n    const visibleSortedRows = gridExpandedSortedRowEntriesSelector(apiRef);\n    const nextCellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, colIndex);\n\n    if (nextCellColSpanInfo && nextCellColSpanInfo.spannedByColSpan) {\n      if (closestColumnToUse === 'left') {\n        colIndex = nextCellColSpanInfo.leftVisibleCellIndex;\n      } else if (closestColumnToUse === 'right') {\n        colIndex = nextCellColSpanInfo.rightVisibleCellIndex;\n      }\n    } // `scrollToIndexes` requires a rowIndex relative to all visible rows.\n    // Those rows do not include pinned rows, but pinned rows do not need scroll anyway.\n\n\n    const rowIndexRelativeToAllRows = visibleSortedRows.findIndex(row => row.id === rowId);\n    logger.debug(`Navigating to cell row ${rowIndexRelativeToAllRows}, col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex,\n      rowIndex: rowIndexRelativeToAllRows\n    });\n    const field = apiRef.current.getVisibleColumns()[colIndex].field;\n    apiRef.current.setCellFocus(rowId, field);\n  }, [apiRef, logger]);\n  const goToHeader = React.useCallback((colIndex, event) => {\n    logger.debug(`Navigating to header col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex\n    });\n    const field = apiRef.current.getVisibleColumns()[colIndex].field;\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef, logger]);\n  const goToHeaderFilter = React.useCallback((colIndex, event) => {\n    logger.debug(`Navigating to header filter col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex\n    });\n    const field = apiRef.current.getVisibleColumns()[colIndex].field;\n    apiRef.current.setColumnHeaderFilterFocus(field, event);\n  }, [apiRef, logger]);\n  const goToGroupHeader = React.useCallback((colIndex, depth, event) => {\n    logger.debug(`Navigating to header col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex\n    });\n    const {\n      field\n    } = apiRef.current.getVisibleColumns()[colIndex];\n    apiRef.current.setColumnGroupHeaderFocus(field, depth, event);\n  }, [apiRef, logger]);\n  const getRowIdFromIndex = React.useCallback(rowIndex => {\n    return currentPageRows[rowIndex]?.id;\n  }, [currentPageRows]);\n  const handleColumnHeaderKeyDown = React.useCallback((params, event) => {\n    const headerTitleNode = event.currentTarget.querySelector(`.${gridClasses.columnHeaderTitleContainerContent}`);\n    const isFromInsideContent = !!headerTitleNode && headerTitleNode.contains(event.target);\n\n    if (isFromInsideContent && params.field !== GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // When focus is on a nested input, keyboard events have no effect to avoid conflicts with native events.\n      // There is one exception for the checkBoxHeader\n      return;\n    }\n\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    const firstRowIndexInPage = currentPageRows.length > 0 ? 0 : null;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    const columnGroupMaxDepth = gridColumnGroupsHeaderMaxDepthSelector(apiRef);\n    let shouldPreventDefault = true;\n\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          if (firstRowIndexInPage !== null) {\n            if (headerFilteringEnabled) {\n              goToHeaderFilter(colIndexBefore, event);\n            } else {\n              goToCell(colIndexBefore, getRowIdFromIndex(firstRowIndexInPage));\n            }\n          }\n\n          break;\n        }\n\n      case 'ArrowRight':\n        {\n          const rightColIndex = getRightColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            direction: theme.direction\n          });\n\n          if (rightColIndex !== null) {\n            goToHeader(rightColIndex, event);\n          }\n\n          break;\n        }\n\n      case 'ArrowLeft':\n        {\n          const leftColIndex = getLeftColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            direction: theme.direction\n          });\n\n          if (leftColIndex !== null) {\n            goToHeader(leftColIndex, event);\n          }\n\n          break;\n        }\n\n      case 'ArrowUp':\n        {\n          if (columnGroupMaxDepth > 0) {\n            goToGroupHeader(colIndexBefore, columnGroupMaxDepth - 1, event);\n          }\n\n          break;\n        }\n\n      case 'PageDown':\n        {\n          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));\n          }\n\n          break;\n        }\n\n      case 'Home':\n        {\n          goToHeader(firstColIndex, event);\n          break;\n        }\n\n      case 'End':\n        {\n          goToHeader(lastColIndex, event);\n          break;\n        }\n\n      case 'Enter':\n        {\n          if (event.ctrlKey || event.metaKey) {\n            apiRef.current.toggleColumnMenu(params.field);\n          }\n\n          break;\n        }\n\n      case ' ':\n        {\n          // prevent Space event from scrolling\n          break;\n        }\n\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, currentPageRows.length, headerFilteringEnabled, goToHeaderFilter, goToCell, getRowIdFromIndex, theme.direction, goToHeader, goToGroupHeader]);\n  const handleHeaderFilterKeyDown = React.useCallback((params, event) => {\n    const isEditing = gridHeaderFilteringEditFieldSelector(apiRef) === params.field;\n    const isHeaderMenuOpen = gridHeaderFilteringMenuSelector(apiRef) === params.field;\n\n    if (isEditing || isHeaderMenuOpen || !isNavigationKey(event.key)) {\n      return;\n    }\n\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    let shouldPreventDefault = true;\n\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          const rowId = getRowIdFromIndex(firstRowIndexInPage);\n\n          if (firstRowIndexInPage !== null && rowId != null) {\n            goToCell(colIndexBefore, rowId);\n          }\n\n          break;\n        }\n\n      case 'ArrowRight':\n        {\n          const rightColIndex = getRightColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            direction: theme.direction\n          });\n\n          if (rightColIndex !== null) {\n            goToHeaderFilter(rightColIndex, event);\n          }\n\n          break;\n        }\n\n      case 'ArrowLeft':\n        {\n          const leftColIndex = getLeftColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            direction: theme.direction\n          });\n\n          if (leftColIndex !== null) {\n            goToHeaderFilter(leftColIndex, event);\n          } else {\n            apiRef.current.setColumnHeaderFilterFocus(params.field, event);\n          }\n\n          break;\n        }\n\n      case 'ArrowUp':\n        {\n          goToHeader(colIndexBefore, event);\n          break;\n        }\n\n      case 'PageDown':\n        {\n          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));\n          }\n\n          break;\n        }\n\n      case 'Home':\n        {\n          goToHeaderFilter(firstColIndex, event);\n          break;\n        }\n\n      case 'End':\n        {\n          goToHeaderFilter(lastColIndex, event);\n          break;\n        }\n\n      case ' ':\n        {\n          // prevent Space event from scrolling\n          break;\n        }\n\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, currentPageRows.length, goToHeaderFilter, theme.direction, goToHeader, goToCell, getRowIdFromIndex]);\n  const handleColumnGroupHeaderKeyDown = React.useCallback((params, event) => {\n    const focusedColumnGroup = gridFocusColumnGroupHeaderSelector(apiRef);\n\n    if (focusedColumnGroup === null) {\n      return;\n    }\n\n    const {\n      field: currentField,\n      depth: currentDepth\n    } = focusedColumnGroup;\n    const {\n      fields,\n      depth,\n      maxDepth\n    } = params;\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const currentColIndex = apiRef.current.getColumnIndex(currentField);\n    const colIndexBefore = currentField ? apiRef.current.getColumnIndex(currentField) : 0;\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    let shouldPreventDefault = true;\n\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          if (depth === maxDepth - 1) {\n            goToHeader(currentColIndex, event);\n          } else {\n            goToGroupHeader(currentColIndex, currentDepth + 1, event);\n          }\n\n          break;\n        }\n\n      case 'ArrowUp':\n        {\n          if (depth > 0) {\n            goToGroupHeader(currentColIndex, currentDepth - 1, event);\n          }\n\n          break;\n        }\n\n      case 'ArrowRight':\n        {\n          const remainingRightColumns = fields.length - fields.indexOf(currentField) - 1;\n\n          if (currentColIndex + remainingRightColumns + 1 <= lastColIndex) {\n            goToGroupHeader(currentColIndex + remainingRightColumns + 1, currentDepth, event);\n          }\n\n          break;\n        }\n\n      case 'ArrowLeft':\n        {\n          const remainingLeftColumns = fields.indexOf(currentField);\n\n          if (currentColIndex - remainingLeftColumns - 1 >= firstColIndex) {\n            goToGroupHeader(currentColIndex - remainingLeftColumns - 1, currentDepth, event);\n          }\n\n          break;\n        }\n\n      case 'PageDown':\n        {\n          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));\n          }\n\n          break;\n        }\n\n      case 'Home':\n        {\n          goToGroupHeader(firstColIndex, currentDepth, event);\n          break;\n        }\n\n      case 'End':\n        {\n          goToGroupHeader(lastColIndex, currentDepth, event);\n          break;\n        }\n\n      case ' ':\n        {\n          // prevent Space event from scrolling\n          break;\n        }\n\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, currentPageRows.length, goToHeader, goToGroupHeader, goToCell, getRowIdFromIndex]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Ignore portal\n    if (isEventTargetInPortal(event)) {\n      return;\n    } // Get the most recent params because the cell mode may have changed by another listener\n\n\n    const cellParams = apiRef.current.getCellParams(params.id, params.field);\n\n    if (cellParams.cellMode === GridCellModes.Edit || !isNavigationKey(event.key)) {\n      return;\n    }\n\n    const canUpdateFocus = apiRef.current.unstable_applyPipeProcessors('canUpdateFocus', true, {\n      event,\n      cell: cellParams\n    });\n\n    if (!canUpdateFocus) {\n      return;\n    }\n\n    if (currentPageRows.length === 0) {\n      return;\n    }\n\n    const direction = theme.direction;\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    const rowIndexBefore = currentPageRows.findIndex(row => row.id === params.id);\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    let shouldPreventDefault = true;\n\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          // \"Enter\" is only triggered by the row / cell editing feature\n          if (rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore + 1));\n          }\n\n          break;\n        }\n\n      case 'ArrowUp':\n        {\n          if (rowIndexBefore > firstRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore - 1));\n          } else if (headerFilteringEnabled) {\n            goToHeaderFilter(colIndexBefore, event);\n          } else {\n            goToHeader(colIndexBefore, event);\n          }\n\n          break;\n        }\n\n      case 'ArrowRight':\n        {\n          const rightColIndex = getRightColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            direction\n          });\n\n          if (rightColIndex !== null) {\n            goToCell(rightColIndex, getRowIdFromIndex(rowIndexBefore), direction === 'rtl' ? 'left' : 'right');\n          }\n\n          break;\n        }\n\n      case 'ArrowLeft':\n        {\n          const leftColIndex = getLeftColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            direction\n          });\n\n          if (leftColIndex !== null) {\n            goToCell(leftColIndex, getRowIdFromIndex(rowIndexBefore), direction === 'rtl' ? 'right' : 'left');\n          }\n\n          break;\n        }\n\n      case 'Tab':\n        {\n          // \"Tab\" is only triggered by the row / cell editing feature\n          if (event.shiftKey && colIndexBefore > firstColIndex) {\n            goToCell(colIndexBefore - 1, getRowIdFromIndex(rowIndexBefore), 'left');\n          } else if (!event.shiftKey && colIndexBefore < lastColIndex) {\n            goToCell(colIndexBefore + 1, getRowIdFromIndex(rowIndexBefore), 'right');\n          }\n\n          break;\n        }\n\n      case ' ':\n        {\n          const field = params.field;\n\n          if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n            break;\n          }\n\n          const colDef = params.colDef;\n\n          if (colDef && // `GRID_TREE_DATA_GROUPING_FIELD` from the Pro package\n          colDef.field === '__tree_data_group__') {\n            break;\n          }\n\n          if (!event.shiftKey && rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));\n          }\n\n          break;\n        }\n\n      case 'PageDown':\n        {\n          if (rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));\n          }\n\n          break;\n        }\n\n      case 'PageUp':\n        {\n          // Go to the first row before going to header\n          const nextRowIndex = Math.max(rowIndexBefore - viewportPageSize, firstRowIndexInPage);\n\n          if (nextRowIndex !== rowIndexBefore && nextRowIndex >= firstRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(nextRowIndex));\n          } else {\n            goToHeader(colIndexBefore, event);\n          }\n\n          break;\n        }\n\n      case 'Home':\n        {\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            goToCell(firstColIndex, getRowIdFromIndex(firstRowIndexInPage));\n          } else {\n            goToCell(firstColIndex, getRowIdFromIndex(rowIndexBefore));\n          }\n\n          break;\n        }\n\n      case 'End':\n        {\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            goToCell(lastColIndex, getRowIdFromIndex(lastRowIndexInPage));\n          } else {\n            goToCell(lastColIndex, getRowIdFromIndex(rowIndexBefore));\n          }\n\n          break;\n        }\n\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, currentPageRows, theme.direction, goToCell, getRowIdFromIndex, headerFilteringEnabled, goToHeaderFilter, goToHeader]);\n  const checkIfCanStartEditing = React.useCallback((initialValue, _ref3) => {\n    let {\n      event\n    } = _ref3;\n\n    if (event.key === ' ') {\n      // Space scrolls to the last row\n      return false;\n    }\n\n    return initialValue;\n  }, []);\n  useGridRegisterPipeProcessor(apiRef, 'canStartEditing', checkIfCanStartEditing);\n  useGridApiEventHandler(apiRef, 'columnHeaderKeyDown', handleColumnHeaderKeyDown);\n  useGridApiEventHandler(apiRef, 'headerFilterKeyDown', handleHeaderFilterKeyDown);\n  useGridApiEventHandler(apiRef, 'columnGroupHeaderKeyDown', handleColumnGroupHeaderKeyDown);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n};","map":{"version":3,"names":["React","useTheme","gridVisibleColumnDefinitionsSelector","useGridLogger","useGridApiEventHandler","gridExpandedSortedRowEntriesSelector","useGridVisibleRows","GRID_CHECKBOX_SELECTION_COL_DEF","gridClasses","GridCellModes","isNavigationKey","GRID_DETAIL_PANEL_TOGGLE_FIELD","gridPinnedRowsSelector","gridFocusColumnGroupHeaderSelector","gridColumnGroupsHeaderMaxDepthSelector","gridHeaderFilteringEditFieldSelector","gridHeaderFilteringMenuSelector","useGridRegisterPipeProcessor","isEventTargetInPortal","enrichPageRowsWithPinnedRows","apiRef","rows","pinnedRows","top","bottom","getLeftColumnIndex","currentColIndex","firstColIndex","lastColIndex","direction","getRightColumnIndex","useGridKeyboardNavigation","props","logger","initialCurrentPageRows","theme","currentPageRows","useMemo","headerFilteringEnabled","signature","headerFilters","goToCell","useCallback","colIndex","rowId","closestColumnToUse","visibleSortedRows","nextCellColSpanInfo","current","unstable_getCellColSpanInfo","spannedByColSpan","leftVisibleCellIndex","rightVisibleCellIndex","rowIndexRelativeToAllRows","findIndex","row","id","debug","scrollToIndexes","rowIndex","field","getVisibleColumns","setCellFocus","goToHeader","event","setColumnHeaderFocus","goToHeaderFilter","setColumnHeaderFilterFocus","goToGroupHeader","depth","setColumnGroupHeaderFocus","getRowIdFromIndex","handleColumnHeaderKeyDown","params","headerTitleNode","currentTarget","querySelector","columnHeaderTitleContainerContent","isFromInsideContent","contains","target","viewportPageSize","getViewportPageSize","colIndexBefore","getColumnIndex","firstRowIndexInPage","length","lastRowIndexInPage","columnGroupMaxDepth","shouldPreventDefault","key","rightColIndex","leftColIndex","Math","min","ctrlKey","metaKey","toggleColumnMenu","preventDefault","handleHeaderFilterKeyDown","isEditing","isHeaderMenuOpen","handleColumnGroupHeaderKeyDown","focusedColumnGroup","currentField","currentDepth","fields","maxDepth","remainingRightColumns","indexOf","remainingLeftColumns","handleCellKeyDown","cellParams","getCellParams","cellMode","Edit","canUpdateFocus","unstable_applyPipeProcessors","cell","rowIndexBefore","shiftKey","colDef","nextRowIndex","max","checkIfCanStartEditing","initialValue"],"sources":["C:/Users/kb/node_modules/@mui/x-data-grid/hooks/features/keyboardNavigation/useGridKeyboardNavigation.js"],"sourcesContent":["import * as React from 'react';\nimport { useTheme } from '@mui/material/styles';\nimport { gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { gridExpandedSortedRowEntriesSelector } from '../filter/gridFilterSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF } from '../../../colDef/gridCheckboxSelectionColDef';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { isNavigationKey } from '../../../utils/keyboardUtils';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../../../constants/gridDetailPanelToggleField';\nimport { gridPinnedRowsSelector } from '../rows/gridRowsSelector';\nimport { gridFocusColumnGroupHeaderSelector } from '../focus';\nimport { gridColumnGroupsHeaderMaxDepthSelector } from '../columnGrouping/gridColumnGroupsSelector';\nimport { gridHeaderFilteringEditFieldSelector, gridHeaderFilteringMenuSelector } from '../headerFiltering/gridHeaderFilteringSelectors';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { isEventTargetInPortal } from '../../../utils/domUtils';\nfunction enrichPageRowsWithPinnedRows(apiRef, rows) {\n  const pinnedRows = gridPinnedRowsSelector(apiRef) || {};\n  return [...(pinnedRows.top || []), ...rows, ...(pinnedRows.bottom || [])];\n}\nconst getLeftColumnIndex = ({\n  currentColIndex,\n  firstColIndex,\n  lastColIndex,\n  direction\n}) => {\n  if (direction === 'rtl') {\n    if (currentColIndex < lastColIndex) {\n      return currentColIndex + 1;\n    }\n  } else if (direction === 'ltr') {\n    if (currentColIndex > firstColIndex) {\n      return currentColIndex - 1;\n    }\n  }\n  return null;\n};\nconst getRightColumnIndex = ({\n  currentColIndex,\n  firstColIndex,\n  lastColIndex,\n  direction\n}) => {\n  if (direction === 'rtl') {\n    if (currentColIndex > firstColIndex) {\n      return currentColIndex - 1;\n    }\n  } else if (direction === 'ltr') {\n    if (currentColIndex < lastColIndex) {\n      return currentColIndex + 1;\n    }\n  }\n  return null;\n};\n\n/**\n * @requires useGridSorting (method) - can be after\n * @requires useGridFilter (state) - can be after\n * @requires useGridColumns (state, method) - can be after\n * @requires useGridDimensions (method) - can be after\n * @requires useGridFocus (method) - can be after\n * @requires useGridScroll (method) - can be after\n * @requires useGridColumnSpanning (method) - can be after\n */\nexport const useGridKeyboardNavigation = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridKeyboardNavigation');\n  const initialCurrentPageRows = useGridVisibleRows(apiRef, props).rows;\n  const theme = useTheme();\n  const currentPageRows = React.useMemo(() => enrichPageRowsWithPinnedRows(apiRef, initialCurrentPageRows), [apiRef, initialCurrentPageRows]);\n  const headerFilteringEnabled = props.signature !== 'DataGrid' && props.headerFilters;\n\n  /**\n   * @param {number} colIndex Index of the column to focus\n   * @param {number} rowIndex index of the row to focus\n   * @param {string} closestColumnToUse Which closest column cell to use when the cell is spanned by `colSpan`.\n   * TODO replace with apiRef.current.moveFocusToRelativeCell()\n   */\n  const goToCell = React.useCallback((colIndex, rowId, closestColumnToUse = 'left') => {\n    const visibleSortedRows = gridExpandedSortedRowEntriesSelector(apiRef);\n    const nextCellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, colIndex);\n    if (nextCellColSpanInfo && nextCellColSpanInfo.spannedByColSpan) {\n      if (closestColumnToUse === 'left') {\n        colIndex = nextCellColSpanInfo.leftVisibleCellIndex;\n      } else if (closestColumnToUse === 'right') {\n        colIndex = nextCellColSpanInfo.rightVisibleCellIndex;\n      }\n    }\n    // `scrollToIndexes` requires a rowIndex relative to all visible rows.\n    // Those rows do not include pinned rows, but pinned rows do not need scroll anyway.\n    const rowIndexRelativeToAllRows = visibleSortedRows.findIndex(row => row.id === rowId);\n    logger.debug(`Navigating to cell row ${rowIndexRelativeToAllRows}, col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex,\n      rowIndex: rowIndexRelativeToAllRows\n    });\n    const field = apiRef.current.getVisibleColumns()[colIndex].field;\n    apiRef.current.setCellFocus(rowId, field);\n  }, [apiRef, logger]);\n  const goToHeader = React.useCallback((colIndex, event) => {\n    logger.debug(`Navigating to header col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex\n    });\n    const field = apiRef.current.getVisibleColumns()[colIndex].field;\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef, logger]);\n  const goToHeaderFilter = React.useCallback((colIndex, event) => {\n    logger.debug(`Navigating to header filter col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex\n    });\n    const field = apiRef.current.getVisibleColumns()[colIndex].field;\n    apiRef.current.setColumnHeaderFilterFocus(field, event);\n  }, [apiRef, logger]);\n  const goToGroupHeader = React.useCallback((colIndex, depth, event) => {\n    logger.debug(`Navigating to header col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex\n    });\n    const {\n      field\n    } = apiRef.current.getVisibleColumns()[colIndex];\n    apiRef.current.setColumnGroupHeaderFocus(field, depth, event);\n  }, [apiRef, logger]);\n  const getRowIdFromIndex = React.useCallback(rowIndex => {\n    return currentPageRows[rowIndex]?.id;\n  }, [currentPageRows]);\n  const handleColumnHeaderKeyDown = React.useCallback((params, event) => {\n    const headerTitleNode = event.currentTarget.querySelector(`.${gridClasses.columnHeaderTitleContainerContent}`);\n    const isFromInsideContent = !!headerTitleNode && headerTitleNode.contains(event.target);\n    if (isFromInsideContent && params.field !== GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // When focus is on a nested input, keyboard events have no effect to avoid conflicts with native events.\n      // There is one exception for the checkBoxHeader\n      return;\n    }\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    const firstRowIndexInPage = currentPageRows.length > 0 ? 0 : null;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    const columnGroupMaxDepth = gridColumnGroupsHeaderMaxDepthSelector(apiRef);\n    let shouldPreventDefault = true;\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          if (firstRowIndexInPage !== null) {\n            if (headerFilteringEnabled) {\n              goToHeaderFilter(colIndexBefore, event);\n            } else {\n              goToCell(colIndexBefore, getRowIdFromIndex(firstRowIndexInPage));\n            }\n          }\n          break;\n        }\n      case 'ArrowRight':\n        {\n          const rightColIndex = getRightColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            direction: theme.direction\n          });\n          if (rightColIndex !== null) {\n            goToHeader(rightColIndex, event);\n          }\n          break;\n        }\n      case 'ArrowLeft':\n        {\n          const leftColIndex = getLeftColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            direction: theme.direction\n          });\n          if (leftColIndex !== null) {\n            goToHeader(leftColIndex, event);\n          }\n          break;\n        }\n      case 'ArrowUp':\n        {\n          if (columnGroupMaxDepth > 0) {\n            goToGroupHeader(colIndexBefore, columnGroupMaxDepth - 1, event);\n          }\n          break;\n        }\n      case 'PageDown':\n        {\n          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'Home':\n        {\n          goToHeader(firstColIndex, event);\n          break;\n        }\n      case 'End':\n        {\n          goToHeader(lastColIndex, event);\n          break;\n        }\n      case 'Enter':\n        {\n          if (event.ctrlKey || event.metaKey) {\n            apiRef.current.toggleColumnMenu(params.field);\n          }\n          break;\n        }\n      case ' ':\n        {\n          // prevent Space event from scrolling\n          break;\n        }\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, currentPageRows.length, headerFilteringEnabled, goToHeaderFilter, goToCell, getRowIdFromIndex, theme.direction, goToHeader, goToGroupHeader]);\n  const handleHeaderFilterKeyDown = React.useCallback((params, event) => {\n    const isEditing = gridHeaderFilteringEditFieldSelector(apiRef) === params.field;\n    const isHeaderMenuOpen = gridHeaderFilteringMenuSelector(apiRef) === params.field;\n    if (isEditing || isHeaderMenuOpen || !isNavigationKey(event.key)) {\n      return;\n    }\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    let shouldPreventDefault = true;\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          const rowId = getRowIdFromIndex(firstRowIndexInPage);\n          if (firstRowIndexInPage !== null && rowId != null) {\n            goToCell(colIndexBefore, rowId);\n          }\n          break;\n        }\n      case 'ArrowRight':\n        {\n          const rightColIndex = getRightColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            direction: theme.direction\n          });\n          if (rightColIndex !== null) {\n            goToHeaderFilter(rightColIndex, event);\n          }\n          break;\n        }\n      case 'ArrowLeft':\n        {\n          const leftColIndex = getLeftColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            direction: theme.direction\n          });\n          if (leftColIndex !== null) {\n            goToHeaderFilter(leftColIndex, event);\n          } else {\n            apiRef.current.setColumnHeaderFilterFocus(params.field, event);\n          }\n          break;\n        }\n      case 'ArrowUp':\n        {\n          goToHeader(colIndexBefore, event);\n          break;\n        }\n      case 'PageDown':\n        {\n          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'Home':\n        {\n          goToHeaderFilter(firstColIndex, event);\n          break;\n        }\n      case 'End':\n        {\n          goToHeaderFilter(lastColIndex, event);\n          break;\n        }\n      case ' ':\n        {\n          // prevent Space event from scrolling\n          break;\n        }\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, currentPageRows.length, goToHeaderFilter, theme.direction, goToHeader, goToCell, getRowIdFromIndex]);\n  const handleColumnGroupHeaderKeyDown = React.useCallback((params, event) => {\n    const focusedColumnGroup = gridFocusColumnGroupHeaderSelector(apiRef);\n    if (focusedColumnGroup === null) {\n      return;\n    }\n    const {\n      field: currentField,\n      depth: currentDepth\n    } = focusedColumnGroup;\n    const {\n      fields,\n      depth,\n      maxDepth\n    } = params;\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const currentColIndex = apiRef.current.getColumnIndex(currentField);\n    const colIndexBefore = currentField ? apiRef.current.getColumnIndex(currentField) : 0;\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    let shouldPreventDefault = true;\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          if (depth === maxDepth - 1) {\n            goToHeader(currentColIndex, event);\n          } else {\n            goToGroupHeader(currentColIndex, currentDepth + 1, event);\n          }\n          break;\n        }\n      case 'ArrowUp':\n        {\n          if (depth > 0) {\n            goToGroupHeader(currentColIndex, currentDepth - 1, event);\n          }\n          break;\n        }\n      case 'ArrowRight':\n        {\n          const remainingRightColumns = fields.length - fields.indexOf(currentField) - 1;\n          if (currentColIndex + remainingRightColumns + 1 <= lastColIndex) {\n            goToGroupHeader(currentColIndex + remainingRightColumns + 1, currentDepth, event);\n          }\n          break;\n        }\n      case 'ArrowLeft':\n        {\n          const remainingLeftColumns = fields.indexOf(currentField);\n          if (currentColIndex - remainingLeftColumns - 1 >= firstColIndex) {\n            goToGroupHeader(currentColIndex - remainingLeftColumns - 1, currentDepth, event);\n          }\n          break;\n        }\n      case 'PageDown':\n        {\n          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'Home':\n        {\n          goToGroupHeader(firstColIndex, currentDepth, event);\n          break;\n        }\n      case 'End':\n        {\n          goToGroupHeader(lastColIndex, currentDepth, event);\n          break;\n        }\n      case ' ':\n        {\n          // prevent Space event from scrolling\n          break;\n        }\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, currentPageRows.length, goToHeader, goToGroupHeader, goToCell, getRowIdFromIndex]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Ignore portal\n    if (isEventTargetInPortal(event)) {\n      return;\n    }\n\n    // Get the most recent params because the cell mode may have changed by another listener\n    const cellParams = apiRef.current.getCellParams(params.id, params.field);\n    if (cellParams.cellMode === GridCellModes.Edit || !isNavigationKey(event.key)) {\n      return;\n    }\n    const canUpdateFocus = apiRef.current.unstable_applyPipeProcessors('canUpdateFocus', true, {\n      event,\n      cell: cellParams\n    });\n    if (!canUpdateFocus) {\n      return;\n    }\n    if (currentPageRows.length === 0) {\n      return;\n    }\n    const direction = theme.direction;\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    const rowIndexBefore = currentPageRows.findIndex(row => row.id === params.id);\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    let shouldPreventDefault = true;\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          // \"Enter\" is only triggered by the row / cell editing feature\n          if (rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore + 1));\n          }\n          break;\n        }\n      case 'ArrowUp':\n        {\n          if (rowIndexBefore > firstRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore - 1));\n          } else if (headerFilteringEnabled) {\n            goToHeaderFilter(colIndexBefore, event);\n          } else {\n            goToHeader(colIndexBefore, event);\n          }\n          break;\n        }\n      case 'ArrowRight':\n        {\n          const rightColIndex = getRightColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            direction\n          });\n          if (rightColIndex !== null) {\n            goToCell(rightColIndex, getRowIdFromIndex(rowIndexBefore), direction === 'rtl' ? 'left' : 'right');\n          }\n          break;\n        }\n      case 'ArrowLeft':\n        {\n          const leftColIndex = getLeftColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            direction\n          });\n          if (leftColIndex !== null) {\n            goToCell(leftColIndex, getRowIdFromIndex(rowIndexBefore), direction === 'rtl' ? 'right' : 'left');\n          }\n          break;\n        }\n      case 'Tab':\n        {\n          // \"Tab\" is only triggered by the row / cell editing feature\n          if (event.shiftKey && colIndexBefore > firstColIndex) {\n            goToCell(colIndexBefore - 1, getRowIdFromIndex(rowIndexBefore), 'left');\n          } else if (!event.shiftKey && colIndexBefore < lastColIndex) {\n            goToCell(colIndexBefore + 1, getRowIdFromIndex(rowIndexBefore), 'right');\n          }\n          break;\n        }\n      case ' ':\n        {\n          const field = params.field;\n          if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n            break;\n          }\n          const colDef = params.colDef;\n          if (colDef &&\n          // `GRID_TREE_DATA_GROUPING_FIELD` from the Pro package\n          colDef.field === '__tree_data_group__') {\n            break;\n          }\n          if (!event.shiftKey && rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'PageDown':\n        {\n          if (rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'PageUp':\n        {\n          // Go to the first row before going to header\n          const nextRowIndex = Math.max(rowIndexBefore - viewportPageSize, firstRowIndexInPage);\n          if (nextRowIndex !== rowIndexBefore && nextRowIndex >= firstRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(nextRowIndex));\n          } else {\n            goToHeader(colIndexBefore, event);\n          }\n          break;\n        }\n      case 'Home':\n        {\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            goToCell(firstColIndex, getRowIdFromIndex(firstRowIndexInPage));\n          } else {\n            goToCell(firstColIndex, getRowIdFromIndex(rowIndexBefore));\n          }\n          break;\n        }\n      case 'End':\n        {\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            goToCell(lastColIndex, getRowIdFromIndex(lastRowIndexInPage));\n          } else {\n            goToCell(lastColIndex, getRowIdFromIndex(rowIndexBefore));\n          }\n          break;\n        }\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, currentPageRows, theme.direction, goToCell, getRowIdFromIndex, headerFilteringEnabled, goToHeaderFilter, goToHeader]);\n  const checkIfCanStartEditing = React.useCallback((initialValue, {\n    event\n  }) => {\n    if (event.key === ' ') {\n      // Space scrolls to the last row\n      return false;\n    }\n    return initialValue;\n  }, []);\n  useGridRegisterPipeProcessor(apiRef, 'canStartEditing', checkIfCanStartEditing);\n  useGridApiEventHandler(apiRef, 'columnHeaderKeyDown', handleColumnHeaderKeyDown);\n  useGridApiEventHandler(apiRef, 'headerFilterKeyDown', handleHeaderFilterKeyDown);\n  useGridApiEventHandler(apiRef, 'columnGroupHeaderKeyDown', handleColumnGroupHeaderKeyDown);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}