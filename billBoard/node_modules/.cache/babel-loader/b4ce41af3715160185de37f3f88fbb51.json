{"ast":null,"code":"import * as React from 'react';\nimport { Store } from '../../utils/Store';\nimport { useGridApiMethod } from '../utils/useGridApiMethod';\nimport { GridSignature } from '../utils/useGridApiEventHandler';\nimport { EventManager } from '../../utils/EventManager';\nconst SYMBOL_API_PRIVATE = Symbol('mui.api_private');\n\nconst isSyntheticEvent = event => {\n  return event.isPropagationStopped !== undefined;\n};\n\nexport function unwrapPrivateAPI(publicApi) {\n  return publicApi[SYMBOL_API_PRIVATE];\n}\nlet globalId = 0;\n\nfunction createPrivateAPI(publicApiRef) {\n  const existingPrivateApi = publicApiRef.current?.[SYMBOL_API_PRIVATE];\n\n  if (existingPrivateApi) {\n    return existingPrivateApi;\n  }\n\n  const state = {};\n  const privateApi = {\n    state,\n    store: Store.create(state),\n    instanceId: {\n      id: globalId\n    }\n  };\n  globalId += 1;\n\n  privateApi.getPublicApi = () => publicApiRef.current;\n\n  privateApi.register = (visibility, methods) => {\n    Object.keys(methods).forEach(methodName => {\n      const method = methods[methodName];\n      const currentPrivateMethod = privateApi[methodName];\n\n      if (currentPrivateMethod?.spying === true) {\n        currentPrivateMethod.target = method;\n      } else {\n        privateApi[methodName] = method;\n      }\n\n      if (visibility === 'public') {\n        const publicApi = publicApiRef.current;\n        const currentPublicMethod = publicApi[methodName];\n\n        if (currentPublicMethod?.spying === true) {\n          currentPublicMethod.target = method;\n        } else {\n          publicApi[methodName] = method;\n        }\n      }\n    });\n  };\n\n  privateApi.register('private', {\n    caches: {},\n    eventManager: new EventManager()\n  });\n  return privateApi;\n}\n\nfunction createPublicAPI(privateApiRef) {\n  const publicApi = {\n    get state() {\n      return privateApiRef.current.state;\n    },\n\n    get store() {\n      return privateApiRef.current.store;\n    },\n\n    get instanceId() {\n      return privateApiRef.current.instanceId;\n    },\n\n    [SYMBOL_API_PRIVATE]: privateApiRef.current\n  };\n  return publicApi;\n}\n\nexport function useGridApiInitialization(inputApiRef, props) {\n  const publicApiRef = React.useRef();\n  const privateApiRef = React.useRef();\n\n  if (!privateApiRef.current) {\n    privateApiRef.current = createPrivateAPI(publicApiRef);\n  }\n\n  if (!publicApiRef.current) {\n    publicApiRef.current = createPublicAPI(privateApiRef);\n  }\n\n  const publishEvent = React.useCallback(function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    const [name, params, event = {}] = args;\n    event.defaultMuiPrevented = false;\n\n    if (isSyntheticEvent(event) && event.isPropagationStopped()) {\n      return;\n    }\n\n    const details = props.signature === GridSignature.DataGridPro ? {\n      api: privateApiRef.current.getPublicApi()\n    } : {};\n    privateApiRef.current.eventManager.emit(name, params, event, details);\n  }, [privateApiRef, props.signature]);\n  const subscribeEvent = React.useCallback((event, handler, options) => {\n    privateApiRef.current.eventManager.on(event, handler, options);\n    const api = privateApiRef.current;\n    return () => {\n      api.eventManager.removeListener(event, handler);\n    };\n  }, [privateApiRef]);\n  useGridApiMethod(privateApiRef, {\n    subscribeEvent,\n    publishEvent\n  }, 'public');\n\n  if (inputApiRef && !inputApiRef.current?.state) {\n    inputApiRef.current = publicApiRef.current;\n  }\n\n  React.useImperativeHandle(inputApiRef, () => publicApiRef.current, [publicApiRef]);\n  React.useEffect(() => {\n    const api = privateApiRef.current;\n    return () => {\n      api.publishEvent('unmount');\n    };\n  }, [privateApiRef]);\n  return privateApiRef;\n}","map":{"version":3,"names":["React","Store","useGridApiMethod","GridSignature","EventManager","SYMBOL_API_PRIVATE","Symbol","isSyntheticEvent","event","isPropagationStopped","undefined","unwrapPrivateAPI","publicApi","globalId","createPrivateAPI","publicApiRef","existingPrivateApi","current","state","privateApi","store","create","instanceId","id","getPublicApi","register","visibility","methods","Object","keys","forEach","methodName","method","currentPrivateMethod","spying","target","currentPublicMethod","caches","eventManager","createPublicAPI","privateApiRef","useGridApiInitialization","inputApiRef","props","useRef","publishEvent","useCallback","args","name","params","defaultMuiPrevented","details","signature","DataGridPro","api","emit","subscribeEvent","handler","options","on","removeListener","useImperativeHandle","useEffect"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/@mui/x-data-grid/hooks/core/useGridApiInitialization.js"],"sourcesContent":["import * as React from 'react';\nimport { Store } from '../../utils/Store';\nimport { useGridApiMethod } from '../utils/useGridApiMethod';\nimport { GridSignature } from '../utils/useGridApiEventHandler';\nimport { EventManager } from '../../utils/EventManager';\nconst SYMBOL_API_PRIVATE = Symbol('mui.api_private');\nconst isSyntheticEvent = event => {\n  return event.isPropagationStopped !== undefined;\n};\nexport function unwrapPrivateAPI(publicApi) {\n  return publicApi[SYMBOL_API_PRIVATE];\n}\nlet globalId = 0;\nfunction createPrivateAPI(publicApiRef) {\n  const existingPrivateApi = publicApiRef.current?.[SYMBOL_API_PRIVATE];\n  if (existingPrivateApi) {\n    return existingPrivateApi;\n  }\n  const state = {};\n  const privateApi = {\n    state,\n    store: Store.create(state),\n    instanceId: {\n      id: globalId\n    }\n  };\n  globalId += 1;\n  privateApi.getPublicApi = () => publicApiRef.current;\n  privateApi.register = (visibility, methods) => {\n    Object.keys(methods).forEach(methodName => {\n      const method = methods[methodName];\n      const currentPrivateMethod = privateApi[methodName];\n      if (currentPrivateMethod?.spying === true) {\n        currentPrivateMethod.target = method;\n      } else {\n        privateApi[methodName] = method;\n      }\n      if (visibility === 'public') {\n        const publicApi = publicApiRef.current;\n        const currentPublicMethod = publicApi[methodName];\n        if (currentPublicMethod?.spying === true) {\n          currentPublicMethod.target = method;\n        } else {\n          publicApi[methodName] = method;\n        }\n      }\n    });\n  };\n  privateApi.register('private', {\n    caches: {},\n    eventManager: new EventManager()\n  });\n  return privateApi;\n}\nfunction createPublicAPI(privateApiRef) {\n  const publicApi = {\n    get state() {\n      return privateApiRef.current.state;\n    },\n    get store() {\n      return privateApiRef.current.store;\n    },\n    get instanceId() {\n      return privateApiRef.current.instanceId;\n    },\n    [SYMBOL_API_PRIVATE]: privateApiRef.current\n  };\n  return publicApi;\n}\nexport function useGridApiInitialization(inputApiRef, props) {\n  const publicApiRef = React.useRef();\n  const privateApiRef = React.useRef();\n  if (!privateApiRef.current) {\n    privateApiRef.current = createPrivateAPI(publicApiRef);\n  }\n  if (!publicApiRef.current) {\n    publicApiRef.current = createPublicAPI(privateApiRef);\n  }\n  const publishEvent = React.useCallback((...args) => {\n    const [name, params, event = {}] = args;\n    event.defaultMuiPrevented = false;\n    if (isSyntheticEvent(event) && event.isPropagationStopped()) {\n      return;\n    }\n    const details = props.signature === GridSignature.DataGridPro ? {\n      api: privateApiRef.current.getPublicApi()\n    } : {};\n    privateApiRef.current.eventManager.emit(name, params, event, details);\n  }, [privateApiRef, props.signature]);\n  const subscribeEvent = React.useCallback((event, handler, options) => {\n    privateApiRef.current.eventManager.on(event, handler, options);\n    const api = privateApiRef.current;\n    return () => {\n      api.eventManager.removeListener(event, handler);\n    };\n  }, [privateApiRef]);\n  useGridApiMethod(privateApiRef, {\n    subscribeEvent,\n    publishEvent\n  }, 'public');\n  if (inputApiRef && !inputApiRef.current?.state) {\n    inputApiRef.current = publicApiRef.current;\n  }\n  React.useImperativeHandle(inputApiRef, () => publicApiRef.current, [publicApiRef]);\n  React.useEffect(() => {\n    const api = privateApiRef.current;\n    return () => {\n      api.publishEvent('unmount');\n    };\n  }, [privateApiRef]);\n  return privateApiRef;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}