{"ast":null,"code":"import * as React from 'react';\nimport { useGridSelector, useGridApiOptionHandler, gridVisibleColumnDefinitionsSelector, useGridApiMethod, gridDimensionsSelector } from '@mui/x-data-grid';\nimport { useGridVisibleRows } from '@mui/x-data-grid/internals';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { styled } from '@mui/system';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst InfiniteLoadingTriggerElement = styled('div')({\n  position: 'sticky',\n  left: 0,\n  width: 0,\n  height: 0\n});\n/**\n * @requires useGridColumns (state)\n * @requires useGridDimensions (method) - can be after\n * @requires useGridScroll (method\n */\n\nexport const useGridInfiniteLoader = (apiRef, props) => {\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const currentPage = useGridVisibleRows(apiRef, props);\n  const observer = React.useRef();\n  const triggerElement = React.useRef(null);\n  const isEnabled = props.rowsLoadingMode === 'client' && !!props.onRowsScrollEnd;\n  const handleLoadMoreRows = useEventCallback(_ref => {\n    let [entry] = _ref;\n    const currentRatio = entry.intersectionRatio;\n    const isIntersecting = entry.isIntersecting;\n\n    if (isIntersecting && currentRatio === 1) {\n      const viewportPageSize = apiRef.current.getViewportPageSize();\n      const rowScrollEndParams = {\n        visibleColumns,\n        viewportPageSize,\n        visibleRowsCount: currentPage.rows.length\n      };\n      apiRef.current.publishEvent('rowsScrollEnd', rowScrollEndParams);\n      observer.current?.disconnect(); // do not observe this node anymore\n\n      triggerElement.current = null;\n    }\n  });\n  const virtualScroller = apiRef.current.virtualScrollerRef.current;\n  const dimensions = useGridSelector(apiRef, gridDimensionsSelector);\n  const marginBottom = props.scrollEndThreshold - (dimensions.hasScrollX ? dimensions.scrollbarSize : 0);\n  React.useEffect(() => {\n    if (!isEnabled) {\n      return;\n    }\n\n    if (!virtualScroller) {\n      return;\n    }\n\n    observer.current?.disconnect();\n    observer.current = new IntersectionObserver(handleLoadMoreRows, {\n      threshold: 1,\n      root: virtualScroller,\n      rootMargin: `0px 0px ${marginBottom}px 0px`\n    });\n\n    if (triggerElement.current) {\n      observer.current.observe(triggerElement.current);\n    }\n  }, [virtualScroller, handleLoadMoreRows, isEnabled, marginBottom]);\n  const triggerRef = React.useCallback(node => {\n    // Prevent the infite loading working in combination with lazy loading\n    if (!isEnabled) {\n      return;\n    }\n\n    if (triggerElement.current !== node) {\n      observer.current?.disconnect();\n      triggerElement.current = node;\n\n      if (triggerElement.current) {\n        observer.current?.observe(triggerElement.current);\n      }\n    }\n  }, [isEnabled]);\n  const getInfiniteLoadingTriggerElement = React.useCallback(_ref2 => {\n    let {\n      lastRowId\n    } = _ref2;\n\n    if (!isEnabled) {\n      return null;\n    }\n\n    return /*#__PURE__*/_jsx(InfiniteLoadingTriggerElement, {\n      ref: triggerRef // Force rerender on last row change to start observing the new trigger\n      ,\n      role: \"presentation\"\n    }, `trigger-${lastRowId}`);\n  }, [isEnabled, triggerRef]);\n  const infiniteLoaderPrivateApi = {\n    getInfiniteLoadingTriggerElement\n  };\n  useGridApiMethod(apiRef, infiniteLoaderPrivateApi, 'private');\n  useGridApiOptionHandler(apiRef, 'rowsScrollEnd', props.onRowsScrollEnd);\n};","map":{"version":3,"names":["React","useGridSelector","useGridApiOptionHandler","gridVisibleColumnDefinitionsSelector","useGridApiMethod","gridDimensionsSelector","useGridVisibleRows","useEventCallback","styled","jsx","_jsx","InfiniteLoadingTriggerElement","position","left","width","height","useGridInfiniteLoader","apiRef","props","visibleColumns","currentPage","observer","useRef","triggerElement","isEnabled","rowsLoadingMode","onRowsScrollEnd","handleLoadMoreRows","entry","currentRatio","intersectionRatio","isIntersecting","viewportPageSize","current","getViewportPageSize","rowScrollEndParams","visibleRowsCount","rows","length","publishEvent","disconnect","virtualScroller","virtualScrollerRef","dimensions","marginBottom","scrollEndThreshold","hasScrollX","scrollbarSize","useEffect","IntersectionObserver","threshold","root","rootMargin","observe","triggerRef","useCallback","node","getInfiniteLoadingTriggerElement","lastRowId","ref","role","infiniteLoaderPrivateApi"],"sources":["C:/Users/kb/node_modules/@mui/x-data-grid-pro/esm/hooks/features/infiniteLoader/useGridInfiniteLoader.js"],"sourcesContent":["import * as React from 'react';\nimport { useGridSelector, useGridApiOptionHandler, gridVisibleColumnDefinitionsSelector, useGridApiMethod, gridDimensionsSelector } from '@mui/x-data-grid';\nimport { useGridVisibleRows } from '@mui/x-data-grid/internals';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { styled } from '@mui/system';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst InfiniteLoadingTriggerElement = styled('div')({\n  position: 'sticky',\n  left: 0,\n  width: 0,\n  height: 0\n});\n\n/**\n * @requires useGridColumns (state)\n * @requires useGridDimensions (method) - can be after\n * @requires useGridScroll (method\n */\nexport const useGridInfiniteLoader = (apiRef, props) => {\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const currentPage = useGridVisibleRows(apiRef, props);\n  const observer = React.useRef();\n  const triggerElement = React.useRef(null);\n  const isEnabled = props.rowsLoadingMode === 'client' && !!props.onRowsScrollEnd;\n  const handleLoadMoreRows = useEventCallback(([entry]) => {\n    const currentRatio = entry.intersectionRatio;\n    const isIntersecting = entry.isIntersecting;\n    if (isIntersecting && currentRatio === 1) {\n      const viewportPageSize = apiRef.current.getViewportPageSize();\n      const rowScrollEndParams = {\n        visibleColumns,\n        viewportPageSize,\n        visibleRowsCount: currentPage.rows.length\n      };\n      apiRef.current.publishEvent('rowsScrollEnd', rowScrollEndParams);\n      observer.current?.disconnect();\n      // do not observe this node anymore\n      triggerElement.current = null;\n    }\n  });\n  const virtualScroller = apiRef.current.virtualScrollerRef.current;\n  const dimensions = useGridSelector(apiRef, gridDimensionsSelector);\n  const marginBottom = props.scrollEndThreshold - (dimensions.hasScrollX ? dimensions.scrollbarSize : 0);\n  React.useEffect(() => {\n    if (!isEnabled) {\n      return;\n    }\n    if (!virtualScroller) {\n      return;\n    }\n    observer.current?.disconnect();\n    observer.current = new IntersectionObserver(handleLoadMoreRows, {\n      threshold: 1,\n      root: virtualScroller,\n      rootMargin: `0px 0px ${marginBottom}px 0px`\n    });\n    if (triggerElement.current) {\n      observer.current.observe(triggerElement.current);\n    }\n  }, [virtualScroller, handleLoadMoreRows, isEnabled, marginBottom]);\n  const triggerRef = React.useCallback(node => {\n    // Prevent the infite loading working in combination with lazy loading\n    if (!isEnabled) {\n      return;\n    }\n    if (triggerElement.current !== node) {\n      observer.current?.disconnect();\n      triggerElement.current = node;\n      if (triggerElement.current) {\n        observer.current?.observe(triggerElement.current);\n      }\n    }\n  }, [isEnabled]);\n  const getInfiniteLoadingTriggerElement = React.useCallback(({\n    lastRowId\n  }) => {\n    if (!isEnabled) {\n      return null;\n    }\n    return /*#__PURE__*/_jsx(InfiniteLoadingTriggerElement, {\n      ref: triggerRef\n      // Force rerender on last row change to start observing the new trigger\n      ,\n\n      role: \"presentation\"\n    }, `trigger-${lastRowId}`);\n  }, [isEnabled, triggerRef]);\n  const infiniteLoaderPrivateApi = {\n    getInfiniteLoadingTriggerElement\n  };\n  useGridApiMethod(apiRef, infiniteLoaderPrivateApi, 'private');\n  useGridApiOptionHandler(apiRef, 'rowsScrollEnd', props.onRowsScrollEnd);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}