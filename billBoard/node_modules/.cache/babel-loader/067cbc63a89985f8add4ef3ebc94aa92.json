{"ast":null,"code":"import * as React from 'react';\nimport { useGridApiOptionHandler, useGridNativeEventListener } from '../../utils';\nimport { gridFocusCellSelector } from '../focus/gridFocusStateSelector';\nimport { serializeCellValue } from '../export/serializers/csvSerializer';\n\nfunction writeToClipboardPolyfill(data) {\n  const span = document.createElement('span');\n  span.style.whiteSpace = 'pre';\n  span.style.userSelect = 'all';\n  span.style.opacity = '0px';\n  span.textContent = data;\n  document.body.appendChild(span);\n  const range = document.createRange();\n  range.selectNode(span);\n  const selection = window.getSelection();\n  selection.removeAllRanges();\n  selection.addRange(range);\n\n  try {\n    document.execCommand('copy');\n  } finally {\n    document.body.removeChild(span);\n  }\n}\n\nfunction copyToClipboard(data) {\n  if (navigator.clipboard) {\n    navigator.clipboard.writeText(data).catch(() => {\n      writeToClipboardPolyfill(data);\n    });\n  } else {\n    writeToClipboardPolyfill(data);\n  }\n}\n\nfunction hasNativeSelection(element) {\n  // When getSelection is called on an <iframe> that is not displayed Firefox will return null.\n  if (window.getSelection()?.toString()) {\n    return true;\n  } // window.getSelection() returns an empty string in Firefox for selections inside a form element.\n  // See: https://bugzilla.mozilla.org/show_bug.cgi?id=85686.\n  // Instead, we can use element.selectionStart that is only defined on form elements.\n\n\n  if (element && (element.selectionEnd || 0) - (element.selectionStart || 0) > 0) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * @requires useGridCsvExport (method)\n * @requires useGridSelection (method)\n */\n\n\nexport const useGridClipboard = (apiRef, props) => {\n  const ignoreValueFormatterProp = props.ignoreValueFormatterDuringExport;\n  const ignoreValueFormatter = (typeof ignoreValueFormatterProp === 'object' ? ignoreValueFormatterProp?.clipboardExport : ignoreValueFormatterProp) || false;\n  const clipboardCopyCellDelimiter = props.clipboardCopyCellDelimiter;\n  const handleCopy = React.useCallback(event => {\n    if (!((event.ctrlKey || event.metaKey) && event.key.toLowerCase() === 'c' && !event.shiftKey && !event.altKey)) {\n      return;\n    } // Do nothing if there's a native selection\n\n\n    if (hasNativeSelection(event.target)) {\n      return;\n    }\n\n    let textToCopy = '';\n    const selectedRows = apiRef.current.getSelectedRows();\n\n    if (selectedRows.size > 0) {\n      textToCopy = apiRef.current.getDataAsCsv({\n        includeHeaders: false,\n        delimiter: clipboardCopyCellDelimiter,\n        shouldAppendQuotes: false,\n        escapeFormulas: false\n      });\n    } else {\n      const focusedCell = gridFocusCellSelector(apiRef);\n\n      if (focusedCell) {\n        const cellParams = apiRef.current.getCellParams(focusedCell.id, focusedCell.field);\n        textToCopy = serializeCellValue(cellParams, {\n          csvOptions: {\n            delimiter: clipboardCopyCellDelimiter,\n            shouldAppendQuotes: false,\n            escapeFormulas: false\n          },\n          ignoreValueFormatter\n        });\n      }\n    }\n\n    textToCopy = apiRef.current.unstable_applyPipeProcessors('clipboardCopy', textToCopy);\n\n    if (textToCopy) {\n      copyToClipboard(textToCopy);\n      apiRef.current.publishEvent('clipboardCopy', textToCopy);\n    }\n  }, [apiRef, ignoreValueFormatter, clipboardCopyCellDelimiter]);\n  useGridNativeEventListener(apiRef, apiRef.current.rootElementRef, 'keydown', handleCopy);\n  useGridApiOptionHandler(apiRef, 'clipboardCopy', props.onClipboardCopy);\n};","map":{"version":3,"names":["React","useGridApiOptionHandler","useGridNativeEventListener","gridFocusCellSelector","serializeCellValue","writeToClipboardPolyfill","data","span","document","createElement","style","whiteSpace","userSelect","opacity","textContent","body","appendChild","range","createRange","selectNode","selection","window","getSelection","removeAllRanges","addRange","execCommand","removeChild","copyToClipboard","navigator","clipboard","writeText","catch","hasNativeSelection","element","toString","selectionEnd","selectionStart","useGridClipboard","apiRef","props","ignoreValueFormatterProp","ignoreValueFormatterDuringExport","ignoreValueFormatter","clipboardExport","clipboardCopyCellDelimiter","handleCopy","useCallback","event","ctrlKey","metaKey","key","toLowerCase","shiftKey","altKey","target","textToCopy","selectedRows","current","getSelectedRows","size","getDataAsCsv","includeHeaders","delimiter","shouldAppendQuotes","escapeFormulas","focusedCell","cellParams","getCellParams","id","field","csvOptions","unstable_applyPipeProcessors","publishEvent","rootElementRef","onClipboardCopy"],"sources":["C:/Users/kb/node_modules/@mui/x-data-grid/hooks/features/clipboard/useGridClipboard.js"],"sourcesContent":["import * as React from 'react';\nimport { useGridApiOptionHandler, useGridNativeEventListener } from '../../utils';\nimport { gridFocusCellSelector } from '../focus/gridFocusStateSelector';\nimport { serializeCellValue } from '../export/serializers/csvSerializer';\nfunction writeToClipboardPolyfill(data) {\n  const span = document.createElement('span');\n  span.style.whiteSpace = 'pre';\n  span.style.userSelect = 'all';\n  span.style.opacity = '0px';\n  span.textContent = data;\n  document.body.appendChild(span);\n  const range = document.createRange();\n  range.selectNode(span);\n  const selection = window.getSelection();\n  selection.removeAllRanges();\n  selection.addRange(range);\n  try {\n    document.execCommand('copy');\n  } finally {\n    document.body.removeChild(span);\n  }\n}\nfunction copyToClipboard(data) {\n  if (navigator.clipboard) {\n    navigator.clipboard.writeText(data).catch(() => {\n      writeToClipboardPolyfill(data);\n    });\n  } else {\n    writeToClipboardPolyfill(data);\n  }\n}\nfunction hasNativeSelection(element) {\n  // When getSelection is called on an <iframe> that is not displayed Firefox will return null.\n  if (window.getSelection()?.toString()) {\n    return true;\n  }\n\n  // window.getSelection() returns an empty string in Firefox for selections inside a form element.\n  // See: https://bugzilla.mozilla.org/show_bug.cgi?id=85686.\n  // Instead, we can use element.selectionStart that is only defined on form elements.\n  if (element && (element.selectionEnd || 0) - (element.selectionStart || 0) > 0) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * @requires useGridCsvExport (method)\n * @requires useGridSelection (method)\n */\nexport const useGridClipboard = (apiRef, props) => {\n  const ignoreValueFormatterProp = props.ignoreValueFormatterDuringExport;\n  const ignoreValueFormatter = (typeof ignoreValueFormatterProp === 'object' ? ignoreValueFormatterProp?.clipboardExport : ignoreValueFormatterProp) || false;\n  const clipboardCopyCellDelimiter = props.clipboardCopyCellDelimiter;\n  const handleCopy = React.useCallback(event => {\n    if (!((event.ctrlKey || event.metaKey) && event.key.toLowerCase() === 'c' && !event.shiftKey && !event.altKey)) {\n      return;\n    }\n\n    // Do nothing if there's a native selection\n    if (hasNativeSelection(event.target)) {\n      return;\n    }\n    let textToCopy = '';\n    const selectedRows = apiRef.current.getSelectedRows();\n    if (selectedRows.size > 0) {\n      textToCopy = apiRef.current.getDataAsCsv({\n        includeHeaders: false,\n        delimiter: clipboardCopyCellDelimiter,\n        shouldAppendQuotes: false,\n        escapeFormulas: false\n      });\n    } else {\n      const focusedCell = gridFocusCellSelector(apiRef);\n      if (focusedCell) {\n        const cellParams = apiRef.current.getCellParams(focusedCell.id, focusedCell.field);\n        textToCopy = serializeCellValue(cellParams, {\n          csvOptions: {\n            delimiter: clipboardCopyCellDelimiter,\n            shouldAppendQuotes: false,\n            escapeFormulas: false\n          },\n          ignoreValueFormatter\n        });\n      }\n    }\n    textToCopy = apiRef.current.unstable_applyPipeProcessors('clipboardCopy', textToCopy);\n    if (textToCopy) {\n      copyToClipboard(textToCopy);\n      apiRef.current.publishEvent('clipboardCopy', textToCopy);\n    }\n  }, [apiRef, ignoreValueFormatter, clipboardCopyCellDelimiter]);\n  useGridNativeEventListener(apiRef, apiRef.current.rootElementRef, 'keydown', handleCopy);\n  useGridApiOptionHandler(apiRef, 'clipboardCopy', props.onClipboardCopy);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}