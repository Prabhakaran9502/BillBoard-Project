{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = require('es-errors/type');\n\nvar $Number = GetIntrinsic('%Number%');\nvar $RegExp = GetIntrinsic('%RegExp%');\nvar $parseInteger = GetIntrinsic('%parseInt%');\n\nvar callBound = require('call-bind/callBound');\n\nvar regexTester = require('safe-regex-test');\n\nvar isPrimitive = require('../helpers/isPrimitive');\n\nvar $strSlice = callBound('String.prototype.slice');\nvar isBinary = regexTester(/^0b[01]+$/i);\nvar isOctal = regexTester(/^0o[0-7]+$/i);\nvar isInvalidHexLiteral = regexTester(/^[-+]0x[0-9a-f]+$/i);\nvar nonWS = ['\\u0085', '\\u200b', '\\ufffe'].join('');\nvar nonWSregex = new $RegExp('[' + nonWS + ']', 'g');\nvar hasNonWS = regexTester(nonWSregex);\n\nvar $trim = require('string.prototype.trim');\n\nvar ToPrimitive = require('./ToPrimitive'); // https://262.ecma-international.org/6.0/#sec-tonumber\n\n\nmodule.exports = function ToNumber(argument) {\n  var value = isPrimitive(argument) ? argument : ToPrimitive(argument, $Number);\n\n  if (typeof value === 'symbol') {\n    throw new $TypeError('Cannot convert a Symbol value to a number');\n  }\n\n  if (typeof value === 'bigint') {\n    throw new $TypeError('Conversion from \\'BigInt\\' to \\'number\\' is not allowed.');\n  }\n\n  if (typeof value === 'string') {\n    if (isBinary(value)) {\n      return ToNumber($parseInteger($strSlice(value, 2), 2));\n    } else if (isOctal(value)) {\n      return ToNumber($parseInteger($strSlice(value, 2), 8));\n    } else if (hasNonWS(value) || isInvalidHexLiteral(value)) {\n      return NaN;\n    }\n\n    var trimmed = $trim(value);\n\n    if (trimmed !== value) {\n      return ToNumber(trimmed);\n    }\n  }\n\n  return $Number(value);\n};","map":{"version":3,"names":["GetIntrinsic","require","$TypeError","$Number","$RegExp","$parseInteger","callBound","regexTester","isPrimitive","$strSlice","isBinary","isOctal","isInvalidHexLiteral","nonWS","join","nonWSregex","hasNonWS","$trim","ToPrimitive","module","exports","ToNumber","argument","value","NaN","trimmed"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/es-abstract/2021/ToNumber.js"],"sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = require('es-errors/type');\nvar $Number = GetIntrinsic('%Number%');\nvar $RegExp = GetIntrinsic('%RegExp%');\nvar $parseInteger = GetIntrinsic('%parseInt%');\n\nvar callBound = require('call-bind/callBound');\nvar regexTester = require('safe-regex-test');\nvar isPrimitive = require('../helpers/isPrimitive');\n\nvar $strSlice = callBound('String.prototype.slice');\nvar isBinary = regexTester(/^0b[01]+$/i);\nvar isOctal = regexTester(/^0o[0-7]+$/i);\nvar isInvalidHexLiteral = regexTester(/^[-+]0x[0-9a-f]+$/i);\nvar nonWS = ['\\u0085', '\\u200b', '\\ufffe'].join('');\nvar nonWSregex = new $RegExp('[' + nonWS + ']', 'g');\nvar hasNonWS = regexTester(nonWSregex);\n\nvar $trim = require('string.prototype.trim');\n\nvar ToPrimitive = require('./ToPrimitive');\n\n// https://262.ecma-international.org/6.0/#sec-tonumber\n\nmodule.exports = function ToNumber(argument) {\n\tvar value = isPrimitive(argument) ? argument : ToPrimitive(argument, $Number);\n\tif (typeof value === 'symbol') {\n\t\tthrow new $TypeError('Cannot convert a Symbol value to a number');\n\t}\n\tif (typeof value === 'bigint') {\n\t\tthrow new $TypeError('Conversion from \\'BigInt\\' to \\'number\\' is not allowed.');\n\t}\n\tif (typeof value === 'string') {\n\t\tif (isBinary(value)) {\n\t\t\treturn ToNumber($parseInteger($strSlice(value, 2), 2));\n\t\t} else if (isOctal(value)) {\n\t\t\treturn ToNumber($parseInteger($strSlice(value, 2), 8));\n\t\t} else if (hasNonWS(value) || isInvalidHexLiteral(value)) {\n\t\t\treturn NaN;\n\t\t}\n\t\tvar trimmed = $trim(value);\n\t\tif (trimmed !== value) {\n\t\t\treturn ToNumber(trimmed);\n\t\t}\n\n\t}\n\treturn $Number(value);\n};\n"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,UAAU,GAAGD,OAAO,CAAC,gBAAD,CAAxB;;AACA,IAAIE,OAAO,GAAGH,YAAY,CAAC,UAAD,CAA1B;AACA,IAAII,OAAO,GAAGJ,YAAY,CAAC,UAAD,CAA1B;AACA,IAAIK,aAAa,GAAGL,YAAY,CAAC,YAAD,CAAhC;;AAEA,IAAIM,SAAS,GAAGL,OAAO,CAAC,qBAAD,CAAvB;;AACA,IAAIM,WAAW,GAAGN,OAAO,CAAC,iBAAD,CAAzB;;AACA,IAAIO,WAAW,GAAGP,OAAO,CAAC,wBAAD,CAAzB;;AAEA,IAAIQ,SAAS,GAAGH,SAAS,CAAC,wBAAD,CAAzB;AACA,IAAII,QAAQ,GAAGH,WAAW,CAAC,YAAD,CAA1B;AACA,IAAII,OAAO,GAAGJ,WAAW,CAAC,aAAD,CAAzB;AACA,IAAIK,mBAAmB,GAAGL,WAAW,CAAC,oBAAD,CAArC;AACA,IAAIM,KAAK,GAAG,CAAC,QAAD,EAAW,QAAX,EAAqB,QAArB,EAA+BC,IAA/B,CAAoC,EAApC,CAAZ;AACA,IAAIC,UAAU,GAAG,IAAIX,OAAJ,CAAY,MAAMS,KAAN,GAAc,GAA1B,EAA+B,GAA/B,CAAjB;AACA,IAAIG,QAAQ,GAAGT,WAAW,CAACQ,UAAD,CAA1B;;AAEA,IAAIE,KAAK,GAAGhB,OAAO,CAAC,uBAAD,CAAnB;;AAEA,IAAIiB,WAAW,GAAGjB,OAAO,CAAC,eAAD,CAAzB,C,CAEA;;;AAEAkB,MAAM,CAACC,OAAP,GAAiB,SAASC,QAAT,CAAkBC,QAAlB,EAA4B;EAC5C,IAAIC,KAAK,GAAGf,WAAW,CAACc,QAAD,CAAX,GAAwBA,QAAxB,GAAmCJ,WAAW,CAACI,QAAD,EAAWnB,OAAX,CAA1D;;EACA,IAAI,OAAOoB,KAAP,KAAiB,QAArB,EAA+B;IAC9B,MAAM,IAAIrB,UAAJ,CAAe,2CAAf,CAAN;EACA;;EACD,IAAI,OAAOqB,KAAP,KAAiB,QAArB,EAA+B;IAC9B,MAAM,IAAIrB,UAAJ,CAAe,0DAAf,CAAN;EACA;;EACD,IAAI,OAAOqB,KAAP,KAAiB,QAArB,EAA+B;IAC9B,IAAIb,QAAQ,CAACa,KAAD,CAAZ,EAAqB;MACpB,OAAOF,QAAQ,CAAChB,aAAa,CAACI,SAAS,CAACc,KAAD,EAAQ,CAAR,CAAV,EAAsB,CAAtB,CAAd,CAAf;IACA,CAFD,MAEO,IAAIZ,OAAO,CAACY,KAAD,CAAX,EAAoB;MAC1B,OAAOF,QAAQ,CAAChB,aAAa,CAACI,SAAS,CAACc,KAAD,EAAQ,CAAR,CAAV,EAAsB,CAAtB,CAAd,CAAf;IACA,CAFM,MAEA,IAAIP,QAAQ,CAACO,KAAD,CAAR,IAAmBX,mBAAmB,CAACW,KAAD,CAA1C,EAAmD;MACzD,OAAOC,GAAP;IACA;;IACD,IAAIC,OAAO,GAAGR,KAAK,CAACM,KAAD,CAAnB;;IACA,IAAIE,OAAO,KAAKF,KAAhB,EAAuB;MACtB,OAAOF,QAAQ,CAACI,OAAD,CAAf;IACA;EAED;;EACD,OAAOtB,OAAO,CAACoB,KAAD,CAAd;AACA,CAvBD"},"metadata":{},"sourceType":"script"}