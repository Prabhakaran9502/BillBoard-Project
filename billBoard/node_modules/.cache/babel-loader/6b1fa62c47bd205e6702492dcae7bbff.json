{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { getGridDefaultColumnTypes, GridLogicOperator } from '@mui/x-data-grid-pro';\nimport { isDeepEqual } from '@mui/x-data-grid/internals';\nimport { useDemoData, getColumnsFromOptions, getInitialState } from './useDemoData';\nimport { randomInt } from '../services/random-generator';\nconst apiRef = {};\n\nconst simplifiedValueGetter = (field, colDef) => row => {\n  return colDef.valueGetter?.(row[row.id], row, colDef, apiRef) || row[field];\n};\n\nconst getRowComparator = (sortModel, columnsWithDefaultColDef) => {\n  if (!sortModel) {\n    const comparator = () => 0;\n\n    return comparator;\n  }\n\n  const sortOperators = sortModel.map(sortItem => {\n    const columnField = sortItem.field;\n    const colDef = columnsWithDefaultColDef.find(_ref => {\n      let {\n        field\n      } = _ref;\n      return field === columnField;\n    });\n    return _extends({}, sortItem, {\n      valueGetter: simplifiedValueGetter(columnField, colDef),\n      sortComparator: colDef.sortComparator\n    });\n  });\n\n  const comparator = (row1, row2) => sortOperators.reduce((acc, _ref2) => {\n    let {\n      valueGetter,\n      sort,\n      sortComparator\n    } = _ref2;\n\n    if (acc !== 0) {\n      return acc;\n    }\n\n    const v1 = valueGetter(row1);\n    const v2 = valueGetter(row2);\n    return sort === 'desc' ? -1 * sortComparator(v1, v2) : sortComparator(v1, v2);\n  }, 0);\n\n  return comparator;\n};\n\nconst getFilteredRows = (rows, filterModel, columnsWithDefaultColDef) => {\n  if (filterModel === undefined || filterModel.items.length === 0) {\n    return rows;\n  }\n\n  const valueGetters = filterModel.items.map(_ref3 => {\n    let {\n      field\n    } = _ref3;\n    return simplifiedValueGetter(field, columnsWithDefaultColDef.find(column => column.field === field));\n  });\n  const filterFunctions = filterModel.items.map(filterItem => {\n    const {\n      field,\n      operator\n    } = filterItem;\n    const colDef = columnsWithDefaultColDef.find(column => column.field === field);\n    const filterOperator = colDef.filterOperators.find(_ref4 => {\n      let {\n        value\n      } = _ref4;\n      return operator === value;\n    });\n    let parsedValue = filterItem.value;\n\n    if (colDef.valueParser) {\n      const parser = colDef.valueParser;\n      parsedValue = Array.isArray(filterItem.value) ? filterItem.value?.map(x => parser(x)) : parser(filterItem.value);\n    }\n\n    return filterOperator?.getApplyFilterFn({\n      filterItem,\n      value: parsedValue\n    }, colDef);\n  });\n\n  if (filterModel.logicOperator === GridLogicOperator.Or) {\n    return rows.filter(row => filterModel.items.some((_, index) => {\n      const value = valueGetters[index](row);\n      return filterFunctions[index] === null ? true : filterFunctions[index]({\n        value\n      });\n    }));\n  }\n\n  return rows.filter(row => filterModel.items.every((_, index) => {\n    const value = valueGetters[index](row);\n    return filterFunctions[index] === null ? true : filterFunctions[index](value);\n  }));\n};\n/**\n * Simulates server data loading\n */\n\n\nexport const loadServerRows = (rows, queryOptions, serverOptions, columnsWithDefaultColDef) => {\n  const {\n    minDelay = 100,\n    maxDelay = 300,\n    useCursorPagination\n  } = serverOptions;\n\n  if (maxDelay < minDelay) {\n    throw new Error('serverOptions.minDelay is larger than serverOptions.maxDelay ');\n  }\n\n  const delay = randomInt(minDelay, maxDelay);\n  const {\n    cursor,\n    page = 0,\n    pageSize\n  } = queryOptions;\n  let nextCursor;\n  let firstRowIndex;\n  let lastRowIndex;\n  let filteredRows = getFilteredRows(rows, queryOptions.filterModel, columnsWithDefaultColDef);\n  const rowComparator = getRowComparator(queryOptions.sortModel, columnsWithDefaultColDef);\n  filteredRows = [...filteredRows].sort(rowComparator);\n  const totalRowCount = filteredRows.length;\n\n  if (!pageSize) {\n    firstRowIndex = 0;\n    lastRowIndex = filteredRows.length;\n  } else if (useCursorPagination) {\n    firstRowIndex = cursor ? filteredRows.findIndex(_ref5 => {\n      let {\n        id\n      } = _ref5;\n      return id === cursor;\n    }) : 0;\n    firstRowIndex = Math.max(firstRowIndex, 0); // if cursor not found return 0\n\n    lastRowIndex = firstRowIndex + pageSize;\n    nextCursor = lastRowIndex >= filteredRows.length ? undefined : filteredRows[lastRowIndex].id;\n  } else {\n    firstRowIndex = page * pageSize;\n    lastRowIndex = (page + 1) * pageSize;\n  }\n\n  const hasNextPage = lastRowIndex < filteredRows.length - 1;\n  const response = {\n    returnedRows: filteredRows.slice(firstRowIndex, lastRowIndex),\n    nextCursor,\n    hasNextPage,\n    totalRowCount\n  };\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(response);\n    }, delay); // simulate network latency\n  });\n};\nconst DEFAULT_DATASET_OPTIONS = {\n  dataSet: 'Commodity',\n  rowLength: 100,\n  maxColumns: 6\n};\nconst disableDelay = typeof DISABLE_CHANCE_RANDOM !== 'undefined' && DISABLE_CHANCE_RANDOM;\nconst DEFAULT_SERVER_OPTIONS = {\n  minDelay: disableDelay ? 0 : 100,\n  maxDelay: disableDelay ? 0 : 300,\n  useCursorPagination: true\n};\nexport const createFakeServer = (dataSetOptions, serverOptions) => {\n  const dataSetOptionsWithDefault = _extends({}, DEFAULT_DATASET_OPTIONS, dataSetOptions);\n\n  const serverOptionsWithDefault = _extends({}, DEFAULT_SERVER_OPTIONS, serverOptions);\n\n  const columns = getColumnsFromOptions(dataSetOptionsWithDefault);\n  const initialState = getInitialState(dataSetOptionsWithDefault, columns);\n  const defaultColDef = getGridDefaultColumnTypes();\n  const columnsWithDefaultColDef = columns.map(column => _extends({}, defaultColDef[column.type || 'string'], column));\n\n  const useQuery = queryOptions => {\n    const {\n      data: {\n        rows\n      },\n      loading: dataGenerationIsLoading\n    } = useDemoData(dataSetOptionsWithDefault);\n    const queryOptionsRef = React.useRef(queryOptions);\n    const [response, setResponse] = React.useState({\n      pageInfo: {},\n      rows: []\n    });\n    const [isLoading, setIsLoading] = React.useState(dataGenerationIsLoading);\n    React.useEffect(() => {\n      if (dataGenerationIsLoading) {\n        // dataset is not ready\n        return () => {};\n      }\n\n      queryOptionsRef.current = queryOptions;\n      let active = true;\n      setIsLoading(true);\n      setResponse(prev => Object.keys(prev.pageInfo).length === 0 ? prev : _extends({}, prev, {\n        pageInfo: {}\n      }));\n\n      (async function fetchData() {\n        const {\n          returnedRows,\n          nextCursor,\n          totalRowCount,\n          hasNextPage\n        } = await loadServerRows(rows, queryOptions, serverOptionsWithDefault, columnsWithDefaultColDef);\n\n        if (!active) {\n          return;\n        }\n\n        const newRep = {\n          rows: returnedRows,\n          pageInfo: {\n            totalRowCount,\n            nextCursor,\n            hasNextPage,\n            pageSize: returnedRows.length\n          }\n        };\n        setResponse(prev => isDeepEqual(prev, newRep) ? prev : newRep);\n        setIsLoading(false);\n      })();\n\n      return () => {\n        active = false;\n      };\n    }, [dataGenerationIsLoading, queryOptions, rows]); // We use queryOptions pointer to be sure that isLoading===true as soon as the options change\n\n    const effectShouldStart = queryOptionsRef.current !== queryOptions;\n    return _extends({\n      isLoading: isLoading || effectShouldStart\n    }, response);\n  };\n\n  return {\n    columns,\n    columnsWithDefaultColDef,\n    initialState,\n    useQuery\n  };\n};","map":{"version":3,"names":["_extends","React","getGridDefaultColumnTypes","GridLogicOperator","isDeepEqual","useDemoData","getColumnsFromOptions","getInitialState","randomInt","apiRef","simplifiedValueGetter","field","colDef","row","valueGetter","id","getRowComparator","sortModel","columnsWithDefaultColDef","comparator","sortOperators","map","sortItem","columnField","find","sortComparator","row1","row2","reduce","acc","sort","v1","v2","getFilteredRows","rows","filterModel","undefined","items","length","valueGetters","column","filterFunctions","filterItem","operator","filterOperator","filterOperators","value","parsedValue","valueParser","parser","Array","isArray","x","getApplyFilterFn","logicOperator","Or","filter","some","_","index","every","loadServerRows","queryOptions","serverOptions","minDelay","maxDelay","useCursorPagination","Error","delay","cursor","page","pageSize","nextCursor","firstRowIndex","lastRowIndex","filteredRows","rowComparator","totalRowCount","findIndex","Math","max","hasNextPage","response","returnedRows","slice","Promise","resolve","setTimeout","DEFAULT_DATASET_OPTIONS","dataSet","rowLength","maxColumns","disableDelay","DISABLE_CHANCE_RANDOM","DEFAULT_SERVER_OPTIONS","createFakeServer","dataSetOptions","dataSetOptionsWithDefault","serverOptionsWithDefault","columns","initialState","defaultColDef","type","useQuery","data","loading","dataGenerationIsLoading","queryOptionsRef","useRef","setResponse","useState","pageInfo","isLoading","setIsLoading","useEffect","current","active","prev","Object","keys","fetchData","newRep","effectShouldStart"],"sources":["C:/Users/kb/node_modules/@mui/x-data-grid-generator/hooks/useQuery.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { getGridDefaultColumnTypes, GridLogicOperator } from '@mui/x-data-grid-pro';\nimport { isDeepEqual } from '@mui/x-data-grid/internals';\nimport { useDemoData, getColumnsFromOptions, getInitialState } from './useDemoData';\nimport { randomInt } from '../services/random-generator';\nconst apiRef = {};\nconst simplifiedValueGetter = (field, colDef) => row => {\n  return colDef.valueGetter?.(row[row.id], row, colDef, apiRef) || row[field];\n};\nconst getRowComparator = (sortModel, columnsWithDefaultColDef) => {\n  if (!sortModel) {\n    const comparator = () => 0;\n    return comparator;\n  }\n  const sortOperators = sortModel.map(sortItem => {\n    const columnField = sortItem.field;\n    const colDef = columnsWithDefaultColDef.find(({\n      field\n    }) => field === columnField);\n    return _extends({}, sortItem, {\n      valueGetter: simplifiedValueGetter(columnField, colDef),\n      sortComparator: colDef.sortComparator\n    });\n  });\n  const comparator = (row1, row2) => sortOperators.reduce((acc, {\n    valueGetter,\n    sort,\n    sortComparator\n  }) => {\n    if (acc !== 0) {\n      return acc;\n    }\n    const v1 = valueGetter(row1);\n    const v2 = valueGetter(row2);\n    return sort === 'desc' ? -1 * sortComparator(v1, v2) : sortComparator(v1, v2);\n  }, 0);\n  return comparator;\n};\nconst getFilteredRows = (rows, filterModel, columnsWithDefaultColDef) => {\n  if (filterModel === undefined || filterModel.items.length === 0) {\n    return rows;\n  }\n  const valueGetters = filterModel.items.map(({\n    field\n  }) => simplifiedValueGetter(field, columnsWithDefaultColDef.find(column => column.field === field)));\n  const filterFunctions = filterModel.items.map(filterItem => {\n    const {\n      field,\n      operator\n    } = filterItem;\n    const colDef = columnsWithDefaultColDef.find(column => column.field === field);\n    const filterOperator = colDef.filterOperators.find(({\n      value\n    }) => operator === value);\n    let parsedValue = filterItem.value;\n    if (colDef.valueParser) {\n      const parser = colDef.valueParser;\n      parsedValue = Array.isArray(filterItem.value) ? filterItem.value?.map(x => parser(x)) : parser(filterItem.value);\n    }\n    return filterOperator?.getApplyFilterFn({\n      filterItem,\n      value: parsedValue\n    }, colDef);\n  });\n  if (filterModel.logicOperator === GridLogicOperator.Or) {\n    return rows.filter(row => filterModel.items.some((_, index) => {\n      const value = valueGetters[index](row);\n      return filterFunctions[index] === null ? true : filterFunctions[index]({\n        value\n      });\n    }));\n  }\n  return rows.filter(row => filterModel.items.every((_, index) => {\n    const value = valueGetters[index](row);\n    return filterFunctions[index] === null ? true : filterFunctions[index](value);\n  }));\n};\n\n/**\n * Simulates server data loading\n */\nexport const loadServerRows = (rows, queryOptions, serverOptions, columnsWithDefaultColDef) => {\n  const {\n    minDelay = 100,\n    maxDelay = 300,\n    useCursorPagination\n  } = serverOptions;\n  if (maxDelay < minDelay) {\n    throw new Error('serverOptions.minDelay is larger than serverOptions.maxDelay ');\n  }\n  const delay = randomInt(minDelay, maxDelay);\n  const {\n    cursor,\n    page = 0,\n    pageSize\n  } = queryOptions;\n  let nextCursor;\n  let firstRowIndex;\n  let lastRowIndex;\n  let filteredRows = getFilteredRows(rows, queryOptions.filterModel, columnsWithDefaultColDef);\n  const rowComparator = getRowComparator(queryOptions.sortModel, columnsWithDefaultColDef);\n  filteredRows = [...filteredRows].sort(rowComparator);\n  const totalRowCount = filteredRows.length;\n  if (!pageSize) {\n    firstRowIndex = 0;\n    lastRowIndex = filteredRows.length;\n  } else if (useCursorPagination) {\n    firstRowIndex = cursor ? filteredRows.findIndex(({\n      id\n    }) => id === cursor) : 0;\n    firstRowIndex = Math.max(firstRowIndex, 0); // if cursor not found return 0\n    lastRowIndex = firstRowIndex + pageSize;\n    nextCursor = lastRowIndex >= filteredRows.length ? undefined : filteredRows[lastRowIndex].id;\n  } else {\n    firstRowIndex = page * pageSize;\n    lastRowIndex = (page + 1) * pageSize;\n  }\n  const hasNextPage = lastRowIndex < filteredRows.length - 1;\n  const response = {\n    returnedRows: filteredRows.slice(firstRowIndex, lastRowIndex),\n    nextCursor,\n    hasNextPage,\n    totalRowCount\n  };\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(response);\n    }, delay); // simulate network latency\n  });\n};\nconst DEFAULT_DATASET_OPTIONS = {\n  dataSet: 'Commodity',\n  rowLength: 100,\n  maxColumns: 6\n};\nconst disableDelay = typeof DISABLE_CHANCE_RANDOM !== 'undefined' && DISABLE_CHANCE_RANDOM;\nconst DEFAULT_SERVER_OPTIONS = {\n  minDelay: disableDelay ? 0 : 100,\n  maxDelay: disableDelay ? 0 : 300,\n  useCursorPagination: true\n};\nexport const createFakeServer = (dataSetOptions, serverOptions) => {\n  const dataSetOptionsWithDefault = _extends({}, DEFAULT_DATASET_OPTIONS, dataSetOptions);\n  const serverOptionsWithDefault = _extends({}, DEFAULT_SERVER_OPTIONS, serverOptions);\n  const columns = getColumnsFromOptions(dataSetOptionsWithDefault);\n  const initialState = getInitialState(dataSetOptionsWithDefault, columns);\n  const defaultColDef = getGridDefaultColumnTypes();\n  const columnsWithDefaultColDef = columns.map(column => _extends({}, defaultColDef[column.type || 'string'], column));\n  const useQuery = queryOptions => {\n    const {\n      data: {\n        rows\n      },\n      loading: dataGenerationIsLoading\n    } = useDemoData(dataSetOptionsWithDefault);\n    const queryOptionsRef = React.useRef(queryOptions);\n    const [response, setResponse] = React.useState({\n      pageInfo: {},\n      rows: []\n    });\n    const [isLoading, setIsLoading] = React.useState(dataGenerationIsLoading);\n    React.useEffect(() => {\n      if (dataGenerationIsLoading) {\n        // dataset is not ready\n        return () => {};\n      }\n      queryOptionsRef.current = queryOptions;\n      let active = true;\n      setIsLoading(true);\n      setResponse(prev => Object.keys(prev.pageInfo).length === 0 ? prev : _extends({}, prev, {\n        pageInfo: {}\n      }));\n      (async function fetchData() {\n        const {\n          returnedRows,\n          nextCursor,\n          totalRowCount,\n          hasNextPage\n        } = await loadServerRows(rows, queryOptions, serverOptionsWithDefault, columnsWithDefaultColDef);\n        if (!active) {\n          return;\n        }\n        const newRep = {\n          rows: returnedRows,\n          pageInfo: {\n            totalRowCount,\n            nextCursor,\n            hasNextPage,\n            pageSize: returnedRows.length\n          }\n        };\n        setResponse(prev => isDeepEqual(prev, newRep) ? prev : newRep);\n        setIsLoading(false);\n      })();\n      return () => {\n        active = false;\n      };\n    }, [dataGenerationIsLoading, queryOptions, rows]);\n\n    // We use queryOptions pointer to be sure that isLoading===true as soon as the options change\n    const effectShouldStart = queryOptionsRef.current !== queryOptions;\n    return _extends({\n      isLoading: isLoading || effectShouldStart\n    }, response);\n  };\n  return {\n    columns,\n    columnsWithDefaultColDef,\n    initialState,\n    useQuery\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}