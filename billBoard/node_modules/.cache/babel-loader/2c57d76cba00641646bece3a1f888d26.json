{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnFieldsSelector, gridColumnDefinitionsSelector, gridColumnLookupSelector, gridColumnsStateSelector, gridColumnVisibilityModelSelector, gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector } from './gridColumnsSelector';\nimport { GridSignature, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridRegisterPipeProcessor, useGridRegisterPipeApplier } from '../../core/pipeProcessing';\nimport { EMPTY_PINNED_COLUMN_FIELDS } from './gridColumnsInterfaces';\nimport { hydrateColumnsWidth, createColumnsState, COLUMNS_DIMENSION_PROPERTIES } from './gridColumnsUtils';\nimport { GridPreferencePanelsValue } from '../preferencesPanel';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const columnsStateInitializer = (state, props, apiRef) => {\n  const columnsState = createColumnsState({\n    apiRef,\n    columnsToUpsert: props.columns,\n    initialState: props.initialState?.columns,\n    columnVisibilityModel: props.columnVisibilityModel ?? props.initialState?.columns?.columnVisibilityModel ?? {},\n    keepOnlyColumnsToUpsert: true\n  });\n  return _extends({}, state, {\n    columns: columnsState,\n    // In pro/premium, this part of the state is defined. We give it an empty but defined value\n    // for the community version.\n    pinnedColumns: state.pinnedColumns ?? EMPTY_PINNED_COLUMN_FIELDS\n  });\n};\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridDimensions (method, event) - can be after\n * TODO: Impossible priority - useGridParamsApi also needs to be after useGridColumns\n */\n\nexport function useGridColumns(apiRef, props) {\n  const logger = useGridLogger(apiRef, 'useGridColumns');\n  const previousColumnsProp = React.useRef(props.columns);\n  apiRef.current.registerControlState({\n    stateId: 'visibleColumns',\n    propModel: props.columnVisibilityModel,\n    propOnChange: props.onColumnVisibilityModelChange,\n    stateSelector: gridColumnVisibilityModelSelector,\n    changeEvent: 'columnVisibilityModelChange'\n  });\n  const setGridColumnsState = React.useCallback(columnsState => {\n    logger.debug('Updating columns state.');\n    apiRef.current.setState(mergeColumnsState(columnsState));\n    apiRef.current.publishEvent('columnsChange', columnsState.orderedFields);\n    apiRef.current.updateRenderContext?.();\n    apiRef.current.forceUpdate();\n  }, [logger, apiRef]);\n  /**\n   * API METHODS\n   */\n\n  const getColumn = React.useCallback(field => gridColumnLookupSelector(apiRef)[field], [apiRef]);\n  const getAllColumns = React.useCallback(() => gridColumnDefinitionsSelector(apiRef), [apiRef]);\n  const getVisibleColumns = React.useCallback(() => gridVisibleColumnDefinitionsSelector(apiRef), [apiRef]);\n  const getColumnIndex = React.useCallback(function (field) {\n    let useVisibleColumns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const columns = useVisibleColumns ? gridVisibleColumnDefinitionsSelector(apiRef) : gridColumnDefinitionsSelector(apiRef);\n    return columns.findIndex(col => col.field === field);\n  }, [apiRef]);\n  const getColumnPosition = React.useCallback(field => {\n    const index = getColumnIndex(field);\n    return gridColumnPositionsSelector(apiRef)[index];\n  }, [apiRef, getColumnIndex]);\n  const setColumnVisibilityModel = React.useCallback(model => {\n    const currentModel = gridColumnVisibilityModelSelector(apiRef);\n\n    if (currentModel !== model) {\n      apiRef.current.setState(state => _extends({}, state, {\n        columns: createColumnsState({\n          apiRef,\n          columnsToUpsert: [],\n          initialState: undefined,\n          columnVisibilityModel: model,\n          keepOnlyColumnsToUpsert: false\n        })\n      }));\n      apiRef.current.updateRenderContext?.();\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef]);\n  const updateColumns = React.useCallback(columns => {\n    const columnsState = createColumnsState({\n      apiRef,\n      columnsToUpsert: columns,\n      initialState: undefined,\n      keepOnlyColumnsToUpsert: false\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, setGridColumnsState]);\n  const setColumnVisibility = React.useCallback((field, isVisible) => {\n    const columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef);\n    const isCurrentlyVisible = columnVisibilityModel[field] ?? true;\n\n    if (isVisible !== isCurrentlyVisible) {\n      const newModel = _extends({}, columnVisibilityModel, {\n        [field]: isVisible\n      });\n\n      apiRef.current.setColumnVisibilityModel(newModel);\n    }\n  }, [apiRef]);\n  const getColumnIndexRelativeToVisibleColumns = React.useCallback(field => {\n    const allColumns = gridColumnFieldsSelector(apiRef);\n    return allColumns.findIndex(col => col === field);\n  }, [apiRef]);\n  const setColumnIndex = React.useCallback((field, targetIndexPosition) => {\n    const allColumns = gridColumnFieldsSelector(apiRef);\n    const oldIndexPosition = getColumnIndexRelativeToVisibleColumns(field);\n\n    if (oldIndexPosition === targetIndexPosition) {\n      return;\n    }\n\n    logger.debug(`Moving column ${field} to index ${targetIndexPosition}`);\n    const updatedColumns = [...allColumns];\n    const fieldRemoved = updatedColumns.splice(oldIndexPosition, 1)[0];\n    updatedColumns.splice(targetIndexPosition, 0, fieldRemoved);\n    setGridColumnsState(_extends({}, gridColumnsStateSelector(apiRef.current.state), {\n      orderedFields: updatedColumns\n    }));\n    const params = {\n      column: apiRef.current.getColumn(field),\n      targetIndex: apiRef.current.getColumnIndexRelativeToVisibleColumns(field),\n      oldIndex: oldIndexPosition\n    };\n    apiRef.current.publishEvent('columnIndexChange', params);\n  }, [apiRef, logger, setGridColumnsState, getColumnIndexRelativeToVisibleColumns]);\n  const setColumnWidth = React.useCallback((field, width) => {\n    logger.debug(`Updating column ${field} width to ${width}`);\n    const columnsState = gridColumnsStateSelector(apiRef.current.state);\n    const column = columnsState.lookup[field];\n\n    const newColumn = _extends({}, column, {\n      width,\n      hasBeenResized: true\n    });\n\n    setGridColumnsState(hydrateColumnsWidth(_extends({}, columnsState, {\n      lookup: _extends({}, columnsState.lookup, {\n        [field]: newColumn\n      })\n    }), apiRef.current.getRootDimensions()));\n    apiRef.current.publishEvent('columnWidthChange', {\n      element: apiRef.current.getColumnHeaderElement(field),\n      colDef: newColumn,\n      width\n    });\n  }, [apiRef, logger, setGridColumnsState]);\n  const columnApi = {\n    getColumn,\n    getAllColumns,\n    getColumnIndex,\n    getColumnPosition,\n    getVisibleColumns,\n    getColumnIndexRelativeToVisibleColumns,\n    updateColumns,\n    setColumnVisibilityModel,\n    setColumnVisibility,\n    setColumnWidth\n  };\n  const columnReorderApi = {\n    setColumnIndex\n  };\n  useGridApiMethod(apiRef, columnApi, 'public');\n  useGridApiMethod(apiRef, columnReorderApi, props.signature === GridSignature.DataGrid ? 'private' : 'public');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    const columnsStateToExport = {};\n    const columnVisibilityModelToExport = gridColumnVisibilityModelSelector(apiRef);\n    const shouldExportColumnVisibilityModel = // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels || // Always export if the model is controlled\n    props.columnVisibilityModel != null || // Always export if the model has been initialized\n    // TODO v6 Do a nullish check instead to export even if the initial model equals \"{}\"\n    Object.keys(props.initialState?.columns?.columnVisibilityModel ?? {}).length > 0 || // Always export if the model is not empty\n    Object.keys(columnVisibilityModelToExport).length > 0;\n\n    if (shouldExportColumnVisibilityModel) {\n      columnsStateToExport.columnVisibilityModel = columnVisibilityModelToExport;\n    }\n\n    columnsStateToExport.orderedFields = gridColumnFieldsSelector(apiRef);\n    const columns = gridColumnDefinitionsSelector(apiRef);\n    const dimensions = {};\n    columns.forEach(colDef => {\n      if (colDef.hasBeenResized) {\n        const colDefDimensions = {};\n        COLUMNS_DIMENSION_PROPERTIES.forEach(propertyName => {\n          let propertyValue = colDef[propertyName];\n\n          if (propertyValue === Infinity) {\n            propertyValue = -1;\n          }\n\n          colDefDimensions[propertyName] = propertyValue;\n        });\n        dimensions[colDef.field] = colDefDimensions;\n      }\n    });\n\n    if (Object.keys(dimensions).length > 0) {\n      columnsStateToExport.dimensions = dimensions;\n    }\n\n    return _extends({}, prevState, {\n      columns: columnsStateToExport\n    });\n  }, [apiRef, props.columnVisibilityModel, props.initialState?.columns]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const columnVisibilityModelToImport = context.stateToRestore.columns?.columnVisibilityModel;\n    const initialState = context.stateToRestore.columns;\n\n    if (columnVisibilityModelToImport == null && initialState == null) {\n      return params;\n    }\n\n    const columnsState = createColumnsState({\n      apiRef,\n      columnsToUpsert: [],\n      initialState,\n      columnVisibilityModel: columnVisibilityModelToImport,\n      keepOnlyColumnsToUpsert: false\n    });\n    apiRef.current.setState(mergeColumnsState(columnsState));\n\n    if (initialState != null) {\n      apiRef.current.publishEvent('columnsChange', columnsState.orderedFields);\n    }\n\n    return params;\n  }, [apiRef]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === GridPreferencePanelsValue.columns) {\n      const ColumnsPanel = props.slots.columnsPanel;\n      return /*#__PURE__*/_jsx(ColumnsPanel, _extends({}, props.slotProps?.columnsPanel));\n    }\n\n    return initialValue;\n  }, [props.slots.columnsPanel, props.slotProps?.columnsPanel]);\n  const addColumnMenuItems = React.useCallback(columnMenuItems => {\n    if (props.disableColumnSelector) {\n      return columnMenuItems;\n    }\n\n    return [...columnMenuItems, 'columnMenuColumnsItem'];\n  }, [props.disableColumnSelector]);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuItems);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n  /*\n   * EVENTS\n   */\n\n  const prevInnerWidth = React.useRef(null);\n\n  const handleGridSizeChange = viewportInnerSize => {\n    if (prevInnerWidth.current !== viewportInnerSize.width) {\n      prevInnerWidth.current = viewportInnerSize.width;\n      setGridColumnsState(hydrateColumnsWidth(gridColumnsStateSelector(apiRef.current.state), apiRef.current.getRootDimensions()));\n    }\n  };\n\n  useGridApiEventHandler(apiRef, 'viewportInnerSizeChange', handleGridSizeChange);\n  /**\n   * APPLIERS\n   */\n\n  const hydrateColumns = React.useCallback(() => {\n    logger.info(`Columns pipe processing have changed, regenerating the columns`);\n    const columnsState = createColumnsState({\n      apiRef,\n      columnsToUpsert: [],\n      initialState: undefined,\n      keepOnlyColumnsToUpsert: false\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, logger, setGridColumnsState]);\n  useGridRegisterPipeApplier(apiRef, 'hydrateColumns', hydrateColumns);\n  /*\n   * EFFECTS\n   */\n  // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridColumns`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n\n    logger.info(`GridColumns have changed, new length ${props.columns.length}`);\n\n    if (previousColumnsProp.current === props.columns) {\n      return;\n    }\n\n    const columnsState = createColumnsState({\n      apiRef,\n      initialState: undefined,\n      // If the user provides a model, we don't want to set it in the state here because it has it's dedicated `useEffect` which calls `setColumnVisibilityModel`\n      columnsToUpsert: props.columns,\n      keepOnlyColumnsToUpsert: true\n    });\n    previousColumnsProp.current = props.columns;\n    setGridColumnsState(columnsState);\n  }, [logger, apiRef, setGridColumnsState, props.columns]);\n  React.useEffect(() => {\n    if (props.columnVisibilityModel !== undefined) {\n      apiRef.current.setColumnVisibilityModel(props.columnVisibilityModel);\n    }\n  }, [apiRef, logger, props.columnVisibilityModel]);\n}\n\nfunction mergeColumnsState(columnsState) {\n  return state => _extends({}, state, {\n    columns: columnsState\n  });\n}","map":{"version":3,"names":["_extends","React","useGridApiMethod","useGridLogger","gridColumnFieldsSelector","gridColumnDefinitionsSelector","gridColumnLookupSelector","gridColumnsStateSelector","gridColumnVisibilityModelSelector","gridVisibleColumnDefinitionsSelector","gridColumnPositionsSelector","GridSignature","useGridApiEventHandler","useGridRegisterPipeProcessor","useGridRegisterPipeApplier","EMPTY_PINNED_COLUMN_FIELDS","hydrateColumnsWidth","createColumnsState","COLUMNS_DIMENSION_PROPERTIES","GridPreferencePanelsValue","jsx","_jsx","columnsStateInitializer","state","props","apiRef","columnsState","columnsToUpsert","columns","initialState","columnVisibilityModel","keepOnlyColumnsToUpsert","pinnedColumns","useGridColumns","logger","previousColumnsProp","useRef","current","registerControlState","stateId","propModel","propOnChange","onColumnVisibilityModelChange","stateSelector","changeEvent","setGridColumnsState","useCallback","debug","setState","mergeColumnsState","publishEvent","orderedFields","updateRenderContext","forceUpdate","getColumn","field","getAllColumns","getVisibleColumns","getColumnIndex","useVisibleColumns","findIndex","col","getColumnPosition","index","setColumnVisibilityModel","model","currentModel","undefined","updateColumns","setColumnVisibility","isVisible","isCurrentlyVisible","newModel","getColumnIndexRelativeToVisibleColumns","allColumns","setColumnIndex","targetIndexPosition","oldIndexPosition","updatedColumns","fieldRemoved","splice","params","column","targetIndex","oldIndex","setColumnWidth","width","lookup","newColumn","hasBeenResized","getRootDimensions","element","getColumnHeaderElement","colDef","columnApi","columnReorderApi","signature","DataGrid","stateExportPreProcessing","prevState","context","columnsStateToExport","columnVisibilityModelToExport","shouldExportColumnVisibilityModel","exportOnlyDirtyModels","Object","keys","length","dimensions","forEach","colDefDimensions","propertyName","propertyValue","Infinity","stateRestorePreProcessing","columnVisibilityModelToImport","stateToRestore","preferencePanelPreProcessing","initialValue","value","ColumnsPanel","slots","columnsPanel","slotProps","addColumnMenuItems","columnMenuItems","disableColumnSelector","prevInnerWidth","handleGridSizeChange","viewportInnerSize","hydrateColumns","info","isFirstRender","useEffect"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/@mui/x-data-grid/hooks/features/columns/useGridColumns.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnFieldsSelector, gridColumnDefinitionsSelector, gridColumnLookupSelector, gridColumnsStateSelector, gridColumnVisibilityModelSelector, gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector } from './gridColumnsSelector';\nimport { GridSignature, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridRegisterPipeProcessor, useGridRegisterPipeApplier } from '../../core/pipeProcessing';\nimport { EMPTY_PINNED_COLUMN_FIELDS } from './gridColumnsInterfaces';\nimport { hydrateColumnsWidth, createColumnsState, COLUMNS_DIMENSION_PROPERTIES } from './gridColumnsUtils';\nimport { GridPreferencePanelsValue } from '../preferencesPanel';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const columnsStateInitializer = (state, props, apiRef) => {\n  const columnsState = createColumnsState({\n    apiRef,\n    columnsToUpsert: props.columns,\n    initialState: props.initialState?.columns,\n    columnVisibilityModel: props.columnVisibilityModel ?? props.initialState?.columns?.columnVisibilityModel ?? {},\n    keepOnlyColumnsToUpsert: true\n  });\n  return _extends({}, state, {\n    columns: columnsState,\n    // In pro/premium, this part of the state is defined. We give it an empty but defined value\n    // for the community version.\n    pinnedColumns: state.pinnedColumns ?? EMPTY_PINNED_COLUMN_FIELDS\n  });\n};\n\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridDimensions (method, event) - can be after\n * TODO: Impossible priority - useGridParamsApi also needs to be after useGridColumns\n */\nexport function useGridColumns(apiRef, props) {\n  const logger = useGridLogger(apiRef, 'useGridColumns');\n  const previousColumnsProp = React.useRef(props.columns);\n  apiRef.current.registerControlState({\n    stateId: 'visibleColumns',\n    propModel: props.columnVisibilityModel,\n    propOnChange: props.onColumnVisibilityModelChange,\n    stateSelector: gridColumnVisibilityModelSelector,\n    changeEvent: 'columnVisibilityModelChange'\n  });\n  const setGridColumnsState = React.useCallback(columnsState => {\n    logger.debug('Updating columns state.');\n    apiRef.current.setState(mergeColumnsState(columnsState));\n    apiRef.current.publishEvent('columnsChange', columnsState.orderedFields);\n    apiRef.current.updateRenderContext?.();\n    apiRef.current.forceUpdate();\n  }, [logger, apiRef]);\n\n  /**\n   * API METHODS\n   */\n  const getColumn = React.useCallback(field => gridColumnLookupSelector(apiRef)[field], [apiRef]);\n  const getAllColumns = React.useCallback(() => gridColumnDefinitionsSelector(apiRef), [apiRef]);\n  const getVisibleColumns = React.useCallback(() => gridVisibleColumnDefinitionsSelector(apiRef), [apiRef]);\n  const getColumnIndex = React.useCallback((field, useVisibleColumns = true) => {\n    const columns = useVisibleColumns ? gridVisibleColumnDefinitionsSelector(apiRef) : gridColumnDefinitionsSelector(apiRef);\n    return columns.findIndex(col => col.field === field);\n  }, [apiRef]);\n  const getColumnPosition = React.useCallback(field => {\n    const index = getColumnIndex(field);\n    return gridColumnPositionsSelector(apiRef)[index];\n  }, [apiRef, getColumnIndex]);\n  const setColumnVisibilityModel = React.useCallback(model => {\n    const currentModel = gridColumnVisibilityModelSelector(apiRef);\n    if (currentModel !== model) {\n      apiRef.current.setState(state => _extends({}, state, {\n        columns: createColumnsState({\n          apiRef,\n          columnsToUpsert: [],\n          initialState: undefined,\n          columnVisibilityModel: model,\n          keepOnlyColumnsToUpsert: false\n        })\n      }));\n      apiRef.current.updateRenderContext?.();\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef]);\n  const updateColumns = React.useCallback(columns => {\n    const columnsState = createColumnsState({\n      apiRef,\n      columnsToUpsert: columns,\n      initialState: undefined,\n      keepOnlyColumnsToUpsert: false\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, setGridColumnsState]);\n  const setColumnVisibility = React.useCallback((field, isVisible) => {\n    const columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef);\n    const isCurrentlyVisible = columnVisibilityModel[field] ?? true;\n    if (isVisible !== isCurrentlyVisible) {\n      const newModel = _extends({}, columnVisibilityModel, {\n        [field]: isVisible\n      });\n      apiRef.current.setColumnVisibilityModel(newModel);\n    }\n  }, [apiRef]);\n  const getColumnIndexRelativeToVisibleColumns = React.useCallback(field => {\n    const allColumns = gridColumnFieldsSelector(apiRef);\n    return allColumns.findIndex(col => col === field);\n  }, [apiRef]);\n  const setColumnIndex = React.useCallback((field, targetIndexPosition) => {\n    const allColumns = gridColumnFieldsSelector(apiRef);\n    const oldIndexPosition = getColumnIndexRelativeToVisibleColumns(field);\n    if (oldIndexPosition === targetIndexPosition) {\n      return;\n    }\n    logger.debug(`Moving column ${field} to index ${targetIndexPosition}`);\n    const updatedColumns = [...allColumns];\n    const fieldRemoved = updatedColumns.splice(oldIndexPosition, 1)[0];\n    updatedColumns.splice(targetIndexPosition, 0, fieldRemoved);\n    setGridColumnsState(_extends({}, gridColumnsStateSelector(apiRef.current.state), {\n      orderedFields: updatedColumns\n    }));\n    const params = {\n      column: apiRef.current.getColumn(field),\n      targetIndex: apiRef.current.getColumnIndexRelativeToVisibleColumns(field),\n      oldIndex: oldIndexPosition\n    };\n    apiRef.current.publishEvent('columnIndexChange', params);\n  }, [apiRef, logger, setGridColumnsState, getColumnIndexRelativeToVisibleColumns]);\n  const setColumnWidth = React.useCallback((field, width) => {\n    logger.debug(`Updating column ${field} width to ${width}`);\n    const columnsState = gridColumnsStateSelector(apiRef.current.state);\n    const column = columnsState.lookup[field];\n    const newColumn = _extends({}, column, {\n      width,\n      hasBeenResized: true\n    });\n    setGridColumnsState(hydrateColumnsWidth(_extends({}, columnsState, {\n      lookup: _extends({}, columnsState.lookup, {\n        [field]: newColumn\n      })\n    }), apiRef.current.getRootDimensions()));\n    apiRef.current.publishEvent('columnWidthChange', {\n      element: apiRef.current.getColumnHeaderElement(field),\n      colDef: newColumn,\n      width\n    });\n  }, [apiRef, logger, setGridColumnsState]);\n  const columnApi = {\n    getColumn,\n    getAllColumns,\n    getColumnIndex,\n    getColumnPosition,\n    getVisibleColumns,\n    getColumnIndexRelativeToVisibleColumns,\n    updateColumns,\n    setColumnVisibilityModel,\n    setColumnVisibility,\n    setColumnWidth\n  };\n  const columnReorderApi = {\n    setColumnIndex\n  };\n  useGridApiMethod(apiRef, columnApi, 'public');\n  useGridApiMethod(apiRef, columnReorderApi, props.signature === GridSignature.DataGrid ? 'private' : 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    const columnsStateToExport = {};\n    const columnVisibilityModelToExport = gridColumnVisibilityModelSelector(apiRef);\n    const shouldExportColumnVisibilityModel =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the model is controlled\n    props.columnVisibilityModel != null ||\n    // Always export if the model has been initialized\n    // TODO v6 Do a nullish check instead to export even if the initial model equals \"{}\"\n    Object.keys(props.initialState?.columns?.columnVisibilityModel ?? {}).length > 0 ||\n    // Always export if the model is not empty\n    Object.keys(columnVisibilityModelToExport).length > 0;\n    if (shouldExportColumnVisibilityModel) {\n      columnsStateToExport.columnVisibilityModel = columnVisibilityModelToExport;\n    }\n    columnsStateToExport.orderedFields = gridColumnFieldsSelector(apiRef);\n    const columns = gridColumnDefinitionsSelector(apiRef);\n    const dimensions = {};\n    columns.forEach(colDef => {\n      if (colDef.hasBeenResized) {\n        const colDefDimensions = {};\n        COLUMNS_DIMENSION_PROPERTIES.forEach(propertyName => {\n          let propertyValue = colDef[propertyName];\n          if (propertyValue === Infinity) {\n            propertyValue = -1;\n          }\n          colDefDimensions[propertyName] = propertyValue;\n        });\n        dimensions[colDef.field] = colDefDimensions;\n      }\n    });\n    if (Object.keys(dimensions).length > 0) {\n      columnsStateToExport.dimensions = dimensions;\n    }\n    return _extends({}, prevState, {\n      columns: columnsStateToExport\n    });\n  }, [apiRef, props.columnVisibilityModel, props.initialState?.columns]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const columnVisibilityModelToImport = context.stateToRestore.columns?.columnVisibilityModel;\n    const initialState = context.stateToRestore.columns;\n    if (columnVisibilityModelToImport == null && initialState == null) {\n      return params;\n    }\n    const columnsState = createColumnsState({\n      apiRef,\n      columnsToUpsert: [],\n      initialState,\n      columnVisibilityModel: columnVisibilityModelToImport,\n      keepOnlyColumnsToUpsert: false\n    });\n    apiRef.current.setState(mergeColumnsState(columnsState));\n    if (initialState != null) {\n      apiRef.current.publishEvent('columnsChange', columnsState.orderedFields);\n    }\n    return params;\n  }, [apiRef]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === GridPreferencePanelsValue.columns) {\n      const ColumnsPanel = props.slots.columnsPanel;\n      return /*#__PURE__*/_jsx(ColumnsPanel, _extends({}, props.slotProps?.columnsPanel));\n    }\n    return initialValue;\n  }, [props.slots.columnsPanel, props.slotProps?.columnsPanel]);\n  const addColumnMenuItems = React.useCallback(columnMenuItems => {\n    if (props.disableColumnSelector) {\n      return columnMenuItems;\n    }\n    return [...columnMenuItems, 'columnMenuColumnsItem'];\n  }, [props.disableColumnSelector]);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuItems);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n\n  /*\n   * EVENTS\n   */\n\n  const prevInnerWidth = React.useRef(null);\n  const handleGridSizeChange = viewportInnerSize => {\n    if (prevInnerWidth.current !== viewportInnerSize.width) {\n      prevInnerWidth.current = viewportInnerSize.width;\n      setGridColumnsState(hydrateColumnsWidth(gridColumnsStateSelector(apiRef.current.state), apiRef.current.getRootDimensions()));\n    }\n  };\n  useGridApiEventHandler(apiRef, 'viewportInnerSizeChange', handleGridSizeChange);\n\n  /**\n   * APPLIERS\n   */\n  const hydrateColumns = React.useCallback(() => {\n    logger.info(`Columns pipe processing have changed, regenerating the columns`);\n    const columnsState = createColumnsState({\n      apiRef,\n      columnsToUpsert: [],\n      initialState: undefined,\n      keepOnlyColumnsToUpsert: false\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, logger, setGridColumnsState]);\n  useGridRegisterPipeApplier(apiRef, 'hydrateColumns', hydrateColumns);\n\n  /*\n   * EFFECTS\n   */\n  // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridColumns`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    logger.info(`GridColumns have changed, new length ${props.columns.length}`);\n    if (previousColumnsProp.current === props.columns) {\n      return;\n    }\n    const columnsState = createColumnsState({\n      apiRef,\n      initialState: undefined,\n      // If the user provides a model, we don't want to set it in the state here because it has it's dedicated `useEffect` which calls `setColumnVisibilityModel`\n      columnsToUpsert: props.columns,\n      keepOnlyColumnsToUpsert: true\n    });\n    previousColumnsProp.current = props.columns;\n    setGridColumnsState(columnsState);\n  }, [logger, apiRef, setGridColumnsState, props.columns]);\n  React.useEffect(() => {\n    if (props.columnVisibilityModel !== undefined) {\n      apiRef.current.setColumnVisibilityModel(props.columnVisibilityModel);\n    }\n  }, [apiRef, logger, props.columnVisibilityModel]);\n}\nfunction mergeColumnsState(columnsState) {\n  return state => _extends({}, state, {\n    columns: columnsState\n  });\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}