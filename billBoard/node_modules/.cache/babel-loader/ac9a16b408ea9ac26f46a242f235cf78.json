{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { GRID_STRING_COL_DEF } from './gridStringColDef';\nimport { renderEditSingleSelectCell } from '../components/cell/GridEditSingleSelectCell';\nimport { getGridSingleSelectOperators } from './gridSingleSelectOperators';\nimport { getValueOptions, isSingleSelectColDef } from '../components/panel/filterPanel/filterPanelUtils';\nimport { isObject } from '../utils/utils';\n\nconst isArrayOfObjects = options => {\n  return typeof options[0] === 'object';\n};\n\nconst defaultGetOptionValue = value => {\n  return isObject(value) ? value.value : value;\n};\n\nconst defaultGetOptionLabel = value => {\n  return isObject(value) ? value.label : String(value);\n};\n\nexport const GRID_SINGLE_SELECT_COL_DEF = _extends({}, GRID_STRING_COL_DEF, {\n  type: 'singleSelect',\n  getOptionLabel: defaultGetOptionLabel,\n  getOptionValue: defaultGetOptionValue,\n\n  valueFormatter(value, row, colDef, apiRef) {\n    // const { id, field, value, api } = params;\n    const rowId = apiRef.current.getRowId(row);\n\n    if (!isSingleSelectColDef(colDef)) {\n      return '';\n    }\n\n    const valueOptions = getValueOptions(colDef, {\n      id: rowId,\n      row\n    });\n\n    if (value == null) {\n      return '';\n    }\n\n    if (!valueOptions) {\n      return value;\n    }\n\n    if (!isArrayOfObjects(valueOptions)) {\n      return colDef.getOptionLabel(value);\n    }\n\n    const valueOption = valueOptions.find(option => colDef.getOptionValue(option) === value);\n    return valueOption ? colDef.getOptionLabel(valueOption) : '';\n  },\n\n  renderEditCell: renderEditSingleSelectCell,\n  filterOperators: getGridSingleSelectOperators(),\n  // @ts-ignore\n  pastedValueParser: (value, row, column) => {\n    const colDef = column;\n    const valueOptions = getValueOptions(colDef) || [];\n    const getOptionValue = colDef.getOptionValue;\n    const valueOption = valueOptions.find(option => {\n      if (getOptionValue(option) === value) {\n        return true;\n      }\n\n      return false;\n    });\n\n    if (valueOption) {\n      return value;\n    } // do not paste the value if it is not in the valueOptions\n\n\n    return undefined;\n  }\n});","map":{"version":3,"names":["_extends","GRID_STRING_COL_DEF","renderEditSingleSelectCell","getGridSingleSelectOperators","getValueOptions","isSingleSelectColDef","isObject","isArrayOfObjects","options","defaultGetOptionValue","value","defaultGetOptionLabel","label","String","GRID_SINGLE_SELECT_COL_DEF","type","getOptionLabel","getOptionValue","valueFormatter","row","colDef","apiRef","rowId","current","getRowId","valueOptions","id","valueOption","find","option","renderEditCell","filterOperators","pastedValueParser","column","undefined"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/@mui/x-data-grid/colDef/gridSingleSelectColDef.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { GRID_STRING_COL_DEF } from './gridStringColDef';\nimport { renderEditSingleSelectCell } from '../components/cell/GridEditSingleSelectCell';\nimport { getGridSingleSelectOperators } from './gridSingleSelectOperators';\nimport { getValueOptions, isSingleSelectColDef } from '../components/panel/filterPanel/filterPanelUtils';\nimport { isObject } from '../utils/utils';\nconst isArrayOfObjects = options => {\n  return typeof options[0] === 'object';\n};\nconst defaultGetOptionValue = value => {\n  return isObject(value) ? value.value : value;\n};\nconst defaultGetOptionLabel = value => {\n  return isObject(value) ? value.label : String(value);\n};\nexport const GRID_SINGLE_SELECT_COL_DEF = _extends({}, GRID_STRING_COL_DEF, {\n  type: 'singleSelect',\n  getOptionLabel: defaultGetOptionLabel,\n  getOptionValue: defaultGetOptionValue,\n  valueFormatter(value, row, colDef, apiRef) {\n    // const { id, field, value, api } = params;\n    const rowId = apiRef.current.getRowId(row);\n    if (!isSingleSelectColDef(colDef)) {\n      return '';\n    }\n    const valueOptions = getValueOptions(colDef, {\n      id: rowId,\n      row\n    });\n    if (value == null) {\n      return '';\n    }\n    if (!valueOptions) {\n      return value;\n    }\n    if (!isArrayOfObjects(valueOptions)) {\n      return colDef.getOptionLabel(value);\n    }\n    const valueOption = valueOptions.find(option => colDef.getOptionValue(option) === value);\n    return valueOption ? colDef.getOptionLabel(valueOption) : '';\n  },\n  renderEditCell: renderEditSingleSelectCell,\n  filterOperators: getGridSingleSelectOperators(),\n  // @ts-ignore\n  pastedValueParser: (value, row, column) => {\n    const colDef = column;\n    const valueOptions = getValueOptions(colDef) || [];\n    const getOptionValue = colDef.getOptionValue;\n    const valueOption = valueOptions.find(option => {\n      if (getOptionValue(option) === value) {\n        return true;\n      }\n      return false;\n    });\n    if (valueOption) {\n      return value;\n    }\n    // do not paste the value if it is not in the valueOptions\n    return undefined;\n  }\n});"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,SAASC,mBAAT,QAAoC,oBAApC;AACA,SAASC,0BAAT,QAA2C,6CAA3C;AACA,SAASC,4BAAT,QAA6C,6BAA7C;AACA,SAASC,eAAT,EAA0BC,oBAA1B,QAAsD,kDAAtD;AACA,SAASC,QAAT,QAAyB,gBAAzB;;AACA,MAAMC,gBAAgB,GAAGC,OAAO,IAAI;EAClC,OAAO,OAAOA,OAAO,CAAC,CAAD,CAAd,KAAsB,QAA7B;AACD,CAFD;;AAGA,MAAMC,qBAAqB,GAAGC,KAAK,IAAI;EACrC,OAAOJ,QAAQ,CAACI,KAAD,CAAR,GAAkBA,KAAK,CAACA,KAAxB,GAAgCA,KAAvC;AACD,CAFD;;AAGA,MAAMC,qBAAqB,GAAGD,KAAK,IAAI;EACrC,OAAOJ,QAAQ,CAACI,KAAD,CAAR,GAAkBA,KAAK,CAACE,KAAxB,GAAgCC,MAAM,CAACH,KAAD,CAA7C;AACD,CAFD;;AAGA,OAAO,MAAMI,0BAA0B,GAAGd,QAAQ,CAAC,EAAD,EAAKC,mBAAL,EAA0B;EAC1Ec,IAAI,EAAE,cADoE;EAE1EC,cAAc,EAAEL,qBAF0D;EAG1EM,cAAc,EAAER,qBAH0D;;EAI1ES,cAAc,CAACR,KAAD,EAAQS,GAAR,EAAaC,MAAb,EAAqBC,MAArB,EAA6B;IACzC;IACA,MAAMC,KAAK,GAAGD,MAAM,CAACE,OAAP,CAAeC,QAAf,CAAwBL,GAAxB,CAAd;;IACA,IAAI,CAACd,oBAAoB,CAACe,MAAD,CAAzB,EAAmC;MACjC,OAAO,EAAP;IACD;;IACD,MAAMK,YAAY,GAAGrB,eAAe,CAACgB,MAAD,EAAS;MAC3CM,EAAE,EAAEJ,KADuC;MAE3CH;IAF2C,CAAT,CAApC;;IAIA,IAAIT,KAAK,IAAI,IAAb,EAAmB;MACjB,OAAO,EAAP;IACD;;IACD,IAAI,CAACe,YAAL,EAAmB;MACjB,OAAOf,KAAP;IACD;;IACD,IAAI,CAACH,gBAAgB,CAACkB,YAAD,CAArB,EAAqC;MACnC,OAAOL,MAAM,CAACJ,cAAP,CAAsBN,KAAtB,CAAP;IACD;;IACD,MAAMiB,WAAW,GAAGF,YAAY,CAACG,IAAb,CAAkBC,MAAM,IAAIT,MAAM,CAACH,cAAP,CAAsBY,MAAtB,MAAkCnB,KAA9D,CAApB;IACA,OAAOiB,WAAW,GAAGP,MAAM,CAACJ,cAAP,CAAsBW,WAAtB,CAAH,GAAwC,EAA1D;EACD,CAzByE;;EA0B1EG,cAAc,EAAE5B,0BA1B0D;EA2B1E6B,eAAe,EAAE5B,4BAA4B,EA3B6B;EA4B1E;EACA6B,iBAAiB,EAAE,CAACtB,KAAD,EAAQS,GAAR,EAAac,MAAb,KAAwB;IACzC,MAAMb,MAAM,GAAGa,MAAf;IACA,MAAMR,YAAY,GAAGrB,eAAe,CAACgB,MAAD,CAAf,IAA2B,EAAhD;IACA,MAAMH,cAAc,GAAGG,MAAM,CAACH,cAA9B;IACA,MAAMU,WAAW,GAAGF,YAAY,CAACG,IAAb,CAAkBC,MAAM,IAAI;MAC9C,IAAIZ,cAAc,CAACY,MAAD,CAAd,KAA2BnB,KAA/B,EAAsC;QACpC,OAAO,IAAP;MACD;;MACD,OAAO,KAAP;IACD,CALmB,CAApB;;IAMA,IAAIiB,WAAJ,EAAiB;MACf,OAAOjB,KAAP;IACD,CAZwC,CAazC;;;IACA,OAAOwB,SAAP;EACD;AA5CyE,CAA1B,CAA3C"},"metadata":{},"sourceType":"module"}