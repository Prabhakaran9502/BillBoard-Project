{"ast":null,"code":"import useControlled from '@mui/utils/useControlled';\nimport useEventCallback from '@mui/utils/useEventCallback';\nexport const useRangePosition = (props, singleInputFieldRef) => {\n  const [rangePosition, setRangePosition] = useControlled({\n    name: 'useRangePosition',\n    state: 'rangePosition',\n    controlled: props.rangePosition,\n    default: props.defaultRangePosition ?? 'start'\n  }); // When using a single input field,\n  // we want to select the 1st section of the edited date when updating the range position.\n\n  const syncRangePositionWithSingleInputField = newRangePosition => {\n    if (singleInputFieldRef?.current == null) {\n      return;\n    }\n\n    const sections = singleInputFieldRef.current.getSections();\n    const targetActiveSectionIndex = newRangePosition === 'start' ? 0 : sections.length / 2;\n    singleInputFieldRef.current.setSelectedSections(targetActiveSectionIndex);\n  };\n\n  const handleRangePositionChange = useEventCallback(newRangePosition => {\n    setRangePosition(newRangePosition);\n    props.onRangePositionChange?.(newRangePosition);\n    syncRangePositionWithSingleInputField(newRangePosition);\n  });\n  return {\n    rangePosition,\n    onRangePositionChange: handleRangePositionChange\n  };\n};","map":{"version":3,"names":["useControlled","useEventCallback","useRangePosition","props","singleInputFieldRef","rangePosition","setRangePosition","name","state","controlled","default","defaultRangePosition","syncRangePositionWithSingleInputField","newRangePosition","current","sections","getSections","targetActiveSectionIndex","length","setSelectedSections","handleRangePositionChange","onRangePositionChange"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/@mui/x-date-pickers-pro/internals/hooks/useRangePosition.js"],"sourcesContent":["import useControlled from '@mui/utils/useControlled';\nimport useEventCallback from '@mui/utils/useEventCallback';\nexport const useRangePosition = (props, singleInputFieldRef) => {\n  const [rangePosition, setRangePosition] = useControlled({\n    name: 'useRangePosition',\n    state: 'rangePosition',\n    controlled: props.rangePosition,\n    default: props.defaultRangePosition ?? 'start'\n  });\n\n  // When using a single input field,\n  // we want to select the 1st section of the edited date when updating the range position.\n  const syncRangePositionWithSingleInputField = newRangePosition => {\n    if (singleInputFieldRef?.current == null) {\n      return;\n    }\n    const sections = singleInputFieldRef.current.getSections();\n    const targetActiveSectionIndex = newRangePosition === 'start' ? 0 : sections.length / 2;\n    singleInputFieldRef.current.setSelectedSections(targetActiveSectionIndex);\n  };\n  const handleRangePositionChange = useEventCallback(newRangePosition => {\n    setRangePosition(newRangePosition);\n    props.onRangePositionChange?.(newRangePosition);\n    syncRangePositionWithSingleInputField(newRangePosition);\n  });\n  return {\n    rangePosition,\n    onRangePositionChange: handleRangePositionChange\n  };\n};"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,0BAA1B;AACA,OAAOC,gBAAP,MAA6B,6BAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,CAACC,KAAD,EAAQC,mBAAR,KAAgC;EAC9D,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCN,aAAa,CAAC;IACtDO,IAAI,EAAE,kBADgD;IAEtDC,KAAK,EAAE,eAF+C;IAGtDC,UAAU,EAAEN,KAAK,CAACE,aAHoC;IAItDK,OAAO,EAAEP,KAAK,CAACQ,oBAAN,IAA8B;EAJe,CAAD,CAAvD,CAD8D,CAQ9D;EACA;;EACA,MAAMC,qCAAqC,GAAGC,gBAAgB,IAAI;IAChE,IAAIT,mBAAmB,EAAEU,OAArB,IAAgC,IAApC,EAA0C;MACxC;IACD;;IACD,MAAMC,QAAQ,GAAGX,mBAAmB,CAACU,OAApB,CAA4BE,WAA5B,EAAjB;IACA,MAAMC,wBAAwB,GAAGJ,gBAAgB,KAAK,OAArB,GAA+B,CAA/B,GAAmCE,QAAQ,CAACG,MAAT,GAAkB,CAAtF;IACAd,mBAAmB,CAACU,OAApB,CAA4BK,mBAA5B,CAAgDF,wBAAhD;EACD,CAPD;;EAQA,MAAMG,yBAAyB,GAAGnB,gBAAgB,CAACY,gBAAgB,IAAI;IACrEP,gBAAgB,CAACO,gBAAD,CAAhB;IACAV,KAAK,CAACkB,qBAAN,GAA8BR,gBAA9B;IACAD,qCAAqC,CAACC,gBAAD,CAArC;EACD,CAJiD,CAAlD;EAKA,OAAO;IACLR,aADK;IAELgB,qBAAqB,EAAED;EAFlB,CAAP;AAID,CA3BM"},"metadata":{},"sourceType":"module"}