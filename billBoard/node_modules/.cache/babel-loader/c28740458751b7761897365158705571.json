{"ast":null,"code":"import { GRID_ROOT_GROUP_ID } from '@mui/x-data-grid'; // Single-linked list node\n\nclass Node {\n  constructor(data, next) {\n    this.next = void 0;\n    this.data = void 0;\n    this.next = next;\n    this.data = data;\n  }\n\n  insertAfter(list) {\n    if (!list.first || !list.last) {\n      return;\n    }\n\n    const next = this.next;\n    this.next = list.first;\n    list.last.next = next;\n  }\n\n} // Single-linked list container\n\n\nclass List {\n  constructor(first, last) {\n    this.first = void 0;\n    this.last = void 0;\n    this.first = first;\n    this.last = last;\n  }\n\n  data() {\n    const array = [];\n    this.forEach(node => {\n      array.push(node.data);\n    });\n    return array;\n  }\n\n  forEach(fn) {\n    let current = this.first;\n\n    while (current !== null) {\n      fn(current);\n      current = current.next;\n    }\n  }\n\n  static from(array) {\n    if (array.length === 0) {\n      return new List(null, null);\n    }\n\n    let index = 0;\n    const first = new Node(array[index], null);\n    let current = first;\n\n    while (index + 1 < array.length) {\n      index += 1;\n      const node = new Node(array[index], null);\n      current.next = node;\n      current = node;\n    }\n\n    return new List(first, current);\n  }\n\n}\n\nexport const sortRowTree = params => {\n  const {\n    rowTree,\n    disableChildrenSorting,\n    sortRowList,\n    shouldRenderGroupBelowLeaves\n  } = params;\n  const sortedGroupedByParentRows = new Map();\n\n  const sortGroup = node => {\n    const shouldSortGroup = !!sortRowList && (!disableChildrenSorting || node.depth === -1);\n    let sortedRowIds;\n\n    if (shouldSortGroup) {\n      for (let i = 0; i < node.children.length; i += 1) {\n        const childNode = rowTree[node.children[i]];\n\n        if (childNode.type === 'group') {\n          sortGroup(childNode);\n        }\n      }\n\n      sortedRowIds = sortRowList(node.children.map(childId => rowTree[childId]));\n    } else if (shouldRenderGroupBelowLeaves) {\n      const childrenLeaves = [];\n      const childrenGroups = [];\n\n      for (let i = 0; i < node.children.length; i += 1) {\n        const childId = node.children[i];\n        const childNode = rowTree[childId];\n\n        if (childNode.type === 'group') {\n          sortGroup(childNode);\n          childrenGroups.push(childId);\n        } else if (childNode.type === 'leaf') {\n          childrenLeaves.push(childId);\n        }\n      }\n\n      sortedRowIds = [...childrenLeaves, ...childrenGroups];\n    } else {\n      for (let i = 0; i < node.children.length; i += 1) {\n        const childNode = rowTree[node.children[i]];\n\n        if (childNode.type === 'group') {\n          sortGroup(childNode);\n        }\n      }\n\n      sortedRowIds = [...node.children];\n    }\n\n    if (node.footerId != null) {\n      sortedRowIds.push(node.footerId);\n    }\n\n    sortedGroupedByParentRows.set(node.id, sortedRowIds);\n  };\n\n  sortGroup(rowTree[GRID_ROOT_GROUP_ID]);\n  const rootList = List.from(sortedGroupedByParentRows.get(GRID_ROOT_GROUP_ID));\n  rootList.forEach(node => {\n    const children = sortedGroupedByParentRows.get(node.data);\n\n    if (children?.length) {\n      node.insertAfter(List.from(children));\n    }\n  });\n  return rootList.data();\n};","map":{"version":3,"names":["GRID_ROOT_GROUP_ID","Node","constructor","data","next","insertAfter","list","first","last","List","array","forEach","node","push","fn","current","from","length","index","sortRowTree","params","rowTree","disableChildrenSorting","sortRowList","shouldRenderGroupBelowLeaves","sortedGroupedByParentRows","Map","sortGroup","shouldSortGroup","depth","sortedRowIds","i","children","childNode","type","map","childId","childrenLeaves","childrenGroups","footerId","set","id","rootList","get"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/@mui/x-data-grid-pro/esm/utils/tree/sortRowTree.js"],"sourcesContent":["import { GRID_ROOT_GROUP_ID } from '@mui/x-data-grid';\n// Single-linked list node\nclass Node {\n  constructor(data, next) {\n    this.next = void 0;\n    this.data = void 0;\n    this.next = next;\n    this.data = data;\n  }\n  insertAfter(list) {\n    if (!list.first || !list.last) {\n      return;\n    }\n    const next = this.next;\n    this.next = list.first;\n    list.last.next = next;\n  }\n}\n\n// Single-linked list container\nclass List {\n  constructor(first, last) {\n    this.first = void 0;\n    this.last = void 0;\n    this.first = first;\n    this.last = last;\n  }\n  data() {\n    const array = [];\n    this.forEach(node => {\n      array.push(node.data);\n    });\n    return array;\n  }\n  forEach(fn) {\n    let current = this.first;\n    while (current !== null) {\n      fn(current);\n      current = current.next;\n    }\n  }\n  static from(array) {\n    if (array.length === 0) {\n      return new List(null, null);\n    }\n    let index = 0;\n    const first = new Node(array[index], null);\n    let current = first;\n    while (index + 1 < array.length) {\n      index += 1;\n      const node = new Node(array[index], null);\n      current.next = node;\n      current = node;\n    }\n    return new List(first, current);\n  }\n}\nexport const sortRowTree = params => {\n  const {\n    rowTree,\n    disableChildrenSorting,\n    sortRowList,\n    shouldRenderGroupBelowLeaves\n  } = params;\n  const sortedGroupedByParentRows = new Map();\n  const sortGroup = node => {\n    const shouldSortGroup = !!sortRowList && (!disableChildrenSorting || node.depth === -1);\n    let sortedRowIds;\n    if (shouldSortGroup) {\n      for (let i = 0; i < node.children.length; i += 1) {\n        const childNode = rowTree[node.children[i]];\n        if (childNode.type === 'group') {\n          sortGroup(childNode);\n        }\n      }\n      sortedRowIds = sortRowList(node.children.map(childId => rowTree[childId]));\n    } else if (shouldRenderGroupBelowLeaves) {\n      const childrenLeaves = [];\n      const childrenGroups = [];\n      for (let i = 0; i < node.children.length; i += 1) {\n        const childId = node.children[i];\n        const childNode = rowTree[childId];\n        if (childNode.type === 'group') {\n          sortGroup(childNode);\n          childrenGroups.push(childId);\n        } else if (childNode.type === 'leaf') {\n          childrenLeaves.push(childId);\n        }\n      }\n      sortedRowIds = [...childrenLeaves, ...childrenGroups];\n    } else {\n      for (let i = 0; i < node.children.length; i += 1) {\n        const childNode = rowTree[node.children[i]];\n        if (childNode.type === 'group') {\n          sortGroup(childNode);\n        }\n      }\n      sortedRowIds = [...node.children];\n    }\n    if (node.footerId != null) {\n      sortedRowIds.push(node.footerId);\n    }\n    sortedGroupedByParentRows.set(node.id, sortedRowIds);\n  };\n  sortGroup(rowTree[GRID_ROOT_GROUP_ID]);\n  const rootList = List.from(sortedGroupedByParentRows.get(GRID_ROOT_GROUP_ID));\n  rootList.forEach(node => {\n    const children = sortedGroupedByParentRows.get(node.data);\n    if (children?.length) {\n      node.insertAfter(List.from(children));\n    }\n  });\n  return rootList.data();\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}