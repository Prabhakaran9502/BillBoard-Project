{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAggregationLookup = void 0;\n\nvar _xDataGridPro = require(\"@mui/x-data-grid-pro\");\n\nvar _gridAggregationUtils = require(\"./gridAggregationUtils\");\n\nvar _gridAggregationSelectors = require(\"./gridAggregationSelectors\");\n\nconst getAggregationCellValue = _ref => {\n  let {\n    apiRef,\n    groupId,\n    field,\n    aggregationFunction,\n    aggregationRowsScope\n  } = _ref;\n  const filteredRowsLookup = (0, _xDataGridPro.gridFilteredRowsLookupSelector)(apiRef);\n  const rowIds = apiRef.current.getRowGroupChildren({\n    groupId\n  });\n  const values = [];\n  rowIds.forEach(rowId => {\n    if (aggregationRowsScope === 'filtered' && filteredRowsLookup[rowId] === false) {\n      return;\n    } // If the row is a group, we want to aggregate based on its children\n    // For instance in the following tree, we want the aggregated values of A to be based on A.A, A.B.A and A.B.B but not A.B\n    // A\n    //   A.A\n    //   A.B\n    //     A.B.A\n    //     A.B.B\n\n\n    const rowNode = apiRef.current.getRowNode(rowId);\n\n    if (rowNode.type === 'group') {\n      return;\n    }\n\n    if (typeof aggregationFunction.getCellValue === 'function') {\n      const row = apiRef.current.getRow(rowId);\n      values.push(aggregationFunction.getCellValue({\n        row\n      }));\n    } else {\n      values.push(apiRef.current.getCellValue(rowId, field));\n    }\n  });\n  return aggregationFunction.apply({\n    values,\n    groupId,\n    field // Added per user request in https://github.com/mui/mui-x/issues/6995#issuecomment-1327423455\n\n  });\n};\n\nconst getGroupAggregatedValue = _ref2 => {\n  let {\n    groupId,\n    apiRef,\n    aggregationRowsScope,\n    aggregatedFields,\n    aggregationRules,\n    position\n  } = _ref2;\n  const groupAggregationLookup = {};\n\n  for (let j = 0; j < aggregatedFields.length; j += 1) {\n    const aggregatedField = aggregatedFields[j];\n    const columnAggregationRules = aggregationRules[aggregatedField];\n    groupAggregationLookup[aggregatedField] = {\n      position,\n      value: getAggregationCellValue({\n        apiRef,\n        groupId,\n        field: aggregatedField,\n        aggregationFunction: columnAggregationRules.aggregationFunction,\n        aggregationRowsScope\n      })\n    };\n  }\n\n  return groupAggregationLookup;\n};\n\nconst createAggregationLookup = _ref3 => {\n  let {\n    apiRef,\n    aggregationFunctions,\n    aggregationRowsScope,\n    getAggregationPosition\n  } = _ref3;\n  const aggregationRules = (0, _gridAggregationUtils.getAggregationRules)({\n    columnsLookup: (0, _xDataGridPro.gridColumnLookupSelector)(apiRef),\n    aggregationModel: (0, _gridAggregationSelectors.gridAggregationModelSelector)(apiRef),\n    aggregationFunctions\n  });\n  const aggregatedFields = Object.keys(aggregationRules);\n\n  if (aggregatedFields.length === 0) {\n    return {};\n  }\n\n  const aggregationLookup = {};\n  const rowTree = (0, _xDataGridPro.gridRowTreeSelector)(apiRef);\n\n  const createGroupAggregationLookup = groupNode => {\n    for (let i = 0; i < groupNode.children.length; i += 1) {\n      const childId = groupNode.children[i];\n      const childNode = rowTree[childId];\n\n      if (childNode.type === 'group') {\n        createGroupAggregationLookup(childNode);\n      }\n    }\n\n    const hasAggregableChildren = groupNode.children.length;\n\n    if (hasAggregableChildren) {\n      const position = getAggregationPosition(groupNode);\n\n      if (position != null) {\n        aggregationLookup[groupNode.id] = getGroupAggregatedValue({\n          groupId: groupNode.id,\n          apiRef,\n          aggregatedFields,\n          aggregationRowsScope,\n          aggregationRules,\n          position\n        });\n      }\n    }\n  };\n\n  createGroupAggregationLookup(rowTree[_xDataGridPro.GRID_ROOT_GROUP_ID]);\n  return aggregationLookup;\n};\n\nexports.createAggregationLookup = createAggregationLookup;","map":{"version":3,"names":["Object","defineProperty","exports","value","createAggregationLookup","_xDataGridPro","require","_gridAggregationUtils","_gridAggregationSelectors","getAggregationCellValue","apiRef","groupId","field","aggregationFunction","aggregationRowsScope","filteredRowsLookup","gridFilteredRowsLookupSelector","rowIds","current","getRowGroupChildren","values","forEach","rowId","rowNode","getRowNode","type","getCellValue","row","getRow","push","apply","getGroupAggregatedValue","aggregatedFields","aggregationRules","position","groupAggregationLookup","j","length","aggregatedField","columnAggregationRules","aggregationFunctions","getAggregationPosition","getAggregationRules","columnsLookup","gridColumnLookupSelector","aggregationModel","gridAggregationModelSelector","keys","aggregationLookup","rowTree","gridRowTreeSelector","createGroupAggregationLookup","groupNode","i","children","childId","childNode","hasAggregableChildren","id","GRID_ROOT_GROUP_ID"],"sources":["C:/Users/kb/node_modules/@mui/x-data-grid-premium/hooks/features/aggregation/createAggregationLookup.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAggregationLookup = void 0;\nvar _xDataGridPro = require(\"@mui/x-data-grid-pro\");\nvar _gridAggregationUtils = require(\"./gridAggregationUtils\");\nvar _gridAggregationSelectors = require(\"./gridAggregationSelectors\");\nconst getAggregationCellValue = ({\n  apiRef,\n  groupId,\n  field,\n  aggregationFunction,\n  aggregationRowsScope\n}) => {\n  const filteredRowsLookup = (0, _xDataGridPro.gridFilteredRowsLookupSelector)(apiRef);\n  const rowIds = apiRef.current.getRowGroupChildren({\n    groupId\n  });\n  const values = [];\n  rowIds.forEach(rowId => {\n    if (aggregationRowsScope === 'filtered' && filteredRowsLookup[rowId] === false) {\n      return;\n    }\n\n    // If the row is a group, we want to aggregate based on its children\n    // For instance in the following tree, we want the aggregated values of A to be based on A.A, A.B.A and A.B.B but not A.B\n    // A\n    //   A.A\n    //   A.B\n    //     A.B.A\n    //     A.B.B\n    const rowNode = apiRef.current.getRowNode(rowId);\n    if (rowNode.type === 'group') {\n      return;\n    }\n    if (typeof aggregationFunction.getCellValue === 'function') {\n      const row = apiRef.current.getRow(rowId);\n      values.push(aggregationFunction.getCellValue({\n        row\n      }));\n    } else {\n      values.push(apiRef.current.getCellValue(rowId, field));\n    }\n  });\n  return aggregationFunction.apply({\n    values,\n    groupId,\n    field // Added per user request in https://github.com/mui/mui-x/issues/6995#issuecomment-1327423455\n  });\n};\nconst getGroupAggregatedValue = ({\n  groupId,\n  apiRef,\n  aggregationRowsScope,\n  aggregatedFields,\n  aggregationRules,\n  position\n}) => {\n  const groupAggregationLookup = {};\n  for (let j = 0; j < aggregatedFields.length; j += 1) {\n    const aggregatedField = aggregatedFields[j];\n    const columnAggregationRules = aggregationRules[aggregatedField];\n    groupAggregationLookup[aggregatedField] = {\n      position,\n      value: getAggregationCellValue({\n        apiRef,\n        groupId,\n        field: aggregatedField,\n        aggregationFunction: columnAggregationRules.aggregationFunction,\n        aggregationRowsScope\n      })\n    };\n  }\n  return groupAggregationLookup;\n};\nconst createAggregationLookup = ({\n  apiRef,\n  aggregationFunctions,\n  aggregationRowsScope,\n  getAggregationPosition\n}) => {\n  const aggregationRules = (0, _gridAggregationUtils.getAggregationRules)({\n    columnsLookup: (0, _xDataGridPro.gridColumnLookupSelector)(apiRef),\n    aggregationModel: (0, _gridAggregationSelectors.gridAggregationModelSelector)(apiRef),\n    aggregationFunctions\n  });\n  const aggregatedFields = Object.keys(aggregationRules);\n  if (aggregatedFields.length === 0) {\n    return {};\n  }\n  const aggregationLookup = {};\n  const rowTree = (0, _xDataGridPro.gridRowTreeSelector)(apiRef);\n  const createGroupAggregationLookup = groupNode => {\n    for (let i = 0; i < groupNode.children.length; i += 1) {\n      const childId = groupNode.children[i];\n      const childNode = rowTree[childId];\n      if (childNode.type === 'group') {\n        createGroupAggregationLookup(childNode);\n      }\n    }\n    const hasAggregableChildren = groupNode.children.length;\n    if (hasAggregableChildren) {\n      const position = getAggregationPosition(groupNode);\n      if (position != null) {\n        aggregationLookup[groupNode.id] = getGroupAggregatedValue({\n          groupId: groupNode.id,\n          apiRef,\n          aggregatedFields,\n          aggregationRowsScope,\n          aggregationRules,\n          position\n        });\n      }\n    }\n  };\n  createGroupAggregationLookup(rowTree[_xDataGridPro.GRID_ROOT_GROUP_ID]);\n  return aggregationLookup;\n};\nexports.createAggregationLookup = createAggregationLookup;"],"mappings":"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"},"metadata":{},"sourceType":"script"}