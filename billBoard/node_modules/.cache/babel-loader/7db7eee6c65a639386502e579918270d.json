{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridCellSelection = exports.cellSelectionStateInitializer = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _utils = require(\"@mui/material/utils\");\n\nvar _internals = require(\"@mui/x-data-grid-pro/internals\");\n\nvar _xDataGridPro = require(\"@mui/x-data-grid-pro\");\n\nvar _gridCellSelectionSelector = require(\"./gridCellSelectionSelector\");\n\nfunction _getRequireWildcardCache(e) {\n  if (\"function\" != typeof WeakMap) return null;\n  var r = new WeakMap(),\n      t = new WeakMap();\n  return (_getRequireWildcardCache = function (e) {\n    return e ? t : r;\n  })(e);\n}\n\nfunction _interopRequireWildcard(e, r) {\n  if (!r && e && e.__esModule) return e;\n  if (null === e || \"object\" != typeof e && \"function\" != typeof e) return {\n    default: e\n  };\n\n  var t = _getRequireWildcardCache(r);\n\n  if (t && t.has(e)) return t.get(e);\n  var n = {\n    __proto__: null\n  },\n      a = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) {\n    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;\n    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];\n  }\n\n  return n.default = e, t && t.set(e, n), n;\n}\n\nconst cellSelectionStateInitializer = (state, props) => (0, _extends2.default)({}, state, {\n  cellSelection: (0, _extends2.default)({}, props.cellSelectionModel ?? props.initialState?.cellSelection)\n});\n\nexports.cellSelectionStateInitializer = cellSelectionStateInitializer;\n\nfunction isKeyboardEvent(event) {\n  return !!event.key;\n}\n\nconst AUTO_SCROLL_SENSITIVITY = 50; // The distance from the edge to start scrolling\n\nconst AUTO_SCROLL_SPEED = 20; // The speed to scroll once the mouse enters the sensitivity area\n\nconst useGridCellSelection = (apiRef, props) => {\n  const visibleRows = (0, _internals.useGridVisibleRows)(apiRef, props);\n  const cellWithVirtualFocus = React.useRef();\n  const lastMouseDownCell = React.useRef();\n  const mousePosition = React.useRef(null);\n  const autoScrollRAF = React.useRef();\n  const sortedRowIds = (0, _xDataGridPro.useGridSelector)(apiRef, _xDataGridPro.gridSortedRowIdsSelector);\n  const dimensions = (0, _xDataGridPro.useGridSelector)(apiRef, _xDataGridPro.gridDimensionsSelector);\n  const totalHeaderHeight = (0, _internals.getTotalHeaderHeight)(apiRef, props);\n  const ignoreValueFormatterProp = props.ignoreValueFormatterDuringExport;\n  const ignoreValueFormatter = (typeof ignoreValueFormatterProp === 'object' ? ignoreValueFormatterProp?.clipboardExport : ignoreValueFormatterProp) || false;\n  const clipboardCopyCellDelimiter = props.clipboardCopyCellDelimiter;\n  apiRef.current.registerControlState({\n    stateId: 'cellSelection',\n    propModel: props.cellSelectionModel,\n    propOnChange: props.onCellSelectionModelChange,\n    stateSelector: _gridCellSelectionSelector.gridCellSelectionStateSelector,\n    changeEvent: 'cellSelectionChange'\n  });\n\n  const runIfCellSelectionIsEnabled = callback => function () {\n    if (props.cellSelection) {\n      callback(...arguments);\n    }\n  };\n\n  const isCellSelected = React.useCallback((id, field) => {\n    if (!props.cellSelection) {\n      return false;\n    }\n\n    const cellSelectionModel = (0, _gridCellSelectionSelector.gridCellSelectionStateSelector)(apiRef.current.state);\n    return cellSelectionModel[id] ? !!cellSelectionModel[id][field] : false;\n  }, [apiRef, props.cellSelection]);\n  const getCellSelectionModel = React.useCallback(() => {\n    return (0, _gridCellSelectionSelector.gridCellSelectionStateSelector)(apiRef.current.state);\n  }, [apiRef]);\n  const setCellSelectionModel = React.useCallback(newModel => {\n    if (!props.cellSelection) {\n      return;\n    }\n\n    apiRef.current.setState(prevState => (0, _extends2.default)({}, prevState, {\n      cellSelection: newModel\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef, props.cellSelection]);\n  const selectCellRange = React.useCallback(function (start, end) {\n    let keepOtherSelected = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const startRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(start.id);\n    const startColumnIndex = apiRef.current.getColumnIndex(start.field);\n    const endRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(end.id);\n    const endColumnIndex = apiRef.current.getColumnIndex(end.field);\n    let finalStartRowIndex = startRowIndex;\n    let finalStartColumnIndex = startColumnIndex;\n    let finalEndRowIndex = endRowIndex;\n    let finalEndColumnIndex = endColumnIndex;\n\n    if (finalStartRowIndex > finalEndRowIndex) {\n      finalStartRowIndex = endRowIndex;\n      finalEndRowIndex = startRowIndex;\n    }\n\n    if (finalStartColumnIndex > finalEndColumnIndex) {\n      finalStartColumnIndex = endColumnIndex;\n      finalEndColumnIndex = startColumnIndex;\n    }\n\n    const visibleColumns = apiRef.current.getVisibleColumns();\n    const rowsInRange = visibleRows.rows.slice(finalStartRowIndex, finalEndRowIndex + 1);\n    const columnsInRange = visibleColumns.slice(finalStartColumnIndex, finalEndColumnIndex + 1);\n    const newModel = keepOtherSelected ? apiRef.current.getCellSelectionModel() : {};\n    rowsInRange.forEach(row => {\n      if (!newModel[row.id]) {\n        newModel[row.id] = {};\n      }\n\n      columnsInRange.forEach(column => {\n        newModel[row.id][column.field] = true;\n      }, {});\n    });\n    apiRef.current.setCellSelectionModel(newModel);\n  }, [apiRef, visibleRows.rows]);\n  const getSelectedCellsAsArray = React.useCallback(() => {\n    const model = apiRef.current.getCellSelectionModel();\n    const idToIdLookup = (0, _xDataGridPro.gridRowsDataRowIdToIdLookupSelector)(apiRef);\n    return Object.entries(model).reduce((acc, _ref) => {\n      let [id, fields] = _ref;\n      return [...acc, ...Object.entries(fields).reduce((acc2, _ref2) => {\n        let [field, isSelected] = _ref2;\n        return isSelected ? [...acc2, {\n          id: idToIdLookup[id],\n          field\n        }] : acc2;\n      }, [])];\n    }, []);\n  }, [apiRef]);\n  const cellSelectionApi = {\n    isCellSelected,\n    getCellSelectionModel,\n    setCellSelectionModel,\n    selectCellRange,\n    getSelectedCellsAsArray\n  };\n  (0, _xDataGridPro.useGridApiMethod)(apiRef, cellSelectionApi, 'public');\n  const hasClickedValidCellForRangeSelection = React.useCallback(params => {\n    if (params.field === _xDataGridPro.GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      return false;\n    }\n\n    if (params.field === _xDataGridPro.GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n      return false;\n    }\n\n    const column = apiRef.current.getColumn(params.field);\n\n    if (column.type === _xDataGridPro.GRID_ACTIONS_COLUMN_TYPE) {\n      return false;\n    }\n\n    return params.rowNode.type !== 'pinnedRow';\n  }, [apiRef]);\n  const handleMouseUp = (0, _utils.useEventCallback)(() => {\n    lastMouseDownCell.current = null;\n    apiRef.current.rootElementRef?.current?.classList.remove(_xDataGridPro.gridClasses['root--disableUserSelection']); // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n    stopAutoScroll();\n  });\n  const handleCellMouseDown = React.useCallback((params, event) => {\n    // Skip if the click comes from the right-button or, only on macOS, Ctrl is pressed\n    // Fix for https://github.com/mui/mui-x/pull/6567#issuecomment-1329155578\n    const isMacOs = window.navigator.platform.toUpperCase().indexOf('MAC') >= 0;\n\n    if (event.button !== 0 || event.ctrlKey && isMacOs) {\n      return;\n    }\n\n    if (params.field === _xDataGridPro.GRID_REORDER_COL_DEF.field) {\n      return;\n    }\n\n    const focusedCell = (0, _xDataGridPro.gridFocusCellSelector)(apiRef);\n\n    if (hasClickedValidCellForRangeSelection(params) && event.shiftKey && focusedCell) {\n      event.preventDefault();\n    }\n\n    lastMouseDownCell.current = {\n      id: params.id,\n      field: params.field\n    };\n    apiRef.current.rootElementRef?.current?.classList.add(_xDataGridPro.gridClasses['root--disableUserSelection']);\n    const document = (0, _utils.ownerDocument)(apiRef.current.rootElementRef?.current);\n    document.addEventListener('mouseup', handleMouseUp, {\n      once: true\n    });\n  }, [apiRef, handleMouseUp, hasClickedValidCellForRangeSelection]);\n  const stopAutoScroll = React.useCallback(() => {\n    if (autoScrollRAF.current) {\n      cancelAnimationFrame(autoScrollRAF.current);\n      autoScrollRAF.current = null;\n    }\n  }, []);\n  const handleCellFocusIn = React.useCallback(params => {\n    cellWithVirtualFocus.current = {\n      id: params.id,\n      field: params.field\n    };\n  }, []);\n  const startAutoScroll = React.useCallback(() => {\n    if (autoScrollRAF.current) {\n      return;\n    }\n\n    if (!apiRef.current.virtualScrollerRef?.current) {\n      return;\n    }\n\n    function autoScroll() {\n      if (!mousePosition.current || !apiRef.current.virtualScrollerRef?.current) {\n        return;\n      }\n\n      const {\n        x: mouseX,\n        y: mouseY\n      } = mousePosition.current;\n      const {\n        height,\n        width\n      } = dimensions.viewportInnerSize;\n      let deltaX = 0;\n      let deltaY = 0;\n      let factor = 0;\n\n      if (mouseY <= AUTO_SCROLL_SENSITIVITY && dimensions.hasScrollY) {\n        // When scrolling up, the multiplier increases going closer to the top edge\n        factor = (AUTO_SCROLL_SENSITIVITY - mouseY) / -AUTO_SCROLL_SENSITIVITY;\n        deltaY = AUTO_SCROLL_SPEED;\n      } else if (mouseY >= height - AUTO_SCROLL_SENSITIVITY && dimensions.hasScrollY) {\n        // When scrolling down, the multiplier increases going closer to the bottom edge\n        factor = (mouseY - (height - AUTO_SCROLL_SENSITIVITY)) / AUTO_SCROLL_SENSITIVITY;\n        deltaY = AUTO_SCROLL_SPEED;\n      } else if (mouseX <= AUTO_SCROLL_SENSITIVITY && dimensions.hasScrollX) {\n        // When scrolling left, the multiplier increases going closer to the left edge\n        factor = (AUTO_SCROLL_SENSITIVITY - mouseX) / -AUTO_SCROLL_SENSITIVITY;\n        deltaX = AUTO_SCROLL_SPEED;\n      } else if (mouseX >= width - AUTO_SCROLL_SENSITIVITY && dimensions.hasScrollX) {\n        // When scrolling right, the multiplier increases going closer to the right edge\n        factor = (mouseX - (width - AUTO_SCROLL_SENSITIVITY)) / AUTO_SCROLL_SENSITIVITY;\n        deltaX = AUTO_SCROLL_SPEED;\n      }\n\n      if (deltaX !== 0 || deltaY !== 0) {\n        const {\n          scrollLeft,\n          scrollTop\n        } = apiRef.current.virtualScrollerRef.current;\n        apiRef.current.scroll({\n          top: scrollTop + deltaY * factor,\n          left: scrollLeft + deltaX * factor\n        });\n      }\n\n      autoScrollRAF.current = requestAnimationFrame(autoScroll);\n    }\n\n    autoScroll();\n  }, [apiRef, dimensions]);\n  const handleCellMouseOver = React.useCallback((params, event) => {\n    if (!lastMouseDownCell.current) {\n      return;\n    }\n\n    const {\n      id,\n      field\n    } = params;\n    apiRef.current.selectCellRange(lastMouseDownCell.current, {\n      id,\n      field\n    }, event.ctrlKey || event.metaKey);\n    const virtualScrollerRect = apiRef.current.virtualScrollerRef?.current?.getBoundingClientRect();\n\n    if (!virtualScrollerRect) {\n      return;\n    }\n\n    const {\n      x,\n      y\n    } = virtualScrollerRect;\n    const {\n      height,\n      width\n    } = dimensions.viewportInnerSize;\n    const mouseX = event.clientX - x;\n    const mouseY = event.clientY - y - totalHeaderHeight;\n    mousePosition.current = {\n      x: mouseX,\n      y: mouseY\n    };\n    const hasEnteredVerticalSensitivityArea = mouseY <= AUTO_SCROLL_SENSITIVITY || mouseY >= height - AUTO_SCROLL_SENSITIVITY;\n    const hasEnteredHorizontalSensitivityArea = mouseX <= AUTO_SCROLL_SENSITIVITY || mouseX >= width - AUTO_SCROLL_SENSITIVITY;\n    const hasEnteredSensitivityArea = hasEnteredVerticalSensitivityArea || hasEnteredHorizontalSensitivityArea;\n\n    if (hasEnteredSensitivityArea) {\n      // Mouse has entered the sensitity area for the first time\n      startAutoScroll();\n    } else {\n      // Mouse has left the sensitivity area while auto scroll is on\n      stopAutoScroll();\n    }\n  }, [apiRef, startAutoScroll, stopAutoScroll, totalHeaderHeight, dimensions]);\n  const handleCellClick = (0, _utils.useEventCallback)((params, event) => {\n    const {\n      id,\n      field\n    } = params;\n\n    if (!hasClickedValidCellForRangeSelection(params)) {\n      return;\n    }\n\n    const focusedCell = (0, _xDataGridPro.gridFocusCellSelector)(apiRef);\n\n    if (event.shiftKey && focusedCell) {\n      apiRef.current.selectCellRange(focusedCell, {\n        id,\n        field\n      });\n      cellWithVirtualFocus.current = {\n        id,\n        field\n      };\n      return;\n    }\n\n    if (event.ctrlKey || event.metaKey) {\n      // Add the clicked cell to the selection\n      const prevModel = apiRef.current.getCellSelectionModel();\n      apiRef.current.setCellSelectionModel((0, _extends2.default)({}, prevModel, {\n        [id]: (0, _extends2.default)({}, prevModel[id], {\n          [field]: !apiRef.current.isCellSelected(id, field)\n        })\n      }));\n    } else {\n      // Clear the selection and keep only the clicked cell selected\n      apiRef.current.setCellSelectionModel({\n        [id]: {\n          [field]: true\n        }\n      });\n    }\n  });\n  const handleCellKeyDown = (0, _utils.useEventCallback)((params, event) => {\n    if (!(0, _internals.isNavigationKey)(event.key) || !cellWithVirtualFocus.current) {\n      return;\n    }\n\n    if (!event.shiftKey) {\n      apiRef.current.setCellSelectionModel({});\n      return;\n    }\n\n    const {\n      current: otherCell\n    } = cellWithVirtualFocus;\n    let endRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(otherCell.id);\n    let endColumnIndex = apiRef.current.getColumnIndex(otherCell.field);\n\n    if (event.key === 'ArrowDown') {\n      endRowIndex += 1;\n    } else if (event.key === 'ArrowUp') {\n      endRowIndex -= 1;\n    } else if (event.key === 'ArrowRight') {\n      endColumnIndex += 1;\n    } else if (event.key === 'ArrowLeft') {\n      endColumnIndex -= 1;\n    }\n\n    if (endRowIndex < 0 || endRowIndex >= visibleRows.rows.length) {\n      return;\n    }\n\n    const visibleColumns = apiRef.current.getVisibleColumns();\n\n    if (endColumnIndex < 0 || endColumnIndex >= visibleColumns.length) {\n      return;\n    }\n\n    cellWithVirtualFocus.current = {\n      id: visibleRows.rows[endRowIndex].id,\n      field: visibleColumns[endColumnIndex].field\n    };\n    apiRef.current.scrollToIndexes({\n      rowIndex: endRowIndex,\n      colIndex: endColumnIndex\n    });\n    const {\n      id,\n      field\n    } = params;\n    apiRef.current.selectCellRange({\n      id,\n      field\n    }, cellWithVirtualFocus.current);\n  });\n  (0, _xDataGridPro.useGridApiEventHandler)(apiRef, 'cellClick', runIfCellSelectionIsEnabled(handleCellClick));\n  (0, _xDataGridPro.useGridApiEventHandler)(apiRef, 'cellFocusIn', runIfCellSelectionIsEnabled(handleCellFocusIn));\n  (0, _xDataGridPro.useGridApiEventHandler)(apiRef, 'cellKeyDown', runIfCellSelectionIsEnabled(handleCellKeyDown));\n  (0, _xDataGridPro.useGridApiEventHandler)(apiRef, 'cellMouseDown', runIfCellSelectionIsEnabled(handleCellMouseDown));\n  (0, _xDataGridPro.useGridApiEventHandler)(apiRef, 'cellMouseOver', runIfCellSelectionIsEnabled(handleCellMouseOver));\n  React.useEffect(() => {\n    if (props.cellSelectionModel) {\n      apiRef.current.setCellSelectionModel(props.cellSelectionModel);\n    }\n  }, [apiRef, props.cellSelectionModel]);\n  React.useEffect(() => {\n    const rootRef = apiRef.current.rootElementRef?.current;\n    return () => {\n      stopAutoScroll();\n      const document = (0, _utils.ownerDocument)(rootRef);\n      document.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [apiRef, handleMouseUp, stopAutoScroll]);\n  const checkIfCellIsSelected = React.useCallback((isSelected, _ref3) => {\n    let {\n      id,\n      field\n    } = _ref3;\n    return apiRef.current.isCellSelected(id, field);\n  }, [apiRef]);\n  const addClassesToCells = React.useCallback((classes, _ref4) => {\n    let {\n      id,\n      field\n    } = _ref4;\n\n    if (!visibleRows.range || !apiRef.current.isCellSelected(id, field)) {\n      return classes;\n    }\n\n    const newClasses = [...classes];\n    const rowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(id);\n    const columnIndex = apiRef.current.getColumnIndex(field);\n    const visibleColumns = apiRef.current.getVisibleColumns();\n\n    if (rowIndex > 0) {\n      const {\n        id: previousRowId\n      } = visibleRows.rows[rowIndex - 1];\n\n      if (!apiRef.current.isCellSelected(previousRowId, field)) {\n        newClasses.push(_xDataGridPro.gridClasses['cell--rangeTop']);\n      }\n    } else {\n      newClasses.push(_xDataGridPro.gridClasses['cell--rangeTop']);\n    }\n\n    if (rowIndex + visibleRows.range.firstRowIndex < visibleRows.range.lastRowIndex) {\n      const {\n        id: nextRowId\n      } = visibleRows.rows[rowIndex + 1];\n\n      if (!apiRef.current.isCellSelected(nextRowId, field)) {\n        newClasses.push(_xDataGridPro.gridClasses['cell--rangeBottom']);\n      }\n    } else {\n      newClasses.push(_xDataGridPro.gridClasses['cell--rangeBottom']);\n    }\n\n    if (columnIndex > 0) {\n      const {\n        field: previousColumnField\n      } = visibleColumns[columnIndex - 1];\n\n      if (!apiRef.current.isCellSelected(id, previousColumnField)) {\n        newClasses.push(_xDataGridPro.gridClasses['cell--rangeLeft']);\n      }\n    } else {\n      newClasses.push(_xDataGridPro.gridClasses['cell--rangeLeft']);\n    }\n\n    if (columnIndex < visibleColumns.length - 1) {\n      const {\n        field: nextColumnField\n      } = visibleColumns[columnIndex + 1];\n\n      if (!apiRef.current.isCellSelected(id, nextColumnField)) {\n        newClasses.push(_xDataGridPro.gridClasses['cell--rangeRight']);\n      }\n    } else {\n      newClasses.push(_xDataGridPro.gridClasses['cell--rangeRight']);\n    }\n\n    return newClasses;\n  }, [apiRef, visibleRows.range, visibleRows.rows]);\n  const canUpdateFocus = React.useCallback((initialValue, _ref5) => {\n    let {\n      event,\n      cell\n    } = _ref5;\n\n    if (!cell || !props.cellSelection || !event.shiftKey) {\n      return initialValue;\n    }\n\n    if (isKeyboardEvent(event)) {\n      return (0, _internals.isNavigationKey)(event.key) ? false : initialValue;\n    }\n\n    const focusedCell = (0, _xDataGridPro.gridFocusCellSelector)(apiRef);\n\n    if (hasClickedValidCellForRangeSelection(cell) && focusedCell) {\n      return false;\n    }\n\n    return initialValue;\n  }, [apiRef, props.cellSelection, hasClickedValidCellForRangeSelection]);\n  const handleClipboardCopy = React.useCallback(value => {\n    if (apiRef.current.getSelectedCellsAsArray().length <= 1) {\n      return value;\n    }\n\n    const cellSelectionModel = apiRef.current.getCellSelectionModel();\n    const unsortedSelectedRowIds = Object.keys(cellSelectionModel);\n    const sortedSelectedRowIds = sortedRowIds.filter(id => unsortedSelectedRowIds.includes(`${id}`));\n    const copyData = sortedSelectedRowIds.reduce((acc, rowId) => {\n      const fieldsMap = cellSelectionModel[rowId];\n      const rowString = Object.keys(fieldsMap).reduce((acc2, field) => {\n        let cellData;\n\n        if (fieldsMap[field]) {\n          const cellParams = apiRef.current.getCellParams(rowId, field);\n          cellData = (0, _internals.serializeCellValue)(cellParams, {\n            csvOptions: {\n              delimiter: clipboardCopyCellDelimiter,\n              shouldAppendQuotes: false,\n              escapeFormulas: false\n            },\n            ignoreValueFormatter\n          });\n        } else {\n          cellData = '';\n        }\n\n        return acc2 === '' ? cellData : [acc2, cellData].join(clipboardCopyCellDelimiter);\n      }, '');\n      return acc === '' ? rowString : [acc, rowString].join('\\r\\n');\n    }, '');\n    return copyData;\n  }, [apiRef, ignoreValueFormatter, clipboardCopyCellDelimiter, sortedRowIds]);\n  (0, _internals.useGridRegisterPipeProcessor)(apiRef, 'isCellSelected', checkIfCellIsSelected);\n  (0, _internals.useGridRegisterPipeProcessor)(apiRef, 'cellClassName', addClassesToCells);\n  (0, _internals.useGridRegisterPipeProcessor)(apiRef, 'canUpdateFocus', canUpdateFocus);\n  (0, _internals.useGridRegisterPipeProcessor)(apiRef, 'clipboardCopy', handleClipboardCopy);\n};\n\nexports.useGridCellSelection = useGridCellSelection;","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","useGridCellSelection","cellSelectionStateInitializer","_extends2","React","_interopRequireWildcard","_utils","_internals","_xDataGridPro","_gridCellSelectionSelector","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","state","props","cellSelection","cellSelectionModel","initialState","isKeyboardEvent","event","key","AUTO_SCROLL_SENSITIVITY","AUTO_SCROLL_SPEED","apiRef","visibleRows","useGridVisibleRows","cellWithVirtualFocus","useRef","lastMouseDownCell","mousePosition","autoScrollRAF","sortedRowIds","useGridSelector","gridSortedRowIdsSelector","dimensions","gridDimensionsSelector","totalHeaderHeight","getTotalHeaderHeight","ignoreValueFormatterProp","ignoreValueFormatterDuringExport","ignoreValueFormatter","clipboardExport","clipboardCopyCellDelimiter","current","registerControlState","stateId","propModel","propOnChange","onCellSelectionModelChange","stateSelector","gridCellSelectionStateSelector","changeEvent","runIfCellSelectionIsEnabled","callback","isCellSelected","useCallback","id","field","getCellSelectionModel","setCellSelectionModel","newModel","setState","prevState","forceUpdate","selectCellRange","start","end","keepOtherSelected","startRowIndex","getRowIndexRelativeToVisibleRows","startColumnIndex","getColumnIndex","endRowIndex","endColumnIndex","finalStartRowIndex","finalStartColumnIndex","finalEndRowIndex","finalEndColumnIndex","visibleColumns","getVisibleColumns","rowsInRange","rows","slice","columnsInRange","forEach","row","column","getSelectedCellsAsArray","model","idToIdLookup","gridRowsDataRowIdToIdLookupSelector","entries","reduce","acc","fields","acc2","isSelected","cellSelectionApi","useGridApiMethod","hasClickedValidCellForRangeSelection","params","GRID_CHECKBOX_SELECTION_COL_DEF","GRID_DETAIL_PANEL_TOGGLE_FIELD","getColumn","type","GRID_ACTIONS_COLUMN_TYPE","rowNode","handleMouseUp","useEventCallback","rootElementRef","classList","remove","gridClasses","stopAutoScroll","handleCellMouseDown","isMacOs","window","navigator","platform","toUpperCase","indexOf","button","ctrlKey","GRID_REORDER_COL_DEF","focusedCell","gridFocusCellSelector","shiftKey","preventDefault","add","document","ownerDocument","addEventListener","once","cancelAnimationFrame","handleCellFocusIn","startAutoScroll","virtualScrollerRef","autoScroll","x","mouseX","y","mouseY","height","width","viewportInnerSize","deltaX","deltaY","factor","hasScrollY","hasScrollX","scrollLeft","scrollTop","scroll","top","left","requestAnimationFrame","handleCellMouseOver","metaKey","virtualScrollerRect","getBoundingClientRect","clientX","clientY","hasEnteredVerticalSensitivityArea","hasEnteredHorizontalSensitivityArea","hasEnteredSensitivityArea","handleCellClick","prevModel","handleCellKeyDown","isNavigationKey","otherCell","length","scrollToIndexes","rowIndex","colIndex","useGridApiEventHandler","useEffect","rootRef","removeEventListener","checkIfCellIsSelected","addClassesToCells","classes","range","newClasses","columnIndex","previousRowId","push","firstRowIndex","lastRowIndex","nextRowId","previousColumnField","nextColumnField","canUpdateFocus","initialValue","cell","handleClipboardCopy","unsortedSelectedRowIds","keys","sortedSelectedRowIds","filter","includes","copyData","rowId","fieldsMap","rowString","cellData","cellParams","getCellParams","serializeCellValue","csvOptions","delimiter","shouldAppendQuotes","escapeFormulas","join","useGridRegisterPipeProcessor"],"sources":["C:/Users/kb/node_modules/@mui/x-data-grid-premium/hooks/features/cellSelection/useGridCellSelection.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridCellSelection = exports.cellSelectionStateInitializer = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _utils = require(\"@mui/material/utils\");\nvar _internals = require(\"@mui/x-data-grid-pro/internals\");\nvar _xDataGridPro = require(\"@mui/x-data-grid-pro\");\nvar _gridCellSelectionSelector = require(\"./gridCellSelectionSelector\");\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\nconst cellSelectionStateInitializer = (state, props) => (0, _extends2.default)({}, state, {\n  cellSelection: (0, _extends2.default)({}, props.cellSelectionModel ?? props.initialState?.cellSelection)\n});\nexports.cellSelectionStateInitializer = cellSelectionStateInitializer;\nfunction isKeyboardEvent(event) {\n  return !!event.key;\n}\nconst AUTO_SCROLL_SENSITIVITY = 50; // The distance from the edge to start scrolling\nconst AUTO_SCROLL_SPEED = 20; // The speed to scroll once the mouse enters the sensitivity area\n\nconst useGridCellSelection = (apiRef, props) => {\n  const visibleRows = (0, _internals.useGridVisibleRows)(apiRef, props);\n  const cellWithVirtualFocus = React.useRef();\n  const lastMouseDownCell = React.useRef();\n  const mousePosition = React.useRef(null);\n  const autoScrollRAF = React.useRef();\n  const sortedRowIds = (0, _xDataGridPro.useGridSelector)(apiRef, _xDataGridPro.gridSortedRowIdsSelector);\n  const dimensions = (0, _xDataGridPro.useGridSelector)(apiRef, _xDataGridPro.gridDimensionsSelector);\n  const totalHeaderHeight = (0, _internals.getTotalHeaderHeight)(apiRef, props);\n  const ignoreValueFormatterProp = props.ignoreValueFormatterDuringExport;\n  const ignoreValueFormatter = (typeof ignoreValueFormatterProp === 'object' ? ignoreValueFormatterProp?.clipboardExport : ignoreValueFormatterProp) || false;\n  const clipboardCopyCellDelimiter = props.clipboardCopyCellDelimiter;\n  apiRef.current.registerControlState({\n    stateId: 'cellSelection',\n    propModel: props.cellSelectionModel,\n    propOnChange: props.onCellSelectionModelChange,\n    stateSelector: _gridCellSelectionSelector.gridCellSelectionStateSelector,\n    changeEvent: 'cellSelectionChange'\n  });\n  const runIfCellSelectionIsEnabled = callback => (...args) => {\n    if (props.cellSelection) {\n      callback(...args);\n    }\n  };\n  const isCellSelected = React.useCallback((id, field) => {\n    if (!props.cellSelection) {\n      return false;\n    }\n    const cellSelectionModel = (0, _gridCellSelectionSelector.gridCellSelectionStateSelector)(apiRef.current.state);\n    return cellSelectionModel[id] ? !!cellSelectionModel[id][field] : false;\n  }, [apiRef, props.cellSelection]);\n  const getCellSelectionModel = React.useCallback(() => {\n    return (0, _gridCellSelectionSelector.gridCellSelectionStateSelector)(apiRef.current.state);\n  }, [apiRef]);\n  const setCellSelectionModel = React.useCallback(newModel => {\n    if (!props.cellSelection) {\n      return;\n    }\n    apiRef.current.setState(prevState => (0, _extends2.default)({}, prevState, {\n      cellSelection: newModel\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef, props.cellSelection]);\n  const selectCellRange = React.useCallback((start, end, keepOtherSelected = false) => {\n    const startRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(start.id);\n    const startColumnIndex = apiRef.current.getColumnIndex(start.field);\n    const endRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(end.id);\n    const endColumnIndex = apiRef.current.getColumnIndex(end.field);\n    let finalStartRowIndex = startRowIndex;\n    let finalStartColumnIndex = startColumnIndex;\n    let finalEndRowIndex = endRowIndex;\n    let finalEndColumnIndex = endColumnIndex;\n    if (finalStartRowIndex > finalEndRowIndex) {\n      finalStartRowIndex = endRowIndex;\n      finalEndRowIndex = startRowIndex;\n    }\n    if (finalStartColumnIndex > finalEndColumnIndex) {\n      finalStartColumnIndex = endColumnIndex;\n      finalEndColumnIndex = startColumnIndex;\n    }\n    const visibleColumns = apiRef.current.getVisibleColumns();\n    const rowsInRange = visibleRows.rows.slice(finalStartRowIndex, finalEndRowIndex + 1);\n    const columnsInRange = visibleColumns.slice(finalStartColumnIndex, finalEndColumnIndex + 1);\n    const newModel = keepOtherSelected ? apiRef.current.getCellSelectionModel() : {};\n    rowsInRange.forEach(row => {\n      if (!newModel[row.id]) {\n        newModel[row.id] = {};\n      }\n      columnsInRange.forEach(column => {\n        newModel[row.id][column.field] = true;\n      }, {});\n    });\n    apiRef.current.setCellSelectionModel(newModel);\n  }, [apiRef, visibleRows.rows]);\n  const getSelectedCellsAsArray = React.useCallback(() => {\n    const model = apiRef.current.getCellSelectionModel();\n    const idToIdLookup = (0, _xDataGridPro.gridRowsDataRowIdToIdLookupSelector)(apiRef);\n    return Object.entries(model).reduce((acc, [id, fields]) => [...acc, ...Object.entries(fields).reduce((acc2, [field, isSelected]) => {\n      return isSelected ? [...acc2, {\n        id: idToIdLookup[id],\n        field\n      }] : acc2;\n    }, [])], []);\n  }, [apiRef]);\n  const cellSelectionApi = {\n    isCellSelected,\n    getCellSelectionModel,\n    setCellSelectionModel,\n    selectCellRange,\n    getSelectedCellsAsArray\n  };\n  (0, _xDataGridPro.useGridApiMethod)(apiRef, cellSelectionApi, 'public');\n  const hasClickedValidCellForRangeSelection = React.useCallback(params => {\n    if (params.field === _xDataGridPro.GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      return false;\n    }\n    if (params.field === _xDataGridPro.GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n      return false;\n    }\n    const column = apiRef.current.getColumn(params.field);\n    if (column.type === _xDataGridPro.GRID_ACTIONS_COLUMN_TYPE) {\n      return false;\n    }\n    return params.rowNode.type !== 'pinnedRow';\n  }, [apiRef]);\n  const handleMouseUp = (0, _utils.useEventCallback)(() => {\n    lastMouseDownCell.current = null;\n    apiRef.current.rootElementRef?.current?.classList.remove(_xDataGridPro.gridClasses['root--disableUserSelection']);\n\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    stopAutoScroll();\n  });\n  const handleCellMouseDown = React.useCallback((params, event) => {\n    // Skip if the click comes from the right-button or, only on macOS, Ctrl is pressed\n    // Fix for https://github.com/mui/mui-x/pull/6567#issuecomment-1329155578\n    const isMacOs = window.navigator.platform.toUpperCase().indexOf('MAC') >= 0;\n    if (event.button !== 0 || event.ctrlKey && isMacOs) {\n      return;\n    }\n    if (params.field === _xDataGridPro.GRID_REORDER_COL_DEF.field) {\n      return;\n    }\n    const focusedCell = (0, _xDataGridPro.gridFocusCellSelector)(apiRef);\n    if (hasClickedValidCellForRangeSelection(params) && event.shiftKey && focusedCell) {\n      event.preventDefault();\n    }\n    lastMouseDownCell.current = {\n      id: params.id,\n      field: params.field\n    };\n    apiRef.current.rootElementRef?.current?.classList.add(_xDataGridPro.gridClasses['root--disableUserSelection']);\n    const document = (0, _utils.ownerDocument)(apiRef.current.rootElementRef?.current);\n    document.addEventListener('mouseup', handleMouseUp, {\n      once: true\n    });\n  }, [apiRef, handleMouseUp, hasClickedValidCellForRangeSelection]);\n  const stopAutoScroll = React.useCallback(() => {\n    if (autoScrollRAF.current) {\n      cancelAnimationFrame(autoScrollRAF.current);\n      autoScrollRAF.current = null;\n    }\n  }, []);\n  const handleCellFocusIn = React.useCallback(params => {\n    cellWithVirtualFocus.current = {\n      id: params.id,\n      field: params.field\n    };\n  }, []);\n  const startAutoScroll = React.useCallback(() => {\n    if (autoScrollRAF.current) {\n      return;\n    }\n    if (!apiRef.current.virtualScrollerRef?.current) {\n      return;\n    }\n    function autoScroll() {\n      if (!mousePosition.current || !apiRef.current.virtualScrollerRef?.current) {\n        return;\n      }\n      const {\n        x: mouseX,\n        y: mouseY\n      } = mousePosition.current;\n      const {\n        height,\n        width\n      } = dimensions.viewportInnerSize;\n      let deltaX = 0;\n      let deltaY = 0;\n      let factor = 0;\n      if (mouseY <= AUTO_SCROLL_SENSITIVITY && dimensions.hasScrollY) {\n        // When scrolling up, the multiplier increases going closer to the top edge\n        factor = (AUTO_SCROLL_SENSITIVITY - mouseY) / -AUTO_SCROLL_SENSITIVITY;\n        deltaY = AUTO_SCROLL_SPEED;\n      } else if (mouseY >= height - AUTO_SCROLL_SENSITIVITY && dimensions.hasScrollY) {\n        // When scrolling down, the multiplier increases going closer to the bottom edge\n        factor = (mouseY - (height - AUTO_SCROLL_SENSITIVITY)) / AUTO_SCROLL_SENSITIVITY;\n        deltaY = AUTO_SCROLL_SPEED;\n      } else if (mouseX <= AUTO_SCROLL_SENSITIVITY && dimensions.hasScrollX) {\n        // When scrolling left, the multiplier increases going closer to the left edge\n        factor = (AUTO_SCROLL_SENSITIVITY - mouseX) / -AUTO_SCROLL_SENSITIVITY;\n        deltaX = AUTO_SCROLL_SPEED;\n      } else if (mouseX >= width - AUTO_SCROLL_SENSITIVITY && dimensions.hasScrollX) {\n        // When scrolling right, the multiplier increases going closer to the right edge\n        factor = (mouseX - (width - AUTO_SCROLL_SENSITIVITY)) / AUTO_SCROLL_SENSITIVITY;\n        deltaX = AUTO_SCROLL_SPEED;\n      }\n      if (deltaX !== 0 || deltaY !== 0) {\n        const {\n          scrollLeft,\n          scrollTop\n        } = apiRef.current.virtualScrollerRef.current;\n        apiRef.current.scroll({\n          top: scrollTop + deltaY * factor,\n          left: scrollLeft + deltaX * factor\n        });\n      }\n      autoScrollRAF.current = requestAnimationFrame(autoScroll);\n    }\n    autoScroll();\n  }, [apiRef, dimensions]);\n  const handleCellMouseOver = React.useCallback((params, event) => {\n    if (!lastMouseDownCell.current) {\n      return;\n    }\n    const {\n      id,\n      field\n    } = params;\n    apiRef.current.selectCellRange(lastMouseDownCell.current, {\n      id,\n      field\n    }, event.ctrlKey || event.metaKey);\n    const virtualScrollerRect = apiRef.current.virtualScrollerRef?.current?.getBoundingClientRect();\n    if (!virtualScrollerRect) {\n      return;\n    }\n    const {\n      x,\n      y\n    } = virtualScrollerRect;\n    const {\n      height,\n      width\n    } = dimensions.viewportInnerSize;\n    const mouseX = event.clientX - x;\n    const mouseY = event.clientY - y - totalHeaderHeight;\n    mousePosition.current = {\n      x: mouseX,\n      y: mouseY\n    };\n    const hasEnteredVerticalSensitivityArea = mouseY <= AUTO_SCROLL_SENSITIVITY || mouseY >= height - AUTO_SCROLL_SENSITIVITY;\n    const hasEnteredHorizontalSensitivityArea = mouseX <= AUTO_SCROLL_SENSITIVITY || mouseX >= width - AUTO_SCROLL_SENSITIVITY;\n    const hasEnteredSensitivityArea = hasEnteredVerticalSensitivityArea || hasEnteredHorizontalSensitivityArea;\n    if (hasEnteredSensitivityArea) {\n      // Mouse has entered the sensitity area for the first time\n      startAutoScroll();\n    } else {\n      // Mouse has left the sensitivity area while auto scroll is on\n      stopAutoScroll();\n    }\n  }, [apiRef, startAutoScroll, stopAutoScroll, totalHeaderHeight, dimensions]);\n  const handleCellClick = (0, _utils.useEventCallback)((params, event) => {\n    const {\n      id,\n      field\n    } = params;\n    if (!hasClickedValidCellForRangeSelection(params)) {\n      return;\n    }\n    const focusedCell = (0, _xDataGridPro.gridFocusCellSelector)(apiRef);\n    if (event.shiftKey && focusedCell) {\n      apiRef.current.selectCellRange(focusedCell, {\n        id,\n        field\n      });\n      cellWithVirtualFocus.current = {\n        id,\n        field\n      };\n      return;\n    }\n    if (event.ctrlKey || event.metaKey) {\n      // Add the clicked cell to the selection\n      const prevModel = apiRef.current.getCellSelectionModel();\n      apiRef.current.setCellSelectionModel((0, _extends2.default)({}, prevModel, {\n        [id]: (0, _extends2.default)({}, prevModel[id], {\n          [field]: !apiRef.current.isCellSelected(id, field)\n        })\n      }));\n    } else {\n      // Clear the selection and keep only the clicked cell selected\n      apiRef.current.setCellSelectionModel({\n        [id]: {\n          [field]: true\n        }\n      });\n    }\n  });\n  const handleCellKeyDown = (0, _utils.useEventCallback)((params, event) => {\n    if (!(0, _internals.isNavigationKey)(event.key) || !cellWithVirtualFocus.current) {\n      return;\n    }\n    if (!event.shiftKey) {\n      apiRef.current.setCellSelectionModel({});\n      return;\n    }\n    const {\n      current: otherCell\n    } = cellWithVirtualFocus;\n    let endRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(otherCell.id);\n    let endColumnIndex = apiRef.current.getColumnIndex(otherCell.field);\n    if (event.key === 'ArrowDown') {\n      endRowIndex += 1;\n    } else if (event.key === 'ArrowUp') {\n      endRowIndex -= 1;\n    } else if (event.key === 'ArrowRight') {\n      endColumnIndex += 1;\n    } else if (event.key === 'ArrowLeft') {\n      endColumnIndex -= 1;\n    }\n    if (endRowIndex < 0 || endRowIndex >= visibleRows.rows.length) {\n      return;\n    }\n    const visibleColumns = apiRef.current.getVisibleColumns();\n    if (endColumnIndex < 0 || endColumnIndex >= visibleColumns.length) {\n      return;\n    }\n    cellWithVirtualFocus.current = {\n      id: visibleRows.rows[endRowIndex].id,\n      field: visibleColumns[endColumnIndex].field\n    };\n    apiRef.current.scrollToIndexes({\n      rowIndex: endRowIndex,\n      colIndex: endColumnIndex\n    });\n    const {\n      id,\n      field\n    } = params;\n    apiRef.current.selectCellRange({\n      id,\n      field\n    }, cellWithVirtualFocus.current);\n  });\n  (0, _xDataGridPro.useGridApiEventHandler)(apiRef, 'cellClick', runIfCellSelectionIsEnabled(handleCellClick));\n  (0, _xDataGridPro.useGridApiEventHandler)(apiRef, 'cellFocusIn', runIfCellSelectionIsEnabled(handleCellFocusIn));\n  (0, _xDataGridPro.useGridApiEventHandler)(apiRef, 'cellKeyDown', runIfCellSelectionIsEnabled(handleCellKeyDown));\n  (0, _xDataGridPro.useGridApiEventHandler)(apiRef, 'cellMouseDown', runIfCellSelectionIsEnabled(handleCellMouseDown));\n  (0, _xDataGridPro.useGridApiEventHandler)(apiRef, 'cellMouseOver', runIfCellSelectionIsEnabled(handleCellMouseOver));\n  React.useEffect(() => {\n    if (props.cellSelectionModel) {\n      apiRef.current.setCellSelectionModel(props.cellSelectionModel);\n    }\n  }, [apiRef, props.cellSelectionModel]);\n  React.useEffect(() => {\n    const rootRef = apiRef.current.rootElementRef?.current;\n    return () => {\n      stopAutoScroll();\n      const document = (0, _utils.ownerDocument)(rootRef);\n      document.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [apiRef, handleMouseUp, stopAutoScroll]);\n  const checkIfCellIsSelected = React.useCallback((isSelected, {\n    id,\n    field\n  }) => {\n    return apiRef.current.isCellSelected(id, field);\n  }, [apiRef]);\n  const addClassesToCells = React.useCallback((classes, {\n    id,\n    field\n  }) => {\n    if (!visibleRows.range || !apiRef.current.isCellSelected(id, field)) {\n      return classes;\n    }\n    const newClasses = [...classes];\n    const rowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(id);\n    const columnIndex = apiRef.current.getColumnIndex(field);\n    const visibleColumns = apiRef.current.getVisibleColumns();\n    if (rowIndex > 0) {\n      const {\n        id: previousRowId\n      } = visibleRows.rows[rowIndex - 1];\n      if (!apiRef.current.isCellSelected(previousRowId, field)) {\n        newClasses.push(_xDataGridPro.gridClasses['cell--rangeTop']);\n      }\n    } else {\n      newClasses.push(_xDataGridPro.gridClasses['cell--rangeTop']);\n    }\n    if (rowIndex + visibleRows.range.firstRowIndex < visibleRows.range.lastRowIndex) {\n      const {\n        id: nextRowId\n      } = visibleRows.rows[rowIndex + 1];\n      if (!apiRef.current.isCellSelected(nextRowId, field)) {\n        newClasses.push(_xDataGridPro.gridClasses['cell--rangeBottom']);\n      }\n    } else {\n      newClasses.push(_xDataGridPro.gridClasses['cell--rangeBottom']);\n    }\n    if (columnIndex > 0) {\n      const {\n        field: previousColumnField\n      } = visibleColumns[columnIndex - 1];\n      if (!apiRef.current.isCellSelected(id, previousColumnField)) {\n        newClasses.push(_xDataGridPro.gridClasses['cell--rangeLeft']);\n      }\n    } else {\n      newClasses.push(_xDataGridPro.gridClasses['cell--rangeLeft']);\n    }\n    if (columnIndex < visibleColumns.length - 1) {\n      const {\n        field: nextColumnField\n      } = visibleColumns[columnIndex + 1];\n      if (!apiRef.current.isCellSelected(id, nextColumnField)) {\n        newClasses.push(_xDataGridPro.gridClasses['cell--rangeRight']);\n      }\n    } else {\n      newClasses.push(_xDataGridPro.gridClasses['cell--rangeRight']);\n    }\n    return newClasses;\n  }, [apiRef, visibleRows.range, visibleRows.rows]);\n  const canUpdateFocus = React.useCallback((initialValue, {\n    event,\n    cell\n  }) => {\n    if (!cell || !props.cellSelection || !event.shiftKey) {\n      return initialValue;\n    }\n    if (isKeyboardEvent(event)) {\n      return (0, _internals.isNavigationKey)(event.key) ? false : initialValue;\n    }\n    const focusedCell = (0, _xDataGridPro.gridFocusCellSelector)(apiRef);\n    if (hasClickedValidCellForRangeSelection(cell) && focusedCell) {\n      return false;\n    }\n    return initialValue;\n  }, [apiRef, props.cellSelection, hasClickedValidCellForRangeSelection]);\n  const handleClipboardCopy = React.useCallback(value => {\n    if (apiRef.current.getSelectedCellsAsArray().length <= 1) {\n      return value;\n    }\n    const cellSelectionModel = apiRef.current.getCellSelectionModel();\n    const unsortedSelectedRowIds = Object.keys(cellSelectionModel);\n    const sortedSelectedRowIds = sortedRowIds.filter(id => unsortedSelectedRowIds.includes(`${id}`));\n    const copyData = sortedSelectedRowIds.reduce((acc, rowId) => {\n      const fieldsMap = cellSelectionModel[rowId];\n      const rowString = Object.keys(fieldsMap).reduce((acc2, field) => {\n        let cellData;\n        if (fieldsMap[field]) {\n          const cellParams = apiRef.current.getCellParams(rowId, field);\n          cellData = (0, _internals.serializeCellValue)(cellParams, {\n            csvOptions: {\n              delimiter: clipboardCopyCellDelimiter,\n              shouldAppendQuotes: false,\n              escapeFormulas: false\n            },\n            ignoreValueFormatter\n          });\n        } else {\n          cellData = '';\n        }\n        return acc2 === '' ? cellData : [acc2, cellData].join(clipboardCopyCellDelimiter);\n      }, '');\n      return acc === '' ? rowString : [acc, rowString].join('\\r\\n');\n    }, '');\n    return copyData;\n  }, [apiRef, ignoreValueFormatter, clipboardCopyCellDelimiter, sortedRowIds]);\n  (0, _internals.useGridRegisterPipeProcessor)(apiRef, 'isCellSelected', checkIfCellIsSelected);\n  (0, _internals.useGridRegisterPipeProcessor)(apiRef, 'cellClassName', addClassesToCells);\n  (0, _internals.useGridRegisterPipeProcessor)(apiRef, 'canUpdateFocus', canUpdateFocus);\n  (0, _internals.useGridRegisterPipeProcessor)(apiRef, 'clipboardCopy', handleClipboardCopy);\n};\nexports.useGridCellSelection = useGridCellSelection;"],"mappings":"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"},"metadata":{},"sourceType":"script"}