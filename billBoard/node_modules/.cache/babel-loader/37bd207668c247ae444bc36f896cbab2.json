{"ast":null,"code":"import * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { exportAs } from '../../../utils/exportAs';\nimport { buildCSV } from './serializers/csvSerializer';\nimport { getColumnsToExport, defaultGetRowsToExport } from './utils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GridCsvExportMenuItem } from '../../../components/toolbar/GridToolbarExport';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridSelection (state)\n * @requires useGridParamsApi (method)\n */\n\nexport const useGridCsvExport = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridCsvExport');\n  const ignoreValueFormatterProp = props.ignoreValueFormatterDuringExport;\n  const ignoreValueFormatter = (typeof ignoreValueFormatterProp === 'object' ? ignoreValueFormatterProp?.csvExport : ignoreValueFormatterProp) || false;\n  const getDataAsCsv = React.useCallback(function () {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    logger.debug(`Get data as CSV`);\n    const exportedColumns = getColumnsToExport({\n      apiRef,\n      options\n    });\n    const getRowsToExport = options.getRowsToExport ?? defaultGetRowsToExport;\n    const exportedRowIds = getRowsToExport({\n      apiRef\n    });\n    return buildCSV({\n      columns: exportedColumns,\n      rowIds: exportedRowIds,\n      csvOptions: {\n        delimiter: options.delimiter || ',',\n        shouldAppendQuotes: options.shouldAppendQuotes ?? true,\n        includeHeaders: options.includeHeaders ?? true,\n        includeColumnGroupsHeaders: options.includeColumnGroupsHeaders ?? true,\n        escapeFormulas: options.escapeFormulas ?? true\n      },\n      ignoreValueFormatter,\n      apiRef\n    });\n  }, [logger, apiRef, ignoreValueFormatter]);\n  const exportDataAsCsv = React.useCallback(options => {\n    logger.debug(`Export data as CSV`);\n    const csv = getDataAsCsv(options);\n    const blob = new Blob([options?.utf8WithBom ? new Uint8Array([0xef, 0xbb, 0xbf]) : '', csv], {\n      type: 'text/csv'\n    });\n    exportAs(blob, 'csv', options?.fileName);\n  }, [logger, getDataAsCsv]);\n  const csvExportApi = {\n    getDataAsCsv,\n    exportDataAsCsv\n  };\n  useGridApiMethod(apiRef, csvExportApi, 'public');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const addExportMenuButtons = React.useCallback((initialValue, options) => {\n    if (options.csvOptions?.disableToolbarButton) {\n      return initialValue;\n    }\n\n    return [...initialValue, {\n      component: /*#__PURE__*/_jsx(GridCsvExportMenuItem, {\n        options: options.csvOptions\n      }),\n      componentName: 'csvExport'\n    }];\n  }, []);\n  useGridRegisterPipeProcessor(apiRef, 'exportMenu', addExportMenuButtons);\n};","map":{"version":3,"names":["React","useGridApiMethod","useGridLogger","exportAs","buildCSV","getColumnsToExport","defaultGetRowsToExport","useGridRegisterPipeProcessor","GridCsvExportMenuItem","jsx","_jsx","useGridCsvExport","apiRef","props","logger","ignoreValueFormatterProp","ignoreValueFormatterDuringExport","ignoreValueFormatter","csvExport","getDataAsCsv","useCallback","options","debug","exportedColumns","getRowsToExport","exportedRowIds","columns","rowIds","csvOptions","delimiter","shouldAppendQuotes","includeHeaders","includeColumnGroupsHeaders","escapeFormulas","exportDataAsCsv","csv","blob","Blob","utf8WithBom","Uint8Array","type","fileName","csvExportApi","addExportMenuButtons","initialValue","disableToolbarButton","component","componentName"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/@mui/x-data-grid/hooks/features/export/useGridCsvExport.js"],"sourcesContent":["import * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { exportAs } from '../../../utils/exportAs';\nimport { buildCSV } from './serializers/csvSerializer';\nimport { getColumnsToExport, defaultGetRowsToExport } from './utils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GridCsvExportMenuItem } from '../../../components/toolbar/GridToolbarExport';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridSelection (state)\n * @requires useGridParamsApi (method)\n */\nexport const useGridCsvExport = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridCsvExport');\n  const ignoreValueFormatterProp = props.ignoreValueFormatterDuringExport;\n  const ignoreValueFormatter = (typeof ignoreValueFormatterProp === 'object' ? ignoreValueFormatterProp?.csvExport : ignoreValueFormatterProp) || false;\n  const getDataAsCsv = React.useCallback((options = {}) => {\n    logger.debug(`Get data as CSV`);\n    const exportedColumns = getColumnsToExport({\n      apiRef,\n      options\n    });\n    const getRowsToExport = options.getRowsToExport ?? defaultGetRowsToExport;\n    const exportedRowIds = getRowsToExport({\n      apiRef\n    });\n    return buildCSV({\n      columns: exportedColumns,\n      rowIds: exportedRowIds,\n      csvOptions: {\n        delimiter: options.delimiter || ',',\n        shouldAppendQuotes: options.shouldAppendQuotes ?? true,\n        includeHeaders: options.includeHeaders ?? true,\n        includeColumnGroupsHeaders: options.includeColumnGroupsHeaders ?? true,\n        escapeFormulas: options.escapeFormulas ?? true\n      },\n      ignoreValueFormatter,\n      apiRef\n    });\n  }, [logger, apiRef, ignoreValueFormatter]);\n  const exportDataAsCsv = React.useCallback(options => {\n    logger.debug(`Export data as CSV`);\n    const csv = getDataAsCsv(options);\n    const blob = new Blob([options?.utf8WithBom ? new Uint8Array([0xef, 0xbb, 0xbf]) : '', csv], {\n      type: 'text/csv'\n    });\n    exportAs(blob, 'csv', options?.fileName);\n  }, [logger, getDataAsCsv]);\n  const csvExportApi = {\n    getDataAsCsv,\n    exportDataAsCsv\n  };\n  useGridApiMethod(apiRef, csvExportApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const addExportMenuButtons = React.useCallback((initialValue, options) => {\n    if (options.csvOptions?.disableToolbarButton) {\n      return initialValue;\n    }\n    return [...initialValue, {\n      component: /*#__PURE__*/_jsx(GridCsvExportMenuItem, {\n        options: options.csvOptions\n      }),\n      componentName: 'csvExport'\n    }];\n  }, []);\n  useGridRegisterPipeProcessor(apiRef, 'exportMenu', addExportMenuButtons);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}