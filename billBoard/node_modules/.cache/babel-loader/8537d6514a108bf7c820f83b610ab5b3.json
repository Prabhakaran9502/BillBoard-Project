{"ast":null,"code":"import _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"id\"],\n      _excluded2 = [\"id\"];\nimport * as React from 'react';\nimport { unstable_useEventCallback as useEventCallback, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { GridEditModes, GridRowModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditingSelectors';\nimport { isPrintableKey, isPasteShortcut } from '../../../utils/keyboardUtils';\nimport { gridColumnFieldsSelector, gridVisibleColumnFieldsSelector } from '../columns/gridColumnsSelector';\nimport { buildWarning } from '../../../utils/warning';\nimport { gridRowsDataRowIdToIdLookupSelector } from '../rows/gridRowsSelector';\nimport { deepClone } from '../../../utils/utils';\nimport { GridRowEditStopReasons, GridRowEditStartReasons } from '../../../models/params/gridRowParams';\nimport { GRID_ACTIONS_COLUMN_TYPE } from '../../../colDef';\nconst missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI X: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, for example `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see https://mui.com/x/react-data-grid/editing/#server-side-persistence.'], 'error');\nexport const useGridRowEditing = (apiRef, props) => {\n  const [rowModesModel, setRowModesModel] = React.useState({});\n  const rowModesModelRef = React.useRef(rowModesModel);\n  const prevRowModesModel = React.useRef({});\n  const focusTimeout = React.useRef();\n  const nextFocusedCell = React.useRef(null);\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError,\n    rowModesModel: rowModesModelProp,\n    onRowModesModelChange\n  } = props;\n\n  const runIfEditModeIsRow = callback => function () {\n    if (props.editMode === GridEditModes.Row) {\n      callback(...arguments);\n    }\n  };\n\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI X: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, mode) => {\n    if (apiRef.current.getRowMode(id) !== mode) {\n      throw new Error(`MUI X: The row with id=${id} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const hasFieldsWithErrors = React.useCallback(rowId => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    return Object.values(editingState[rowId]).some(fieldProps => fieldProps.error);\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.Edit) {\n      return;\n    }\n\n    const rowParams = apiRef.current.getRowParams(params.id);\n\n    const newParams = _extends({}, rowParams, {\n      field: params.field,\n      reason: GridRowEditStartReasons.cellDoubleClick\n    });\n\n    apiRef.current.publishEvent('rowEditStart', newParams, event);\n  }, [apiRef]);\n  const handleCellFocusIn = React.useCallback(params => {\n    nextFocusedCell.current = params;\n  }, []);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n      return;\n    } // The mechanism to detect if we can stop editing a row is different from\n    // the cell editing. Instead of triggering it when clicking outside a cell,\n    // we must check if another cell in the same row was not clicked. To achieve\n    // that, first we keep track of all cells that gained focus. When a cell loses\n    // focus we check if the next cell that received focus is from a different row.\n\n\n    nextFocusedCell.current = null;\n    focusTimeout.current = setTimeout(() => {\n      if (nextFocusedCell.current?.id !== params.id) {\n        // The row might have been deleted during the click\n        if (!apiRef.current.getRow(params.id)) {\n          return;\n        } // The row may already changed its mode\n\n\n        if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n          return;\n        }\n\n        if (hasFieldsWithErrors(params.id)) {\n          return;\n        }\n\n        const rowParams = apiRef.current.getRowParams(params.id);\n\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          reason: GridRowEditStopReasons.rowFocusOut\n        });\n\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    });\n  }, [apiRef, hasFieldsWithErrors]);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(focusTimeout.current);\n    };\n  }, []);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridRowModes.Edit) {\n      // Wait until IME is settled for Asian languages like Japanese and Chinese\n      // TODO: `event.which` is deprecated but this is a temporary workaround\n      if (event.which === 229) {\n        return;\n      }\n\n      let reason;\n\n      if (event.key === 'Escape') {\n        reason = GridRowEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        const columnFields = gridVisibleColumnFieldsSelector(apiRef).filter(field => {\n          const column = apiRef.current.getColumn(field);\n\n          if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n            return true;\n          }\n\n          return apiRef.current.isCellEditable(apiRef.current.getCellParams(params.id, field));\n        });\n\n        if (event.shiftKey) {\n          if (params.field === columnFields[0]) {\n            // Exit if user pressed Shift+Tab on the first field\n            reason = GridRowEditStopReasons.shiftTabKeyDown;\n          }\n        } else if (params.field === columnFields[columnFields.length - 1]) {\n          // Exit if user pressed Tab on the last field\n          reason = GridRowEditStopReasons.tabKeyDown;\n        } // Always prevent going to the next element in the tab sequence because the focus is\n        // handled manually to support edit components rendered inside Portals\n\n\n        event.preventDefault();\n\n        if (!reason) {\n          const index = columnFields.findIndex(field => field === params.field);\n          const nextFieldToFocus = columnFields[event.shiftKey ? index - 1 : index + 1];\n          apiRef.current.setCellFocus(params.id, nextFieldToFocus);\n        }\n      }\n\n      if (reason) {\n        if (reason !== GridRowEditStopReasons.escapeKeyDown && hasFieldsWithErrors(params.id)) {\n          return;\n        }\n\n        const newParams = _extends({}, apiRef.current.getRowParams(params.id), {\n          reason,\n          field: params.field\n        });\n\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n      const canStartEditing = apiRef.current.unstable_applyPipeProcessors('canStartEditing', true, {\n        event,\n        cellParams: params,\n        editMode: 'row'\n      });\n\n      if (!canStartEditing) {\n        return;\n      }\n\n      if (isPrintableKey(event)) {\n        reason = GridRowEditStartReasons.printableKeyDown;\n      } else if (isPasteShortcut(event)) {\n        reason = GridRowEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Backspace' || event.key === 'Delete') {\n        reason = GridRowEditStartReasons.deleteKeyDown;\n      }\n\n      if (reason) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          reason\n        });\n\n        apiRef.current.publishEvent('rowEditStart', newParams, event);\n      }\n    }\n  }, [apiRef, hasFieldsWithErrors]);\n  const handleRowEditStart = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    const startRowEditModeParams = {\n      id,\n      fieldToFocus: field\n    };\n\n    if (reason === GridRowEditStartReasons.printableKeyDown || reason === GridRowEditStartReasons.deleteKeyDown) {\n      startRowEditModeParams.deleteValue = !!field;\n    }\n\n    apiRef.current.startRowEditMode(startRowEditModeParams);\n  }, [apiRef]);\n  const handleRowEditStop = React.useCallback(params => {\n    const {\n      id,\n      reason,\n      field\n    } = params;\n    apiRef.current.runPendingEditCellValueMutation(id);\n    let cellToFocusAfter;\n\n    if (reason === GridRowEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridRowEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridRowEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n\n    const ignoreModifications = reason === 'escapeKeyDown';\n    apiRef.current.stopRowEditMode({\n      id,\n      ignoreModifications,\n      field,\n      cellToFocusAfter\n    });\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsRow(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusIn', runIfEditModeIsRow(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsRow(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsRow(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'rowEditStart', runIfEditModeIsRow(handleRowEditStart));\n  useGridApiEventHandler(apiRef, 'rowEditStop', runIfEditModeIsRow(handleRowEditStop));\n  useGridApiOptionHandler(apiRef, 'rowEditStart', props.onRowEditStart);\n  useGridApiOptionHandler(apiRef, 'rowEditStop', props.onRowEditStop);\n  const getRowMode = React.useCallback(id => {\n    if (props.editMode === GridEditModes.Cell) {\n      return GridRowModes.View;\n    }\n\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && Object.keys(editingState[id]).length > 0;\n    return isEditing ? GridRowModes.Edit : GridRowModes.View;\n  }, [apiRef, props.editMode]);\n  const updateRowModesModel = useEventCallback(newModel => {\n    const isNewModelDifferentFromProp = newModel !== props.rowModesModel;\n\n    if (onRowModesModelChange && isNewModelDifferentFromProp) {\n      onRowModesModelChange(newModel, {\n        api: apiRef.current\n      });\n    }\n\n    if (props.rowModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n\n    setRowModesModel(newModel);\n    rowModesModelRef.current = newModel;\n    apiRef.current.publishEvent('rowModesModelChange', newModel);\n  });\n  const updateRowInRowModesModel = React.useCallback((id, newProps) => {\n    const newModel = _extends({}, rowModesModelRef.current);\n\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newProps);\n    } else {\n      delete newModel[id];\n    }\n\n    updateRowModesModel(newModel);\n  }, [updateRowModesModel]);\n  const updateOrDeleteRowState = React.useCallback((id, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = newProps;\n      } else {\n        delete newEditingState[id];\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startRowEditMode = React.useCallback(params => {\n    const {\n      id\n    } = params,\n          other = _objectWithoutPropertiesLoose(params, _excluded);\n\n    throwIfNotInMode(id, GridRowModes.View);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.Edit\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  const updateStateToStartRowEditMode = useEventCallback(params => {\n    const {\n      id,\n      fieldToFocus,\n      deleteValue,\n      initialValue\n    } = params;\n    const columnFields = gridColumnFieldsSelector(apiRef);\n    const newProps = columnFields.reduce((acc, field) => {\n      const cellParams = apiRef.current.getCellParams(id, field);\n\n      if (!cellParams.isEditable) {\n        return acc;\n      }\n\n      let newValue = apiRef.current.getCellValue(id, field);\n\n      if (fieldToFocus === field && (deleteValue || initialValue)) {\n        newValue = deleteValue ? '' : initialValue;\n      }\n\n      acc[field] = {\n        value: newValue,\n        error: false,\n        isProcessingProps: false\n      };\n      return acc;\n    }, {});\n    updateOrDeleteRowState(id, newProps);\n\n    if (fieldToFocus) {\n      apiRef.current.setCellFocus(id, fieldToFocus);\n    }\n  });\n  const stopRowEditMode = React.useCallback(params => {\n    const {\n      id\n    } = params,\n          other = _objectWithoutPropertiesLoose(params, _excluded2);\n\n    throwIfNotInMode(id, GridRowModes.Edit);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.View\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  const updateStateToStopRowEditMode = useEventCallback(params => {\n    const {\n      id,\n      ignoreModifications,\n      field: focusedField,\n      cellToFocusAfter = 'none'\n    } = params;\n    apiRef.current.runPendingEditCellValueMutation(id);\n\n    const finishRowEditMode = () => {\n      if (cellToFocusAfter !== 'none' && focusedField) {\n        apiRef.current.moveFocusToRelativeCell(id, focusedField, cellToFocusAfter);\n      }\n\n      updateOrDeleteRowState(id, null);\n      updateRowInRowModesModel(id, null);\n    };\n\n    if (ignoreModifications) {\n      finishRowEditMode();\n      return;\n    }\n\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n    const isSomeFieldProcessingProps = Object.values(editingState[id]).some(fieldProps => fieldProps.isProcessingProps);\n\n    if (isSomeFieldProcessingProps) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit;\n      return;\n    }\n\n    if (hasFieldsWithErrors(id)) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit; // Revert the mode in the rowModesModel prop back to \"edit\"\n\n      updateRowInRowModesModel(id, {\n        mode: GridRowModes.Edit\n      });\n      return;\n    }\n\n    const rowUpdate = apiRef.current.getRowWithUpdatedValuesFromRowEditing(id);\n\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        prevRowModesModel.current[id].mode = GridRowModes.Edit; // Revert the mode in the rowModesModel prop back to \"edit\"\n\n        updateRowInRowModesModel(id, {\n          mode: GridRowModes.Edit\n        });\n\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else if (process.env.NODE_ENV !== 'production') {\n          missingOnProcessRowUpdateErrorWarning();\n        }\n      };\n\n      try {\n        Promise.resolve(processRowUpdate(rowUpdate, row)).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishRowEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishRowEditMode();\n    }\n  });\n  const setRowEditingEditCellValue = React.useCallback(params => {\n    const {\n      id,\n      field,\n      value,\n      debounceMs,\n      unstable_skipValueParser: skipValueParser\n    } = params;\n    throwIfNotEditable(id, field);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n\n    if (column.valueParser && !skipValueParser) {\n      parsedValue = column.valueParser(value, row, column, apiRef);\n    }\n\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue,\n      changeReason: debounceMs ? 'debouncedSetEditCellValue' : 'setEditCellValue'\n    });\n\n    if (!column.preProcessEditCellProps) {\n      updateOrDeleteFieldState(id, field, newProps);\n    }\n\n    return new Promise(resolve => {\n      const promises = [];\n\n      if (column.preProcessEditCellProps) {\n        const hasChanged = newProps.value !== editingState[id][field].value;\n        newProps = _extends({}, newProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, field, newProps);\n\n        const _editingState$id = editingState[id],\n              otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id, [field].map(_toPropertyKey));\n\n        const promise = Promise.resolve(column.preProcessEditCellProps({\n          id,\n          row,\n          props: newProps,\n          hasChanged,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          }); // We don't reuse the value from the props pre-processing because when the\n          // promise resolves it may be already outdated. The only exception to this rule\n          // is when there's no pre-processing.\n\n          processedProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n          updateOrDeleteFieldState(id, field, processedProps);\n        });\n        promises.push(promise);\n      }\n\n      Object.entries(editingState[id]).forEach(_ref => {\n        let [thisField, fieldProps] = _ref;\n\n        if (thisField === field) {\n          return;\n        }\n\n        const fieldColumn = apiRef.current.getColumn(thisField);\n\n        if (!fieldColumn.preProcessEditCellProps) {\n          return;\n        }\n\n        fieldProps = _extends({}, fieldProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, thisField, fieldProps);\n        editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n        const _editingState$id2 = editingState[id],\n              otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id2, [thisField].map(_toPropertyKey));\n\n        const promise = Promise.resolve(fieldColumn.preProcessEditCellProps({\n          id,\n          row,\n          props: fieldProps,\n          hasChanged: false,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          });\n          updateOrDeleteFieldState(id, thisField, processedProps);\n        });\n        promises.push(promise);\n      });\n      Promise.all(promises).then(() => {\n        if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          resolve(!editingState[id][field].error);\n        } else {\n          resolve(false);\n        }\n      });\n    });\n  }, [apiRef, throwIfNotEditable, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromRowEditing = React.useCallback(id => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n\n    if (!editingState[id]) {\n      return apiRef.current.getRow(id);\n    }\n\n    let rowUpdate = _extends({}, row);\n\n    Object.entries(editingState[id]).forEach(_ref2 => {\n      let [field, fieldProps] = _ref2;\n      const column = apiRef.current.getColumn(field);\n\n      if (column.valueSetter) {\n        rowUpdate = column.valueSetter(fieldProps.value, rowUpdate, column, apiRef);\n      } else {\n        rowUpdate[field] = fieldProps.value;\n      }\n    });\n    return rowUpdate;\n  }, [apiRef]);\n  const editingApi = {\n    getRowMode,\n    startRowEditMode,\n    stopRowEditMode\n  };\n  const editingPrivateApi = {\n    setRowEditingEditCellValue,\n    getRowWithUpdatedValuesFromRowEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'public');\n  useGridApiMethod(apiRef, editingPrivateApi, 'private');\n  React.useEffect(() => {\n    if (rowModesModelProp) {\n      updateRowModesModel(rowModesModelProp);\n    }\n  }, [rowModesModelProp, updateRowModesModel]); // Run this effect synchronously so that the keyboard event can impact the yet-to-be-rendered input.\n\n  useEnhancedEffect(() => {\n    const idToIdLookup = gridRowsDataRowIdToIdLookupSelector(apiRef); // Update the ref here because updateStateToStopRowEditMode may change it later\n\n    const copyOfPrevRowModesModel = prevRowModesModel.current;\n    prevRowModesModel.current = deepClone(rowModesModel); // Do a deep-clone because the attributes might be changed later\n\n    const ids = new Set([...Object.keys(rowModesModel), ...Object.keys(copyOfPrevRowModesModel)]);\n    Array.from(ids).forEach(id => {\n      const params = rowModesModel[id] ?? {\n        mode: GridRowModes.View\n      };\n      const prevMode = copyOfPrevRowModesModel[id]?.mode || GridRowModes.View;\n      const originalId = idToIdLookup[id] ?? id;\n\n      if (params.mode === GridRowModes.Edit && prevMode === GridRowModes.View) {\n        updateStateToStartRowEditMode(_extends({\n          id: originalId\n        }, params));\n      } else if (params.mode === GridRowModes.View && prevMode === GridRowModes.Edit) {\n        updateStateToStopRowEditMode(_extends({\n          id: originalId\n        }, params));\n      }\n    });\n  }, [apiRef, rowModesModel, updateStateToStartRowEditMode, updateStateToStopRowEditMode]);\n};","map":{"version":3,"names":["_toPropertyKey","_objectWithoutPropertiesLoose","_extends","_excluded","_excluded2","React","unstable_useEventCallback","useEventCallback","unstable_useEnhancedEffect","useEnhancedEffect","useGridApiEventHandler","useGridApiOptionHandler","GridEditModes","GridRowModes","useGridApiMethod","gridEditRowsStateSelector","isPrintableKey","isPasteShortcut","gridColumnFieldsSelector","gridVisibleColumnFieldsSelector","buildWarning","gridRowsDataRowIdToIdLookupSelector","deepClone","GridRowEditStopReasons","GridRowEditStartReasons","GRID_ACTIONS_COLUMN_TYPE","missingOnProcessRowUpdateErrorWarning","useGridRowEditing","apiRef","props","rowModesModel","setRowModesModel","useState","rowModesModelRef","useRef","prevRowModesModel","focusTimeout","nextFocusedCell","processRowUpdate","onProcessRowUpdateError","rowModesModelProp","onRowModesModelChange","runIfEditModeIsRow","callback","editMode","Row","throwIfNotEditable","useCallback","id","field","params","current","getCellParams","isCellEditable","Error","throwIfNotInMode","mode","getRowMode","hasFieldsWithErrors","rowId","editingState","state","Object","values","some","fieldProps","error","handleCellDoubleClick","event","isEditable","Edit","rowParams","getRowParams","newParams","reason","cellDoubleClick","publishEvent","handleCellFocusIn","handleCellFocusOut","View","setTimeout","getRow","rowFocusOut","useEffect","clearTimeout","handleCellKeyDown","cellMode","which","key","escapeKeyDown","enterKeyDown","columnFields","filter","column","getColumn","type","shiftKey","shiftTabKeyDown","length","tabKeyDown","preventDefault","index","findIndex","nextFieldToFocus","setCellFocus","canStartEditing","unstable_applyPipeProcessors","cellParams","printableKeyDown","deleteKeyDown","handleRowEditStart","startRowEditModeParams","fieldToFocus","deleteValue","startRowEditMode","handleRowEditStop","runPendingEditCellValueMutation","cellToFocusAfter","ignoreModifications","stopRowEditMode","onRowEditStart","onRowEditStop","Cell","isEditing","keys","updateRowModesModel","newModel","isNewModelDifferentFromProp","api","updateRowInRowModesModel","newProps","updateOrDeleteRowState","setState","newEditingState","editRows","forceUpdate","updateOrDeleteFieldState","other","updateStateToStartRowEditMode","initialValue","reduce","acc","newValue","getCellValue","value","isProcessingProps","updateStateToStopRowEditMode","focusedField","finishRowEditMode","moveFocusToRelativeCell","row","isSomeFieldProcessingProps","rowUpdate","getRowWithUpdatedValuesFromRowEditing","handleError","errorThrown","process","env","NODE_ENV","Promise","resolve","then","finalRowUpdate","updateRows","catch","setRowEditingEditCellValue","debounceMs","unstable_skipValueParser","skipValueParser","parsedValue","valueParser","changeReason","preProcessEditCellProps","promises","hasChanged","_editingState$id","otherFieldsProps","map","promise","processedProps","push","entries","forEach","thisField","fieldColumn","_editingState$id2","all","valueSetter","editingApi","editingPrivateApi","idToIdLookup","copyOfPrevRowModesModel","ids","Set","Array","from","prevMode","originalId"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/@mui/x-data-grid/hooks/features/editing/useGridRowEditing.js"],"sourcesContent":["import _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"id\"],\n  _excluded2 = [\"id\"];\nimport * as React from 'react';\nimport { unstable_useEventCallback as useEventCallback, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { GridEditModes, GridRowModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditingSelectors';\nimport { isPrintableKey, isPasteShortcut } from '../../../utils/keyboardUtils';\nimport { gridColumnFieldsSelector, gridVisibleColumnFieldsSelector } from '../columns/gridColumnsSelector';\nimport { buildWarning } from '../../../utils/warning';\nimport { gridRowsDataRowIdToIdLookupSelector } from '../rows/gridRowsSelector';\nimport { deepClone } from '../../../utils/utils';\nimport { GridRowEditStopReasons, GridRowEditStartReasons } from '../../../models/params/gridRowParams';\nimport { GRID_ACTIONS_COLUMN_TYPE } from '../../../colDef';\nconst missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI X: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, for example `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see https://mui.com/x/react-data-grid/editing/#server-side-persistence.'], 'error');\nexport const useGridRowEditing = (apiRef, props) => {\n  const [rowModesModel, setRowModesModel] = React.useState({});\n  const rowModesModelRef = React.useRef(rowModesModel);\n  const prevRowModesModel = React.useRef({});\n  const focusTimeout = React.useRef();\n  const nextFocusedCell = React.useRef(null);\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError,\n    rowModesModel: rowModesModelProp,\n    onRowModesModelChange\n  } = props;\n  const runIfEditModeIsRow = callback => (...args) => {\n    if (props.editMode === GridEditModes.Row) {\n      callback(...args);\n    }\n  };\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI X: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, mode) => {\n    if (apiRef.current.getRowMode(id) !== mode) {\n      throw new Error(`MUI X: The row with id=${id} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const hasFieldsWithErrors = React.useCallback(rowId => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    return Object.values(editingState[rowId]).some(fieldProps => fieldProps.error);\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.Edit) {\n      return;\n    }\n    const rowParams = apiRef.current.getRowParams(params.id);\n    const newParams = _extends({}, rowParams, {\n      field: params.field,\n      reason: GridRowEditStartReasons.cellDoubleClick\n    });\n    apiRef.current.publishEvent('rowEditStart', newParams, event);\n  }, [apiRef]);\n  const handleCellFocusIn = React.useCallback(params => {\n    nextFocusedCell.current = params;\n  }, []);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n      return;\n    }\n    // The mechanism to detect if we can stop editing a row is different from\n    // the cell editing. Instead of triggering it when clicking outside a cell,\n    // we must check if another cell in the same row was not clicked. To achieve\n    // that, first we keep track of all cells that gained focus. When a cell loses\n    // focus we check if the next cell that received focus is from a different row.\n    nextFocusedCell.current = null;\n    focusTimeout.current = setTimeout(() => {\n      if (nextFocusedCell.current?.id !== params.id) {\n        // The row might have been deleted during the click\n        if (!apiRef.current.getRow(params.id)) {\n          return;\n        }\n\n        // The row may already changed its mode\n        if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n          return;\n        }\n        if (hasFieldsWithErrors(params.id)) {\n          return;\n        }\n        const rowParams = apiRef.current.getRowParams(params.id);\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          reason: GridRowEditStopReasons.rowFocusOut\n        });\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    });\n  }, [apiRef, hasFieldsWithErrors]);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(focusTimeout.current);\n    };\n  }, []);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridRowModes.Edit) {\n      // Wait until IME is settled for Asian languages like Japanese and Chinese\n      // TODO: `event.which` is deprecated but this is a temporary workaround\n      if (event.which === 229) {\n        return;\n      }\n      let reason;\n      if (event.key === 'Escape') {\n        reason = GridRowEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        const columnFields = gridVisibleColumnFieldsSelector(apiRef).filter(field => {\n          const column = apiRef.current.getColumn(field);\n          if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n            return true;\n          }\n          return apiRef.current.isCellEditable(apiRef.current.getCellParams(params.id, field));\n        });\n        if (event.shiftKey) {\n          if (params.field === columnFields[0]) {\n            // Exit if user pressed Shift+Tab on the first field\n            reason = GridRowEditStopReasons.shiftTabKeyDown;\n          }\n        } else if (params.field === columnFields[columnFields.length - 1]) {\n          // Exit if user pressed Tab on the last field\n          reason = GridRowEditStopReasons.tabKeyDown;\n        }\n\n        // Always prevent going to the next element in the tab sequence because the focus is\n        // handled manually to support edit components rendered inside Portals\n        event.preventDefault();\n        if (!reason) {\n          const index = columnFields.findIndex(field => field === params.field);\n          const nextFieldToFocus = columnFields[event.shiftKey ? index - 1 : index + 1];\n          apiRef.current.setCellFocus(params.id, nextFieldToFocus);\n        }\n      }\n      if (reason) {\n        if (reason !== GridRowEditStopReasons.escapeKeyDown && hasFieldsWithErrors(params.id)) {\n          return;\n        }\n        const newParams = _extends({}, apiRef.current.getRowParams(params.id), {\n          reason,\n          field: params.field\n        });\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n      const canStartEditing = apiRef.current.unstable_applyPipeProcessors('canStartEditing', true, {\n        event,\n        cellParams: params,\n        editMode: 'row'\n      });\n      if (!canStartEditing) {\n        return;\n      }\n      if (isPrintableKey(event)) {\n        reason = GridRowEditStartReasons.printableKeyDown;\n      } else if (isPasteShortcut(event)) {\n        reason = GridRowEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Backspace' || event.key === 'Delete') {\n        reason = GridRowEditStartReasons.deleteKeyDown;\n      }\n      if (reason) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          reason\n        });\n        apiRef.current.publishEvent('rowEditStart', newParams, event);\n      }\n    }\n  }, [apiRef, hasFieldsWithErrors]);\n  const handleRowEditStart = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    const startRowEditModeParams = {\n      id,\n      fieldToFocus: field\n    };\n    if (reason === GridRowEditStartReasons.printableKeyDown || reason === GridRowEditStartReasons.deleteKeyDown) {\n      startRowEditModeParams.deleteValue = !!field;\n    }\n    apiRef.current.startRowEditMode(startRowEditModeParams);\n  }, [apiRef]);\n  const handleRowEditStop = React.useCallback(params => {\n    const {\n      id,\n      reason,\n      field\n    } = params;\n    apiRef.current.runPendingEditCellValueMutation(id);\n    let cellToFocusAfter;\n    if (reason === GridRowEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridRowEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridRowEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n    const ignoreModifications = reason === 'escapeKeyDown';\n    apiRef.current.stopRowEditMode({\n      id,\n      ignoreModifications,\n      field,\n      cellToFocusAfter\n    });\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsRow(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusIn', runIfEditModeIsRow(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsRow(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsRow(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'rowEditStart', runIfEditModeIsRow(handleRowEditStart));\n  useGridApiEventHandler(apiRef, 'rowEditStop', runIfEditModeIsRow(handleRowEditStop));\n  useGridApiOptionHandler(apiRef, 'rowEditStart', props.onRowEditStart);\n  useGridApiOptionHandler(apiRef, 'rowEditStop', props.onRowEditStop);\n  const getRowMode = React.useCallback(id => {\n    if (props.editMode === GridEditModes.Cell) {\n      return GridRowModes.View;\n    }\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && Object.keys(editingState[id]).length > 0;\n    return isEditing ? GridRowModes.Edit : GridRowModes.View;\n  }, [apiRef, props.editMode]);\n  const updateRowModesModel = useEventCallback(newModel => {\n    const isNewModelDifferentFromProp = newModel !== props.rowModesModel;\n    if (onRowModesModelChange && isNewModelDifferentFromProp) {\n      onRowModesModelChange(newModel, {\n        api: apiRef.current\n      });\n    }\n    if (props.rowModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n    setRowModesModel(newModel);\n    rowModesModelRef.current = newModel;\n    apiRef.current.publishEvent('rowModesModelChange', newModel);\n  });\n  const updateRowInRowModesModel = React.useCallback((id, newProps) => {\n    const newModel = _extends({}, rowModesModelRef.current);\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newProps);\n    } else {\n      delete newModel[id];\n    }\n    updateRowModesModel(newModel);\n  }, [updateRowModesModel]);\n  const updateOrDeleteRowState = React.useCallback((id, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n      if (newProps !== null) {\n        newEditingState[id] = newProps;\n      } else {\n        delete newEditingState[id];\n      }\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startRowEditMode = React.useCallback(params => {\n    const {\n        id\n      } = params,\n      other = _objectWithoutPropertiesLoose(params, _excluded);\n    throwIfNotInMode(id, GridRowModes.View);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.Edit\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  const updateStateToStartRowEditMode = useEventCallback(params => {\n    const {\n      id,\n      fieldToFocus,\n      deleteValue,\n      initialValue\n    } = params;\n    const columnFields = gridColumnFieldsSelector(apiRef);\n    const newProps = columnFields.reduce((acc, field) => {\n      const cellParams = apiRef.current.getCellParams(id, field);\n      if (!cellParams.isEditable) {\n        return acc;\n      }\n      let newValue = apiRef.current.getCellValue(id, field);\n      if (fieldToFocus === field && (deleteValue || initialValue)) {\n        newValue = deleteValue ? '' : initialValue;\n      }\n      acc[field] = {\n        value: newValue,\n        error: false,\n        isProcessingProps: false\n      };\n      return acc;\n    }, {});\n    updateOrDeleteRowState(id, newProps);\n    if (fieldToFocus) {\n      apiRef.current.setCellFocus(id, fieldToFocus);\n    }\n  });\n  const stopRowEditMode = React.useCallback(params => {\n    const {\n        id\n      } = params,\n      other = _objectWithoutPropertiesLoose(params, _excluded2);\n    throwIfNotInMode(id, GridRowModes.Edit);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.View\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  const updateStateToStopRowEditMode = useEventCallback(params => {\n    const {\n      id,\n      ignoreModifications,\n      field: focusedField,\n      cellToFocusAfter = 'none'\n    } = params;\n    apiRef.current.runPendingEditCellValueMutation(id);\n    const finishRowEditMode = () => {\n      if (cellToFocusAfter !== 'none' && focusedField) {\n        apiRef.current.moveFocusToRelativeCell(id, focusedField, cellToFocusAfter);\n      }\n      updateOrDeleteRowState(id, null);\n      updateRowInRowModesModel(id, null);\n    };\n    if (ignoreModifications) {\n      finishRowEditMode();\n      return;\n    }\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n    const isSomeFieldProcessingProps = Object.values(editingState[id]).some(fieldProps => fieldProps.isProcessingProps);\n    if (isSomeFieldProcessingProps) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit;\n      return;\n    }\n    if (hasFieldsWithErrors(id)) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit;\n      // Revert the mode in the rowModesModel prop back to \"edit\"\n      updateRowInRowModesModel(id, {\n        mode: GridRowModes.Edit\n      });\n      return;\n    }\n    const rowUpdate = apiRef.current.getRowWithUpdatedValuesFromRowEditing(id);\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        prevRowModesModel.current[id].mode = GridRowModes.Edit;\n        // Revert the mode in the rowModesModel prop back to \"edit\"\n        updateRowInRowModesModel(id, {\n          mode: GridRowModes.Edit\n        });\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else if (process.env.NODE_ENV !== 'production') {\n          missingOnProcessRowUpdateErrorWarning();\n        }\n      };\n      try {\n        Promise.resolve(processRowUpdate(rowUpdate, row)).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishRowEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishRowEditMode();\n    }\n  });\n  const setRowEditingEditCellValue = React.useCallback(params => {\n    const {\n      id,\n      field,\n      value,\n      debounceMs,\n      unstable_skipValueParser: skipValueParser\n    } = params;\n    throwIfNotEditable(id, field);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n    if (column.valueParser && !skipValueParser) {\n      parsedValue = column.valueParser(value, row, column, apiRef);\n    }\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue,\n      changeReason: debounceMs ? 'debouncedSetEditCellValue' : 'setEditCellValue'\n    });\n    if (!column.preProcessEditCellProps) {\n      updateOrDeleteFieldState(id, field, newProps);\n    }\n    return new Promise(resolve => {\n      const promises = [];\n      if (column.preProcessEditCellProps) {\n        const hasChanged = newProps.value !== editingState[id][field].value;\n        newProps = _extends({}, newProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, field, newProps);\n        const _editingState$id = editingState[id],\n          otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id, [field].map(_toPropertyKey));\n        const promise = Promise.resolve(column.preProcessEditCellProps({\n          id,\n          row,\n          props: newProps,\n          hasChanged,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          });\n          // We don't reuse the value from the props pre-processing because when the\n          // promise resolves it may be already outdated. The only exception to this rule\n          // is when there's no pre-processing.\n          processedProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n          updateOrDeleteFieldState(id, field, processedProps);\n        });\n        promises.push(promise);\n      }\n      Object.entries(editingState[id]).forEach(([thisField, fieldProps]) => {\n        if (thisField === field) {\n          return;\n        }\n        const fieldColumn = apiRef.current.getColumn(thisField);\n        if (!fieldColumn.preProcessEditCellProps) {\n          return;\n        }\n        fieldProps = _extends({}, fieldProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, thisField, fieldProps);\n        editingState = gridEditRowsStateSelector(apiRef.current.state);\n        const _editingState$id2 = editingState[id],\n          otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id2, [thisField].map(_toPropertyKey));\n        const promise = Promise.resolve(fieldColumn.preProcessEditCellProps({\n          id,\n          row,\n          props: fieldProps,\n          hasChanged: false,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          });\n          updateOrDeleteFieldState(id, thisField, processedProps);\n        });\n        promises.push(promise);\n      });\n      Promise.all(promises).then(() => {\n        if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          resolve(!editingState[id][field].error);\n        } else {\n          resolve(false);\n        }\n      });\n    });\n  }, [apiRef, throwIfNotEditable, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromRowEditing = React.useCallback(id => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n    if (!editingState[id]) {\n      return apiRef.current.getRow(id);\n    }\n    let rowUpdate = _extends({}, row);\n    Object.entries(editingState[id]).forEach(([field, fieldProps]) => {\n      const column = apiRef.current.getColumn(field);\n      if (column.valueSetter) {\n        rowUpdate = column.valueSetter(fieldProps.value, rowUpdate, column, apiRef);\n      } else {\n        rowUpdate[field] = fieldProps.value;\n      }\n    });\n    return rowUpdate;\n  }, [apiRef]);\n  const editingApi = {\n    getRowMode,\n    startRowEditMode,\n    stopRowEditMode\n  };\n  const editingPrivateApi = {\n    setRowEditingEditCellValue,\n    getRowWithUpdatedValuesFromRowEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'public');\n  useGridApiMethod(apiRef, editingPrivateApi, 'private');\n  React.useEffect(() => {\n    if (rowModesModelProp) {\n      updateRowModesModel(rowModesModelProp);\n    }\n  }, [rowModesModelProp, updateRowModesModel]);\n\n  // Run this effect synchronously so that the keyboard event can impact the yet-to-be-rendered input.\n  useEnhancedEffect(() => {\n    const idToIdLookup = gridRowsDataRowIdToIdLookupSelector(apiRef);\n\n    // Update the ref here because updateStateToStopRowEditMode may change it later\n    const copyOfPrevRowModesModel = prevRowModesModel.current;\n    prevRowModesModel.current = deepClone(rowModesModel); // Do a deep-clone because the attributes might be changed later\n\n    const ids = new Set([...Object.keys(rowModesModel), ...Object.keys(copyOfPrevRowModesModel)]);\n    Array.from(ids).forEach(id => {\n      const params = rowModesModel[id] ?? {\n        mode: GridRowModes.View\n      };\n      const prevMode = copyOfPrevRowModesModel[id]?.mode || GridRowModes.View;\n      const originalId = idToIdLookup[id] ?? id;\n      if (params.mode === GridRowModes.Edit && prevMode === GridRowModes.View) {\n        updateStateToStartRowEditMode(_extends({\n          id: originalId\n        }, params));\n      } else if (params.mode === GridRowModes.View && prevMode === GridRowModes.Edit) {\n        updateStateToStopRowEditMode(_extends({\n          id: originalId\n        }, params));\n      }\n    });\n  }, [apiRef, rowModesModel, updateStateToStartRowEditMode, updateStateToStopRowEditMode]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}