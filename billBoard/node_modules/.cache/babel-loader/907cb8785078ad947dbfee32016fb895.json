{"ast":null,"code":"import * as React from 'react';\nimport clsx from 'clsx';\nimport { alpha, styled } from '@mui/material/styles';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Value = styled('div')(_ref => {\n  let {\n    theme\n  } = _ref;\n  return {\n    width: '100%',\n    height: '100%',\n    lineHeight: '100%',\n    paddingRight: 8,\n    fontVariantNumeric: 'tabular-nums',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    '&.good': {\n      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.success.mainChannel} /  0.3)` : alpha(theme.palette.success.main, 0.3)\n    },\n    '&.bad': {\n      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.error.mainChannel} /  0.3)` : alpha(theme.palette.error.main, 0.3)\n    }\n  };\n});\nconst currencyFormatter = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD'\n});\nconst TotalPrice = /*#__PURE__*/React.memo(function TotalPrice(props) {\n  const {\n    value\n  } = props;\n  return /*#__PURE__*/_jsx(Value, {\n    className: clsx(value > 1000000 && \"good\", value < 1000000 && \"bad\"),\n    children: currencyFormatter.format(value)\n  });\n});\nexport function renderTotalPrice(params) {\n  if (params.value == null) {\n    return '';\n  } // If the aggregated value does not have the same unit as the other cell\n  // Then we fall back to the default rendering based on `valueGetter` instead of rendering the total price UI.\n\n\n  if (params.aggregation && !params.aggregation.hasCellUnit) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsx(TotalPrice, {\n    value: params.value\n  });\n}","map":{"version":3,"names":["React","clsx","alpha","styled","jsx","_jsx","Value","theme","width","height","lineHeight","paddingRight","fontVariantNumeric","display","alignItems","justifyContent","backgroundColor","vars","palette","success","mainChannel","main","error","currencyFormatter","Intl","NumberFormat","style","currency","TotalPrice","memo","props","value","className","children","format","renderTotalPrice","params","aggregation","hasCellUnit"],"sources":["C:/Users/kb/node_modules/@mui/x-data-grid-generator/renderer/renderTotalPrice.js"],"sourcesContent":["import * as React from 'react';\nimport clsx from 'clsx';\nimport { alpha, styled } from '@mui/material/styles';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Value = styled('div')(({\n  theme\n}) => ({\n  width: '100%',\n  height: '100%',\n  lineHeight: '100%',\n  paddingRight: 8,\n  fontVariantNumeric: 'tabular-nums',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'flex-end',\n  '&.good': {\n    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.success.mainChannel} /  0.3)` : alpha(theme.palette.success.main, 0.3)\n  },\n  '&.bad': {\n    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.error.mainChannel} /  0.3)` : alpha(theme.palette.error.main, 0.3)\n  }\n}));\nconst currencyFormatter = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD'\n});\nconst TotalPrice = /*#__PURE__*/React.memo(function TotalPrice(props) {\n  const {\n    value\n  } = props;\n  return /*#__PURE__*/_jsx(Value, {\n    className: clsx(value > 1000000 && \"good\", value < 1000000 && \"bad\"),\n    children: currencyFormatter.format(value)\n  });\n});\nexport function renderTotalPrice(params) {\n  if (params.value == null) {\n    return '';\n  }\n\n  // If the aggregated value does not have the same unit as the other cell\n  // Then we fall back to the default rendering based on `valueGetter` instead of rendering the total price UI.\n  if (params.aggregation && !params.aggregation.hasCellUnit) {\n    return null;\n  }\n  return /*#__PURE__*/_jsx(TotalPrice, {\n    value: params.value\n  });\n}"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,sBAA9B;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;AACA,MAAMC,KAAK,GAAGH,MAAM,CAAC,KAAD,CAAN,CAAc;EAAA,IAAC;IAC3BI;EAD2B,CAAD;EAAA,OAErB;IACLC,KAAK,EAAE,MADF;IAELC,MAAM,EAAE,MAFH;IAGLC,UAAU,EAAE,MAHP;IAILC,YAAY,EAAE,CAJT;IAKLC,kBAAkB,EAAE,cALf;IAMLC,OAAO,EAAE,MANJ;IAOLC,UAAU,EAAE,QAPP;IAQLC,cAAc,EAAE,UARX;IASL,UAAU;MACRC,eAAe,EAAET,KAAK,CAACU,IAAN,GAAc,QAAOV,KAAK,CAACU,IAAN,CAAWC,OAAX,CAAmBC,OAAnB,CAA2BC,WAAY,UAA5D,GAAwElB,KAAK,CAACK,KAAK,CAACW,OAAN,CAAcC,OAAd,CAAsBE,IAAvB,EAA6B,GAA7B;IADtF,CATL;IAYL,SAAS;MACPL,eAAe,EAAET,KAAK,CAACU,IAAN,GAAc,QAAOV,KAAK,CAACU,IAAN,CAAWC,OAAX,CAAmBI,KAAnB,CAAyBF,WAAY,UAA1D,GAAsElB,KAAK,CAACK,KAAK,CAACW,OAAN,CAAcI,KAAd,CAAoBD,IAArB,EAA2B,GAA3B;IADrF;EAZJ,CAFqB;AAAA,CAAd,CAAd;AAkBA,MAAME,iBAAiB,GAAG,IAAIC,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;EACvDC,KAAK,EAAE,UADgD;EAEvDC,QAAQ,EAAE;AAF6C,CAA/B,CAA1B;AAIA,MAAMC,UAAU,GAAG,aAAa5B,KAAK,CAAC6B,IAAN,CAAW,SAASD,UAAT,CAAoBE,KAApB,EAA2B;EACpE,MAAM;IACJC;EADI,IAEFD,KAFJ;EAGA,OAAO,aAAazB,IAAI,CAACC,KAAD,EAAQ;IAC9B0B,SAAS,EAAE/B,IAAI,CAAC8B,KAAK,GAAG,OAAR,IAAmB,MAApB,EAA4BA,KAAK,GAAG,OAAR,IAAmB,KAA/C,CADe;IAE9BE,QAAQ,EAAEV,iBAAiB,CAACW,MAAlB,CAAyBH,KAAzB;EAFoB,CAAR,CAAxB;AAID,CAR+B,CAAhC;AASA,OAAO,SAASI,gBAAT,CAA0BC,MAA1B,EAAkC;EACvC,IAAIA,MAAM,CAACL,KAAP,IAAgB,IAApB,EAA0B;IACxB,OAAO,EAAP;EACD,CAHsC,CAKvC;EACA;;;EACA,IAAIK,MAAM,CAACC,WAAP,IAAsB,CAACD,MAAM,CAACC,WAAP,CAAmBC,WAA9C,EAA2D;IACzD,OAAO,IAAP;EACD;;EACD,OAAO,aAAajC,IAAI,CAACuB,UAAD,EAAa;IACnCG,KAAK,EAAEK,MAAM,CAACL;EADqB,CAAb,CAAxB;AAGD"},"metadata":{},"sourceType":"module"}