{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\n/**\n * Implement the Pipeline Pattern\n *\n * More information and detailed example in (TODO add link to technical doc when ready)\n *\n * Some plugins contains custom logic to enrich data provided by other plugins or components.\n * For instance, the row grouping plugin needs to add / remove the grouping columns when the grid columns are updated.\n *\n * =====================================================================================================================\n *\n * The plugin containing the custom logic must use:\n *\n * - `useGridRegisterPipeProcessor` to register their processor.\n *\n * - `apiRef.current.requestPipeProcessorsApplication` to imperatively re-apply a group.\n *   This method should be used in last resort.\n *   Most of the time, the application should be triggered by an update on the deps of the processor.\n *\n * =====================================================================================================================\n *\n * The plugin or component that needs to enrich its data must use:\n *\n * - `apiRef.current.unstable_applyPipeProcessors` to run in chain all the processors of a given group.\n *\n * - `useGridRegisterPipeApplier` to re-apply the whole pipe when requested.\n *   The applier will be called when:\n *   * a processor is registered.\n *   * `apiRef.current.requestPipeProcessorsApplication` is called for the given group.\n */\n\nexport const useGridPipeProcessing = apiRef => {\n  const cache = React.useRef({});\n  const isRunning = React.useRef(false);\n  const runAppliers = React.useCallback(groupCache => {\n    if (isRunning.current || !groupCache) {\n      return;\n    }\n\n    isRunning.current = true;\n    Object.values(groupCache.appliers).forEach(callback => {\n      callback();\n    });\n    isRunning.current = false;\n  }, []);\n  const registerPipeProcessor = React.useCallback((group, id, processor) => {\n    if (!cache.current[group]) {\n      cache.current[group] = {\n        processors: new Map(),\n        processorsAsArray: [],\n        appliers: {}\n      };\n    }\n\n    const groupCache = cache.current[group];\n    const oldProcessor = groupCache.processors.get(id);\n\n    if (oldProcessor !== processor) {\n      groupCache.processors.set(id, processor);\n      groupCache.processorsAsArray = Array.from(cache.current[group].processors.values());\n      runAppliers(groupCache);\n    }\n\n    return () => {\n      cache.current[group].processors.delete(id);\n      cache.current[group].processorsAsArray = Array.from(cache.current[group].processors.values());\n    };\n  }, [runAppliers]);\n  const registerPipeApplier = React.useCallback((group, id, applier) => {\n    if (!cache.current[group]) {\n      cache.current[group] = {\n        processors: new Map(),\n        processorsAsArray: [],\n        appliers: {}\n      };\n    }\n\n    cache.current[group].appliers[id] = applier;\n    return () => {\n      const _appliers = cache.current[group].appliers,\n            otherAppliers = _objectWithoutPropertiesLoose(_appliers, [id].map(_toPropertyKey));\n\n      cache.current[group].appliers = otherAppliers;\n    };\n  }, []);\n  const requestPipeProcessorsApplication = React.useCallback(group => {\n    runAppliers(cache.current[group]);\n  }, [runAppliers]);\n  const applyPipeProcessors = React.useCallback(function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    const [group, value, context] = args;\n\n    if (!cache.current[group]) {\n      return value;\n    }\n\n    const processors = cache.current[group].processorsAsArray;\n    let result = value;\n\n    for (let i = 0; i < processors.length; i += 1) {\n      result = processors[i](result, context);\n    }\n\n    return result;\n  }, []);\n  const preProcessingPrivateApi = {\n    registerPipeProcessor,\n    registerPipeApplier,\n    requestPipeProcessorsApplication\n  };\n  const preProcessingPublicApi = {\n    unstable_applyPipeProcessors: applyPipeProcessors\n  };\n  useGridApiMethod(apiRef, preProcessingPrivateApi, 'private');\n  useGridApiMethod(apiRef, preProcessingPublicApi, 'public');\n};","map":{"version":3,"names":["_objectWithoutPropertiesLoose","_toPropertyKey","React","useGridApiMethod","useGridPipeProcessing","apiRef","cache","useRef","isRunning","runAppliers","useCallback","groupCache","current","Object","values","appliers","forEach","callback","registerPipeProcessor","group","id","processor","processors","Map","processorsAsArray","oldProcessor","get","set","Array","from","delete","registerPipeApplier","applier","_appliers","otherAppliers","map","requestPipeProcessorsApplication","applyPipeProcessors","args","value","context","result","i","length","preProcessingPrivateApi","preProcessingPublicApi","unstable_applyPipeProcessors"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/@mui/x-data-grid/hooks/core/pipeProcessing/useGridPipeProcessing.js"],"sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\n/**\n * Implement the Pipeline Pattern\n *\n * More information and detailed example in (TODO add link to technical doc when ready)\n *\n * Some plugins contains custom logic to enrich data provided by other plugins or components.\n * For instance, the row grouping plugin needs to add / remove the grouping columns when the grid columns are updated.\n *\n * =====================================================================================================================\n *\n * The plugin containing the custom logic must use:\n *\n * - `useGridRegisterPipeProcessor` to register their processor.\n *\n * - `apiRef.current.requestPipeProcessorsApplication` to imperatively re-apply a group.\n *   This method should be used in last resort.\n *   Most of the time, the application should be triggered by an update on the deps of the processor.\n *\n * =====================================================================================================================\n *\n * The plugin or component that needs to enrich its data must use:\n *\n * - `apiRef.current.unstable_applyPipeProcessors` to run in chain all the processors of a given group.\n *\n * - `useGridRegisterPipeApplier` to re-apply the whole pipe when requested.\n *   The applier will be called when:\n *   * a processor is registered.\n *   * `apiRef.current.requestPipeProcessorsApplication` is called for the given group.\n */\nexport const useGridPipeProcessing = apiRef => {\n  const cache = React.useRef({});\n  const isRunning = React.useRef(false);\n  const runAppliers = React.useCallback(groupCache => {\n    if (isRunning.current || !groupCache) {\n      return;\n    }\n    isRunning.current = true;\n    Object.values(groupCache.appliers).forEach(callback => {\n      callback();\n    });\n    isRunning.current = false;\n  }, []);\n  const registerPipeProcessor = React.useCallback((group, id, processor) => {\n    if (!cache.current[group]) {\n      cache.current[group] = {\n        processors: new Map(),\n        processorsAsArray: [],\n        appliers: {}\n      };\n    }\n    const groupCache = cache.current[group];\n    const oldProcessor = groupCache.processors.get(id);\n    if (oldProcessor !== processor) {\n      groupCache.processors.set(id, processor);\n      groupCache.processorsAsArray = Array.from(cache.current[group].processors.values());\n      runAppliers(groupCache);\n    }\n    return () => {\n      cache.current[group].processors.delete(id);\n      cache.current[group].processorsAsArray = Array.from(cache.current[group].processors.values());\n    };\n  }, [runAppliers]);\n  const registerPipeApplier = React.useCallback((group, id, applier) => {\n    if (!cache.current[group]) {\n      cache.current[group] = {\n        processors: new Map(),\n        processorsAsArray: [],\n        appliers: {}\n      };\n    }\n    cache.current[group].appliers[id] = applier;\n    return () => {\n      const _appliers = cache.current[group].appliers,\n        otherAppliers = _objectWithoutPropertiesLoose(_appliers, [id].map(_toPropertyKey));\n      cache.current[group].appliers = otherAppliers;\n    };\n  }, []);\n  const requestPipeProcessorsApplication = React.useCallback(group => {\n    runAppliers(cache.current[group]);\n  }, [runAppliers]);\n  const applyPipeProcessors = React.useCallback((...args) => {\n    const [group, value, context] = args;\n    if (!cache.current[group]) {\n      return value;\n    }\n    const processors = cache.current[group].processorsAsArray;\n    let result = value;\n    for (let i = 0; i < processors.length; i += 1) {\n      result = processors[i](result, context);\n    }\n    return result;\n  }, []);\n  const preProcessingPrivateApi = {\n    registerPipeProcessor,\n    registerPipeApplier,\n    requestPipeProcessorsApplication\n  };\n  const preProcessingPublicApi = {\n    unstable_applyPipeProcessors: applyPipeProcessors\n  };\n  useGridApiMethod(apiRef, preProcessingPrivateApi, 'private');\n  useGridApiMethod(apiRef, preProcessingPublicApi, 'public');\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}