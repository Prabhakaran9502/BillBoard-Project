{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.removeDataRowFromTree = void 0;\n\nvar _xDataGrid = require(\"@mui/x-data-grid\");\n\nvar _utils = require(\"./utils\");\n\nconst removeNodeAndCleanParent = _ref => {\n  let {\n    node,\n    tree,\n    treeDepths,\n    updatedGroupsManager\n  } = _ref;\n  (0, _utils.removeNodeFromTree)({\n    node,\n    tree,\n    treeDepths\n  });\n\n  if (node.type === 'group' && node.footerId != null) {\n    (0, _utils.removeNodeFromTree)({\n      node: tree[node.footerId],\n      tree,\n      treeDepths\n    });\n  }\n\n  const parentNode = tree[node.parent];\n  updatedGroupsManager?.addAction(parentNode.id, 'removeChildren');\n  const shouldDeleteGroup = parentNode.id !== _xDataGrid.GRID_ROOT_GROUP_ID && parentNode.children.length === 0;\n\n  if (shouldDeleteGroup) {\n    if (parentNode.isAutoGenerated) {\n      removeNodeAndCleanParent({\n        node: parentNode,\n        tree,\n        treeDepths\n      });\n    } else {\n      tree[parentNode.id] = {\n        type: 'leaf',\n        id: parentNode.id,\n        depth: parentNode.depth,\n        parent: parentNode.parent,\n        groupingKey: parentNode.groupingKey\n      };\n    }\n  }\n};\n\nconst replaceDataGroupWithAutoGeneratedGroup = _ref2 => {\n  let {\n    node,\n    tree,\n    treeDepths,\n    updatedGroupsManager\n  } = _ref2;\n  updatedGroupsManager?.addAction(node.parent, 'removeChildren');\n  updatedGroupsManager?.addAction(node.parent, 'insertChildren');\n  (0, _utils.updateGroupNodeIdAndAutoGenerated)({\n    previousTree: null,\n    tree,\n    treeDepths,\n    node,\n    updatedNode: {\n      id: (0, _utils.getGroupRowIdFromPath)((0, _utils.getNodePathInTree)({\n        id: node.id,\n        tree\n      })),\n      isAutoGenerated: true\n    }\n  });\n};\n/**\n * Removed a data row from the tree.\n * If the node is a non-empty group, replace it with an auto-generated group to be able to keep displaying its children.\n * If not, remove it and recursively clean its parent with the following rules:\n * - An empty auto-generated should be removed from the tree\n * - An empty non-auto-generated should be turned into a leaf\n */\n\n\nconst removeDataRowFromTree = _ref3 => {\n  let {\n    id,\n    tree,\n    treeDepths,\n    updatedGroupsManager\n  } = _ref3;\n  const node = tree[id];\n\n  if (node.type === 'group' && node.children.length > 0) {\n    replaceDataGroupWithAutoGeneratedGroup({\n      node,\n      tree,\n      treeDepths,\n      updatedGroupsManager\n    });\n  } else {\n    removeNodeAndCleanParent({\n      node,\n      tree,\n      treeDepths,\n      updatedGroupsManager\n    });\n  }\n};\n\nexports.removeDataRowFromTree = removeDataRowFromTree;","map":{"version":3,"names":["Object","defineProperty","exports","value","removeDataRowFromTree","_xDataGrid","require","_utils","removeNodeAndCleanParent","node","tree","treeDepths","updatedGroupsManager","removeNodeFromTree","type","footerId","parentNode","parent","addAction","id","shouldDeleteGroup","GRID_ROOT_GROUP_ID","children","length","isAutoGenerated","depth","groupingKey","replaceDataGroupWithAutoGeneratedGroup","updateGroupNodeIdAndAutoGenerated","previousTree","updatedNode","getGroupRowIdFromPath","getNodePathInTree"],"sources":["C:/Users/kb/node_modules/@mui/x-data-grid-pro/utils/tree/removeDataRowFromTree.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.removeDataRowFromTree = void 0;\nvar _xDataGrid = require(\"@mui/x-data-grid\");\nvar _utils = require(\"./utils\");\nconst removeNodeAndCleanParent = ({\n  node,\n  tree,\n  treeDepths,\n  updatedGroupsManager\n}) => {\n  (0, _utils.removeNodeFromTree)({\n    node,\n    tree,\n    treeDepths\n  });\n  if (node.type === 'group' && node.footerId != null) {\n    (0, _utils.removeNodeFromTree)({\n      node: tree[node.footerId],\n      tree,\n      treeDepths\n    });\n  }\n  const parentNode = tree[node.parent];\n  updatedGroupsManager?.addAction(parentNode.id, 'removeChildren');\n  const shouldDeleteGroup = parentNode.id !== _xDataGrid.GRID_ROOT_GROUP_ID && parentNode.children.length === 0;\n  if (shouldDeleteGroup) {\n    if (parentNode.isAutoGenerated) {\n      removeNodeAndCleanParent({\n        node: parentNode,\n        tree,\n        treeDepths\n      });\n    } else {\n      tree[parentNode.id] = {\n        type: 'leaf',\n        id: parentNode.id,\n        depth: parentNode.depth,\n        parent: parentNode.parent,\n        groupingKey: parentNode.groupingKey\n      };\n    }\n  }\n};\nconst replaceDataGroupWithAutoGeneratedGroup = ({\n  node,\n  tree,\n  treeDepths,\n  updatedGroupsManager\n}) => {\n  updatedGroupsManager?.addAction(node.parent, 'removeChildren');\n  updatedGroupsManager?.addAction(node.parent, 'insertChildren');\n  (0, _utils.updateGroupNodeIdAndAutoGenerated)({\n    previousTree: null,\n    tree,\n    treeDepths,\n    node,\n    updatedNode: {\n      id: (0, _utils.getGroupRowIdFromPath)((0, _utils.getNodePathInTree)({\n        id: node.id,\n        tree\n      })),\n      isAutoGenerated: true\n    }\n  });\n};\n\n/**\n * Removed a data row from the tree.\n * If the node is a non-empty group, replace it with an auto-generated group to be able to keep displaying its children.\n * If not, remove it and recursively clean its parent with the following rules:\n * - An empty auto-generated should be removed from the tree\n * - An empty non-auto-generated should be turned into a leaf\n */\nconst removeDataRowFromTree = ({\n  id,\n  tree,\n  treeDepths,\n  updatedGroupsManager\n}) => {\n  const node = tree[id];\n  if (node.type === 'group' && node.children.length > 0) {\n    replaceDataGroupWithAutoGeneratedGroup({\n      node,\n      tree,\n      treeDepths,\n      updatedGroupsManager\n    });\n  } else {\n    removeNodeAndCleanParent({\n      node,\n      tree,\n      treeDepths,\n      updatedGroupsManager\n    });\n  }\n};\nexports.removeDataRowFromTree = removeDataRowFromTree;"],"mappings":"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"},"metadata":{},"sourceType":"script"}