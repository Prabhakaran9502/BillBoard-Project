{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridDensitySelector } from './densitySelector';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nexport const densityStateInitializer = (state, props) => _extends({}, state, {\n  density: props.initialState?.density ?? props.density ?? 'standard'\n});\nexport const useGridDensity = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useDensity');\n  apiRef.current.registerControlState({\n    stateId: 'density',\n    propModel: props.density,\n    propOnChange: props.onDensityChange,\n    stateSelector: gridDensitySelector,\n    changeEvent: 'densityChange'\n  });\n  const setDensity = useEventCallback(newDensity => {\n    const currentDensity = gridDensitySelector(apiRef.current.state);\n\n    if (currentDensity === newDensity) {\n      return;\n    }\n\n    logger.debug(`Set grid density to ${newDensity}`);\n    apiRef.current.setState(state => _extends({}, state, {\n      density: newDensity\n    }));\n  });\n  const densityApi = {\n    setDensity\n  };\n  useGridApiMethod(apiRef, densityApi, 'public');\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    const exportedDensity = gridDensitySelector(apiRef.current.state);\n    const shouldExportRowCount = // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels || // Always export if the `density` is controlled\n    props.density != null || // Always export if the `density` has been initialized\n    props.initialState?.density != null;\n\n    if (!shouldExportRowCount) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      density: exportedDensity\n    });\n  }, [apiRef, props.density, props.initialState?.density]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const restoredDensity = context.stateToRestore?.density ? context.stateToRestore.density : gridDensitySelector(apiRef.current.state);\n    apiRef.current.setState(state => _extends({}, state, {\n      density: restoredDensity\n    }));\n    return params;\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  React.useEffect(() => {\n    if (props.density) {\n      apiRef.current.setDensity(props.density);\n    }\n  }, [apiRef, props.density]);\n};","map":{"version":3,"names":["_extends","React","useEventCallback","useGridLogger","useGridApiMethod","gridDensitySelector","useGridRegisterPipeProcessor","densityStateInitializer","state","props","density","initialState","useGridDensity","apiRef","logger","current","registerControlState","stateId","propModel","propOnChange","onDensityChange","stateSelector","changeEvent","setDensity","newDensity","currentDensity","debug","setState","densityApi","stateExportPreProcessing","useCallback","prevState","context","exportedDensity","shouldExportRowCount","exportOnlyDirtyModels","stateRestorePreProcessing","params","restoredDensity","stateToRestore","useEffect"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/@mui/x-data-grid/hooks/features/density/useGridDensity.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridDensitySelector } from './densitySelector';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nexport const densityStateInitializer = (state, props) => _extends({}, state, {\n  density: props.initialState?.density ?? props.density ?? 'standard'\n});\nexport const useGridDensity = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useDensity');\n  apiRef.current.registerControlState({\n    stateId: 'density',\n    propModel: props.density,\n    propOnChange: props.onDensityChange,\n    stateSelector: gridDensitySelector,\n    changeEvent: 'densityChange'\n  });\n  const setDensity = useEventCallback(newDensity => {\n    const currentDensity = gridDensitySelector(apiRef.current.state);\n    if (currentDensity === newDensity) {\n      return;\n    }\n    logger.debug(`Set grid density to ${newDensity}`);\n    apiRef.current.setState(state => _extends({}, state, {\n      density: newDensity\n    }));\n  });\n  const densityApi = {\n    setDensity\n  };\n  useGridApiMethod(apiRef, densityApi, 'public');\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    const exportedDensity = gridDensitySelector(apiRef.current.state);\n    const shouldExportRowCount =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the `density` is controlled\n    props.density != null ||\n    // Always export if the `density` has been initialized\n    props.initialState?.density != null;\n    if (!shouldExportRowCount) {\n      return prevState;\n    }\n    return _extends({}, prevState, {\n      density: exportedDensity\n    });\n  }, [apiRef, props.density, props.initialState?.density]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const restoredDensity = context.stateToRestore?.density ? context.stateToRestore.density : gridDensitySelector(apiRef.current.state);\n    apiRef.current.setState(state => _extends({}, state, {\n      density: restoredDensity\n    }));\n    return params;\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  React.useEffect(() => {\n    if (props.density) {\n      apiRef.current.setDensity(props.density);\n    }\n  }, [apiRef, props.density]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}