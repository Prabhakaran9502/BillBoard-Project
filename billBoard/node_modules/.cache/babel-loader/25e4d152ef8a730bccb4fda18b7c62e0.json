{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_ownerDocument as ownerDocument, unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport useLazyRef from '@mui/utils/useLazyRef';\nimport { useTheme } from '@mui/material/styles';\nimport { findGridCellElementsFromCol, findGridElement, findLeftPinnedCellsAfterCol, findRightPinnedCellsBeforeCol, getFieldFromHeaderElem, findHeaderElementFromField, getFieldsFromGroupHeaderElem, findGroupHeaderElementsFromField, findGridHeader, findGridCells, findParentElementFromClassName, findLeftPinnedHeadersAfterCol, findRightPinnedHeadersBeforeCol, escapeOperandAttributeSelector } from '../../../utils/domUtils';\nimport { DEFAULT_GRID_AUTOSIZE_OPTIONS } from './gridColumnResizeApi';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { useGridApiEventHandler, useGridApiMethod, useGridApiOptionHandler, useGridLogger, useGridNativeEventListener, useGridSelector, useOnMount } from '../../utils';\nimport { gridVirtualizationColumnEnabledSelector } from '../virtualization';\nimport { createControllablePromise } from '../../../utils/createControllablePromise';\nimport { clamp } from '../../../utils/utils';\nimport { useTimeout } from '../../utils/useTimeout';\nimport { GridPinnedColumnPosition } from '../columns/gridColumnsInterfaces';\nimport { gridColumnsStateSelector } from '../columns';\n\nfunction trackFinger(event, currentTouchId) {\n  if (currentTouchId !== undefined && event.changedTouches) {\n    for (let i = 0; i < event.changedTouches.length; i += 1) {\n      const touch = event.changedTouches[i];\n\n      if (touch.identifier === currentTouchId) {\n        return {\n          x: touch.clientX,\n          y: touch.clientY\n        };\n      }\n    }\n\n    return false;\n  }\n\n  return {\n    x: event.clientX,\n    y: event.clientY\n  };\n}\n\nfunction computeNewWidth(initialOffsetToSeparator, clickX, columnBounds, resizeDirection) {\n  let newWidth = initialOffsetToSeparator;\n\n  if (resizeDirection === 'Right') {\n    newWidth += clickX - columnBounds.left;\n  } else {\n    newWidth += columnBounds.right - clickX;\n  }\n\n  return newWidth;\n}\n\nfunction computeOffsetToSeparator(clickX, columnBounds, resizeDirection) {\n  if (resizeDirection === 'Left') {\n    return clickX - columnBounds.left;\n  }\n\n  return columnBounds.right - clickX;\n}\n\nfunction flipResizeDirection(side) {\n  if (side === 'Right') {\n    return 'Left';\n  }\n\n  return 'Right';\n}\n\nfunction getResizeDirection(separator, direction) {\n  const side = separator.classList.contains(gridClasses['columnSeparator--sideRight']) ? 'Right' : 'Left';\n\n  if (direction === 'rtl') {\n    // Resizing logic should be mirrored in the RTL case\n    return flipResizeDirection(side);\n  }\n\n  return side;\n}\n\nfunction preventClick(event) {\n  event.preventDefault();\n  event.stopImmediatePropagation();\n}\n/**\n * Checker that returns a promise that resolves when the column virtualization\n * is disabled.\n */\n\n\nfunction useColumnVirtualizationDisabled(apiRef) {\n  const promise = React.useRef();\n\n  const selector = () => gridVirtualizationColumnEnabledSelector(apiRef);\n\n  const value = useGridSelector(apiRef, selector);\n  React.useEffect(() => {\n    if (promise.current && value === false) {\n      promise.current.resolve();\n      promise.current = undefined;\n    }\n  });\n\n  const asyncCheck = () => {\n    if (!promise.current) {\n      if (selector() === false) {\n        return Promise.resolve();\n      }\n\n      promise.current = createControllablePromise();\n    }\n\n    return promise.current;\n  };\n\n  return asyncCheck;\n}\n/**\n * Basic statistical outlier detection, checks if the value is `F * IQR` away from\n * the Q1 and Q3 boundaries. IQR: interquartile range.\n */\n\n\nfunction excludeOutliers(inputValues, factor) {\n  if (inputValues.length < 4) {\n    return inputValues;\n  }\n\n  const values = inputValues.slice();\n  values.sort((a, b) => a - b);\n  const q1 = values[Math.floor(values.length * 0.25)];\n  const q3 = values[Math.floor(values.length * 0.75) - 1];\n  const iqr = q3 - q1; // We make a small adjustment if `iqr < 5` for the cases where the IQR is\n  // very small (for example zero) due to very close by values in the input data.\n  // Otherwise, with an IQR of `0`, anything outside that would be considered\n  // an outlier, but it makes more sense visually to allow for this 5px variance\n  // rather than showing a cropped cell.\n\n  const deviation = iqr < 5 ? 5 : iqr * factor;\n  return values.filter(v => v > q1 - deviation && v < q3 + deviation);\n}\n\nfunction extractColumnWidths(apiRef, options, columns) {\n  const widthByField = {};\n  const root = apiRef.current.rootElementRef.current;\n  root.classList.add(gridClasses.autosizing);\n  columns.forEach(column => {\n    const cells = findGridCells(apiRef.current, column.field);\n    const widths = cells.map(cell => {\n      return cell.getBoundingClientRect().width ?? 0;\n    });\n    const filteredWidths = options.includeOutliers ? widths : excludeOutliers(widths, options.outliersFactor);\n\n    if (options.includeHeaders) {\n      const header = findGridHeader(apiRef.current, column.field);\n\n      if (header) {\n        const title = header.querySelector(`.${gridClasses.columnHeaderTitle}`);\n        const content = header.querySelector(`.${gridClasses.columnHeaderTitleContainerContent}`);\n        const iconContainer = header.querySelector(`.${gridClasses.iconButtonContainer}`);\n        const menuContainer = header.querySelector(`.${gridClasses.menuIcon}`);\n        const element = title ?? content;\n        const style = window.getComputedStyle(header, null);\n        const paddingWidth = parseInt(style.paddingLeft, 10) + parseInt(style.paddingRight, 10);\n        const contentWidth = element.scrollWidth + 1;\n        const width = contentWidth + paddingWidth + (iconContainer?.clientWidth ?? 0) + (menuContainer?.clientWidth ?? 0);\n        filteredWidths.push(width);\n      }\n    }\n\n    const hasColumnMin = column.minWidth !== -Infinity && column.minWidth !== undefined;\n    const hasColumnMax = column.maxWidth !== Infinity && column.maxWidth !== undefined;\n    const min = hasColumnMin ? column.minWidth : 0;\n    const max = hasColumnMax ? column.maxWidth : Infinity;\n    const maxContent = filteredWidths.length === 0 ? 0 : Math.max(...filteredWidths);\n    widthByField[column.field] = clamp(maxContent, min, max);\n  });\n  root.classList.remove(gridClasses.autosizing);\n  return widthByField;\n}\n\nexport const columnResizeStateInitializer = state => _extends({}, state, {\n  columnResize: {\n    resizingColumnField: ''\n  }\n});\n\nfunction createResizeRefs() {\n  return {\n    colDef: undefined,\n    initialColWidth: 0,\n    initialTotalWidth: 0,\n    previousMouseClickEvent: undefined,\n    columnHeaderElement: undefined,\n    headerFilterElement: undefined,\n    groupHeaderElements: [],\n    cellElements: [],\n    leftPinnedCellsAfter: [],\n    rightPinnedCellsBefore: [],\n    fillerLeft: undefined,\n    fillerRight: undefined,\n    leftPinnedHeadersAfter: [],\n    rightPinnedHeadersBefore: []\n  };\n}\n/**\n * @requires useGridColumns (method, event)\n * TODO: improve experience for last column\n */\n\n\nexport const useGridColumnResize = (apiRef, props) => {\n  const theme = useTheme();\n  const logger = useGridLogger(apiRef, 'useGridColumnResize');\n  const refs = useLazyRef(createResizeRefs).current; // To improve accessibility, the separator has padding on both sides.\n  // Clicking inside the padding area should be treated as a click in the separator.\n  // This ref stores the offset between the click and the separator.\n\n  const initialOffsetToSeparator = React.useRef();\n  const resizeDirection = React.useRef();\n  const stopResizeEventTimeout = useTimeout();\n  const touchId = React.useRef();\n\n  const updateWidth = newWidth => {\n    logger.debug(`Updating width to ${newWidth} for col ${refs.colDef.field}`);\n    const prevWidth = refs.columnHeaderElement.offsetWidth;\n    const widthDiff = newWidth - prevWidth;\n    const columnWidthDiff = newWidth - refs.initialColWidth;\n    const newTotalWidth = refs.initialTotalWidth + columnWidthDiff;\n    apiRef.current.rootElementRef?.current?.style.setProperty('--DataGrid-rowWidth', `${newTotalWidth}px`);\n    refs.colDef.computedWidth = newWidth;\n    refs.colDef.width = newWidth;\n    refs.colDef.flex = 0;\n    refs.columnHeaderElement.style.width = `${newWidth}px`;\n    refs.columnHeaderElement.style.minWidth = `${newWidth}px`;\n    refs.columnHeaderElement.style.maxWidth = `${newWidth}px`;\n    const headerFilterElement = refs.headerFilterElement;\n\n    if (headerFilterElement) {\n      headerFilterElement.style.width = `${newWidth}px`;\n      headerFilterElement.style.minWidth = `${newWidth}px`;\n      headerFilterElement.style.maxWidth = `${newWidth}px`;\n    }\n\n    refs.groupHeaderElements.forEach(element => {\n      const div = element;\n      let finalWidth;\n\n      if (div.getAttribute('aria-colspan') === '1') {\n        finalWidth = `${newWidth}px`;\n      } else {\n        // Cell with colspan > 1 cannot be just updated width new width.\n        // Instead, we add width diff to the current width.\n        finalWidth = `${div.offsetWidth + widthDiff}px`;\n      }\n\n      div.style.width = finalWidth;\n      div.style.minWidth = finalWidth;\n      div.style.maxWidth = finalWidth;\n    });\n    refs.cellElements.forEach(element => {\n      const div = element;\n      let finalWidth;\n\n      if (div.getAttribute('aria-colspan') === '1') {\n        finalWidth = `${newWidth}px`;\n      } else {\n        // Cell with colspan > 1 cannot be just updated width new width.\n        // Instead, we add width diff to the current width.\n        finalWidth = `${div.offsetWidth + widthDiff}px`;\n      }\n\n      div.style.setProperty('--width', finalWidth);\n    });\n    const pinnedPosition = apiRef.current.unstable_applyPipeProcessors('isColumnPinned', false, refs.colDef.field);\n\n    if (pinnedPosition === GridPinnedColumnPosition.LEFT) {\n      updateProperty(refs.fillerLeft, 'width', widthDiff);\n      refs.leftPinnedCellsAfter.forEach(cell => {\n        updateProperty(cell, 'left', widthDiff);\n      });\n      refs.leftPinnedHeadersAfter.forEach(header => {\n        updateProperty(header, 'left', widthDiff);\n      });\n    }\n\n    if (pinnedPosition === GridPinnedColumnPosition.RIGHT) {\n      updateProperty(refs.fillerRight, 'width', widthDiff);\n      refs.rightPinnedCellsBefore.forEach(cell => {\n        updateProperty(cell, 'right', widthDiff);\n      });\n      refs.rightPinnedHeadersBefore.forEach(header => {\n        updateProperty(header, 'right', widthDiff);\n      });\n    }\n  };\n\n  const finishResize = nativeEvent => {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    stopListening(); // Prevent double-clicks from being interpreted as two separate clicks\n\n    if (refs.previousMouseClickEvent) {\n      const prevEvent = refs.previousMouseClickEvent;\n      const prevTimeStamp = prevEvent.timeStamp;\n      const prevClientX = prevEvent.clientX;\n      const prevClientY = prevEvent.clientY; // Check if the current event is part of a double-click\n\n      if (nativeEvent.timeStamp - prevTimeStamp < 300 && nativeEvent.clientX === prevClientX && nativeEvent.clientY === prevClientY) {\n        refs.previousMouseClickEvent = undefined;\n        return;\n      }\n    }\n\n    if (refs.colDef) {\n      apiRef.current.setColumnWidth(refs.colDef.field, refs.colDef.width);\n      logger.debug(`Updating col ${refs.colDef.field} with new width: ${refs.colDef.width}`); // Since during resizing we update the columns width outside of React, React is unable to\n      // reapply the right style properties. We need to sync the state manually.\n      // So we reapply the same logic as in https://github.com/mui/mui-x/blob/0511bf65543ca05d2602a5a3e0a6156f2fc8e759/packages/x-data-grid/src/hooks/features/columnHeaders/useGridColumnHeaders.tsx#L405\n\n      const columnsState = gridColumnsStateSelector(apiRef.current.state);\n      refs.groupHeaderElements.forEach(element => {\n        const fields = getFieldsFromGroupHeaderElem(element);\n        const div = element;\n        const newWidth = fields.reduce((acc, field) => {\n          if (columnsState.columnVisibilityModel[field] !== false) {\n            return acc + columnsState.lookup[field].computedWidth;\n          }\n\n          return acc;\n        }, 0);\n        const finalWidth = `${newWidth}px`;\n        div.style.width = finalWidth;\n        div.style.minWidth = finalWidth;\n        div.style.maxWidth = finalWidth;\n      });\n    }\n\n    stopResizeEventTimeout.start(0, () => {\n      apiRef.current.publishEvent('columnResizeStop', null, nativeEvent);\n    });\n  };\n\n  const storeReferences = (colDef, separator, xStart) => {\n    const root = apiRef.current.rootElementRef.current;\n    refs.initialColWidth = colDef.computedWidth;\n    refs.initialTotalWidth = apiRef.current.getRootDimensions().rowWidth;\n    refs.colDef = colDef;\n    refs.columnHeaderElement = findHeaderElementFromField(apiRef.current.columnHeadersContainerRef.current, colDef.field);\n    const headerFilterElement = root.querySelector(`.${gridClasses.headerFilterRow} [data-field=\"${escapeOperandAttributeSelector(colDef.field)}\"]`);\n\n    if (headerFilterElement) {\n      refs.headerFilterElement = headerFilterElement;\n    }\n\n    refs.groupHeaderElements = findGroupHeaderElementsFromField(apiRef.current.columnHeadersContainerRef?.current, colDef.field);\n    refs.cellElements = findGridCellElementsFromCol(refs.columnHeaderElement, apiRef.current);\n    refs.fillerLeft = findGridElement(apiRef.current, 'filler--pinnedLeft');\n    refs.fillerRight = findGridElement(apiRef.current, 'filler--pinnedRight');\n    const pinnedPosition = apiRef.current.unstable_applyPipeProcessors('isColumnPinned', false, refs.colDef.field);\n    refs.leftPinnedCellsAfter = pinnedPosition !== GridPinnedColumnPosition.LEFT ? [] : findLeftPinnedCellsAfterCol(apiRef.current, refs.columnHeaderElement);\n    refs.rightPinnedCellsBefore = pinnedPosition !== GridPinnedColumnPosition.RIGHT ? [] : findRightPinnedCellsBeforeCol(apiRef.current, refs.columnHeaderElement);\n    refs.leftPinnedHeadersAfter = pinnedPosition !== GridPinnedColumnPosition.LEFT ? [] : findLeftPinnedHeadersAfterCol(apiRef.current, refs.columnHeaderElement);\n    refs.rightPinnedHeadersBefore = pinnedPosition !== GridPinnedColumnPosition.RIGHT ? [] : findRightPinnedHeadersBeforeCol(apiRef.current, refs.columnHeaderElement);\n    resizeDirection.current = getResizeDirection(separator, theme.direction);\n    initialOffsetToSeparator.current = computeOffsetToSeparator(xStart, refs.columnHeaderElement.getBoundingClientRect(), resizeDirection.current);\n  };\n\n  const handleResizeMouseUp = useEventCallback(finishResize);\n  const handleResizeMouseMove = useEventCallback(nativeEvent => {\n    // Cancel move in case some other element consumed a mouseup event and it was not fired.\n    if (nativeEvent.buttons === 0) {\n      handleResizeMouseUp(nativeEvent);\n      return;\n    }\n\n    let newWidth = computeNewWidth(initialOffsetToSeparator.current, nativeEvent.clientX, refs.columnHeaderElement.getBoundingClientRect(), resizeDirection.current);\n    newWidth = clamp(newWidth, refs.colDef.minWidth, refs.colDef.maxWidth);\n    updateWidth(newWidth);\n    const params = {\n      element: refs.columnHeaderElement,\n      colDef: refs.colDef,\n      width: newWidth\n    };\n    apiRef.current.publishEvent('columnResize', params, nativeEvent);\n  });\n  const handleTouchEnd = useEventCallback(nativeEvent => {\n    const finger = trackFinger(nativeEvent, touchId.current);\n\n    if (!finger) {\n      return;\n    }\n\n    finishResize(nativeEvent);\n  });\n  const handleTouchMove = useEventCallback(nativeEvent => {\n    const finger = trackFinger(nativeEvent, touchId.current);\n\n    if (!finger) {\n      return;\n    } // Cancel move in case some other element consumed a touchmove event and it was not fired.\n\n\n    if (nativeEvent.type === 'mousemove' && nativeEvent.buttons === 0) {\n      handleTouchEnd(nativeEvent);\n      return;\n    }\n\n    let newWidth = computeNewWidth(initialOffsetToSeparator.current, finger.x, refs.columnHeaderElement.getBoundingClientRect(), resizeDirection.current);\n    newWidth = clamp(newWidth, refs.colDef.minWidth, refs.colDef.maxWidth);\n    updateWidth(newWidth);\n    const params = {\n      element: refs.columnHeaderElement,\n      colDef: refs.colDef,\n      width: newWidth\n    };\n    apiRef.current.publishEvent('columnResize', params, nativeEvent);\n  });\n  const handleTouchStart = useEventCallback(event => {\n    const cellSeparator = findParentElementFromClassName(event.target, gridClasses['columnSeparator--resizable']); // Let the event bubble if the target is not a col separator\n\n    if (!cellSeparator) {\n      return;\n    }\n\n    const touch = event.changedTouches[0];\n\n    if (touch != null) {\n      // A number that uniquely identifies the current finger in the touch session.\n      touchId.current = touch.identifier;\n    }\n\n    const columnHeaderElement = findParentElementFromClassName(event.target, gridClasses.columnHeader);\n    const field = getFieldFromHeaderElem(columnHeaderElement);\n    const colDef = apiRef.current.getColumn(field);\n    logger.debug(`Start Resize on col ${colDef.field}`);\n    apiRef.current.publishEvent('columnResizeStart', {\n      field\n    }, event);\n    storeReferences(colDef, cellSeparator, touch.clientX);\n    const doc = ownerDocument(event.currentTarget);\n    doc.addEventListener('touchmove', handleTouchMove);\n    doc.addEventListener('touchend', handleTouchEnd);\n  });\n  const stopListening = React.useCallback(() => {\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.body.style.removeProperty('cursor');\n    doc.removeEventListener('mousemove', handleResizeMouseMove);\n    doc.removeEventListener('mouseup', handleResizeMouseUp);\n    doc.removeEventListener('touchmove', handleTouchMove);\n    doc.removeEventListener('touchend', handleTouchEnd); // The click event runs right after the mouseup event, we want to wait until it\n    // has been canceled before removing our handler.\n\n    setTimeout(() => {\n      doc.removeEventListener('click', preventClick, true);\n    }, 100);\n\n    if (refs.columnHeaderElement) {\n      refs.columnHeaderElement.style.pointerEvents = 'unset';\n    }\n  }, [apiRef, refs, handleResizeMouseMove, handleResizeMouseUp, handleTouchMove, handleTouchEnd]);\n  const handleResizeStart = React.useCallback(_ref => {\n    let {\n      field\n    } = _ref;\n    apiRef.current.setState(state => _extends({}, state, {\n      columnResize: _extends({}, state.columnResize, {\n        resizingColumnField: field\n      })\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const handleResizeStop = React.useCallback(() => {\n    apiRef.current.setState(state => _extends({}, state, {\n      columnResize: _extends({}, state.columnResize, {\n        resizingColumnField: ''\n      })\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const handleColumnResizeMouseDown = useEventCallback((_ref2, event) => {\n    let {\n      colDef\n    } = _ref2;\n\n    // Only handle left clicks\n    if (event.button !== 0) {\n      return;\n    } // Skip if the column isn't resizable\n\n\n    if (!event.currentTarget.classList.contains(gridClasses['columnSeparator--resizable'])) {\n      return;\n    } // Avoid text selection\n\n\n    event.preventDefault();\n    logger.debug(`Start Resize on col ${colDef.field}`);\n    apiRef.current.publishEvent('columnResizeStart', {\n      field: colDef.field\n    }, event);\n    storeReferences(colDef, event.currentTarget, event.clientX);\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.body.style.cursor = 'col-resize';\n    refs.previousMouseClickEvent = event.nativeEvent;\n    doc.addEventListener('mousemove', handleResizeMouseMove);\n    doc.addEventListener('mouseup', handleResizeMouseUp); // Prevent the click event if we have resized the column.\n    // Fixes https://github.com/mui/mui-x/issues/4777\n\n    doc.addEventListener('click', preventClick, true);\n  });\n  const handleColumnSeparatorDoubleClick = useEventCallback((params, event) => {\n    if (props.disableAutosize) {\n      return;\n    } // Only handle left clicks\n\n\n    if (event.button !== 0) {\n      return;\n    }\n\n    const column = apiRef.current.state.columns.lookup[params.field];\n\n    if (column.resizable === false) {\n      return;\n    }\n\n    apiRef.current.autosizeColumns(_extends({}, props.autosizeOptions, {\n      columns: [column.field]\n    }));\n  });\n  /**\n   * API METHODS\n   */\n\n  const columnVirtualizationDisabled = useColumnVirtualizationDisabled(apiRef);\n  const isAutosizingRef = React.useRef(false);\n  const autosizeColumns = React.useCallback(async userOptions => {\n    const root = apiRef.current.rootElementRef?.current;\n\n    if (!root) {\n      return;\n    }\n\n    if (isAutosizingRef.current) {\n      return;\n    }\n\n    isAutosizingRef.current = true;\n    const state = gridColumnsStateSelector(apiRef.current.state);\n\n    const options = _extends({}, DEFAULT_GRID_AUTOSIZE_OPTIONS, userOptions, {\n      columns: userOptions?.columns ?? state.orderedFields\n    });\n\n    options.columns = options.columns.filter(c => state.columnVisibilityModel[c] !== false);\n    const columns = options.columns.map(c => apiRef.current.state.columns.lookup[c]);\n\n    try {\n      apiRef.current.unstable_setColumnVirtualization(false);\n      await columnVirtualizationDisabled();\n      const widthByField = extractColumnWidths(apiRef, options, columns);\n      const newColumns = columns.map(column => _extends({}, column, {\n        width: widthByField[column.field],\n        computedWidth: widthByField[column.field]\n      }));\n\n      if (options.expand) {\n        const visibleColumns = state.orderedFields.map(field => state.lookup[field]).filter(c => state.columnVisibilityModel[c.field] !== false);\n        const totalWidth = visibleColumns.reduce((total, column) => total + (widthByField[column.field] ?? column.computedWidth ?? column.width), 0);\n        const availableWidth = apiRef.current.getRootDimensions().viewportInnerSize.width;\n        const remainingWidth = availableWidth - totalWidth;\n\n        if (remainingWidth > 0) {\n          const widthPerColumn = remainingWidth / (newColumns.length || 1);\n          newColumns.forEach(column => {\n            column.width += widthPerColumn;\n            column.computedWidth += widthPerColumn;\n          });\n        }\n      }\n\n      apiRef.current.updateColumns(newColumns);\n      newColumns.forEach((newColumn, index) => {\n        if (newColumn.width !== columns[index].width) {\n          const width = newColumn.width;\n          apiRef.current.publishEvent('columnWidthChange', {\n            element: apiRef.current.getColumnHeaderElement(newColumn.field),\n            colDef: newColumn,\n            width\n          });\n        }\n      });\n    } finally {\n      apiRef.current.unstable_setColumnVirtualization(true);\n      isAutosizingRef.current = false;\n    }\n  }, [apiRef, columnVirtualizationDisabled]);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => stopListening, [stopListening]);\n  useOnMount(() => {\n    if (props.autosizeOnMount) {\n      Promise.resolve().then(() => {\n        apiRef.current.autosizeColumns(props.autosizeOptions);\n      });\n    }\n  });\n  useGridNativeEventListener(apiRef, () => apiRef.current.columnHeadersContainerRef?.current, 'touchstart', handleTouchStart, {\n    passive: true\n  });\n  useGridApiMethod(apiRef, {\n    autosizeColumns\n  }, 'public');\n  useGridApiEventHandler(apiRef, 'columnResizeStop', handleResizeStop);\n  useGridApiEventHandler(apiRef, 'columnResizeStart', handleResizeStart);\n  useGridApiEventHandler(apiRef, 'columnSeparatorMouseDown', handleColumnResizeMouseDown);\n  useGridApiEventHandler(apiRef, 'columnSeparatorDoubleClick', handleColumnSeparatorDoubleClick);\n  useGridApiOptionHandler(apiRef, 'columnResize', props.onColumnResize);\n  useGridApiOptionHandler(apiRef, 'columnWidthChange', props.onColumnWidthChange);\n};\n\nfunction updateProperty(element, property, delta) {\n  if (!element) {\n    return;\n  }\n\n  element.style[property] = `${parseInt(element.style[property], 10) + delta}px`;\n}","map":{"version":3,"names":["_extends","React","unstable_ownerDocument","ownerDocument","unstable_useEventCallback","useEventCallback","useLazyRef","useTheme","findGridCellElementsFromCol","findGridElement","findLeftPinnedCellsAfterCol","findRightPinnedCellsBeforeCol","getFieldFromHeaderElem","findHeaderElementFromField","getFieldsFromGroupHeaderElem","findGroupHeaderElementsFromField","findGridHeader","findGridCells","findParentElementFromClassName","findLeftPinnedHeadersAfterCol","findRightPinnedHeadersBeforeCol","escapeOperandAttributeSelector","DEFAULT_GRID_AUTOSIZE_OPTIONS","gridClasses","useGridApiEventHandler","useGridApiMethod","useGridApiOptionHandler","useGridLogger","useGridNativeEventListener","useGridSelector","useOnMount","gridVirtualizationColumnEnabledSelector","createControllablePromise","clamp","useTimeout","GridPinnedColumnPosition","gridColumnsStateSelector","trackFinger","event","currentTouchId","undefined","changedTouches","i","length","touch","identifier","x","clientX","y","clientY","computeNewWidth","initialOffsetToSeparator","clickX","columnBounds","resizeDirection","newWidth","left","right","computeOffsetToSeparator","flipResizeDirection","side","getResizeDirection","separator","direction","classList","contains","preventClick","preventDefault","stopImmediatePropagation","useColumnVirtualizationDisabled","apiRef","promise","useRef","selector","value","useEffect","current","resolve","asyncCheck","Promise","excludeOutliers","inputValues","factor","values","slice","sort","a","b","q1","Math","floor","q3","iqr","deviation","filter","v","extractColumnWidths","options","columns","widthByField","root","rootElementRef","add","autosizing","forEach","column","cells","field","widths","map","cell","getBoundingClientRect","width","filteredWidths","includeOutliers","outliersFactor","includeHeaders","header","title","querySelector","columnHeaderTitle","content","columnHeaderTitleContainerContent","iconContainer","iconButtonContainer","menuContainer","menuIcon","element","style","window","getComputedStyle","paddingWidth","parseInt","paddingLeft","paddingRight","contentWidth","scrollWidth","clientWidth","push","hasColumnMin","minWidth","Infinity","hasColumnMax","maxWidth","min","max","maxContent","remove","columnResizeStateInitializer","state","columnResize","resizingColumnField","createResizeRefs","colDef","initialColWidth","initialTotalWidth","previousMouseClickEvent","columnHeaderElement","headerFilterElement","groupHeaderElements","cellElements","leftPinnedCellsAfter","rightPinnedCellsBefore","fillerLeft","fillerRight","leftPinnedHeadersAfter","rightPinnedHeadersBefore","useGridColumnResize","props","theme","logger","refs","stopResizeEventTimeout","touchId","updateWidth","debug","prevWidth","offsetWidth","widthDiff","columnWidthDiff","newTotalWidth","setProperty","computedWidth","flex","div","finalWidth","getAttribute","pinnedPosition","unstable_applyPipeProcessors","LEFT","updateProperty","RIGHT","finishResize","nativeEvent","stopListening","prevEvent","prevTimeStamp","timeStamp","prevClientX","prevClientY","setColumnWidth","columnsState","fields","reduce","acc","columnVisibilityModel","lookup","start","publishEvent","storeReferences","xStart","getRootDimensions","rowWidth","columnHeadersContainerRef","headerFilterRow","handleResizeMouseUp","handleResizeMouseMove","buttons","params","handleTouchEnd","finger","handleTouchMove","type","handleTouchStart","cellSeparator","target","columnHeader","getColumn","doc","currentTarget","addEventListener","useCallback","body","removeProperty","removeEventListener","setTimeout","pointerEvents","handleResizeStart","setState","forceUpdate","handleResizeStop","handleColumnResizeMouseDown","button","cursor","handleColumnSeparatorDoubleClick","disableAutosize","resizable","autosizeColumns","autosizeOptions","columnVirtualizationDisabled","isAutosizingRef","userOptions","orderedFields","c","unstable_setColumnVirtualization","newColumns","expand","visibleColumns","totalWidth","total","availableWidth","viewportInnerSize","remainingWidth","widthPerColumn","updateColumns","newColumn","index","getColumnHeaderElement","autosizeOnMount","then","passive","onColumnResize","onColumnWidthChange","property","delta"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/@mui/x-data-grid/hooks/features/columnResize/useGridColumnResize.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_ownerDocument as ownerDocument, unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport useLazyRef from '@mui/utils/useLazyRef';\nimport { useTheme } from '@mui/material/styles';\nimport { findGridCellElementsFromCol, findGridElement, findLeftPinnedCellsAfterCol, findRightPinnedCellsBeforeCol, getFieldFromHeaderElem, findHeaderElementFromField, getFieldsFromGroupHeaderElem, findGroupHeaderElementsFromField, findGridHeader, findGridCells, findParentElementFromClassName, findLeftPinnedHeadersAfterCol, findRightPinnedHeadersBeforeCol, escapeOperandAttributeSelector } from '../../../utils/domUtils';\nimport { DEFAULT_GRID_AUTOSIZE_OPTIONS } from './gridColumnResizeApi';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { useGridApiEventHandler, useGridApiMethod, useGridApiOptionHandler, useGridLogger, useGridNativeEventListener, useGridSelector, useOnMount } from '../../utils';\nimport { gridVirtualizationColumnEnabledSelector } from '../virtualization';\nimport { createControllablePromise } from '../../../utils/createControllablePromise';\nimport { clamp } from '../../../utils/utils';\nimport { useTimeout } from '../../utils/useTimeout';\nimport { GridPinnedColumnPosition } from '../columns/gridColumnsInterfaces';\nimport { gridColumnsStateSelector } from '../columns';\nfunction trackFinger(event, currentTouchId) {\n  if (currentTouchId !== undefined && event.changedTouches) {\n    for (let i = 0; i < event.changedTouches.length; i += 1) {\n      const touch = event.changedTouches[i];\n      if (touch.identifier === currentTouchId) {\n        return {\n          x: touch.clientX,\n          y: touch.clientY\n        };\n      }\n    }\n    return false;\n  }\n  return {\n    x: event.clientX,\n    y: event.clientY\n  };\n}\nfunction computeNewWidth(initialOffsetToSeparator, clickX, columnBounds, resizeDirection) {\n  let newWidth = initialOffsetToSeparator;\n  if (resizeDirection === 'Right') {\n    newWidth += clickX - columnBounds.left;\n  } else {\n    newWidth += columnBounds.right - clickX;\n  }\n  return newWidth;\n}\nfunction computeOffsetToSeparator(clickX, columnBounds, resizeDirection) {\n  if (resizeDirection === 'Left') {\n    return clickX - columnBounds.left;\n  }\n  return columnBounds.right - clickX;\n}\nfunction flipResizeDirection(side) {\n  if (side === 'Right') {\n    return 'Left';\n  }\n  return 'Right';\n}\nfunction getResizeDirection(separator, direction) {\n  const side = separator.classList.contains(gridClasses['columnSeparator--sideRight']) ? 'Right' : 'Left';\n  if (direction === 'rtl') {\n    // Resizing logic should be mirrored in the RTL case\n    return flipResizeDirection(side);\n  }\n  return side;\n}\nfunction preventClick(event) {\n  event.preventDefault();\n  event.stopImmediatePropagation();\n}\n\n/**\n * Checker that returns a promise that resolves when the column virtualization\n * is disabled.\n */\nfunction useColumnVirtualizationDisabled(apiRef) {\n  const promise = React.useRef();\n  const selector = () => gridVirtualizationColumnEnabledSelector(apiRef);\n  const value = useGridSelector(apiRef, selector);\n  React.useEffect(() => {\n    if (promise.current && value === false) {\n      promise.current.resolve();\n      promise.current = undefined;\n    }\n  });\n  const asyncCheck = () => {\n    if (!promise.current) {\n      if (selector() === false) {\n        return Promise.resolve();\n      }\n      promise.current = createControllablePromise();\n    }\n    return promise.current;\n  };\n  return asyncCheck;\n}\n\n/**\n * Basic statistical outlier detection, checks if the value is `F * IQR` away from\n * the Q1 and Q3 boundaries. IQR: interquartile range.\n */\nfunction excludeOutliers(inputValues, factor) {\n  if (inputValues.length < 4) {\n    return inputValues;\n  }\n  const values = inputValues.slice();\n  values.sort((a, b) => a - b);\n  const q1 = values[Math.floor(values.length * 0.25)];\n  const q3 = values[Math.floor(values.length * 0.75) - 1];\n  const iqr = q3 - q1;\n\n  // We make a small adjustment if `iqr < 5` for the cases where the IQR is\n  // very small (for example zero) due to very close by values in the input data.\n  // Otherwise, with an IQR of `0`, anything outside that would be considered\n  // an outlier, but it makes more sense visually to allow for this 5px variance\n  // rather than showing a cropped cell.\n  const deviation = iqr < 5 ? 5 : iqr * factor;\n  return values.filter(v => v > q1 - deviation && v < q3 + deviation);\n}\nfunction extractColumnWidths(apiRef, options, columns) {\n  const widthByField = {};\n  const root = apiRef.current.rootElementRef.current;\n  root.classList.add(gridClasses.autosizing);\n  columns.forEach(column => {\n    const cells = findGridCells(apiRef.current, column.field);\n    const widths = cells.map(cell => {\n      return cell.getBoundingClientRect().width ?? 0;\n    });\n    const filteredWidths = options.includeOutliers ? widths : excludeOutliers(widths, options.outliersFactor);\n    if (options.includeHeaders) {\n      const header = findGridHeader(apiRef.current, column.field);\n      if (header) {\n        const title = header.querySelector(`.${gridClasses.columnHeaderTitle}`);\n        const content = header.querySelector(`.${gridClasses.columnHeaderTitleContainerContent}`);\n        const iconContainer = header.querySelector(`.${gridClasses.iconButtonContainer}`);\n        const menuContainer = header.querySelector(`.${gridClasses.menuIcon}`);\n        const element = title ?? content;\n        const style = window.getComputedStyle(header, null);\n        const paddingWidth = parseInt(style.paddingLeft, 10) + parseInt(style.paddingRight, 10);\n        const contentWidth = element.scrollWidth + 1;\n        const width = contentWidth + paddingWidth + (iconContainer?.clientWidth ?? 0) + (menuContainer?.clientWidth ?? 0);\n        filteredWidths.push(width);\n      }\n    }\n    const hasColumnMin = column.minWidth !== -Infinity && column.minWidth !== undefined;\n    const hasColumnMax = column.maxWidth !== Infinity && column.maxWidth !== undefined;\n    const min = hasColumnMin ? column.minWidth : 0;\n    const max = hasColumnMax ? column.maxWidth : Infinity;\n    const maxContent = filteredWidths.length === 0 ? 0 : Math.max(...filteredWidths);\n    widthByField[column.field] = clamp(maxContent, min, max);\n  });\n  root.classList.remove(gridClasses.autosizing);\n  return widthByField;\n}\nexport const columnResizeStateInitializer = state => _extends({}, state, {\n  columnResize: {\n    resizingColumnField: ''\n  }\n});\nfunction createResizeRefs() {\n  return {\n    colDef: undefined,\n    initialColWidth: 0,\n    initialTotalWidth: 0,\n    previousMouseClickEvent: undefined,\n    columnHeaderElement: undefined,\n    headerFilterElement: undefined,\n    groupHeaderElements: [],\n    cellElements: [],\n    leftPinnedCellsAfter: [],\n    rightPinnedCellsBefore: [],\n    fillerLeft: undefined,\n    fillerRight: undefined,\n    leftPinnedHeadersAfter: [],\n    rightPinnedHeadersBefore: []\n  };\n}\n\n/**\n * @requires useGridColumns (method, event)\n * TODO: improve experience for last column\n */\nexport const useGridColumnResize = (apiRef, props) => {\n  const theme = useTheme();\n  const logger = useGridLogger(apiRef, 'useGridColumnResize');\n  const refs = useLazyRef(createResizeRefs).current;\n\n  // To improve accessibility, the separator has padding on both sides.\n  // Clicking inside the padding area should be treated as a click in the separator.\n  // This ref stores the offset between the click and the separator.\n  const initialOffsetToSeparator = React.useRef();\n  const resizeDirection = React.useRef();\n  const stopResizeEventTimeout = useTimeout();\n  const touchId = React.useRef();\n  const updateWidth = newWidth => {\n    logger.debug(`Updating width to ${newWidth} for col ${refs.colDef.field}`);\n    const prevWidth = refs.columnHeaderElement.offsetWidth;\n    const widthDiff = newWidth - prevWidth;\n    const columnWidthDiff = newWidth - refs.initialColWidth;\n    const newTotalWidth = refs.initialTotalWidth + columnWidthDiff;\n    apiRef.current.rootElementRef?.current?.style.setProperty('--DataGrid-rowWidth', `${newTotalWidth}px`);\n    refs.colDef.computedWidth = newWidth;\n    refs.colDef.width = newWidth;\n    refs.colDef.flex = 0;\n    refs.columnHeaderElement.style.width = `${newWidth}px`;\n    refs.columnHeaderElement.style.minWidth = `${newWidth}px`;\n    refs.columnHeaderElement.style.maxWidth = `${newWidth}px`;\n    const headerFilterElement = refs.headerFilterElement;\n    if (headerFilterElement) {\n      headerFilterElement.style.width = `${newWidth}px`;\n      headerFilterElement.style.minWidth = `${newWidth}px`;\n      headerFilterElement.style.maxWidth = `${newWidth}px`;\n    }\n    refs.groupHeaderElements.forEach(element => {\n      const div = element;\n      let finalWidth;\n      if (div.getAttribute('aria-colspan') === '1') {\n        finalWidth = `${newWidth}px`;\n      } else {\n        // Cell with colspan > 1 cannot be just updated width new width.\n        // Instead, we add width diff to the current width.\n        finalWidth = `${div.offsetWidth + widthDiff}px`;\n      }\n      div.style.width = finalWidth;\n      div.style.minWidth = finalWidth;\n      div.style.maxWidth = finalWidth;\n    });\n    refs.cellElements.forEach(element => {\n      const div = element;\n      let finalWidth;\n      if (div.getAttribute('aria-colspan') === '1') {\n        finalWidth = `${newWidth}px`;\n      } else {\n        // Cell with colspan > 1 cannot be just updated width new width.\n        // Instead, we add width diff to the current width.\n        finalWidth = `${div.offsetWidth + widthDiff}px`;\n      }\n      div.style.setProperty('--width', finalWidth);\n    });\n    const pinnedPosition = apiRef.current.unstable_applyPipeProcessors('isColumnPinned', false, refs.colDef.field);\n    if (pinnedPosition === GridPinnedColumnPosition.LEFT) {\n      updateProperty(refs.fillerLeft, 'width', widthDiff);\n      refs.leftPinnedCellsAfter.forEach(cell => {\n        updateProperty(cell, 'left', widthDiff);\n      });\n      refs.leftPinnedHeadersAfter.forEach(header => {\n        updateProperty(header, 'left', widthDiff);\n      });\n    }\n    if (pinnedPosition === GridPinnedColumnPosition.RIGHT) {\n      updateProperty(refs.fillerRight, 'width', widthDiff);\n      refs.rightPinnedCellsBefore.forEach(cell => {\n        updateProperty(cell, 'right', widthDiff);\n      });\n      refs.rightPinnedHeadersBefore.forEach(header => {\n        updateProperty(header, 'right', widthDiff);\n      });\n    }\n  };\n  const finishResize = nativeEvent => {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    stopListening();\n\n    // Prevent double-clicks from being interpreted as two separate clicks\n    if (refs.previousMouseClickEvent) {\n      const prevEvent = refs.previousMouseClickEvent;\n      const prevTimeStamp = prevEvent.timeStamp;\n      const prevClientX = prevEvent.clientX;\n      const prevClientY = prevEvent.clientY;\n\n      // Check if the current event is part of a double-click\n      if (nativeEvent.timeStamp - prevTimeStamp < 300 && nativeEvent.clientX === prevClientX && nativeEvent.clientY === prevClientY) {\n        refs.previousMouseClickEvent = undefined;\n        return;\n      }\n    }\n    if (refs.colDef) {\n      apiRef.current.setColumnWidth(refs.colDef.field, refs.colDef.width);\n      logger.debug(`Updating col ${refs.colDef.field} with new width: ${refs.colDef.width}`);\n\n      // Since during resizing we update the columns width outside of React, React is unable to\n      // reapply the right style properties. We need to sync the state manually.\n      // So we reapply the same logic as in https://github.com/mui/mui-x/blob/0511bf65543ca05d2602a5a3e0a6156f2fc8e759/packages/x-data-grid/src/hooks/features/columnHeaders/useGridColumnHeaders.tsx#L405\n      const columnsState = gridColumnsStateSelector(apiRef.current.state);\n      refs.groupHeaderElements.forEach(element => {\n        const fields = getFieldsFromGroupHeaderElem(element);\n        const div = element;\n        const newWidth = fields.reduce((acc, field) => {\n          if (columnsState.columnVisibilityModel[field] !== false) {\n            return acc + columnsState.lookup[field].computedWidth;\n          }\n          return acc;\n        }, 0);\n        const finalWidth = `${newWidth}px`;\n        div.style.width = finalWidth;\n        div.style.minWidth = finalWidth;\n        div.style.maxWidth = finalWidth;\n      });\n    }\n    stopResizeEventTimeout.start(0, () => {\n      apiRef.current.publishEvent('columnResizeStop', null, nativeEvent);\n    });\n  };\n  const storeReferences = (colDef, separator, xStart) => {\n    const root = apiRef.current.rootElementRef.current;\n    refs.initialColWidth = colDef.computedWidth;\n    refs.initialTotalWidth = apiRef.current.getRootDimensions().rowWidth;\n    refs.colDef = colDef;\n    refs.columnHeaderElement = findHeaderElementFromField(apiRef.current.columnHeadersContainerRef.current, colDef.field);\n    const headerFilterElement = root.querySelector(`.${gridClasses.headerFilterRow} [data-field=\"${escapeOperandAttributeSelector(colDef.field)}\"]`);\n    if (headerFilterElement) {\n      refs.headerFilterElement = headerFilterElement;\n    }\n    refs.groupHeaderElements = findGroupHeaderElementsFromField(apiRef.current.columnHeadersContainerRef?.current, colDef.field);\n    refs.cellElements = findGridCellElementsFromCol(refs.columnHeaderElement, apiRef.current);\n    refs.fillerLeft = findGridElement(apiRef.current, 'filler--pinnedLeft');\n    refs.fillerRight = findGridElement(apiRef.current, 'filler--pinnedRight');\n    const pinnedPosition = apiRef.current.unstable_applyPipeProcessors('isColumnPinned', false, refs.colDef.field);\n    refs.leftPinnedCellsAfter = pinnedPosition !== GridPinnedColumnPosition.LEFT ? [] : findLeftPinnedCellsAfterCol(apiRef.current, refs.columnHeaderElement);\n    refs.rightPinnedCellsBefore = pinnedPosition !== GridPinnedColumnPosition.RIGHT ? [] : findRightPinnedCellsBeforeCol(apiRef.current, refs.columnHeaderElement);\n    refs.leftPinnedHeadersAfter = pinnedPosition !== GridPinnedColumnPosition.LEFT ? [] : findLeftPinnedHeadersAfterCol(apiRef.current, refs.columnHeaderElement);\n    refs.rightPinnedHeadersBefore = pinnedPosition !== GridPinnedColumnPosition.RIGHT ? [] : findRightPinnedHeadersBeforeCol(apiRef.current, refs.columnHeaderElement);\n    resizeDirection.current = getResizeDirection(separator, theme.direction);\n    initialOffsetToSeparator.current = computeOffsetToSeparator(xStart, refs.columnHeaderElement.getBoundingClientRect(), resizeDirection.current);\n  };\n  const handleResizeMouseUp = useEventCallback(finishResize);\n  const handleResizeMouseMove = useEventCallback(nativeEvent => {\n    // Cancel move in case some other element consumed a mouseup event and it was not fired.\n    if (nativeEvent.buttons === 0) {\n      handleResizeMouseUp(nativeEvent);\n      return;\n    }\n    let newWidth = computeNewWidth(initialOffsetToSeparator.current, nativeEvent.clientX, refs.columnHeaderElement.getBoundingClientRect(), resizeDirection.current);\n    newWidth = clamp(newWidth, refs.colDef.minWidth, refs.colDef.maxWidth);\n    updateWidth(newWidth);\n    const params = {\n      element: refs.columnHeaderElement,\n      colDef: refs.colDef,\n      width: newWidth\n    };\n    apiRef.current.publishEvent('columnResize', params, nativeEvent);\n  });\n  const handleTouchEnd = useEventCallback(nativeEvent => {\n    const finger = trackFinger(nativeEvent, touchId.current);\n    if (!finger) {\n      return;\n    }\n    finishResize(nativeEvent);\n  });\n  const handleTouchMove = useEventCallback(nativeEvent => {\n    const finger = trackFinger(nativeEvent, touchId.current);\n    if (!finger) {\n      return;\n    }\n\n    // Cancel move in case some other element consumed a touchmove event and it was not fired.\n    if (nativeEvent.type === 'mousemove' && nativeEvent.buttons === 0) {\n      handleTouchEnd(nativeEvent);\n      return;\n    }\n    let newWidth = computeNewWidth(initialOffsetToSeparator.current, finger.x, refs.columnHeaderElement.getBoundingClientRect(), resizeDirection.current);\n    newWidth = clamp(newWidth, refs.colDef.minWidth, refs.colDef.maxWidth);\n    updateWidth(newWidth);\n    const params = {\n      element: refs.columnHeaderElement,\n      colDef: refs.colDef,\n      width: newWidth\n    };\n    apiRef.current.publishEvent('columnResize', params, nativeEvent);\n  });\n  const handleTouchStart = useEventCallback(event => {\n    const cellSeparator = findParentElementFromClassName(event.target, gridClasses['columnSeparator--resizable']);\n    // Let the event bubble if the target is not a col separator\n    if (!cellSeparator) {\n      return;\n    }\n    const touch = event.changedTouches[0];\n    if (touch != null) {\n      // A number that uniquely identifies the current finger in the touch session.\n      touchId.current = touch.identifier;\n    }\n    const columnHeaderElement = findParentElementFromClassName(event.target, gridClasses.columnHeader);\n    const field = getFieldFromHeaderElem(columnHeaderElement);\n    const colDef = apiRef.current.getColumn(field);\n    logger.debug(`Start Resize on col ${colDef.field}`);\n    apiRef.current.publishEvent('columnResizeStart', {\n      field\n    }, event);\n    storeReferences(colDef, cellSeparator, touch.clientX);\n    const doc = ownerDocument(event.currentTarget);\n    doc.addEventListener('touchmove', handleTouchMove);\n    doc.addEventListener('touchend', handleTouchEnd);\n  });\n  const stopListening = React.useCallback(() => {\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.body.style.removeProperty('cursor');\n    doc.removeEventListener('mousemove', handleResizeMouseMove);\n    doc.removeEventListener('mouseup', handleResizeMouseUp);\n    doc.removeEventListener('touchmove', handleTouchMove);\n    doc.removeEventListener('touchend', handleTouchEnd);\n    // The click event runs right after the mouseup event, we want to wait until it\n    // has been canceled before removing our handler.\n    setTimeout(() => {\n      doc.removeEventListener('click', preventClick, true);\n    }, 100);\n    if (refs.columnHeaderElement) {\n      refs.columnHeaderElement.style.pointerEvents = 'unset';\n    }\n  }, [apiRef, refs, handleResizeMouseMove, handleResizeMouseUp, handleTouchMove, handleTouchEnd]);\n  const handleResizeStart = React.useCallback(({\n    field\n  }) => {\n    apiRef.current.setState(state => _extends({}, state, {\n      columnResize: _extends({}, state.columnResize, {\n        resizingColumnField: field\n      })\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const handleResizeStop = React.useCallback(() => {\n    apiRef.current.setState(state => _extends({}, state, {\n      columnResize: _extends({}, state.columnResize, {\n        resizingColumnField: ''\n      })\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const handleColumnResizeMouseDown = useEventCallback(({\n    colDef\n  }, event) => {\n    // Only handle left clicks\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Skip if the column isn't resizable\n    if (!event.currentTarget.classList.contains(gridClasses['columnSeparator--resizable'])) {\n      return;\n    }\n\n    // Avoid text selection\n    event.preventDefault();\n    logger.debug(`Start Resize on col ${colDef.field}`);\n    apiRef.current.publishEvent('columnResizeStart', {\n      field: colDef.field\n    }, event);\n    storeReferences(colDef, event.currentTarget, event.clientX);\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.body.style.cursor = 'col-resize';\n    refs.previousMouseClickEvent = event.nativeEvent;\n    doc.addEventListener('mousemove', handleResizeMouseMove);\n    doc.addEventListener('mouseup', handleResizeMouseUp);\n\n    // Prevent the click event if we have resized the column.\n    // Fixes https://github.com/mui/mui-x/issues/4777\n    doc.addEventListener('click', preventClick, true);\n  });\n  const handleColumnSeparatorDoubleClick = useEventCallback((params, event) => {\n    if (props.disableAutosize) {\n      return;\n    }\n\n    // Only handle left clicks\n    if (event.button !== 0) {\n      return;\n    }\n    const column = apiRef.current.state.columns.lookup[params.field];\n    if (column.resizable === false) {\n      return;\n    }\n    apiRef.current.autosizeColumns(_extends({}, props.autosizeOptions, {\n      columns: [column.field]\n    }));\n  });\n\n  /**\n   * API METHODS\n   */\n\n  const columnVirtualizationDisabled = useColumnVirtualizationDisabled(apiRef);\n  const isAutosizingRef = React.useRef(false);\n  const autosizeColumns = React.useCallback(async userOptions => {\n    const root = apiRef.current.rootElementRef?.current;\n    if (!root) {\n      return;\n    }\n    if (isAutosizingRef.current) {\n      return;\n    }\n    isAutosizingRef.current = true;\n    const state = gridColumnsStateSelector(apiRef.current.state);\n    const options = _extends({}, DEFAULT_GRID_AUTOSIZE_OPTIONS, userOptions, {\n      columns: userOptions?.columns ?? state.orderedFields\n    });\n    options.columns = options.columns.filter(c => state.columnVisibilityModel[c] !== false);\n    const columns = options.columns.map(c => apiRef.current.state.columns.lookup[c]);\n    try {\n      apiRef.current.unstable_setColumnVirtualization(false);\n      await columnVirtualizationDisabled();\n      const widthByField = extractColumnWidths(apiRef, options, columns);\n      const newColumns = columns.map(column => _extends({}, column, {\n        width: widthByField[column.field],\n        computedWidth: widthByField[column.field]\n      }));\n      if (options.expand) {\n        const visibleColumns = state.orderedFields.map(field => state.lookup[field]).filter(c => state.columnVisibilityModel[c.field] !== false);\n        const totalWidth = visibleColumns.reduce((total, column) => total + (widthByField[column.field] ?? column.computedWidth ?? column.width), 0);\n        const availableWidth = apiRef.current.getRootDimensions().viewportInnerSize.width;\n        const remainingWidth = availableWidth - totalWidth;\n        if (remainingWidth > 0) {\n          const widthPerColumn = remainingWidth / (newColumns.length || 1);\n          newColumns.forEach(column => {\n            column.width += widthPerColumn;\n            column.computedWidth += widthPerColumn;\n          });\n        }\n      }\n      apiRef.current.updateColumns(newColumns);\n      newColumns.forEach((newColumn, index) => {\n        if (newColumn.width !== columns[index].width) {\n          const width = newColumn.width;\n          apiRef.current.publishEvent('columnWidthChange', {\n            element: apiRef.current.getColumnHeaderElement(newColumn.field),\n            colDef: newColumn,\n            width\n          });\n        }\n      });\n    } finally {\n      apiRef.current.unstable_setColumnVirtualization(true);\n      isAutosizingRef.current = false;\n    }\n  }, [apiRef, columnVirtualizationDisabled]);\n\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => stopListening, [stopListening]);\n  useOnMount(() => {\n    if (props.autosizeOnMount) {\n      Promise.resolve().then(() => {\n        apiRef.current.autosizeColumns(props.autosizeOptions);\n      });\n    }\n  });\n  useGridNativeEventListener(apiRef, () => apiRef.current.columnHeadersContainerRef?.current, 'touchstart', handleTouchStart, {\n    passive: true\n  });\n  useGridApiMethod(apiRef, {\n    autosizeColumns\n  }, 'public');\n  useGridApiEventHandler(apiRef, 'columnResizeStop', handleResizeStop);\n  useGridApiEventHandler(apiRef, 'columnResizeStart', handleResizeStart);\n  useGridApiEventHandler(apiRef, 'columnSeparatorMouseDown', handleColumnResizeMouseDown);\n  useGridApiEventHandler(apiRef, 'columnSeparatorDoubleClick', handleColumnSeparatorDoubleClick);\n  useGridApiOptionHandler(apiRef, 'columnResize', props.onColumnResize);\n  useGridApiOptionHandler(apiRef, 'columnWidthChange', props.onColumnWidthChange);\n};\nfunction updateProperty(element, property, delta) {\n  if (!element) {\n    return;\n  }\n  element.style[property] = `${parseInt(element.style[property], 10) + delta}px`;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}