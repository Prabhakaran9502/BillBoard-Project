{"ast":null,"code":"'use strict';\n\nconst mimicFn = require(\"mimic-fn\");\n\nconst mapAgeCleaner = require(\"map-age-cleaner\");\n\nconst decoratorInstanceMap = new WeakMap();\nconst cacheStore = new WeakMap();\n/**\n[Memoize](https://en.wikipedia.org/wiki/Memoization) functions - An optimization used to speed up consecutive function calls by caching the result of calls with identical input.\n\n@param fn - Function to be memoized.\n\n@example\n```\nimport mem = require('mem');\n\nlet i = 0;\nconst counter = () => ++i;\nconst memoized = mem(counter);\n\nmemoized('foo');\n//=> 1\n\n// Cached as it's the same arguments\nmemoized('foo');\n//=> 1\n\n// Not cached anymore as the arguments changed\nmemoized('bar');\n//=> 2\n\nmemoized('bar');\n//=> 2\n```\n*/\n\nconst mem = function (fn) {\n  let {\n    cacheKey,\n    cache = new Map(),\n    maxAge\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (typeof maxAge === 'number') {\n    // TODO: Drop after https://github.com/SamVerschueren/map-age-cleaner/issues/5\n    // @ts-expect-error\n    mapAgeCleaner(cache);\n  }\n\n  const memoized = function () {\n    for (var _len = arguments.length, arguments_ = new Array(_len), _key = 0; _key < _len; _key++) {\n      arguments_[_key] = arguments[_key];\n    }\n\n    const key = cacheKey ? cacheKey(arguments_) : arguments_[0];\n    const cacheItem = cache.get(key);\n\n    if (cacheItem) {\n      return cacheItem.data;\n    }\n\n    const result = fn.apply(this, arguments_);\n    cache.set(key, {\n      data: result,\n      maxAge: maxAge ? Date.now() + maxAge : Number.POSITIVE_INFINITY\n    });\n    return result;\n  };\n\n  mimicFn(memoized, fn, {\n    ignoreNonConfigurable: true\n  });\n  cacheStore.set(memoized, cache);\n  return memoized;\n};\n/**\n@returns A [decorator](https://github.com/tc39/proposal-decorators) to memoize class methods or static class methods.\n\n@example\n```\nimport mem = require('mem');\n\nclass Example {\n    index = 0\n\n    @mem.decorator()\n    counter() {\n        return ++this.index;\n    }\n}\n\nclass ExampleWithOptions {\n    index = 0\n\n    @mem.decorator({maxAge: 1000})\n    counter() {\n        return ++this.index;\n    }\n}\n```\n*/\n\n\nmem.decorator = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return (target, propertyKey, descriptor) => {\n    const input = target[propertyKey];\n\n    if (typeof input !== 'function') {\n      throw new TypeError('The decorated value must be a function');\n    }\n\n    delete descriptor.value;\n    delete descriptor.writable;\n\n    descriptor.get = function () {\n      if (!decoratorInstanceMap.has(this)) {\n        const value = mem(input, options);\n        decoratorInstanceMap.set(this, value);\n        return value;\n      }\n\n      return decoratorInstanceMap.get(this);\n    };\n  };\n};\n/**\nClear all cached data of a memoized function.\n\n@param fn - Memoized function.\n*/\n\n\nmem.clear = fn => {\n  const cache = cacheStore.get(fn);\n\n  if (!cache) {\n    throw new TypeError('Can\\'t clear a function that was not memoized!');\n  }\n\n  if (typeof cache.clear !== 'function') {\n    throw new TypeError('The cache Map can\\'t be cleared!');\n  }\n\n  cache.clear();\n};\n\nmodule.exports = mem;","map":{"version":3,"names":["mimicFn","require","mapAgeCleaner","decoratorInstanceMap","WeakMap","cacheStore","mem","fn","cacheKey","cache","Map","maxAge","memoized","arguments_","key","cacheItem","get","data","result","apply","set","Date","now","Number","POSITIVE_INFINITY","ignoreNonConfigurable","decorator","options","target","propertyKey","descriptor","input","TypeError","value","writable","has","clear","module","exports"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/mem/dist/index.js"],"sourcesContent":["'use strict';\nconst mimicFn = require(\"mimic-fn\");\nconst mapAgeCleaner = require(\"map-age-cleaner\");\nconst decoratorInstanceMap = new WeakMap();\nconst cacheStore = new WeakMap();\n/**\n[Memoize](https://en.wikipedia.org/wiki/Memoization) functions - An optimization used to speed up consecutive function calls by caching the result of calls with identical input.\n\n@param fn - Function to be memoized.\n\n@example\n```\nimport mem = require('mem');\n\nlet i = 0;\nconst counter = () => ++i;\nconst memoized = mem(counter);\n\nmemoized('foo');\n//=> 1\n\n// Cached as it's the same arguments\nmemoized('foo');\n//=> 1\n\n// Not cached anymore as the arguments changed\nmemoized('bar');\n//=> 2\n\nmemoized('bar');\n//=> 2\n```\n*/\nconst mem = (fn, { cacheKey, cache = new Map(), maxAge } = {}) => {\n    if (typeof maxAge === 'number') {\n        // TODO: Drop after https://github.com/SamVerschueren/map-age-cleaner/issues/5\n        // @ts-expect-error\n        mapAgeCleaner(cache);\n    }\n    const memoized = function (...arguments_) {\n        const key = cacheKey ? cacheKey(arguments_) : arguments_[0];\n        const cacheItem = cache.get(key);\n        if (cacheItem) {\n            return cacheItem.data;\n        }\n        const result = fn.apply(this, arguments_);\n        cache.set(key, {\n            data: result,\n            maxAge: maxAge ? Date.now() + maxAge : Number.POSITIVE_INFINITY\n        });\n        return result;\n    };\n    mimicFn(memoized, fn, {\n        ignoreNonConfigurable: true\n    });\n    cacheStore.set(memoized, cache);\n    return memoized;\n};\n/**\n@returns A [decorator](https://github.com/tc39/proposal-decorators) to memoize class methods or static class methods.\n\n@example\n```\nimport mem = require('mem');\n\nclass Example {\n    index = 0\n\n    @mem.decorator()\n    counter() {\n        return ++this.index;\n    }\n}\n\nclass ExampleWithOptions {\n    index = 0\n\n    @mem.decorator({maxAge: 1000})\n    counter() {\n        return ++this.index;\n    }\n}\n```\n*/\nmem.decorator = (options = {}) => (target, propertyKey, descriptor) => {\n    const input = target[propertyKey];\n    if (typeof input !== 'function') {\n        throw new TypeError('The decorated value must be a function');\n    }\n    delete descriptor.value;\n    delete descriptor.writable;\n    descriptor.get = function () {\n        if (!decoratorInstanceMap.has(this)) {\n            const value = mem(input, options);\n            decoratorInstanceMap.set(this, value);\n            return value;\n        }\n        return decoratorInstanceMap.get(this);\n    };\n};\n/**\nClear all cached data of a memoized function.\n\n@param fn - Memoized function.\n*/\nmem.clear = (fn) => {\n    const cache = cacheStore.get(fn);\n    if (!cache) {\n        throw new TypeError('Can\\'t clear a function that was not memoized!');\n    }\n    if (typeof cache.clear !== 'function') {\n        throw new TypeError('The cache Map can\\'t be cleared!');\n    }\n    cache.clear();\n};\nmodule.exports = mem;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}