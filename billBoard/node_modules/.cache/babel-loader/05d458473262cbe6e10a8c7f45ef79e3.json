{"ast":null,"code":"import { isLeaf } from '../../../models/gridColumnGrouping';\nimport { isDeepEqual } from '../../../utils/utils'; // This is the recurrence function that help writing `unwrapGroupingColumnModel()`\n\nconst recurrentUnwrapGroupingColumnModel = (columnGroupNode, parents, unwrappedGroupingModelToComplete) => {\n  if (isLeaf(columnGroupNode)) {\n    if (unwrappedGroupingModelToComplete[columnGroupNode.field] !== undefined) {\n      throw new Error([`MUI X: columnGroupingModel contains duplicated field`, `column field ${columnGroupNode.field} occurs two times in the grouping model:`, `- ${unwrappedGroupingModelToComplete[columnGroupNode.field].join(' > ')}`, `- ${parents.join(' > ')}`].join('\\n'));\n    }\n\n    unwrappedGroupingModelToComplete[columnGroupNode.field] = parents;\n    return;\n  }\n\n  const {\n    groupId,\n    children\n  } = columnGroupNode;\n  children.forEach(child => {\n    recurrentUnwrapGroupingColumnModel(child, [...parents, groupId], unwrappedGroupingModelToComplete);\n  });\n};\n/**\n * This is a function that provide for each column the array of its parents.\n * Parents are ordered from the root to the leaf.\n * @param columnGroupingModel The model such as provided in DataGrid props\n * @returns An object `{[field]: groupIds}` where `groupIds` is the parents of the column `field`\n */\n\n\nexport const unwrapGroupingColumnModel = columnGroupingModel => {\n  if (!columnGroupingModel) {\n    return {};\n  }\n\n  const unwrappedSubTree = {};\n  columnGroupingModel.forEach(columnGroupNode => {\n    recurrentUnwrapGroupingColumnModel(columnGroupNode, [], unwrappedSubTree);\n  });\n  return unwrappedSubTree;\n};\nexport const getColumnGroupsHeaderStructure = (orderedColumns, unwrappedGroupingModel, pinnedFields) => {\n  const getParents = field => unwrappedGroupingModel[field] ?? [];\n\n  const groupingHeaderStructure = [];\n  const maxDepth = Math.max(...orderedColumns.map(field => getParents(field).length));\n\n  const haveSameParents = (field1, field2, depth) => isDeepEqual(getParents(field1).slice(0, depth + 1), getParents(field2).slice(0, depth + 1));\n\n  const haveDifferentContainers = (field1, field2) => {\n    if (pinnedFields?.left && pinnedFields.left.includes(field1) && !pinnedFields.left.includes(field2)) {\n      return true;\n    }\n\n    if (pinnedFields?.right && !pinnedFields.right.includes(field1) && pinnedFields.right.includes(field2)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  for (let depth = 0; depth < maxDepth; depth += 1) {\n    const depthStructure = orderedColumns.reduce((structure, newField) => {\n      const groupId = getParents(newField)[depth] ?? null;\n\n      if (structure.length === 0) {\n        return [{\n          columnFields: [newField],\n          groupId\n        }];\n      }\n\n      const lastGroup = structure[structure.length - 1];\n      const prevField = lastGroup.columnFields[lastGroup.columnFields.length - 1];\n      const prevGroupId = lastGroup.groupId;\n\n      if (prevGroupId !== groupId || !haveSameParents(prevField, newField, depth) || // Fix for https://github.com/mui/mui-x/issues/7041\n      haveDifferentContainers(prevField, newField)) {\n        // It's a new group\n        return [...structure, {\n          columnFields: [newField],\n          groupId\n        }];\n      } // It extends the previous group\n\n\n      return [...structure.slice(0, structure.length - 1), {\n        columnFields: [...lastGroup.columnFields, newField],\n        groupId\n      }];\n    }, []);\n    groupingHeaderStructure.push(depthStructure);\n  }\n\n  return groupingHeaderStructure;\n};","map":{"version":3,"names":["isLeaf","isDeepEqual","recurrentUnwrapGroupingColumnModel","columnGroupNode","parents","unwrappedGroupingModelToComplete","field","undefined","Error","join","groupId","children","forEach","child","unwrapGroupingColumnModel","columnGroupingModel","unwrappedSubTree","getColumnGroupsHeaderStructure","orderedColumns","unwrappedGroupingModel","pinnedFields","getParents","groupingHeaderStructure","maxDepth","Math","max","map","length","haveSameParents","field1","field2","depth","slice","haveDifferentContainers","left","includes","right","depthStructure","reduce","structure","newField","columnFields","lastGroup","prevField","prevGroupId","push"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/@mui/x-data-grid/hooks/features/columnGrouping/gridColumnGroupsUtils.js"],"sourcesContent":["import { isLeaf } from '../../../models/gridColumnGrouping';\nimport { isDeepEqual } from '../../../utils/utils';\n// This is the recurrence function that help writing `unwrapGroupingColumnModel()`\nconst recurrentUnwrapGroupingColumnModel = (columnGroupNode, parents, unwrappedGroupingModelToComplete) => {\n  if (isLeaf(columnGroupNode)) {\n    if (unwrappedGroupingModelToComplete[columnGroupNode.field] !== undefined) {\n      throw new Error([`MUI X: columnGroupingModel contains duplicated field`, `column field ${columnGroupNode.field} occurs two times in the grouping model:`, `- ${unwrappedGroupingModelToComplete[columnGroupNode.field].join(' > ')}`, `- ${parents.join(' > ')}`].join('\\n'));\n    }\n    unwrappedGroupingModelToComplete[columnGroupNode.field] = parents;\n    return;\n  }\n  const {\n    groupId,\n    children\n  } = columnGroupNode;\n  children.forEach(child => {\n    recurrentUnwrapGroupingColumnModel(child, [...parents, groupId], unwrappedGroupingModelToComplete);\n  });\n};\n\n/**\n * This is a function that provide for each column the array of its parents.\n * Parents are ordered from the root to the leaf.\n * @param columnGroupingModel The model such as provided in DataGrid props\n * @returns An object `{[field]: groupIds}` where `groupIds` is the parents of the column `field`\n */\nexport const unwrapGroupingColumnModel = columnGroupingModel => {\n  if (!columnGroupingModel) {\n    return {};\n  }\n  const unwrappedSubTree = {};\n  columnGroupingModel.forEach(columnGroupNode => {\n    recurrentUnwrapGroupingColumnModel(columnGroupNode, [], unwrappedSubTree);\n  });\n  return unwrappedSubTree;\n};\nexport const getColumnGroupsHeaderStructure = (orderedColumns, unwrappedGroupingModel, pinnedFields) => {\n  const getParents = field => unwrappedGroupingModel[field] ?? [];\n  const groupingHeaderStructure = [];\n  const maxDepth = Math.max(...orderedColumns.map(field => getParents(field).length));\n  const haveSameParents = (field1, field2, depth) => isDeepEqual(getParents(field1).slice(0, depth + 1), getParents(field2).slice(0, depth + 1));\n  const haveDifferentContainers = (field1, field2) => {\n    if (pinnedFields?.left && pinnedFields.left.includes(field1) && !pinnedFields.left.includes(field2)) {\n      return true;\n    }\n    if (pinnedFields?.right && !pinnedFields.right.includes(field1) && pinnedFields.right.includes(field2)) {\n      return true;\n    }\n    return false;\n  };\n  for (let depth = 0; depth < maxDepth; depth += 1) {\n    const depthStructure = orderedColumns.reduce((structure, newField) => {\n      const groupId = getParents(newField)[depth] ?? null;\n      if (structure.length === 0) {\n        return [{\n          columnFields: [newField],\n          groupId\n        }];\n      }\n      const lastGroup = structure[structure.length - 1];\n      const prevField = lastGroup.columnFields[lastGroup.columnFields.length - 1];\n      const prevGroupId = lastGroup.groupId;\n      if (prevGroupId !== groupId || !haveSameParents(prevField, newField, depth) ||\n      // Fix for https://github.com/mui/mui-x/issues/7041\n      haveDifferentContainers(prevField, newField)) {\n        // It's a new group\n        return [...structure, {\n          columnFields: [newField],\n          groupId\n        }];\n      }\n\n      // It extends the previous group\n      return [...structure.slice(0, structure.length - 1), {\n        columnFields: [...lastGroup.columnFields, newField],\n        groupId\n      }];\n    }, []);\n    groupingHeaderStructure.push(depthStructure);\n  }\n  return groupingHeaderStructure;\n};"],"mappings":"AAAA,SAASA,MAAT,QAAuB,oCAAvB;AACA,SAASC,WAAT,QAA4B,sBAA5B,C,CACA;;AACA,MAAMC,kCAAkC,GAAG,CAACC,eAAD,EAAkBC,OAAlB,EAA2BC,gCAA3B,KAAgE;EACzG,IAAIL,MAAM,CAACG,eAAD,CAAV,EAA6B;IAC3B,IAAIE,gCAAgC,CAACF,eAAe,CAACG,KAAjB,CAAhC,KAA4DC,SAAhE,EAA2E;MACzE,MAAM,IAAIC,KAAJ,CAAU,CAAE,sDAAF,EAA0D,gBAAeL,eAAe,CAACG,KAAM,0CAA/F,EAA2I,KAAID,gCAAgC,CAACF,eAAe,CAACG,KAAjB,CAAhC,CAAwDG,IAAxD,CAA6D,KAA7D,CAAoE,EAAnN,EAAuN,KAAIL,OAAO,CAACK,IAAR,CAAa,KAAb,CAAoB,EAA/O,EAAkPA,IAAlP,CAAuP,IAAvP,CAAV,CAAN;IACD;;IACDJ,gCAAgC,CAACF,eAAe,CAACG,KAAjB,CAAhC,GAA0DF,OAA1D;IACA;EACD;;EACD,MAAM;IACJM,OADI;IAEJC;EAFI,IAGFR,eAHJ;EAIAQ,QAAQ,CAACC,OAAT,CAAiBC,KAAK,IAAI;IACxBX,kCAAkC,CAACW,KAAD,EAAQ,CAAC,GAAGT,OAAJ,EAAaM,OAAb,CAAR,EAA+BL,gCAA/B,CAAlC;EACD,CAFD;AAGD,CAfD;AAiBA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAMS,yBAAyB,GAAGC,mBAAmB,IAAI;EAC9D,IAAI,CAACA,mBAAL,EAA0B;IACxB,OAAO,EAAP;EACD;;EACD,MAAMC,gBAAgB,GAAG,EAAzB;EACAD,mBAAmB,CAACH,OAApB,CAA4BT,eAAe,IAAI;IAC7CD,kCAAkC,CAACC,eAAD,EAAkB,EAAlB,EAAsBa,gBAAtB,CAAlC;EACD,CAFD;EAGA,OAAOA,gBAAP;AACD,CATM;AAUP,OAAO,MAAMC,8BAA8B,GAAG,CAACC,cAAD,EAAiBC,sBAAjB,EAAyCC,YAAzC,KAA0D;EACtG,MAAMC,UAAU,GAAGf,KAAK,IAAIa,sBAAsB,CAACb,KAAD,CAAtB,IAAiC,EAA7D;;EACA,MAAMgB,uBAAuB,GAAG,EAAhC;EACA,MAAMC,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAAS,GAAGP,cAAc,CAACQ,GAAf,CAAmBpB,KAAK,IAAIe,UAAU,CAACf,KAAD,CAAV,CAAkBqB,MAA9C,CAAZ,CAAjB;;EACA,MAAMC,eAAe,GAAG,CAACC,MAAD,EAASC,MAAT,EAAiBC,KAAjB,KAA2B9B,WAAW,CAACoB,UAAU,CAACQ,MAAD,CAAV,CAAmBG,KAAnB,CAAyB,CAAzB,EAA4BD,KAAK,GAAG,CAApC,CAAD,EAAyCV,UAAU,CAACS,MAAD,CAAV,CAAmBE,KAAnB,CAAyB,CAAzB,EAA4BD,KAAK,GAAG,CAApC,CAAzC,CAA9D;;EACA,MAAME,uBAAuB,GAAG,CAACJ,MAAD,EAASC,MAAT,KAAoB;IAClD,IAAIV,YAAY,EAAEc,IAAd,IAAsBd,YAAY,CAACc,IAAb,CAAkBC,QAAlB,CAA2BN,MAA3B,CAAtB,IAA4D,CAACT,YAAY,CAACc,IAAb,CAAkBC,QAAlB,CAA2BL,MAA3B,CAAjE,EAAqG;MACnG,OAAO,IAAP;IACD;;IACD,IAAIV,YAAY,EAAEgB,KAAd,IAAuB,CAAChB,YAAY,CAACgB,KAAb,CAAmBD,QAAnB,CAA4BN,MAA5B,CAAxB,IAA+DT,YAAY,CAACgB,KAAb,CAAmBD,QAAnB,CAA4BL,MAA5B,CAAnE,EAAwG;MACtG,OAAO,IAAP;IACD;;IACD,OAAO,KAAP;EACD,CARD;;EASA,KAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGR,QAA5B,EAAsCQ,KAAK,IAAI,CAA/C,EAAkD;IAChD,MAAMM,cAAc,GAAGnB,cAAc,CAACoB,MAAf,CAAsB,CAACC,SAAD,EAAYC,QAAZ,KAAyB;MACpE,MAAM9B,OAAO,GAAGW,UAAU,CAACmB,QAAD,CAAV,CAAqBT,KAArB,KAA+B,IAA/C;;MACA,IAAIQ,SAAS,CAACZ,MAAV,KAAqB,CAAzB,EAA4B;QAC1B,OAAO,CAAC;UACNc,YAAY,EAAE,CAACD,QAAD,CADR;UAEN9B;QAFM,CAAD,CAAP;MAID;;MACD,MAAMgC,SAAS,GAAGH,SAAS,CAACA,SAAS,CAACZ,MAAV,GAAmB,CAApB,CAA3B;MACA,MAAMgB,SAAS,GAAGD,SAAS,CAACD,YAAV,CAAuBC,SAAS,CAACD,YAAV,CAAuBd,MAAvB,GAAgC,CAAvD,CAAlB;MACA,MAAMiB,WAAW,GAAGF,SAAS,CAAChC,OAA9B;;MACA,IAAIkC,WAAW,KAAKlC,OAAhB,IAA2B,CAACkB,eAAe,CAACe,SAAD,EAAYH,QAAZ,EAAsBT,KAAtB,CAA3C,IACJ;MACAE,uBAAuB,CAACU,SAAD,EAAYH,QAAZ,CAFvB,EAE8C;QAC5C;QACA,OAAO,CAAC,GAAGD,SAAJ,EAAe;UACpBE,YAAY,EAAE,CAACD,QAAD,CADM;UAEpB9B;QAFoB,CAAf,CAAP;MAID,CAnBmE,CAqBpE;;;MACA,OAAO,CAAC,GAAG6B,SAAS,CAACP,KAAV,CAAgB,CAAhB,EAAmBO,SAAS,CAACZ,MAAV,GAAmB,CAAtC,CAAJ,EAA8C;QACnDc,YAAY,EAAE,CAAC,GAAGC,SAAS,CAACD,YAAd,EAA4BD,QAA5B,CADqC;QAEnD9B;MAFmD,CAA9C,CAAP;IAID,CA1BsB,EA0BpB,EA1BoB,CAAvB;IA2BAY,uBAAuB,CAACuB,IAAxB,CAA6BR,cAA7B;EACD;;EACD,OAAOf,uBAAP;AACD,CA7CM"},"metadata":{},"sourceType":"module"}