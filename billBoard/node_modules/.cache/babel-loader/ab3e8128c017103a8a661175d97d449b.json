{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_debounce as debounce } from '@mui/utils';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridDensityFactorSelector } from '../density/densitySelector';\nimport { gridFilterModelSelector } from '../filter/gridFilterSelector';\nimport { gridPaginationSelector } from '../pagination/gridPaginationSelector';\nimport { gridSortModelSelector } from '../sorting/gridSortingSelector';\nimport { useGridRegisterPipeApplier } from '../../core/pipeProcessing';\nimport { gridPinnedRowsSelector } from './gridRowsSelector';\nimport { DATA_GRID_PROPS_DEFAULT_VALUES } from '../../../DataGrid/useDataGridProps'; // TODO: I think the row heights can now be encoded as a single `size` instead of `sizes.baseXxxx`\n\nexport const rowsMetaStateInitializer = state => _extends({}, state, {\n  rowsMeta: {\n    currentPageTotalHeight: 0,\n    positions: []\n  }\n});\nlet warnedOnceInvalidRowHeight = false;\n\nconst getValidRowHeight = (rowHeightProp, defaultRowHeight, warningMessage) => {\n  if (typeof rowHeightProp === 'number' && rowHeightProp > 0) {\n    return rowHeightProp;\n  }\n\n  if (process.env.NODE_ENV !== 'production' && !warnedOnceInvalidRowHeight && typeof rowHeightProp !== 'undefined' && rowHeightProp !== null) {\n    console.warn(warningMessage);\n    warnedOnceInvalidRowHeight = true;\n  }\n\n  return defaultRowHeight;\n};\n\nconst rowHeightWarning = [`MUI X: The \\`rowHeight\\` prop should be a number greater than 0.`, `The default value will be used instead.`].join('\\n');\nconst getRowHeightWarning = [`MUI X: The \\`getRowHeight\\` prop should return a number greater than 0 or 'auto'.`, `The default value will be used instead.`].join('\\n');\n/**\n * @requires useGridPageSize (method)\n * @requires useGridPage (method)\n */\n\nexport const useGridRowsMeta = (apiRef, props) => {\n  const {\n    getRowHeight: getRowHeightProp,\n    getRowSpacing,\n    getEstimatedRowHeight\n  } = props;\n  const rowsHeightLookup = React.useRef(Object.create(null)); // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n\n  const lastMeasuredRowIndex = React.useRef(-1);\n  const hasRowWithAutoHeight = React.useRef(false);\n  const densityFactor = useGridSelector(apiRef, gridDensityFactorSelector);\n  const filterModel = useGridSelector(apiRef, gridFilterModelSelector);\n  const paginationState = useGridSelector(apiRef, gridPaginationSelector);\n  const sortModel = useGridSelector(apiRef, gridSortModelSelector);\n  const currentPage = useGridVisibleRows(apiRef, props);\n  const pinnedRows = useGridSelector(apiRef, gridPinnedRowsSelector);\n  const validRowHeight = getValidRowHeight(props.rowHeight, DATA_GRID_PROPS_DEFAULT_VALUES.rowHeight, rowHeightWarning);\n  const rowHeight = Math.floor(validRowHeight * densityFactor);\n  const hydrateRowsMeta = React.useCallback(() => {\n    hasRowWithAutoHeight.current = false;\n\n    const calculateRowProcessedSizes = row => {\n      if (!rowsHeightLookup.current[row.id]) {\n        rowsHeightLookup.current[row.id] = {\n          sizes: {\n            baseCenter: rowHeight\n          },\n          isResized: false,\n          autoHeight: false,\n          needsFirstMeasurement: true // Assume all rows will need to be measured by default\n\n        };\n      }\n\n      const {\n        isResized,\n        needsFirstMeasurement,\n        sizes\n      } = rowsHeightLookup.current[row.id];\n      let baseRowHeight = typeof rowHeight === 'number' && rowHeight > 0 ? rowHeight : 52;\n      const existingBaseRowHeight = sizes.baseCenter;\n\n      if (isResized) {\n        // Do not recalculate resized row height and use the value from the lookup\n        baseRowHeight = existingBaseRowHeight;\n      } else if (getRowHeightProp) {\n        const rowHeightFromUser = getRowHeightProp(_extends({}, row, {\n          densityFactor\n        }));\n\n        if (rowHeightFromUser === 'auto') {\n          if (needsFirstMeasurement) {\n            const estimatedRowHeight = getEstimatedRowHeight ? getEstimatedRowHeight(_extends({}, row, {\n              densityFactor\n            })) : rowHeight; // If the row was not measured yet use the estimated row height\n\n            baseRowHeight = estimatedRowHeight ?? rowHeight;\n          } else {\n            baseRowHeight = existingBaseRowHeight;\n          }\n\n          hasRowWithAutoHeight.current = true;\n          rowsHeightLookup.current[row.id].autoHeight = true;\n        } else {\n          // Default back to base rowHeight if getRowHeight returns invalid value.\n          baseRowHeight = getValidRowHeight(rowHeightFromUser, rowHeight, getRowHeightWarning);\n          rowsHeightLookup.current[row.id].needsFirstMeasurement = false;\n          rowsHeightLookup.current[row.id].autoHeight = false;\n        }\n      } else {\n        rowsHeightLookup.current[row.id].needsFirstMeasurement = false;\n      }\n\n      const initialHeights = {\n        baseCenter: baseRowHeight\n      };\n\n      if (getRowSpacing) {\n        const indexRelativeToCurrentPage = apiRef.current.getRowIndexRelativeToVisibleRows(row.id);\n        const spacing = getRowSpacing(_extends({}, row, {\n          isFirstVisible: indexRelativeToCurrentPage === 0,\n          isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,\n          indexRelativeToCurrentPage\n        }));\n        initialHeights.spacingTop = spacing.top ?? 0;\n        initialHeights.spacingBottom = spacing.bottom ?? 0;\n      }\n\n      const processedSizes = apiRef.current.unstable_applyPipeProcessors('rowHeight', initialHeights, row);\n      rowsHeightLookup.current[row.id].sizes = processedSizes;\n      return processedSizes;\n    };\n\n    const positions = [];\n    const currentPageTotalHeight = currentPage.rows.reduce((acc, row) => {\n      positions.push(acc);\n      let otherSizes = 0;\n      const processedSizes = calculateRowProcessedSizes(row);\n      /* eslint-disable-next-line guard-for-in */\n\n      for (const key in processedSizes) {\n        const value = processedSizes[key];\n\n        if (key !== 'baseCenter') {\n          otherSizes += value;\n        }\n      }\n\n      return acc + processedSizes.baseCenter + otherSizes;\n    }, 0);\n    pinnedRows?.top?.forEach(row => {\n      calculateRowProcessedSizes(row);\n    });\n    pinnedRows?.bottom?.forEach(row => {\n      calculateRowProcessedSizes(row);\n    });\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        rowsMeta: {\n          currentPageTotalHeight,\n          positions\n        }\n      });\n    });\n\n    if (!hasRowWithAutoHeight.current) {\n      // No row has height=auto, so all rows are already measured\n      lastMeasuredRowIndex.current = Infinity;\n    }\n\n    apiRef.current.forceUpdate();\n  }, [apiRef, currentPage.rows, rowHeight, getRowHeightProp, getRowSpacing, getEstimatedRowHeight, pinnedRows, densityFactor]);\n  const getRowHeight = React.useCallback(rowId => {\n    const height = rowsHeightLookup.current[rowId];\n    return height ? height.sizes.baseCenter : rowHeight;\n  }, [rowHeight]);\n\n  const getRowInternalSizes = rowId => rowsHeightLookup.current[rowId]?.sizes;\n\n  const setRowHeight = React.useCallback((id, height) => {\n    rowsHeightLookup.current[id].sizes.baseCenter = height;\n    rowsHeightLookup.current[id].isResized = true;\n    rowsHeightLookup.current[id].needsFirstMeasurement = false;\n    hydrateRowsMeta();\n  }, [hydrateRowsMeta]);\n  const debouncedHydrateRowsMeta = React.useMemo(() => debounce(hydrateRowsMeta, props.rowPositionsDebounceMs), [hydrateRowsMeta, props.rowPositionsDebounceMs]);\n  const storeMeasuredRowHeight = React.useCallback((id, height) => {\n    if (!rowsHeightLookup.current[id] || !rowsHeightLookup.current[id].autoHeight) {\n      return;\n    } // Only trigger hydration if the value is different, otherwise we trigger a loop\n\n\n    const needsHydration = rowsHeightLookup.current[id].sizes.baseCenter !== height;\n    rowsHeightLookup.current[id].needsFirstMeasurement = false;\n    rowsHeightLookup.current[id].sizes.baseCenter = height;\n\n    if (needsHydration) {\n      debouncedHydrateRowsMeta();\n    }\n  }, [debouncedHydrateRowsMeta]);\n  const rowHasAutoHeight = React.useCallback(id => {\n    return rowsHeightLookup.current[id]?.autoHeight || false;\n  }, []);\n  const getLastMeasuredRowIndex = React.useCallback(() => {\n    return lastMeasuredRowIndex.current;\n  }, []);\n  const setLastMeasuredRowIndex = React.useCallback(index => {\n    if (hasRowWithAutoHeight.current && index > lastMeasuredRowIndex.current) {\n      lastMeasuredRowIndex.current = index;\n    }\n  }, []);\n  const resetRowHeights = React.useCallback(() => {\n    rowsHeightLookup.current = {};\n    hydrateRowsMeta();\n  }, [hydrateRowsMeta]); // The effect is used to build the rows meta data - currentPageTotalHeight and positions.\n  // Because of variable row height this is needed for the virtualization\n\n  React.useEffect(() => {\n    hydrateRowsMeta();\n  }, [rowHeight, filterModel, paginationState, sortModel, hydrateRowsMeta]);\n  useGridRegisterPipeApplier(apiRef, 'rowHeight', hydrateRowsMeta);\n  const rowsMetaApi = {\n    unstable_setLastMeasuredRowIndex: setLastMeasuredRowIndex,\n    unstable_getRowHeight: getRowHeight,\n    unstable_getRowInternalSizes: getRowInternalSizes,\n    unstable_setRowHeight: setRowHeight,\n    unstable_storeRowHeightMeasurement: storeMeasuredRowHeight,\n    resetRowHeights\n  };\n  const rowsMetaPrivateApi = {\n    getLastMeasuredRowIndex,\n    rowHasAutoHeight\n  };\n  useGridApiMethod(apiRef, rowsMetaApi, 'public');\n  useGridApiMethod(apiRef, rowsMetaPrivateApi, 'private');\n};","map":{"version":3,"names":["_extends","React","unstable_debounce","debounce","useGridVisibleRows","useGridApiMethod","useGridSelector","gridDensityFactorSelector","gridFilterModelSelector","gridPaginationSelector","gridSortModelSelector","useGridRegisterPipeApplier","gridPinnedRowsSelector","DATA_GRID_PROPS_DEFAULT_VALUES","rowsMetaStateInitializer","state","rowsMeta","currentPageTotalHeight","positions","warnedOnceInvalidRowHeight","getValidRowHeight","rowHeightProp","defaultRowHeight","warningMessage","process","env","NODE_ENV","console","warn","rowHeightWarning","join","getRowHeightWarning","useGridRowsMeta","apiRef","props","getRowHeight","getRowHeightProp","getRowSpacing","getEstimatedRowHeight","rowsHeightLookup","useRef","Object","create","lastMeasuredRowIndex","hasRowWithAutoHeight","densityFactor","filterModel","paginationState","sortModel","currentPage","pinnedRows","validRowHeight","rowHeight","Math","floor","hydrateRowsMeta","useCallback","current","calculateRowProcessedSizes","row","id","sizes","baseCenter","isResized","autoHeight","needsFirstMeasurement","baseRowHeight","existingBaseRowHeight","rowHeightFromUser","estimatedRowHeight","initialHeights","indexRelativeToCurrentPage","getRowIndexRelativeToVisibleRows","spacing","isFirstVisible","isLastVisible","rows","length","spacingTop","top","spacingBottom","bottom","processedSizes","unstable_applyPipeProcessors","reduce","acc","push","otherSizes","key","value","forEach","setState","Infinity","forceUpdate","rowId","height","getRowInternalSizes","setRowHeight","debouncedHydrateRowsMeta","useMemo","rowPositionsDebounceMs","storeMeasuredRowHeight","needsHydration","rowHasAutoHeight","getLastMeasuredRowIndex","setLastMeasuredRowIndex","index","resetRowHeights","useEffect","rowsMetaApi","unstable_setLastMeasuredRowIndex","unstable_getRowHeight","unstable_getRowInternalSizes","unstable_setRowHeight","unstable_storeRowHeightMeasurement","rowsMetaPrivateApi"],"sources":["C:/Users/kb/node_modules/@mui/x-data-grid/hooks/features/rows/useGridRowsMeta.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_debounce as debounce } from '@mui/utils';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridDensityFactorSelector } from '../density/densitySelector';\nimport { gridFilterModelSelector } from '../filter/gridFilterSelector';\nimport { gridPaginationSelector } from '../pagination/gridPaginationSelector';\nimport { gridSortModelSelector } from '../sorting/gridSortingSelector';\nimport { useGridRegisterPipeApplier } from '../../core/pipeProcessing';\nimport { gridPinnedRowsSelector } from './gridRowsSelector';\nimport { DATA_GRID_PROPS_DEFAULT_VALUES } from '../../../DataGrid/useDataGridProps';\n\n// TODO: I think the row heights can now be encoded as a single `size` instead of `sizes.baseXxxx`\n\nexport const rowsMetaStateInitializer = state => _extends({}, state, {\n  rowsMeta: {\n    currentPageTotalHeight: 0,\n    positions: []\n  }\n});\nlet warnedOnceInvalidRowHeight = false;\nconst getValidRowHeight = (rowHeightProp, defaultRowHeight, warningMessage) => {\n  if (typeof rowHeightProp === 'number' && rowHeightProp > 0) {\n    return rowHeightProp;\n  }\n  if (process.env.NODE_ENV !== 'production' && !warnedOnceInvalidRowHeight && typeof rowHeightProp !== 'undefined' && rowHeightProp !== null) {\n    console.warn(warningMessage);\n    warnedOnceInvalidRowHeight = true;\n  }\n  return defaultRowHeight;\n};\nconst rowHeightWarning = [`MUI X: The \\`rowHeight\\` prop should be a number greater than 0.`, `The default value will be used instead.`].join('\\n');\nconst getRowHeightWarning = [`MUI X: The \\`getRowHeight\\` prop should return a number greater than 0 or 'auto'.`, `The default value will be used instead.`].join('\\n');\n\n/**\n * @requires useGridPageSize (method)\n * @requires useGridPage (method)\n */\nexport const useGridRowsMeta = (apiRef, props) => {\n  const {\n    getRowHeight: getRowHeightProp,\n    getRowSpacing,\n    getEstimatedRowHeight\n  } = props;\n  const rowsHeightLookup = React.useRef(Object.create(null));\n\n  // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n  const lastMeasuredRowIndex = React.useRef(-1);\n  const hasRowWithAutoHeight = React.useRef(false);\n  const densityFactor = useGridSelector(apiRef, gridDensityFactorSelector);\n  const filterModel = useGridSelector(apiRef, gridFilterModelSelector);\n  const paginationState = useGridSelector(apiRef, gridPaginationSelector);\n  const sortModel = useGridSelector(apiRef, gridSortModelSelector);\n  const currentPage = useGridVisibleRows(apiRef, props);\n  const pinnedRows = useGridSelector(apiRef, gridPinnedRowsSelector);\n  const validRowHeight = getValidRowHeight(props.rowHeight, DATA_GRID_PROPS_DEFAULT_VALUES.rowHeight, rowHeightWarning);\n  const rowHeight = Math.floor(validRowHeight * densityFactor);\n  const hydrateRowsMeta = React.useCallback(() => {\n    hasRowWithAutoHeight.current = false;\n    const calculateRowProcessedSizes = row => {\n      if (!rowsHeightLookup.current[row.id]) {\n        rowsHeightLookup.current[row.id] = {\n          sizes: {\n            baseCenter: rowHeight\n          },\n          isResized: false,\n          autoHeight: false,\n          needsFirstMeasurement: true // Assume all rows will need to be measured by default\n        };\n      }\n      const {\n        isResized,\n        needsFirstMeasurement,\n        sizes\n      } = rowsHeightLookup.current[row.id];\n      let baseRowHeight = typeof rowHeight === 'number' && rowHeight > 0 ? rowHeight : 52;\n      const existingBaseRowHeight = sizes.baseCenter;\n      if (isResized) {\n        // Do not recalculate resized row height and use the value from the lookup\n        baseRowHeight = existingBaseRowHeight;\n      } else if (getRowHeightProp) {\n        const rowHeightFromUser = getRowHeightProp(_extends({}, row, {\n          densityFactor\n        }));\n        if (rowHeightFromUser === 'auto') {\n          if (needsFirstMeasurement) {\n            const estimatedRowHeight = getEstimatedRowHeight ? getEstimatedRowHeight(_extends({}, row, {\n              densityFactor\n            })) : rowHeight;\n\n            // If the row was not measured yet use the estimated row height\n            baseRowHeight = estimatedRowHeight ?? rowHeight;\n          } else {\n            baseRowHeight = existingBaseRowHeight;\n          }\n          hasRowWithAutoHeight.current = true;\n          rowsHeightLookup.current[row.id].autoHeight = true;\n        } else {\n          // Default back to base rowHeight if getRowHeight returns invalid value.\n          baseRowHeight = getValidRowHeight(rowHeightFromUser, rowHeight, getRowHeightWarning);\n          rowsHeightLookup.current[row.id].needsFirstMeasurement = false;\n          rowsHeightLookup.current[row.id].autoHeight = false;\n        }\n      } else {\n        rowsHeightLookup.current[row.id].needsFirstMeasurement = false;\n      }\n      const initialHeights = {\n        baseCenter: baseRowHeight\n      };\n      if (getRowSpacing) {\n        const indexRelativeToCurrentPage = apiRef.current.getRowIndexRelativeToVisibleRows(row.id);\n        const spacing = getRowSpacing(_extends({}, row, {\n          isFirstVisible: indexRelativeToCurrentPage === 0,\n          isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,\n          indexRelativeToCurrentPage\n        }));\n        initialHeights.spacingTop = spacing.top ?? 0;\n        initialHeights.spacingBottom = spacing.bottom ?? 0;\n      }\n      const processedSizes = apiRef.current.unstable_applyPipeProcessors('rowHeight', initialHeights, row);\n      rowsHeightLookup.current[row.id].sizes = processedSizes;\n      return processedSizes;\n    };\n    const positions = [];\n    const currentPageTotalHeight = currentPage.rows.reduce((acc, row) => {\n      positions.push(acc);\n      let otherSizes = 0;\n      const processedSizes = calculateRowProcessedSizes(row);\n      /* eslint-disable-next-line guard-for-in */\n      for (const key in processedSizes) {\n        const value = processedSizes[key];\n        if (key !== 'baseCenter') {\n          otherSizes += value;\n        }\n      }\n      return acc + processedSizes.baseCenter + otherSizes;\n    }, 0);\n    pinnedRows?.top?.forEach(row => {\n      calculateRowProcessedSizes(row);\n    });\n    pinnedRows?.bottom?.forEach(row => {\n      calculateRowProcessedSizes(row);\n    });\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        rowsMeta: {\n          currentPageTotalHeight,\n          positions\n        }\n      });\n    });\n    if (!hasRowWithAutoHeight.current) {\n      // No row has height=auto, so all rows are already measured\n      lastMeasuredRowIndex.current = Infinity;\n    }\n    apiRef.current.forceUpdate();\n  }, [apiRef, currentPage.rows, rowHeight, getRowHeightProp, getRowSpacing, getEstimatedRowHeight, pinnedRows, densityFactor]);\n  const getRowHeight = React.useCallback(rowId => {\n    const height = rowsHeightLookup.current[rowId];\n    return height ? height.sizes.baseCenter : rowHeight;\n  }, [rowHeight]);\n  const getRowInternalSizes = rowId => rowsHeightLookup.current[rowId]?.sizes;\n  const setRowHeight = React.useCallback((id, height) => {\n    rowsHeightLookup.current[id].sizes.baseCenter = height;\n    rowsHeightLookup.current[id].isResized = true;\n    rowsHeightLookup.current[id].needsFirstMeasurement = false;\n    hydrateRowsMeta();\n  }, [hydrateRowsMeta]);\n  const debouncedHydrateRowsMeta = React.useMemo(() => debounce(hydrateRowsMeta, props.rowPositionsDebounceMs), [hydrateRowsMeta, props.rowPositionsDebounceMs]);\n  const storeMeasuredRowHeight = React.useCallback((id, height) => {\n    if (!rowsHeightLookup.current[id] || !rowsHeightLookup.current[id].autoHeight) {\n      return;\n    }\n\n    // Only trigger hydration if the value is different, otherwise we trigger a loop\n    const needsHydration = rowsHeightLookup.current[id].sizes.baseCenter !== height;\n    rowsHeightLookup.current[id].needsFirstMeasurement = false;\n    rowsHeightLookup.current[id].sizes.baseCenter = height;\n    if (needsHydration) {\n      debouncedHydrateRowsMeta();\n    }\n  }, [debouncedHydrateRowsMeta]);\n  const rowHasAutoHeight = React.useCallback(id => {\n    return rowsHeightLookup.current[id]?.autoHeight || false;\n  }, []);\n  const getLastMeasuredRowIndex = React.useCallback(() => {\n    return lastMeasuredRowIndex.current;\n  }, []);\n  const setLastMeasuredRowIndex = React.useCallback(index => {\n    if (hasRowWithAutoHeight.current && index > lastMeasuredRowIndex.current) {\n      lastMeasuredRowIndex.current = index;\n    }\n  }, []);\n  const resetRowHeights = React.useCallback(() => {\n    rowsHeightLookup.current = {};\n    hydrateRowsMeta();\n  }, [hydrateRowsMeta]);\n\n  // The effect is used to build the rows meta data - currentPageTotalHeight and positions.\n  // Because of variable row height this is needed for the virtualization\n  React.useEffect(() => {\n    hydrateRowsMeta();\n  }, [rowHeight, filterModel, paginationState, sortModel, hydrateRowsMeta]);\n  useGridRegisterPipeApplier(apiRef, 'rowHeight', hydrateRowsMeta);\n  const rowsMetaApi = {\n    unstable_setLastMeasuredRowIndex: setLastMeasuredRowIndex,\n    unstable_getRowHeight: getRowHeight,\n    unstable_getRowInternalSizes: getRowInternalSizes,\n    unstable_setRowHeight: setRowHeight,\n    unstable_storeRowHeightMeasurement: storeMeasuredRowHeight,\n    resetRowHeights\n  };\n  const rowsMetaPrivateApi = {\n    getLastMeasuredRowIndex,\n    rowHasAutoHeight\n  };\n  useGridApiMethod(apiRef, rowsMetaApi, 'public');\n  useGridApiMethod(apiRef, rowsMetaPrivateApi, 'private');\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}