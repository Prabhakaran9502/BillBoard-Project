{"ast":null,"code":"import * as React from 'react';\nimport { useLazyRef } from './useLazyRef';\nimport { useOnMount } from './useOnMount';\nimport { buildWarning } from '../../utils/warning';\nimport { fastObjectShallowCompare } from '../../utils/fastObjectShallowCompare';\nconst stateNotInitializedWarning = buildWarning(['MUI X: `useGridSelector` has been called before the initialization of the state.', 'This hook can only be used inside the context of the grid.']);\n\nfunction isOutputSelector(selector) {\n  return selector.acceptsApiRef;\n}\n\nfunction applySelector(apiRef, selector) {\n  if (isOutputSelector(selector)) {\n    return selector(apiRef);\n  }\n\n  return selector(apiRef.current.state);\n}\n\nconst defaultCompare = Object.is;\nexport const objectShallowCompare = fastObjectShallowCompare;\n\nconst createRefs = () => ({\n  state: null,\n  equals: null,\n  selector: null\n});\n\nexport const useGridSelector = function (apiRef, selector) {\n  let equals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultCompare;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!apiRef.current.state) {\n      stateNotInitializedWarning();\n    }\n  }\n\n  const refs = useLazyRef(createRefs);\n  const didInit = refs.current.selector !== null;\n  const [state, setState] = React.useState( // We don't use an initialization function to avoid allocations\n  didInit ? null : applySelector(apiRef, selector));\n  refs.current.state = state;\n  refs.current.equals = equals;\n  refs.current.selector = selector;\n  useOnMount(() => {\n    return apiRef.current.store.subscribe(() => {\n      const newState = applySelector(apiRef, refs.current.selector);\n\n      if (!refs.current.equals(refs.current.state, newState)) {\n        refs.current.state = newState;\n        setState(newState);\n      }\n    });\n  });\n  return state;\n};","map":{"version":3,"names":["React","useLazyRef","useOnMount","buildWarning","fastObjectShallowCompare","stateNotInitializedWarning","isOutputSelector","selector","acceptsApiRef","applySelector","apiRef","current","state","defaultCompare","Object","is","objectShallowCompare","createRefs","equals","useGridSelector","process","env","NODE_ENV","refs","didInit","setState","useState","store","subscribe","newState"],"sources":["C:/Users/kb/node_modules/@mui/x-data-grid/hooks/utils/useGridSelector.js"],"sourcesContent":["import * as React from 'react';\nimport { useLazyRef } from './useLazyRef';\nimport { useOnMount } from './useOnMount';\nimport { buildWarning } from '../../utils/warning';\nimport { fastObjectShallowCompare } from '../../utils/fastObjectShallowCompare';\nconst stateNotInitializedWarning = buildWarning(['MUI X: `useGridSelector` has been called before the initialization of the state.', 'This hook can only be used inside the context of the grid.']);\nfunction isOutputSelector(selector) {\n  return selector.acceptsApiRef;\n}\nfunction applySelector(apiRef, selector) {\n  if (isOutputSelector(selector)) {\n    return selector(apiRef);\n  }\n  return selector(apiRef.current.state);\n}\nconst defaultCompare = Object.is;\nexport const objectShallowCompare = fastObjectShallowCompare;\nconst createRefs = () => ({\n  state: null,\n  equals: null,\n  selector: null\n});\nexport const useGridSelector = (apiRef, selector, equals = defaultCompare) => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!apiRef.current.state) {\n      stateNotInitializedWarning();\n    }\n  }\n  const refs = useLazyRef(createRefs);\n  const didInit = refs.current.selector !== null;\n  const [state, setState] = React.useState(\n  // We don't use an initialization function to avoid allocations\n  didInit ? null : applySelector(apiRef, selector));\n  refs.current.state = state;\n  refs.current.equals = equals;\n  refs.current.selector = selector;\n  useOnMount(() => {\n    return apiRef.current.store.subscribe(() => {\n      const newState = applySelector(apiRef, refs.current.selector);\n      if (!refs.current.equals(refs.current.state, newState)) {\n        refs.current.state = newState;\n        setState(newState);\n      }\n    });\n  });\n  return state;\n};"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,YAAT,QAA6B,qBAA7B;AACA,SAASC,wBAAT,QAAyC,sCAAzC;AACA,MAAMC,0BAA0B,GAAGF,YAAY,CAAC,CAAC,kFAAD,EAAqF,4DAArF,CAAD,CAA/C;;AACA,SAASG,gBAAT,CAA0BC,QAA1B,EAAoC;EAClC,OAAOA,QAAQ,CAACC,aAAhB;AACD;;AACD,SAASC,aAAT,CAAuBC,MAAvB,EAA+BH,QAA/B,EAAyC;EACvC,IAAID,gBAAgB,CAACC,QAAD,CAApB,EAAgC;IAC9B,OAAOA,QAAQ,CAACG,MAAD,CAAf;EACD;;EACD,OAAOH,QAAQ,CAACG,MAAM,CAACC,OAAP,CAAeC,KAAhB,CAAf;AACD;;AACD,MAAMC,cAAc,GAAGC,MAAM,CAACC,EAA9B;AACA,OAAO,MAAMC,oBAAoB,GAAGZ,wBAA7B;;AACP,MAAMa,UAAU,GAAG,OAAO;EACxBL,KAAK,EAAE,IADiB;EAExBM,MAAM,EAAE,IAFgB;EAGxBX,QAAQ,EAAE;AAHc,CAAP,CAAnB;;AAKA,OAAO,MAAMY,eAAe,GAAG,UAACT,MAAD,EAASH,QAAT,EAA+C;EAAA,IAA5BW,MAA4B,uEAAnBL,cAAmB;;EAC5E,IAAIO,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;IACzC,IAAI,CAACZ,MAAM,CAACC,OAAP,CAAeC,KAApB,EAA2B;MACzBP,0BAA0B;IAC3B;EACF;;EACD,MAAMkB,IAAI,GAAGtB,UAAU,CAACgB,UAAD,CAAvB;EACA,MAAMO,OAAO,GAAGD,IAAI,CAACZ,OAAL,CAAaJ,QAAb,KAA0B,IAA1C;EACA,MAAM,CAACK,KAAD,EAAQa,QAAR,IAAoBzB,KAAK,CAAC0B,QAAN,EAC1B;EACAF,OAAO,GAAG,IAAH,GAAUf,aAAa,CAACC,MAAD,EAASH,QAAT,CAFJ,CAA1B;EAGAgB,IAAI,CAACZ,OAAL,CAAaC,KAAb,GAAqBA,KAArB;EACAW,IAAI,CAACZ,OAAL,CAAaO,MAAb,GAAsBA,MAAtB;EACAK,IAAI,CAACZ,OAAL,CAAaJ,QAAb,GAAwBA,QAAxB;EACAL,UAAU,CAAC,MAAM;IACf,OAAOQ,MAAM,CAACC,OAAP,CAAegB,KAAf,CAAqBC,SAArB,CAA+B,MAAM;MAC1C,MAAMC,QAAQ,GAAGpB,aAAa,CAACC,MAAD,EAASa,IAAI,CAACZ,OAAL,CAAaJ,QAAtB,CAA9B;;MACA,IAAI,CAACgB,IAAI,CAACZ,OAAL,CAAaO,MAAb,CAAoBK,IAAI,CAACZ,OAAL,CAAaC,KAAjC,EAAwCiB,QAAxC,CAAL,EAAwD;QACtDN,IAAI,CAACZ,OAAL,CAAaC,KAAb,GAAqBiB,QAArB;QACAJ,QAAQ,CAACI,QAAD,CAAR;MACD;IACF,CANM,CAAP;EAOD,CARS,CAAV;EASA,OAAOjB,KAAP;AACD,CAxBM"},"metadata":{},"sourceType":"module"}