{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useLazyRef from '@mui/utils/useLazyRef';\nimport { gridFilteredTopLevelRowCountSelector } from '../filter';\nimport { useGridLogger, useGridSelector, useGridApiMethod, useGridApiEventHandler } from '../../utils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { gridPaginationRowCountSelector, gridPaginationMetaSelector, gridPaginationModelSelector } from './gridPaginationSelector';\nexport const useGridRowCount = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridRowCount');\n  const visibleTopLevelRowCount = useGridSelector(apiRef, gridFilteredTopLevelRowCountSelector);\n  const rowCountState = useGridSelector(apiRef, gridPaginationRowCountSelector);\n  const paginationMeta = useGridSelector(apiRef, gridPaginationMetaSelector);\n  const paginationModel = useGridSelector(apiRef, gridPaginationModelSelector);\n  const previousPageSize = useLazyRef(() => gridPaginationModelSelector(apiRef).pageSize);\n  apiRef.current.registerControlState({\n    stateId: 'paginationRowCount',\n    propModel: props.rowCount,\n    propOnChange: props.onRowCountChange,\n    stateSelector: gridPaginationRowCountSelector,\n    changeEvent: 'rowCountChange'\n  });\n  /**\n   * API METHODS\n   */\n\n  const setRowCount = React.useCallback(newRowCount => {\n    if (rowCountState === newRowCount) {\n      return;\n    }\n\n    logger.debug(\"Setting 'rowCount' to\", newRowCount);\n    apiRef.current.setState(state => _extends({}, state, {\n      pagination: _extends({}, state.pagination, {\n        rowCount: newRowCount\n      })\n    }));\n  }, [apiRef, logger, rowCountState]);\n  const paginationRowCountApi = {\n    setRowCount\n  };\n  useGridApiMethod(apiRef, paginationRowCountApi, 'public');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    const exportedRowCount = gridPaginationRowCountSelector(apiRef);\n    const shouldExportRowCount = // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels || // Always export if the `rowCount` is controlled\n    props.rowCount != null || // Always export if the `rowCount` has been initialized\n    props.initialState?.pagination?.rowCount != null;\n\n    if (!shouldExportRowCount) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      pagination: _extends({}, prevState.pagination, {\n        rowCount: exportedRowCount\n      })\n    });\n  }, [apiRef, props.rowCount, props.initialState?.pagination?.rowCount]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const restoredRowCount = context.stateToRestore.pagination?.rowCount ? context.stateToRestore.pagination.rowCount : gridPaginationRowCountSelector(apiRef);\n    apiRef.current.setState(state => _extends({}, state, {\n      pagination: _extends({}, state.pagination, {\n        rowCount: restoredRowCount\n      })\n    }));\n    return params;\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  /**\n   * EVENTS\n   */\n\n  const handlePaginationModelChange = React.useCallback(model => {\n    if (props.paginationMode === 'client' || !previousPageSize.current) {\n      return;\n    }\n\n    if (model.pageSize !== previousPageSize.current) {\n      previousPageSize.current = model.pageSize;\n\n      if (rowCountState === -1) {\n        // Row count unknown and page size changed, reset the page\n        apiRef.current.setPage(0);\n      }\n    }\n  }, [props.paginationMode, previousPageSize, rowCountState, apiRef]);\n  useGridApiEventHandler(apiRef, 'paginationModelChange', handlePaginationModelChange);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (props.paginationMode === 'client') {\n      apiRef.current.setRowCount(visibleTopLevelRowCount);\n    } else if (props.rowCount != null) {\n      apiRef.current.setRowCount(props.rowCount);\n    }\n  }, [apiRef, props.paginationMode, visibleTopLevelRowCount, props.rowCount]);\n  const isLastPage = paginationMeta.hasNextPage === false;\n  React.useEffect(() => {\n    if (isLastPage && rowCountState === -1) {\n      apiRef.current.setRowCount(paginationModel.pageSize * paginationModel.page + visibleTopLevelRowCount);\n    }\n  }, [apiRef, visibleTopLevelRowCount, isLastPage, rowCountState, paginationModel]);\n};","map":{"version":3,"names":["_extends","React","useLazyRef","gridFilteredTopLevelRowCountSelector","useGridLogger","useGridSelector","useGridApiMethod","useGridApiEventHandler","useGridRegisterPipeProcessor","gridPaginationRowCountSelector","gridPaginationMetaSelector","gridPaginationModelSelector","useGridRowCount","apiRef","props","logger","visibleTopLevelRowCount","rowCountState","paginationMeta","paginationModel","previousPageSize","pageSize","current","registerControlState","stateId","propModel","rowCount","propOnChange","onRowCountChange","stateSelector","changeEvent","setRowCount","useCallback","newRowCount","debug","setState","state","pagination","paginationRowCountApi","stateExportPreProcessing","prevState","context","exportedRowCount","shouldExportRowCount","exportOnlyDirtyModels","initialState","stateRestorePreProcessing","params","restoredRowCount","stateToRestore","handlePaginationModelChange","model","paginationMode","setPage","useEffect","isLastPage","hasNextPage","page"],"sources":["C:/Users/kb/node_modules/@mui/x-data-grid/hooks/features/pagination/useGridRowCount.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useLazyRef from '@mui/utils/useLazyRef';\nimport { gridFilteredTopLevelRowCountSelector } from '../filter';\nimport { useGridLogger, useGridSelector, useGridApiMethod, useGridApiEventHandler } from '../../utils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { gridPaginationRowCountSelector, gridPaginationMetaSelector, gridPaginationModelSelector } from './gridPaginationSelector';\nexport const useGridRowCount = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridRowCount');\n  const visibleTopLevelRowCount = useGridSelector(apiRef, gridFilteredTopLevelRowCountSelector);\n  const rowCountState = useGridSelector(apiRef, gridPaginationRowCountSelector);\n  const paginationMeta = useGridSelector(apiRef, gridPaginationMetaSelector);\n  const paginationModel = useGridSelector(apiRef, gridPaginationModelSelector);\n  const previousPageSize = useLazyRef(() => gridPaginationModelSelector(apiRef).pageSize);\n  apiRef.current.registerControlState({\n    stateId: 'paginationRowCount',\n    propModel: props.rowCount,\n    propOnChange: props.onRowCountChange,\n    stateSelector: gridPaginationRowCountSelector,\n    changeEvent: 'rowCountChange'\n  });\n\n  /**\n   * API METHODS\n   */\n  const setRowCount = React.useCallback(newRowCount => {\n    if (rowCountState === newRowCount) {\n      return;\n    }\n    logger.debug(\"Setting 'rowCount' to\", newRowCount);\n    apiRef.current.setState(state => _extends({}, state, {\n      pagination: _extends({}, state.pagination, {\n        rowCount: newRowCount\n      })\n    }));\n  }, [apiRef, logger, rowCountState]);\n  const paginationRowCountApi = {\n    setRowCount\n  };\n  useGridApiMethod(apiRef, paginationRowCountApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    const exportedRowCount = gridPaginationRowCountSelector(apiRef);\n    const shouldExportRowCount =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the `rowCount` is controlled\n    props.rowCount != null ||\n    // Always export if the `rowCount` has been initialized\n    props.initialState?.pagination?.rowCount != null;\n    if (!shouldExportRowCount) {\n      return prevState;\n    }\n    return _extends({}, prevState, {\n      pagination: _extends({}, prevState.pagination, {\n        rowCount: exportedRowCount\n      })\n    });\n  }, [apiRef, props.rowCount, props.initialState?.pagination?.rowCount]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const restoredRowCount = context.stateToRestore.pagination?.rowCount ? context.stateToRestore.pagination.rowCount : gridPaginationRowCountSelector(apiRef);\n    apiRef.current.setState(state => _extends({}, state, {\n      pagination: _extends({}, state.pagination, {\n        rowCount: restoredRowCount\n      })\n    }));\n    return params;\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n\n  /**\n   * EVENTS\n   */\n  const handlePaginationModelChange = React.useCallback(model => {\n    if (props.paginationMode === 'client' || !previousPageSize.current) {\n      return;\n    }\n    if (model.pageSize !== previousPageSize.current) {\n      previousPageSize.current = model.pageSize;\n      if (rowCountState === -1) {\n        // Row count unknown and page size changed, reset the page\n        apiRef.current.setPage(0);\n      }\n    }\n  }, [props.paginationMode, previousPageSize, rowCountState, apiRef]);\n  useGridApiEventHandler(apiRef, 'paginationModelChange', handlePaginationModelChange);\n\n  /**\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    if (props.paginationMode === 'client') {\n      apiRef.current.setRowCount(visibleTopLevelRowCount);\n    } else if (props.rowCount != null) {\n      apiRef.current.setRowCount(props.rowCount);\n    }\n  }, [apiRef, props.paginationMode, visibleTopLevelRowCount, props.rowCount]);\n  const isLastPage = paginationMeta.hasNextPage === false;\n  React.useEffect(() => {\n    if (isLastPage && rowCountState === -1) {\n      apiRef.current.setRowCount(paginationModel.pageSize * paginationModel.page + visibleTopLevelRowCount);\n    }\n  }, [apiRef, visibleTopLevelRowCount, isLastPage, rowCountState, paginationModel]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}