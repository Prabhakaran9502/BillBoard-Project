{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { gridPreferencePanelStateSelector } from './gridPreferencePanelSelector';\nexport const preferencePanelStateInitializer = (state, props) => _extends({}, state, {\n  preferencePanel: props.initialState?.preferencePanel ?? {\n    open: false\n  }\n});\n/**\n * TODO: Add a single `setPreferencePanel` method to avoid multiple `setState`\n */\n\nexport const useGridPreferencesPanel = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridPreferencesPanel');\n  const hideTimeout = React.useRef();\n  const immediateTimeout = React.useRef();\n  /**\n   * API METHODS\n   */\n\n  const hidePreferences = React.useCallback(() => {\n    logger.debug('Hiding Preferences Panel');\n    const preferencePanelState = gridPreferencePanelStateSelector(apiRef.current.state);\n\n    if (preferencePanelState.openedPanelValue) {\n      apiRef.current.publishEvent('preferencePanelClose', {\n        openedPanelValue: preferencePanelState.openedPanelValue\n      });\n    }\n\n    apiRef.current.setState(state => _extends({}, state, {\n      preferencePanel: {\n        open: false\n      }\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger]); // This is to prevent the preferences from closing when you open a select box or another panel,\n  // The issue is in MUI core V4 => Fixed in V5\n\n  const doNotHidePanel = React.useCallback(() => {\n    immediateTimeout.current = setTimeout(() => clearTimeout(hideTimeout.current), 0);\n  }, []); // This is a hack for the issue with Core V4, by delaying hiding the panel on the clickAwayListener,\n  // we can cancel the action if the trigger element still need the panel...\n\n  const hidePreferencesDelayed = React.useCallback(() => {\n    hideTimeout.current = setTimeout(hidePreferences, 100);\n  }, [hidePreferences]);\n  const showPreferences = React.useCallback((newValue, panelId, labelId) => {\n    logger.debug('Opening Preferences Panel');\n    doNotHidePanel();\n    apiRef.current.setState(state => _extends({}, state, {\n      preferencePanel: _extends({}, state.preferencePanel, {\n        open: true,\n        openedPanelValue: newValue,\n        panelId,\n        labelId\n      })\n    }));\n    apiRef.current.publishEvent('preferencePanelOpen', {\n      openedPanelValue: newValue\n    });\n    apiRef.current.forceUpdate();\n  }, [logger, doNotHidePanel, apiRef]);\n  useGridApiMethod(apiRef, {\n    showPreferences,\n    hidePreferences: hidePreferencesDelayed\n  }, 'public');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    const preferencePanelToExport = gridPreferencePanelStateSelector(apiRef.current.state);\n    const shouldExportPreferencePanel = // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels || // Always export if the panel was initialized\n    props.initialState?.preferencePanel != null || // Always export if the panel is opened\n    preferencePanelToExport.open;\n\n    if (!shouldExportPreferencePanel) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      preferencePanel: preferencePanelToExport\n    });\n  }, [apiRef, props.initialState?.preferencePanel]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const preferencePanel = context.stateToRestore.preferencePanel;\n\n    if (preferencePanel != null) {\n      apiRef.current.setState(state => _extends({}, state, {\n        preferencePanel\n      }));\n    }\n\n    return params;\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(hideTimeout.current);\n      clearTimeout(immediateTimeout.current);\n    };\n  }, []);\n};","map":{"version":3,"names":["_extends","React","useGridApiMethod","useGridLogger","useGridRegisterPipeProcessor","gridPreferencePanelStateSelector","preferencePanelStateInitializer","state","props","preferencePanel","initialState","open","useGridPreferencesPanel","apiRef","logger","hideTimeout","useRef","immediateTimeout","hidePreferences","useCallback","debug","preferencePanelState","current","openedPanelValue","publishEvent","setState","forceUpdate","doNotHidePanel","setTimeout","clearTimeout","hidePreferencesDelayed","showPreferences","newValue","panelId","labelId","stateExportPreProcessing","prevState","context","preferencePanelToExport","shouldExportPreferencePanel","exportOnlyDirtyModels","stateRestorePreProcessing","params","stateToRestore","useEffect"],"sources":["C:/Users/kb/node_modules/@mui/x-data-grid/hooks/features/preferencesPanel/useGridPreferencesPanel.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { gridPreferencePanelStateSelector } from './gridPreferencePanelSelector';\nexport const preferencePanelStateInitializer = (state, props) => _extends({}, state, {\n  preferencePanel: props.initialState?.preferencePanel ?? {\n    open: false\n  }\n});\n\n/**\n * TODO: Add a single `setPreferencePanel` method to avoid multiple `setState`\n */\nexport const useGridPreferencesPanel = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridPreferencesPanel');\n  const hideTimeout = React.useRef();\n  const immediateTimeout = React.useRef();\n\n  /**\n   * API METHODS\n   */\n  const hidePreferences = React.useCallback(() => {\n    logger.debug('Hiding Preferences Panel');\n    const preferencePanelState = gridPreferencePanelStateSelector(apiRef.current.state);\n    if (preferencePanelState.openedPanelValue) {\n      apiRef.current.publishEvent('preferencePanelClose', {\n        openedPanelValue: preferencePanelState.openedPanelValue\n      });\n    }\n    apiRef.current.setState(state => _extends({}, state, {\n      preferencePanel: {\n        open: false\n      }\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger]);\n\n  // This is to prevent the preferences from closing when you open a select box or another panel,\n  // The issue is in MUI core V4 => Fixed in V5\n  const doNotHidePanel = React.useCallback(() => {\n    immediateTimeout.current = setTimeout(() => clearTimeout(hideTimeout.current), 0);\n  }, []);\n\n  // This is a hack for the issue with Core V4, by delaying hiding the panel on the clickAwayListener,\n  // we can cancel the action if the trigger element still need the panel...\n  const hidePreferencesDelayed = React.useCallback(() => {\n    hideTimeout.current = setTimeout(hidePreferences, 100);\n  }, [hidePreferences]);\n  const showPreferences = React.useCallback((newValue, panelId, labelId) => {\n    logger.debug('Opening Preferences Panel');\n    doNotHidePanel();\n    apiRef.current.setState(state => _extends({}, state, {\n      preferencePanel: _extends({}, state.preferencePanel, {\n        open: true,\n        openedPanelValue: newValue,\n        panelId,\n        labelId\n      })\n    }));\n    apiRef.current.publishEvent('preferencePanelOpen', {\n      openedPanelValue: newValue\n    });\n    apiRef.current.forceUpdate();\n  }, [logger, doNotHidePanel, apiRef]);\n  useGridApiMethod(apiRef, {\n    showPreferences,\n    hidePreferences: hidePreferencesDelayed\n  }, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    const preferencePanelToExport = gridPreferencePanelStateSelector(apiRef.current.state);\n    const shouldExportPreferencePanel =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the panel was initialized\n    props.initialState?.preferencePanel != null ||\n    // Always export if the panel is opened\n    preferencePanelToExport.open;\n    if (!shouldExportPreferencePanel) {\n      return prevState;\n    }\n    return _extends({}, prevState, {\n      preferencePanel: preferencePanelToExport\n    });\n  }, [apiRef, props.initialState?.preferencePanel]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const preferencePanel = context.stateToRestore.preferencePanel;\n    if (preferencePanel != null) {\n      apiRef.current.setState(state => _extends({}, state, {\n        preferencePanel\n      }));\n    }\n    return params;\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n\n  /**\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(hideTimeout.current);\n      clearTimeout(immediateTimeout.current);\n    };\n  }, []);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}