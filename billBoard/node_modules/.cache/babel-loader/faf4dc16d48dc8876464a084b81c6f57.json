{"ast":null,"code":"import * as React from 'react';\nimport { styled } from '@mui/system';\nimport { unstable_composeClasses as composeClasses, unstable_useForkRef as useForkRef, unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport { useOnMount } from '../../hooks/utils/useOnMount';\nimport { useGridPrivateApiContext } from '../../hooks/utils/useGridPrivateApiContext';\nimport { gridDimensionsSelector, useGridSelector } from '../../hooks';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { getDataGridUtilityClass } from '../../constants/gridClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = (ownerState, position) => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['scrollbar', `scrollbar--${position}`],\n    content: ['scrollbarContent']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n\nconst Scrollbar = styled('div')({\n  position: 'absolute',\n  display: 'inline-block',\n  zIndex: 6,\n  '& > div': {\n    display: 'inline-block'\n  },\n  // In macOS Safari and Gnome Web, scrollbars are overlaid and don't affect the layout. So we consider\n  // their size to be 0px throughout all the calculations, but the floating scrollbar container does need\n  // to appear and have a real size. We set it to 14px because it seems like an acceptable value and we\n  // don't have a method to find the required size for scrollbars on those platforms.\n  '--size': 'calc(max(var(--DataGrid-scrollbarSize), 14px))'\n});\nconst ScrollbarVertical = styled(Scrollbar)({\n  width: 'var(--size)',\n  height: 'calc(var(--DataGrid-hasScrollY) * (100% - var(--DataGrid-topContainerHeight) - var(--DataGrid-bottomContainerHeight) - var(--DataGrid-hasScrollX) * var(--DataGrid-scrollbarSize)))',\n  overflowY: 'auto',\n  overflowX: 'hidden',\n  // Disable focus-visible style, it's a scrollbar.\n  outline: 0,\n  '& > div': {\n    width: 'var(--size)'\n  },\n  top: 'var(--DataGrid-topContainerHeight)',\n  right: '0px'\n});\nconst ScrollbarHorizontal = styled(Scrollbar)({\n  width: '100%',\n  height: 'var(--size)',\n  overflowY: 'hidden',\n  overflowX: 'auto',\n  // Disable focus-visible style, it's a scrollbar.\n  outline: 0,\n  '& > div': {\n    height: 'var(--size)'\n  },\n  bottom: '0px'\n});\nconst Content = styled('div')({\n  display: 'inline-block'\n});\nconst GridVirtualScrollbar = /*#__PURE__*/React.forwardRef(function GridVirtualScrollbar(props, ref) {\n  const apiRef = useGridPrivateApiContext();\n  const rootProps = useGridRootProps();\n  const isLocked = React.useRef(false);\n  const lastPosition = React.useRef(0);\n  const scrollbarRef = React.useRef(null);\n  const contentRef = React.useRef(null);\n  const classes = useUtilityClasses(rootProps, props.position);\n  const dimensions = useGridSelector(apiRef, gridDimensionsSelector);\n  const propertyDimension = props.position === 'vertical' ? 'height' : 'width';\n  const propertyScroll = props.position === 'vertical' ? 'scrollTop' : 'scrollLeft';\n  const hasScroll = props.position === 'vertical' ? dimensions.hasScrollX : dimensions.hasScrollY;\n  const contentSize = dimensions.minimumSize[propertyDimension] + (hasScroll ? dimensions.scrollbarSize : 0);\n  const scrollbarSize = props.position === 'vertical' ? dimensions.viewportInnerSize.height : dimensions.viewportOuterSize.width;\n  const scrollbarInnerSize = scrollbarSize * (contentSize / dimensions.viewportOuterSize[propertyDimension]);\n  const onScrollerScroll = useEventCallback(() => {\n    const scroller = apiRef.current.virtualScrollerRef.current;\n    const scrollbar = scrollbarRef.current;\n\n    if (scroller[propertyScroll] === lastPosition.current) {\n      return;\n    }\n\n    if (isLocked.current) {\n      isLocked.current = false;\n      return;\n    }\n\n    isLocked.current = true;\n    const value = scroller[propertyScroll] / contentSize;\n    scrollbar[propertyScroll] = value * scrollbarInnerSize;\n    lastPosition.current = scroller[propertyScroll];\n  });\n  const onScrollbarScroll = useEventCallback(() => {\n    const scroller = apiRef.current.virtualScrollerRef.current;\n    const scrollbar = scrollbarRef.current;\n\n    if (isLocked.current) {\n      isLocked.current = false;\n      return;\n    }\n\n    isLocked.current = true;\n    const value = scrollbar[propertyScroll] / scrollbarInnerSize;\n    scroller[propertyScroll] = value * contentSize;\n  });\n  useOnMount(() => {\n    const scroller = apiRef.current.virtualScrollerRef.current;\n    const scrollbar = scrollbarRef.current;\n    scroller.addEventListener('scroll', onScrollerScroll, {\n      capture: true\n    });\n    scrollbar.addEventListener('scroll', onScrollbarScroll, {\n      capture: true\n    });\n    return () => {\n      scroller.removeEventListener('scroll', onScrollerScroll, {\n        capture: true\n      });\n      scrollbar.removeEventListener('scroll', onScrollbarScroll, {\n        capture: true\n      });\n    };\n  });\n  React.useEffect(() => {\n    const content = contentRef.current;\n    content.style.setProperty(propertyDimension, `${scrollbarInnerSize}px`);\n  }, [scrollbarInnerSize, propertyDimension]);\n  const Container = props.position === 'vertical' ? ScrollbarVertical : ScrollbarHorizontal;\n  return /*#__PURE__*/_jsx(Container, {\n    ref: useForkRef(ref, scrollbarRef),\n    className: classes.root,\n    tabIndex: -1,\n    children: /*#__PURE__*/_jsx(Content, {\n      ref: contentRef,\n      className: classes.content\n    })\n  });\n});\nexport { GridVirtualScrollbar };","map":{"version":3,"names":["React","styled","unstable_composeClasses","composeClasses","unstable_useForkRef","useForkRef","unstable_useEventCallback","useEventCallback","useOnMount","useGridPrivateApiContext","gridDimensionsSelector","useGridSelector","useGridRootProps","getDataGridUtilityClass","jsx","_jsx","useUtilityClasses","ownerState","position","classes","slots","root","content","Scrollbar","display","zIndex","ScrollbarVertical","width","height","overflowY","overflowX","outline","top","right","ScrollbarHorizontal","bottom","Content","GridVirtualScrollbar","forwardRef","props","ref","apiRef","rootProps","isLocked","useRef","lastPosition","scrollbarRef","contentRef","dimensions","propertyDimension","propertyScroll","hasScroll","hasScrollX","hasScrollY","contentSize","minimumSize","scrollbarSize","viewportInnerSize","viewportOuterSize","scrollbarInnerSize","onScrollerScroll","scroller","current","virtualScrollerRef","scrollbar","value","onScrollbarScroll","addEventListener","capture","removeEventListener","useEffect","style","setProperty","Container","className","tabIndex","children"],"sources":["C:/Users/kb/node_modules/@mui/x-data-grid/components/virtualization/GridVirtualScrollbar.js"],"sourcesContent":["import * as React from 'react';\nimport { styled } from '@mui/system';\nimport { unstable_composeClasses as composeClasses, unstable_useForkRef as useForkRef, unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport { useOnMount } from '../../hooks/utils/useOnMount';\nimport { useGridPrivateApiContext } from '../../hooks/utils/useGridPrivateApiContext';\nimport { gridDimensionsSelector, useGridSelector } from '../../hooks';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { getDataGridUtilityClass } from '../../constants/gridClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = (ownerState, position) => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['scrollbar', `scrollbar--${position}`],\n    content: ['scrollbarContent']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\nconst Scrollbar = styled('div')({\n  position: 'absolute',\n  display: 'inline-block',\n  zIndex: 6,\n  '& > div': {\n    display: 'inline-block'\n  },\n  // In macOS Safari and Gnome Web, scrollbars are overlaid and don't affect the layout. So we consider\n  // their size to be 0px throughout all the calculations, but the floating scrollbar container does need\n  // to appear and have a real size. We set it to 14px because it seems like an acceptable value and we\n  // don't have a method to find the required size for scrollbars on those platforms.\n  '--size': 'calc(max(var(--DataGrid-scrollbarSize), 14px))'\n});\nconst ScrollbarVertical = styled(Scrollbar)({\n  width: 'var(--size)',\n  height: 'calc(var(--DataGrid-hasScrollY) * (100% - var(--DataGrid-topContainerHeight) - var(--DataGrid-bottomContainerHeight) - var(--DataGrid-hasScrollX) * var(--DataGrid-scrollbarSize)))',\n  overflowY: 'auto',\n  overflowX: 'hidden',\n  // Disable focus-visible style, it's a scrollbar.\n  outline: 0,\n  '& > div': {\n    width: 'var(--size)'\n  },\n  top: 'var(--DataGrid-topContainerHeight)',\n  right: '0px'\n});\nconst ScrollbarHorizontal = styled(Scrollbar)({\n  width: '100%',\n  height: 'var(--size)',\n  overflowY: 'hidden',\n  overflowX: 'auto',\n  // Disable focus-visible style, it's a scrollbar.\n  outline: 0,\n  '& > div': {\n    height: 'var(--size)'\n  },\n  bottom: '0px'\n});\nconst Content = styled('div')({\n  display: 'inline-block'\n});\nconst GridVirtualScrollbar = /*#__PURE__*/React.forwardRef(function GridVirtualScrollbar(props, ref) {\n  const apiRef = useGridPrivateApiContext();\n  const rootProps = useGridRootProps();\n  const isLocked = React.useRef(false);\n  const lastPosition = React.useRef(0);\n  const scrollbarRef = React.useRef(null);\n  const contentRef = React.useRef(null);\n  const classes = useUtilityClasses(rootProps, props.position);\n  const dimensions = useGridSelector(apiRef, gridDimensionsSelector);\n  const propertyDimension = props.position === 'vertical' ? 'height' : 'width';\n  const propertyScroll = props.position === 'vertical' ? 'scrollTop' : 'scrollLeft';\n  const hasScroll = props.position === 'vertical' ? dimensions.hasScrollX : dimensions.hasScrollY;\n  const contentSize = dimensions.minimumSize[propertyDimension] + (hasScroll ? dimensions.scrollbarSize : 0);\n  const scrollbarSize = props.position === 'vertical' ? dimensions.viewportInnerSize.height : dimensions.viewportOuterSize.width;\n  const scrollbarInnerSize = scrollbarSize * (contentSize / dimensions.viewportOuterSize[propertyDimension]);\n  const onScrollerScroll = useEventCallback(() => {\n    const scroller = apiRef.current.virtualScrollerRef.current;\n    const scrollbar = scrollbarRef.current;\n    if (scroller[propertyScroll] === lastPosition.current) {\n      return;\n    }\n    if (isLocked.current) {\n      isLocked.current = false;\n      return;\n    }\n    isLocked.current = true;\n    const value = scroller[propertyScroll] / contentSize;\n    scrollbar[propertyScroll] = value * scrollbarInnerSize;\n    lastPosition.current = scroller[propertyScroll];\n  });\n  const onScrollbarScroll = useEventCallback(() => {\n    const scroller = apiRef.current.virtualScrollerRef.current;\n    const scrollbar = scrollbarRef.current;\n    if (isLocked.current) {\n      isLocked.current = false;\n      return;\n    }\n    isLocked.current = true;\n    const value = scrollbar[propertyScroll] / scrollbarInnerSize;\n    scroller[propertyScroll] = value * contentSize;\n  });\n  useOnMount(() => {\n    const scroller = apiRef.current.virtualScrollerRef.current;\n    const scrollbar = scrollbarRef.current;\n    scroller.addEventListener('scroll', onScrollerScroll, {\n      capture: true\n    });\n    scrollbar.addEventListener('scroll', onScrollbarScroll, {\n      capture: true\n    });\n    return () => {\n      scroller.removeEventListener('scroll', onScrollerScroll, {\n        capture: true\n      });\n      scrollbar.removeEventListener('scroll', onScrollbarScroll, {\n        capture: true\n      });\n    };\n  });\n  React.useEffect(() => {\n    const content = contentRef.current;\n    content.style.setProperty(propertyDimension, `${scrollbarInnerSize}px`);\n  }, [scrollbarInnerSize, propertyDimension]);\n  const Container = props.position === 'vertical' ? ScrollbarVertical : ScrollbarHorizontal;\n  return /*#__PURE__*/_jsx(Container, {\n    ref: useForkRef(ref, scrollbarRef),\n    className: classes.root,\n    tabIndex: -1,\n    children: /*#__PURE__*/_jsx(Content, {\n      ref: contentRef,\n      className: classes.content\n    })\n  });\n});\nexport { GridVirtualScrollbar };"],"mappings":"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"},"metadata":{},"sourceType":"module"}