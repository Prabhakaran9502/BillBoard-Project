{"ast":null,"code":"const perf = typeof performance === 'object' && performance && typeof performance.now === 'function' ? performance : Date;\nconst hasAbortController = typeof AbortController === 'function'; // minimal backwards-compatibility polyfill\n// this doesn't have nearly all the checks and whatnot that\n// actual AbortController/Signal has, but it's enough for\n// our purposes, and if used properly, behaves the same.\n\nconst AC = hasAbortController ? AbortController : class AbortController {\n  constructor() {\n    this.signal = new AS();\n  }\n\n  abort() {\n    let reason = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Error('This operation was aborted');\n    this.signal.reason = this.signal.reason || reason;\n    this.signal.aborted = true;\n    this.signal.dispatchEvent({\n      type: 'abort',\n      target: this.signal\n    });\n  }\n\n};\nconst hasAbortSignal = typeof AbortSignal === 'function'; // Some polyfills put this on the AC class, not global\n\nconst hasACAbortSignal = typeof AC.AbortSignal === 'function';\nconst AS = hasAbortSignal ? AbortSignal : hasACAbortSignal ? AC.AbortController : class AbortSignal {\n  constructor() {\n    this.reason = undefined;\n    this.aborted = false;\n    this._listeners = [];\n  }\n\n  dispatchEvent(e) {\n    if (e.type === 'abort') {\n      this.aborted = true;\n      this.onabort(e);\n\n      this._listeners.forEach(f => f(e), this);\n    }\n  }\n\n  onabort() {}\n\n  addEventListener(ev, fn) {\n    if (ev === 'abort') {\n      this._listeners.push(fn);\n    }\n  }\n\n  removeEventListener(ev, fn) {\n    if (ev === 'abort') {\n      this._listeners = this._listeners.filter(f => f !== fn);\n    }\n  }\n\n};\nconst warned = new Set();\n\nconst deprecatedOption = (opt, instead) => {\n  const code = `LRU_CACHE_OPTION_${opt}`;\n\n  if (shouldWarn(code)) {\n    warn(code, `${opt} option`, `options.${instead}`, LRUCache);\n  }\n};\n\nconst deprecatedMethod = (method, instead) => {\n  const code = `LRU_CACHE_METHOD_${method}`;\n\n  if (shouldWarn(code)) {\n    const {\n      prototype\n    } = LRUCache;\n    const {\n      get\n    } = Object.getOwnPropertyDescriptor(prototype, method);\n    warn(code, `${method} method`, `cache.${instead}()`, get);\n  }\n};\n\nconst deprecatedProperty = (field, instead) => {\n  const code = `LRU_CACHE_PROPERTY_${field}`;\n\n  if (shouldWarn(code)) {\n    const {\n      prototype\n    } = LRUCache;\n    const {\n      get\n    } = Object.getOwnPropertyDescriptor(prototype, field);\n    warn(code, `${field} property`, `cache.${instead}`, get);\n  }\n};\n\nconst emitWarning = function () {\n  typeof process === 'object' && process && typeof process.emitWarning === 'function' ? process.emitWarning(...arguments) : console.error(...arguments);\n};\n\nconst shouldWarn = code => !warned.has(code);\n\nconst warn = (code, what, instead, fn) => {\n  warned.add(code);\n  const msg = `The ${what} is deprecated. Please use ${instead} instead.`;\n  emitWarning(msg, 'DeprecationWarning', code, fn);\n};\n\nconst isPosInt = n => n && n === Math.floor(n) && n > 0 && isFinite(n);\n/* istanbul ignore next - This is a little bit ridiculous, tbh.\n * The maximum array length is 2^32-1 or thereabouts on most JS impls.\n * And well before that point, you're caching the entire world, I mean,\n * that's ~32GB of just integers for the next/prev links, plus whatever\n * else to hold that many keys and values.  Just filling the memory with\n * zeroes at init time is brutal when you get that big.\n * But why not be complete?\n * Maybe in the future, these limits will have expanded. */\n\n\nconst getUintArray = max => !isPosInt(max) ? null : max <= Math.pow(2, 8) ? Uint8Array : max <= Math.pow(2, 16) ? Uint16Array : max <= Math.pow(2, 32) ? Uint32Array : max <= Number.MAX_SAFE_INTEGER ? ZeroArray : null;\n\nclass ZeroArray extends Array {\n  constructor(size) {\n    super(size);\n    this.fill(0);\n  }\n\n}\n\nclass Stack {\n  constructor(max) {\n    if (max === 0) {\n      return [];\n    }\n\n    const UintArray = getUintArray(max);\n    this.heap = new UintArray(max);\n    this.length = 0;\n  }\n\n  push(n) {\n    this.heap[this.length++] = n;\n  }\n\n  pop() {\n    return this.heap[--this.length];\n  }\n\n}\n\nclass LRUCache {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      max = 0,\n      ttl,\n      ttlResolution = 1,\n      ttlAutopurge,\n      updateAgeOnGet,\n      updateAgeOnHas,\n      allowStale,\n      dispose,\n      disposeAfter,\n      noDisposeOnSet,\n      noUpdateTTL,\n      maxSize = 0,\n      maxEntrySize = 0,\n      sizeCalculation,\n      fetchMethod,\n      fetchContext,\n      noDeleteOnFetchRejection,\n      noDeleteOnStaleGet,\n      allowStaleOnFetchRejection,\n      allowStaleOnFetchAbort,\n      ignoreFetchAbort\n    } = options; // deprecated options, don't trigger a warning for getting them if\n    // the thing being passed in is another LRUCache we're copying.\n\n    const {\n      length,\n      maxAge,\n      stale\n    } = options instanceof LRUCache ? {} : options;\n\n    if (max !== 0 && !isPosInt(max)) {\n      throw new TypeError('max option must be a nonnegative integer');\n    }\n\n    const UintArray = max ? getUintArray(max) : Array;\n\n    if (!UintArray) {\n      throw new Error('invalid max value: ' + max);\n    }\n\n    this.max = max;\n    this.maxSize = maxSize;\n    this.maxEntrySize = maxEntrySize || this.maxSize;\n    this.sizeCalculation = sizeCalculation || length;\n\n    if (this.sizeCalculation) {\n      if (!this.maxSize && !this.maxEntrySize) {\n        throw new TypeError('cannot set sizeCalculation without setting maxSize or maxEntrySize');\n      }\n\n      if (typeof this.sizeCalculation !== 'function') {\n        throw new TypeError('sizeCalculation set to non-function');\n      }\n    }\n\n    this.fetchMethod = fetchMethod || null;\n\n    if (this.fetchMethod && typeof this.fetchMethod !== 'function') {\n      throw new TypeError('fetchMethod must be a function if specified');\n    }\n\n    this.fetchContext = fetchContext;\n\n    if (!this.fetchMethod && fetchContext !== undefined) {\n      throw new TypeError('cannot set fetchContext without fetchMethod');\n    }\n\n    this.keyMap = new Map();\n    this.keyList = new Array(max).fill(null);\n    this.valList = new Array(max).fill(null);\n    this.next = new UintArray(max);\n    this.prev = new UintArray(max);\n    this.head = 0;\n    this.tail = 0;\n    this.free = new Stack(max);\n    this.initialFill = 1;\n    this.size = 0;\n\n    if (typeof dispose === 'function') {\n      this.dispose = dispose;\n    }\n\n    if (typeof disposeAfter === 'function') {\n      this.disposeAfter = disposeAfter;\n      this.disposed = [];\n    } else {\n      this.disposeAfter = null;\n      this.disposed = null;\n    }\n\n    this.noDisposeOnSet = !!noDisposeOnSet;\n    this.noUpdateTTL = !!noUpdateTTL;\n    this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection;\n    this.allowStaleOnFetchRejection = !!allowStaleOnFetchRejection;\n    this.allowStaleOnFetchAbort = !!allowStaleOnFetchAbort;\n    this.ignoreFetchAbort = !!ignoreFetchAbort; // NB: maxEntrySize is set to maxSize if it's set\n\n    if (this.maxEntrySize !== 0) {\n      if (this.maxSize !== 0) {\n        if (!isPosInt(this.maxSize)) {\n          throw new TypeError('maxSize must be a positive integer if specified');\n        }\n      }\n\n      if (!isPosInt(this.maxEntrySize)) {\n        throw new TypeError('maxEntrySize must be a positive integer if specified');\n      }\n\n      this.initializeSizeTracking();\n    }\n\n    this.allowStale = !!allowStale || !!stale;\n    this.noDeleteOnStaleGet = !!noDeleteOnStaleGet;\n    this.updateAgeOnGet = !!updateAgeOnGet;\n    this.updateAgeOnHas = !!updateAgeOnHas;\n    this.ttlResolution = isPosInt(ttlResolution) || ttlResolution === 0 ? ttlResolution : 1;\n    this.ttlAutopurge = !!ttlAutopurge;\n    this.ttl = ttl || maxAge || 0;\n\n    if (this.ttl) {\n      if (!isPosInt(this.ttl)) {\n        throw new TypeError('ttl must be a positive integer if specified');\n      }\n\n      this.initializeTTLTracking();\n    } // do not allow completely unbounded caches\n\n\n    if (this.max === 0 && this.ttl === 0 && this.maxSize === 0) {\n      throw new TypeError('At least one of max, maxSize, or ttl is required');\n    }\n\n    if (!this.ttlAutopurge && !this.max && !this.maxSize) {\n      const code = 'LRU_CACHE_UNBOUNDED';\n\n      if (shouldWarn(code)) {\n        warned.add(code);\n        const msg = 'TTL caching without ttlAutopurge, max, or maxSize can ' + 'result in unbounded memory consumption.';\n        emitWarning(msg, 'UnboundedCacheWarning', code, LRUCache);\n      }\n    }\n\n    if (stale) {\n      deprecatedOption('stale', 'allowStale');\n    }\n\n    if (maxAge) {\n      deprecatedOption('maxAge', 'ttl');\n    }\n\n    if (length) {\n      deprecatedOption('length', 'sizeCalculation');\n    }\n  }\n\n  getRemainingTTL(key) {\n    return this.has(key, {\n      updateAgeOnHas: false\n    }) ? Infinity : 0;\n  }\n\n  initializeTTLTracking() {\n    var _this = this;\n\n    this.ttls = new ZeroArray(this.max);\n    this.starts = new ZeroArray(this.max);\n\n    this.setItemTTL = function (index, ttl) {\n      let start = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : perf.now();\n      _this.starts[index] = ttl !== 0 ? start : 0;\n      _this.ttls[index] = ttl;\n\n      if (ttl !== 0 && _this.ttlAutopurge) {\n        const t = setTimeout(() => {\n          if (_this.isStale(index)) {\n            _this.delete(_this.keyList[index]);\n          }\n        }, ttl + 1);\n        /* istanbul ignore else - unref() not supported on all platforms */\n\n        if (t.unref) {\n          t.unref();\n        }\n      }\n    };\n\n    this.updateItemAge = index => {\n      this.starts[index] = this.ttls[index] !== 0 ? perf.now() : 0;\n    };\n\n    this.statusTTL = (status, index) => {\n      if (status) {\n        status.ttl = this.ttls[index];\n        status.start = this.starts[index];\n        status.now = cachedNow || getNow();\n        status.remainingTTL = status.now + status.ttl - status.start;\n      }\n    }; // debounce calls to perf.now() to 1s so we're not hitting\n    // that costly call repeatedly.\n\n\n    let cachedNow = 0;\n\n    const getNow = () => {\n      const n = perf.now();\n\n      if (this.ttlResolution > 0) {\n        cachedNow = n;\n        const t = setTimeout(() => cachedNow = 0, this.ttlResolution);\n        /* istanbul ignore else - not available on all platforms */\n\n        if (t.unref) {\n          t.unref();\n        }\n      }\n\n      return n;\n    };\n\n    this.getRemainingTTL = key => {\n      const index = this.keyMap.get(key);\n\n      if (index === undefined) {\n        return 0;\n      }\n\n      return this.ttls[index] === 0 || this.starts[index] === 0 ? Infinity : this.starts[index] + this.ttls[index] - (cachedNow || getNow());\n    };\n\n    this.isStale = index => {\n      return this.ttls[index] !== 0 && this.starts[index] !== 0 && (cachedNow || getNow()) - this.starts[index] > this.ttls[index];\n    };\n  }\n\n  updateItemAge(_index) {}\n\n  statusTTL(_status, _index) {}\n\n  setItemTTL(_index, _ttl, _start) {}\n\n  isStale(_index) {\n    return false;\n  }\n\n  initializeSizeTracking() {\n    this.calculatedSize = 0;\n    this.sizes = new ZeroArray(this.max);\n\n    this.removeItemSize = index => {\n      this.calculatedSize -= this.sizes[index];\n      this.sizes[index] = 0;\n    };\n\n    this.requireSize = (k, v, size, sizeCalculation) => {\n      // provisionally accept background fetches.\n      // actual value size will be checked when they return.\n      if (this.isBackgroundFetch(v)) {\n        return 0;\n      }\n\n      if (!isPosInt(size)) {\n        if (sizeCalculation) {\n          if (typeof sizeCalculation !== 'function') {\n            throw new TypeError('sizeCalculation must be a function');\n          }\n\n          size = sizeCalculation(v, k);\n\n          if (!isPosInt(size)) {\n            throw new TypeError('sizeCalculation return invalid (expect positive integer)');\n          }\n        } else {\n          throw new TypeError('invalid size value (must be positive integer). ' + 'When maxSize or maxEntrySize is used, sizeCalculation or size ' + 'must be set.');\n        }\n      }\n\n      return size;\n    };\n\n    this.addItemSize = (index, size, status) => {\n      this.sizes[index] = size;\n\n      if (this.maxSize) {\n        const maxSize = this.maxSize - this.sizes[index];\n\n        while (this.calculatedSize > maxSize) {\n          this.evict(true);\n        }\n      }\n\n      this.calculatedSize += this.sizes[index];\n\n      if (status) {\n        status.entrySize = size;\n        status.totalCalculatedSize = this.calculatedSize;\n      }\n    };\n  }\n\n  removeItemSize(_index) {}\n\n  addItemSize(_index, _size) {}\n\n  requireSize(_k, _v, size, sizeCalculation) {\n    if (size || sizeCalculation) {\n      throw new TypeError('cannot set size without setting maxSize or maxEntrySize on cache');\n    }\n  }\n\n  *indexes() {\n    let {\n      allowStale = this.allowStale\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (this.size) {\n      for (let i = this.tail; true;) {\n        if (!this.isValidIndex(i)) {\n          break;\n        }\n\n        if (allowStale || !this.isStale(i)) {\n          yield i;\n        }\n\n        if (i === this.head) {\n          break;\n        } else {\n          i = this.prev[i];\n        }\n      }\n    }\n  }\n\n  *rindexes() {\n    let {\n      allowStale = this.allowStale\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (this.size) {\n      for (let i = this.head; true;) {\n        if (!this.isValidIndex(i)) {\n          break;\n        }\n\n        if (allowStale || !this.isStale(i)) {\n          yield i;\n        }\n\n        if (i === this.tail) {\n          break;\n        } else {\n          i = this.next[i];\n        }\n      }\n    }\n  }\n\n  isValidIndex(index) {\n    return index !== undefined && this.keyMap.get(this.keyList[index]) === index;\n  }\n\n  *entries() {\n    for (const i of this.indexes()) {\n      if (this.valList[i] !== undefined && this.keyList[i] !== undefined && !this.isBackgroundFetch(this.valList[i])) {\n        yield [this.keyList[i], this.valList[i]];\n      }\n    }\n  }\n\n  *rentries() {\n    for (const i of this.rindexes()) {\n      if (this.valList[i] !== undefined && this.keyList[i] !== undefined && !this.isBackgroundFetch(this.valList[i])) {\n        yield [this.keyList[i], this.valList[i]];\n      }\n    }\n  }\n\n  *keys() {\n    for (const i of this.indexes()) {\n      if (this.keyList[i] !== undefined && !this.isBackgroundFetch(this.valList[i])) {\n        yield this.keyList[i];\n      }\n    }\n  }\n\n  *rkeys() {\n    for (const i of this.rindexes()) {\n      if (this.keyList[i] !== undefined && !this.isBackgroundFetch(this.valList[i])) {\n        yield this.keyList[i];\n      }\n    }\n  }\n\n  *values() {\n    for (const i of this.indexes()) {\n      if (this.valList[i] !== undefined && !this.isBackgroundFetch(this.valList[i])) {\n        yield this.valList[i];\n      }\n    }\n  }\n\n  *rvalues() {\n    for (const i of this.rindexes()) {\n      if (this.valList[i] !== undefined && !this.isBackgroundFetch(this.valList[i])) {\n        yield this.valList[i];\n      }\n    }\n  }\n\n  [Symbol.iterator]() {\n    return this.entries();\n  }\n\n  find(fn, getOptions) {\n    for (const i of this.indexes()) {\n      const v = this.valList[i];\n      const value = this.isBackgroundFetch(v) ? v.__staleWhileFetching : v;\n      if (value === undefined) continue;\n\n      if (fn(value, this.keyList[i], this)) {\n        return this.get(this.keyList[i], getOptions);\n      }\n    }\n  }\n\n  forEach(fn) {\n    let thisp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;\n\n    for (const i of this.indexes()) {\n      const v = this.valList[i];\n      const value = this.isBackgroundFetch(v) ? v.__staleWhileFetching : v;\n      if (value === undefined) continue;\n      fn.call(thisp, value, this.keyList[i], this);\n    }\n  }\n\n  rforEach(fn) {\n    let thisp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;\n\n    for (const i of this.rindexes()) {\n      const v = this.valList[i];\n      const value = this.isBackgroundFetch(v) ? v.__staleWhileFetching : v;\n      if (value === undefined) continue;\n      fn.call(thisp, value, this.keyList[i], this);\n    }\n  }\n\n  get prune() {\n    deprecatedMethod('prune', 'purgeStale');\n    return this.purgeStale;\n  }\n\n  purgeStale() {\n    let deleted = false;\n\n    for (const i of this.rindexes({\n      allowStale: true\n    })) {\n      if (this.isStale(i)) {\n        this.delete(this.keyList[i]);\n        deleted = true;\n      }\n    }\n\n    return deleted;\n  }\n\n  dump() {\n    const arr = [];\n\n    for (const i of this.indexes({\n      allowStale: true\n    })) {\n      const key = this.keyList[i];\n      const v = this.valList[i];\n      const value = this.isBackgroundFetch(v) ? v.__staleWhileFetching : v;\n      if (value === undefined) continue;\n      const entry = {\n        value\n      };\n\n      if (this.ttls) {\n        entry.ttl = this.ttls[i]; // always dump the start relative to a portable timestamp\n        // it's ok for this to be a bit slow, it's a rare operation.\n\n        const age = perf.now() - this.starts[i];\n        entry.start = Math.floor(Date.now() - age);\n      }\n\n      if (this.sizes) {\n        entry.size = this.sizes[i];\n      }\n\n      arr.unshift([key, entry]);\n    }\n\n    return arr;\n  }\n\n  load(arr) {\n    this.clear();\n\n    for (const [key, entry] of arr) {\n      if (entry.start) {\n        // entry.start is a portable timestamp, but we may be using\n        // node's performance.now(), so calculate the offset.\n        // it's ok for this to be a bit slow, it's a rare operation.\n        const age = Date.now() - entry.start;\n        entry.start = perf.now() - age;\n      }\n\n      this.set(key, entry.value, entry);\n    }\n  }\n\n  dispose(_v, _k, _reason) {}\n\n  set(k, v) {\n    let {\n      ttl = this.ttl,\n      start,\n      noDisposeOnSet = this.noDisposeOnSet,\n      size = 0,\n      sizeCalculation = this.sizeCalculation,\n      noUpdateTTL = this.noUpdateTTL,\n      status\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    size = this.requireSize(k, v, size, sizeCalculation); // if the item doesn't fit, don't do anything\n    // NB: maxEntrySize set to maxSize by default\n\n    if (this.maxEntrySize && size > this.maxEntrySize) {\n      if (status) {\n        status.set = 'miss';\n        status.maxEntrySizeExceeded = true;\n      } // have to delete, in case a background fetch is there already.\n      // in non-async cases, this is a no-op\n\n\n      this.delete(k);\n      return this;\n    }\n\n    let index = this.size === 0 ? undefined : this.keyMap.get(k);\n\n    if (index === undefined) {\n      // addition\n      index = this.newIndex();\n      this.keyList[index] = k;\n      this.valList[index] = v;\n      this.keyMap.set(k, index);\n      this.next[this.tail] = index;\n      this.prev[index] = this.tail;\n      this.tail = index;\n      this.size++;\n      this.addItemSize(index, size, status);\n\n      if (status) {\n        status.set = 'add';\n      }\n\n      noUpdateTTL = false;\n    } else {\n      // update\n      this.moveToTail(index);\n      const oldVal = this.valList[index];\n\n      if (v !== oldVal) {\n        if (this.isBackgroundFetch(oldVal)) {\n          oldVal.__abortController.abort(new Error('replaced'));\n        } else {\n          if (!noDisposeOnSet) {\n            this.dispose(oldVal, k, 'set');\n\n            if (this.disposeAfter) {\n              this.disposed.push([oldVal, k, 'set']);\n            }\n          }\n        }\n\n        this.removeItemSize(index);\n        this.valList[index] = v;\n        this.addItemSize(index, size, status);\n\n        if (status) {\n          status.set = 'replace';\n          const oldValue = oldVal && this.isBackgroundFetch(oldVal) ? oldVal.__staleWhileFetching : oldVal;\n          if (oldValue !== undefined) status.oldValue = oldValue;\n        }\n      } else if (status) {\n        status.set = 'update';\n      }\n    }\n\n    if (ttl !== 0 && this.ttl === 0 && !this.ttls) {\n      this.initializeTTLTracking();\n    }\n\n    if (!noUpdateTTL) {\n      this.setItemTTL(index, ttl, start);\n    }\n\n    this.statusTTL(status, index);\n\n    if (this.disposeAfter) {\n      while (this.disposed.length) {\n        this.disposeAfter(...this.disposed.shift());\n      }\n    }\n\n    return this;\n  }\n\n  newIndex() {\n    if (this.size === 0) {\n      return this.tail;\n    }\n\n    if (this.size === this.max && this.max !== 0) {\n      return this.evict(false);\n    }\n\n    if (this.free.length !== 0) {\n      return this.free.pop();\n    } // initial fill, just keep writing down the list\n\n\n    return this.initialFill++;\n  }\n\n  pop() {\n    if (this.size) {\n      const val = this.valList[this.head];\n      this.evict(true);\n      return val;\n    }\n  }\n\n  evict(free) {\n    const head = this.head;\n    const k = this.keyList[head];\n    const v = this.valList[head];\n\n    if (this.isBackgroundFetch(v)) {\n      v.__abortController.abort(new Error('evicted'));\n    } else {\n      this.dispose(v, k, 'evict');\n\n      if (this.disposeAfter) {\n        this.disposed.push([v, k, 'evict']);\n      }\n    }\n\n    this.removeItemSize(head); // if we aren't about to use the index, then null these out\n\n    if (free) {\n      this.keyList[head] = null;\n      this.valList[head] = null;\n      this.free.push(head);\n    }\n\n    this.head = this.next[head];\n    this.keyMap.delete(k);\n    this.size--;\n    return head;\n  }\n\n  has(k) {\n    let {\n      updateAgeOnHas = this.updateAgeOnHas,\n      status\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const index = this.keyMap.get(k);\n\n    if (index !== undefined) {\n      if (!this.isStale(index)) {\n        if (updateAgeOnHas) {\n          this.updateItemAge(index);\n        }\n\n        if (status) status.has = 'hit';\n        this.statusTTL(status, index);\n        return true;\n      } else if (status) {\n        status.has = 'stale';\n        this.statusTTL(status, index);\n      }\n    } else if (status) {\n      status.has = 'miss';\n    }\n\n    return false;\n  } // like get(), but without any LRU updating or TTL expiration\n\n\n  peek(k) {\n    let {\n      allowStale = this.allowStale\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const index = this.keyMap.get(k);\n\n    if (index !== undefined && (allowStale || !this.isStale(index))) {\n      const v = this.valList[index]; // either stale and allowed, or forcing a refresh of non-stale value\n\n      return this.isBackgroundFetch(v) ? v.__staleWhileFetching : v;\n    }\n  }\n\n  backgroundFetch(k, index, options, context) {\n    var _this2 = this;\n\n    const v = index === undefined ? undefined : this.valList[index];\n\n    if (this.isBackgroundFetch(v)) {\n      return v;\n    }\n\n    const ac = new AC();\n\n    if (options.signal) {\n      options.signal.addEventListener('abort', () => ac.abort(options.signal.reason));\n    }\n\n    const fetchOpts = {\n      signal: ac.signal,\n      options,\n      context\n    };\n\n    const cb = function (v) {\n      let updateCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      const {\n        aborted\n      } = ac.signal;\n      const ignoreAbort = options.ignoreFetchAbort && v !== undefined;\n\n      if (options.status) {\n        if (aborted && !updateCache) {\n          options.status.fetchAborted = true;\n          options.status.fetchError = ac.signal.reason;\n          if (ignoreAbort) options.status.fetchAbortIgnored = true;\n        } else {\n          options.status.fetchResolved = true;\n        }\n      }\n\n      if (aborted && !ignoreAbort && !updateCache) {\n        return fetchFail(ac.signal.reason);\n      } // either we didn't abort, and are still here, or we did, and ignored\n\n\n      if (_this2.valList[index] === p) {\n        if (v === undefined) {\n          if (p.__staleWhileFetching) {\n            _this2.valList[index] = p.__staleWhileFetching;\n          } else {\n            _this2.delete(k);\n          }\n        } else {\n          if (options.status) options.status.fetchUpdated = true;\n\n          _this2.set(k, v, fetchOpts.options);\n        }\n      }\n\n      return v;\n    };\n\n    const eb = er => {\n      if (options.status) {\n        options.status.fetchRejected = true;\n        options.status.fetchError = er;\n      }\n\n      return fetchFail(er);\n    };\n\n    const fetchFail = er => {\n      const {\n        aborted\n      } = ac.signal;\n      const allowStaleAborted = aborted && options.allowStaleOnFetchAbort;\n      const allowStale = allowStaleAborted || options.allowStaleOnFetchRejection;\n      const noDelete = allowStale || options.noDeleteOnFetchRejection;\n\n      if (this.valList[index] === p) {\n        // if we allow stale on fetch rejections, then we need to ensure that\n        // the stale value is not removed from the cache when the fetch fails.\n        const del = !noDelete || p.__staleWhileFetching === undefined;\n\n        if (del) {\n          this.delete(k);\n        } else if (!allowStaleAborted) {\n          // still replace the *promise* with the stale value,\n          // since we are done with the promise at this point.\n          // leave it untouched if we're still waiting for an\n          // aborted background fetch that hasn't yet returned.\n          this.valList[index] = p.__staleWhileFetching;\n        }\n      }\n\n      if (allowStale) {\n        if (options.status && p.__staleWhileFetching !== undefined) {\n          options.status.returnedStale = true;\n        }\n\n        return p.__staleWhileFetching;\n      } else if (p.__returned === p) {\n        throw er;\n      }\n    };\n\n    const pcall = (res, rej) => {\n      this.fetchMethod(k, v, fetchOpts).then(v => res(v), rej); // ignored, we go until we finish, regardless.\n      // defer check until we are actually aborting,\n      // so fetchMethod can override.\n\n      ac.signal.addEventListener('abort', () => {\n        if (!options.ignoreFetchAbort || options.allowStaleOnFetchAbort) {\n          res(); // when it eventually resolves, update the cache.\n\n          if (options.allowStaleOnFetchAbort) {\n            res = v => cb(v, true);\n          }\n        }\n      });\n    };\n\n    if (options.status) options.status.fetchDispatched = true;\n    const p = new Promise(pcall).then(cb, eb);\n    p.__abortController = ac;\n    p.__staleWhileFetching = v;\n    p.__returned = null;\n\n    if (index === undefined) {\n      // internal, don't expose status.\n      this.set(k, p, { ...fetchOpts.options,\n        status: undefined\n      });\n      index = this.keyMap.get(k);\n    } else {\n      this.valList[index] = p;\n    }\n\n    return p;\n  }\n\n  isBackgroundFetch(p) {\n    return p && typeof p === 'object' && typeof p.then === 'function' && Object.prototype.hasOwnProperty.call(p, '__staleWhileFetching') && Object.prototype.hasOwnProperty.call(p, '__returned') && (p.__returned === p || p.__returned === null);\n  } // this takes the union of get() and set() opts, because it does both\n\n\n  async fetch(k) {\n    let {\n      // get options\n      allowStale = this.allowStale,\n      updateAgeOnGet = this.updateAgeOnGet,\n      noDeleteOnStaleGet = this.noDeleteOnStaleGet,\n      // set options\n      ttl = this.ttl,\n      noDisposeOnSet = this.noDisposeOnSet,\n      size = 0,\n      sizeCalculation = this.sizeCalculation,\n      noUpdateTTL = this.noUpdateTTL,\n      // fetch exclusive options\n      noDeleteOnFetchRejection = this.noDeleteOnFetchRejection,\n      allowStaleOnFetchRejection = this.allowStaleOnFetchRejection,\n      ignoreFetchAbort = this.ignoreFetchAbort,\n      allowStaleOnFetchAbort = this.allowStaleOnFetchAbort,\n      fetchContext = this.fetchContext,\n      forceRefresh = false,\n      status,\n      signal\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!this.fetchMethod) {\n      if (status) status.fetch = 'get';\n      return this.get(k, {\n        allowStale,\n        updateAgeOnGet,\n        noDeleteOnStaleGet,\n        status\n      });\n    }\n\n    const options = {\n      allowStale,\n      updateAgeOnGet,\n      noDeleteOnStaleGet,\n      ttl,\n      noDisposeOnSet,\n      size,\n      sizeCalculation,\n      noUpdateTTL,\n      noDeleteOnFetchRejection,\n      allowStaleOnFetchRejection,\n      allowStaleOnFetchAbort,\n      ignoreFetchAbort,\n      status,\n      signal\n    };\n    let index = this.keyMap.get(k);\n\n    if (index === undefined) {\n      if (status) status.fetch = 'miss';\n      const p = this.backgroundFetch(k, index, options, fetchContext);\n      return p.__returned = p;\n    } else {\n      // in cache, maybe already fetching\n      const v = this.valList[index];\n\n      if (this.isBackgroundFetch(v)) {\n        const stale = allowStale && v.__staleWhileFetching !== undefined;\n\n        if (status) {\n          status.fetch = 'inflight';\n          if (stale) status.returnedStale = true;\n        }\n\n        return stale ? v.__staleWhileFetching : v.__returned = v;\n      } // if we force a refresh, that means do NOT serve the cached value,\n      // unless we are already in the process of refreshing the cache.\n\n\n      const isStale = this.isStale(index);\n\n      if (!forceRefresh && !isStale) {\n        if (status) status.fetch = 'hit';\n        this.moveToTail(index);\n\n        if (updateAgeOnGet) {\n          this.updateItemAge(index);\n        }\n\n        this.statusTTL(status, index);\n        return v;\n      } // ok, it is stale or a forced refresh, and not already fetching.\n      // refresh the cache.\n\n\n      const p = this.backgroundFetch(k, index, options, fetchContext);\n      const hasStale = p.__staleWhileFetching !== undefined;\n      const staleVal = hasStale && allowStale;\n\n      if (status) {\n        status.fetch = hasStale && isStale ? 'stale' : 'refresh';\n        if (staleVal && isStale) status.returnedStale = true;\n      }\n\n      return staleVal ? p.__staleWhileFetching : p.__returned = p;\n    }\n  }\n\n  get(k) {\n    let {\n      allowStale = this.allowStale,\n      updateAgeOnGet = this.updateAgeOnGet,\n      noDeleteOnStaleGet = this.noDeleteOnStaleGet,\n      status\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const index = this.keyMap.get(k);\n\n    if (index !== undefined) {\n      const value = this.valList[index];\n      const fetching = this.isBackgroundFetch(value);\n      this.statusTTL(status, index);\n\n      if (this.isStale(index)) {\n        if (status) status.get = 'stale'; // delete only if not an in-flight background fetch\n\n        if (!fetching) {\n          if (!noDeleteOnStaleGet) {\n            this.delete(k);\n          }\n\n          if (status) status.returnedStale = allowStale;\n          return allowStale ? value : undefined;\n        } else {\n          if (status) {\n            status.returnedStale = allowStale && value.__staleWhileFetching !== undefined;\n          }\n\n          return allowStale ? value.__staleWhileFetching : undefined;\n        }\n      } else {\n        if (status) status.get = 'hit'; // if we're currently fetching it, we don't actually have it yet\n        // it's not stale, which means this isn't a staleWhileRefetching.\n        // If it's not stale, and fetching, AND has a __staleWhileFetching\n        // value, then that means the user fetched with {forceRefresh:true},\n        // so it's safe to return that value.\n\n        if (fetching) {\n          return value.__staleWhileFetching;\n        }\n\n        this.moveToTail(index);\n\n        if (updateAgeOnGet) {\n          this.updateItemAge(index);\n        }\n\n        return value;\n      }\n    } else if (status) {\n      status.get = 'miss';\n    }\n  }\n\n  connect(p, n) {\n    this.prev[n] = p;\n    this.next[p] = n;\n  }\n\n  moveToTail(index) {\n    // if tail already, nothing to do\n    // if head, move head to next[index]\n    // else\n    //   move next[prev[index]] to next[index] (head has no prev)\n    //   move prev[next[index]] to prev[index]\n    // prev[index] = tail\n    // next[tail] = index\n    // tail = index\n    if (index !== this.tail) {\n      if (index === this.head) {\n        this.head = this.next[index];\n      } else {\n        this.connect(this.prev[index], this.next[index]);\n      }\n\n      this.connect(this.tail, index);\n      this.tail = index;\n    }\n  }\n\n  get del() {\n    deprecatedMethod('del', 'delete');\n    return this.delete;\n  }\n\n  delete(k) {\n    let deleted = false;\n\n    if (this.size !== 0) {\n      const index = this.keyMap.get(k);\n\n      if (index !== undefined) {\n        deleted = true;\n\n        if (this.size === 1) {\n          this.clear();\n        } else {\n          this.removeItemSize(index);\n          const v = this.valList[index];\n\n          if (this.isBackgroundFetch(v)) {\n            v.__abortController.abort(new Error('deleted'));\n          } else {\n            this.dispose(v, k, 'delete');\n\n            if (this.disposeAfter) {\n              this.disposed.push([v, k, 'delete']);\n            }\n          }\n\n          this.keyMap.delete(k);\n          this.keyList[index] = null;\n          this.valList[index] = null;\n\n          if (index === this.tail) {\n            this.tail = this.prev[index];\n          } else if (index === this.head) {\n            this.head = this.next[index];\n          } else {\n            this.next[this.prev[index]] = this.next[index];\n            this.prev[this.next[index]] = this.prev[index];\n          }\n\n          this.size--;\n          this.free.push(index);\n        }\n      }\n    }\n\n    if (this.disposed) {\n      while (this.disposed.length) {\n        this.disposeAfter(...this.disposed.shift());\n      }\n    }\n\n    return deleted;\n  }\n\n  clear() {\n    for (const index of this.rindexes({\n      allowStale: true\n    })) {\n      const v = this.valList[index];\n\n      if (this.isBackgroundFetch(v)) {\n        v.__abortController.abort(new Error('deleted'));\n      } else {\n        const k = this.keyList[index];\n        this.dispose(v, k, 'delete');\n\n        if (this.disposeAfter) {\n          this.disposed.push([v, k, 'delete']);\n        }\n      }\n    }\n\n    this.keyMap.clear();\n    this.valList.fill(null);\n    this.keyList.fill(null);\n\n    if (this.ttls) {\n      this.ttls.fill(0);\n      this.starts.fill(0);\n    }\n\n    if (this.sizes) {\n      this.sizes.fill(0);\n    }\n\n    this.head = 0;\n    this.tail = 0;\n    this.initialFill = 1;\n    this.free.length = 0;\n    this.calculatedSize = 0;\n    this.size = 0;\n\n    if (this.disposed) {\n      while (this.disposed.length) {\n        this.disposeAfter(...this.disposed.shift());\n      }\n    }\n  }\n\n  get reset() {\n    deprecatedMethod('reset', 'clear');\n    return this.clear;\n  }\n\n  get length() {\n    deprecatedProperty('length', 'size');\n    return this.size;\n  }\n\n  static get AbortController() {\n    return AC;\n  }\n\n  static get AbortSignal() {\n    return AS;\n  }\n\n}\n\nexport default LRUCache;","map":{"version":3,"names":["perf","performance","now","Date","hasAbortController","AbortController","AC","constructor","signal","AS","abort","reason","Error","aborted","dispatchEvent","type","target","hasAbortSignal","AbortSignal","hasACAbortSignal","undefined","_listeners","e","onabort","forEach","f","addEventListener","ev","fn","push","removeEventListener","filter","warned","Set","deprecatedOption","opt","instead","code","shouldWarn","warn","LRUCache","deprecatedMethod","method","prototype","get","Object","getOwnPropertyDescriptor","deprecatedProperty","field","emitWarning","process","console","error","has","what","add","msg","isPosInt","n","Math","floor","isFinite","getUintArray","max","pow","Uint8Array","Uint16Array","Uint32Array","Number","MAX_SAFE_INTEGER","ZeroArray","Array","size","fill","Stack","UintArray","heap","length","pop","options","ttl","ttlResolution","ttlAutopurge","updateAgeOnGet","updateAgeOnHas","allowStale","dispose","disposeAfter","noDisposeOnSet","noUpdateTTL","maxSize","maxEntrySize","sizeCalculation","fetchMethod","fetchContext","noDeleteOnFetchRejection","noDeleteOnStaleGet","allowStaleOnFetchRejection","allowStaleOnFetchAbort","ignoreFetchAbort","maxAge","stale","TypeError","keyMap","Map","keyList","valList","next","prev","head","tail","free","initialFill","disposed","initializeSizeTracking","initializeTTLTracking","getRemainingTTL","key","Infinity","ttls","starts","setItemTTL","index","start","t","setTimeout","isStale","delete","unref","updateItemAge","statusTTL","status","cachedNow","getNow","remainingTTL","_index","_status","_ttl","_start","calculatedSize","sizes","removeItemSize","requireSize","k","v","isBackgroundFetch","addItemSize","evict","entrySize","totalCalculatedSize","_size","_k","_v","indexes","i","isValidIndex","rindexes","entries","rentries","keys","rkeys","values","rvalues","Symbol","iterator","find","getOptions","value","__staleWhileFetching","thisp","call","rforEach","prune","purgeStale","deleted","dump","arr","entry","age","unshift","load","clear","set","_reason","maxEntrySizeExceeded","newIndex","moveToTail","oldVal","__abortController","oldValue","shift","val","peek","backgroundFetch","context","ac","fetchOpts","cb","updateCache","ignoreAbort","fetchAborted","fetchError","fetchAbortIgnored","fetchResolved","fetchFail","p","fetchUpdated","eb","er","fetchRejected","allowStaleAborted","noDelete","del","returnedStale","__returned","pcall","res","rej","then","fetchDispatched","Promise","hasOwnProperty","fetch","forceRefresh","hasStale","staleVal","fetching","connect","reset"],"sources":["C:/Users/kb/node_modules/lru-cache/index.mjs"],"sourcesContent":["const perf =\n  typeof performance === 'object' &&\n  performance &&\n  typeof performance.now === 'function'\n    ? performance\n    : Date\n\nconst hasAbortController = typeof AbortController === 'function'\n\n// minimal backwards-compatibility polyfill\n// this doesn't have nearly all the checks and whatnot that\n// actual AbortController/Signal has, but it's enough for\n// our purposes, and if used properly, behaves the same.\nconst AC = hasAbortController\n  ? AbortController\n  : class AbortController {\n      constructor() {\n        this.signal = new AS()\n      }\n      abort(reason = new Error('This operation was aborted')) {\n        this.signal.reason = this.signal.reason || reason\n        this.signal.aborted = true\n        this.signal.dispatchEvent({\n          type: 'abort',\n          target: this.signal,\n        })\n      }\n    }\n\nconst hasAbortSignal = typeof AbortSignal === 'function'\n// Some polyfills put this on the AC class, not global\nconst hasACAbortSignal = typeof AC.AbortSignal === 'function'\nconst AS = hasAbortSignal\n  ? AbortSignal\n  : hasACAbortSignal\n  ? AC.AbortController\n  : class AbortSignal {\n      constructor() {\n        this.reason = undefined\n        this.aborted = false\n        this._listeners = []\n      }\n      dispatchEvent(e) {\n        if (e.type === 'abort') {\n          this.aborted = true\n          this.onabort(e)\n          this._listeners.forEach(f => f(e), this)\n        }\n      }\n      onabort() {}\n      addEventListener(ev, fn) {\n        if (ev === 'abort') {\n          this._listeners.push(fn)\n        }\n      }\n      removeEventListener(ev, fn) {\n        if (ev === 'abort') {\n          this._listeners = this._listeners.filter(f => f !== fn)\n        }\n      }\n    }\n\nconst warned = new Set()\nconst deprecatedOption = (opt, instead) => {\n  const code = `LRU_CACHE_OPTION_${opt}`\n  if (shouldWarn(code)) {\n    warn(code, `${opt} option`, `options.${instead}`, LRUCache)\n  }\n}\nconst deprecatedMethod = (method, instead) => {\n  const code = `LRU_CACHE_METHOD_${method}`\n  if (shouldWarn(code)) {\n    const { prototype } = LRUCache\n    const { get } = Object.getOwnPropertyDescriptor(prototype, method)\n    warn(code, `${method} method`, `cache.${instead}()`, get)\n  }\n}\nconst deprecatedProperty = (field, instead) => {\n  const code = `LRU_CACHE_PROPERTY_${field}`\n  if (shouldWarn(code)) {\n    const { prototype } = LRUCache\n    const { get } = Object.getOwnPropertyDescriptor(prototype, field)\n    warn(code, `${field} property`, `cache.${instead}`, get)\n  }\n}\n\nconst emitWarning = (...a) => {\n  typeof process === 'object' &&\n  process &&\n  typeof process.emitWarning === 'function'\n    ? process.emitWarning(...a)\n    : console.error(...a)\n}\n\nconst shouldWarn = code => !warned.has(code)\n\nconst warn = (code, what, instead, fn) => {\n  warned.add(code)\n  const msg = `The ${what} is deprecated. Please use ${instead} instead.`\n  emitWarning(msg, 'DeprecationWarning', code, fn)\n}\n\nconst isPosInt = n => n && n === Math.floor(n) && n > 0 && isFinite(n)\n\n/* istanbul ignore next - This is a little bit ridiculous, tbh.\n * The maximum array length is 2^32-1 or thereabouts on most JS impls.\n * And well before that point, you're caching the entire world, I mean,\n * that's ~32GB of just integers for the next/prev links, plus whatever\n * else to hold that many keys and values.  Just filling the memory with\n * zeroes at init time is brutal when you get that big.\n * But why not be complete?\n * Maybe in the future, these limits will have expanded. */\nconst getUintArray = max =>\n  !isPosInt(max)\n    ? null\n    : max <= Math.pow(2, 8)\n    ? Uint8Array\n    : max <= Math.pow(2, 16)\n    ? Uint16Array\n    : max <= Math.pow(2, 32)\n    ? Uint32Array\n    : max <= Number.MAX_SAFE_INTEGER\n    ? ZeroArray\n    : null\n\nclass ZeroArray extends Array {\n  constructor(size) {\n    super(size)\n    this.fill(0)\n  }\n}\n\nclass Stack {\n  constructor(max) {\n    if (max === 0) {\n      return []\n    }\n    const UintArray = getUintArray(max)\n    this.heap = new UintArray(max)\n    this.length = 0\n  }\n  push(n) {\n    this.heap[this.length++] = n\n  }\n  pop() {\n    return this.heap[--this.length]\n  }\n}\n\nclass LRUCache {\n  constructor(options = {}) {\n    const {\n      max = 0,\n      ttl,\n      ttlResolution = 1,\n      ttlAutopurge,\n      updateAgeOnGet,\n      updateAgeOnHas,\n      allowStale,\n      dispose,\n      disposeAfter,\n      noDisposeOnSet,\n      noUpdateTTL,\n      maxSize = 0,\n      maxEntrySize = 0,\n      sizeCalculation,\n      fetchMethod,\n      fetchContext,\n      noDeleteOnFetchRejection,\n      noDeleteOnStaleGet,\n      allowStaleOnFetchRejection,\n      allowStaleOnFetchAbort,\n      ignoreFetchAbort,\n    } = options\n\n    // deprecated options, don't trigger a warning for getting them if\n    // the thing being passed in is another LRUCache we're copying.\n    const { length, maxAge, stale } =\n      options instanceof LRUCache ? {} : options\n\n    if (max !== 0 && !isPosInt(max)) {\n      throw new TypeError('max option must be a nonnegative integer')\n    }\n\n    const UintArray = max ? getUintArray(max) : Array\n    if (!UintArray) {\n      throw new Error('invalid max value: ' + max)\n    }\n\n    this.max = max\n    this.maxSize = maxSize\n    this.maxEntrySize = maxEntrySize || this.maxSize\n    this.sizeCalculation = sizeCalculation || length\n    if (this.sizeCalculation) {\n      if (!this.maxSize && !this.maxEntrySize) {\n        throw new TypeError(\n          'cannot set sizeCalculation without setting maxSize or maxEntrySize'\n        )\n      }\n      if (typeof this.sizeCalculation !== 'function') {\n        throw new TypeError('sizeCalculation set to non-function')\n      }\n    }\n\n    this.fetchMethod = fetchMethod || null\n    if (this.fetchMethod && typeof this.fetchMethod !== 'function') {\n      throw new TypeError(\n        'fetchMethod must be a function if specified'\n      )\n    }\n\n    this.fetchContext = fetchContext\n    if (!this.fetchMethod && fetchContext !== undefined) {\n      throw new TypeError(\n        'cannot set fetchContext without fetchMethod'\n      )\n    }\n\n    this.keyMap = new Map()\n    this.keyList = new Array(max).fill(null)\n    this.valList = new Array(max).fill(null)\n    this.next = new UintArray(max)\n    this.prev = new UintArray(max)\n    this.head = 0\n    this.tail = 0\n    this.free = new Stack(max)\n    this.initialFill = 1\n    this.size = 0\n\n    if (typeof dispose === 'function') {\n      this.dispose = dispose\n    }\n    if (typeof disposeAfter === 'function') {\n      this.disposeAfter = disposeAfter\n      this.disposed = []\n    } else {\n      this.disposeAfter = null\n      this.disposed = null\n    }\n    this.noDisposeOnSet = !!noDisposeOnSet\n    this.noUpdateTTL = !!noUpdateTTL\n    this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection\n    this.allowStaleOnFetchRejection = !!allowStaleOnFetchRejection\n    this.allowStaleOnFetchAbort = !!allowStaleOnFetchAbort\n    this.ignoreFetchAbort = !!ignoreFetchAbort\n\n    // NB: maxEntrySize is set to maxSize if it's set\n    if (this.maxEntrySize !== 0) {\n      if (this.maxSize !== 0) {\n        if (!isPosInt(this.maxSize)) {\n          throw new TypeError(\n            'maxSize must be a positive integer if specified'\n          )\n        }\n      }\n      if (!isPosInt(this.maxEntrySize)) {\n        throw new TypeError(\n          'maxEntrySize must be a positive integer if specified'\n        )\n      }\n      this.initializeSizeTracking()\n    }\n\n    this.allowStale = !!allowStale || !!stale\n    this.noDeleteOnStaleGet = !!noDeleteOnStaleGet\n    this.updateAgeOnGet = !!updateAgeOnGet\n    this.updateAgeOnHas = !!updateAgeOnHas\n    this.ttlResolution =\n      isPosInt(ttlResolution) || ttlResolution === 0\n        ? ttlResolution\n        : 1\n    this.ttlAutopurge = !!ttlAutopurge\n    this.ttl = ttl || maxAge || 0\n    if (this.ttl) {\n      if (!isPosInt(this.ttl)) {\n        throw new TypeError(\n          'ttl must be a positive integer if specified'\n        )\n      }\n      this.initializeTTLTracking()\n    }\n\n    // do not allow completely unbounded caches\n    if (this.max === 0 && this.ttl === 0 && this.maxSize === 0) {\n      throw new TypeError(\n        'At least one of max, maxSize, or ttl is required'\n      )\n    }\n    if (!this.ttlAutopurge && !this.max && !this.maxSize) {\n      const code = 'LRU_CACHE_UNBOUNDED'\n      if (shouldWarn(code)) {\n        warned.add(code)\n        const msg =\n          'TTL caching without ttlAutopurge, max, or maxSize can ' +\n          'result in unbounded memory consumption.'\n        emitWarning(msg, 'UnboundedCacheWarning', code, LRUCache)\n      }\n    }\n\n    if (stale) {\n      deprecatedOption('stale', 'allowStale')\n    }\n    if (maxAge) {\n      deprecatedOption('maxAge', 'ttl')\n    }\n    if (length) {\n      deprecatedOption('length', 'sizeCalculation')\n    }\n  }\n\n  getRemainingTTL(key) {\n    return this.has(key, { updateAgeOnHas: false }) ? Infinity : 0\n  }\n\n  initializeTTLTracking() {\n    this.ttls = new ZeroArray(this.max)\n    this.starts = new ZeroArray(this.max)\n\n    this.setItemTTL = (index, ttl, start = perf.now()) => {\n      this.starts[index] = ttl !== 0 ? start : 0\n      this.ttls[index] = ttl\n      if (ttl !== 0 && this.ttlAutopurge) {\n        const t = setTimeout(() => {\n          if (this.isStale(index)) {\n            this.delete(this.keyList[index])\n          }\n        }, ttl + 1)\n        /* istanbul ignore else - unref() not supported on all platforms */\n        if (t.unref) {\n          t.unref()\n        }\n      }\n    }\n\n    this.updateItemAge = index => {\n      this.starts[index] = this.ttls[index] !== 0 ? perf.now() : 0\n    }\n\n    this.statusTTL = (status, index) => {\n      if (status) {\n        status.ttl = this.ttls[index]\n        status.start = this.starts[index]\n        status.now = cachedNow || getNow()\n        status.remainingTTL = status.now + status.ttl - status.start\n      }\n    }\n\n    // debounce calls to perf.now() to 1s so we're not hitting\n    // that costly call repeatedly.\n    let cachedNow = 0\n    const getNow = () => {\n      const n = perf.now()\n      if (this.ttlResolution > 0) {\n        cachedNow = n\n        const t = setTimeout(\n          () => (cachedNow = 0),\n          this.ttlResolution\n        )\n        /* istanbul ignore else - not available on all platforms */\n        if (t.unref) {\n          t.unref()\n        }\n      }\n      return n\n    }\n\n    this.getRemainingTTL = key => {\n      const index = this.keyMap.get(key)\n      if (index === undefined) {\n        return 0\n      }\n      return this.ttls[index] === 0 || this.starts[index] === 0\n        ? Infinity\n        : this.starts[index] +\n            this.ttls[index] -\n            (cachedNow || getNow())\n    }\n\n    this.isStale = index => {\n      return (\n        this.ttls[index] !== 0 &&\n        this.starts[index] !== 0 &&\n        (cachedNow || getNow()) - this.starts[index] >\n          this.ttls[index]\n      )\n    }\n  }\n  updateItemAge(_index) {}\n  statusTTL(_status, _index) {}\n  setItemTTL(_index, _ttl, _start) {}\n  isStale(_index) {\n    return false\n  }\n\n  initializeSizeTracking() {\n    this.calculatedSize = 0\n    this.sizes = new ZeroArray(this.max)\n    this.removeItemSize = index => {\n      this.calculatedSize -= this.sizes[index]\n      this.sizes[index] = 0\n    }\n    this.requireSize = (k, v, size, sizeCalculation) => {\n      // provisionally accept background fetches.\n      // actual value size will be checked when they return.\n      if (this.isBackgroundFetch(v)) {\n        return 0\n      }\n      if (!isPosInt(size)) {\n        if (sizeCalculation) {\n          if (typeof sizeCalculation !== 'function') {\n            throw new TypeError('sizeCalculation must be a function')\n          }\n          size = sizeCalculation(v, k)\n          if (!isPosInt(size)) {\n            throw new TypeError(\n              'sizeCalculation return invalid (expect positive integer)'\n            )\n          }\n        } else {\n          throw new TypeError(\n            'invalid size value (must be positive integer). ' +\n              'When maxSize or maxEntrySize is used, sizeCalculation or size ' +\n              'must be set.'\n          )\n        }\n      }\n      return size\n    }\n    this.addItemSize = (index, size, status) => {\n      this.sizes[index] = size\n      if (this.maxSize) {\n        const maxSize = this.maxSize - this.sizes[index]\n        while (this.calculatedSize > maxSize) {\n          this.evict(true)\n        }\n      }\n      this.calculatedSize += this.sizes[index]\n      if (status) {\n        status.entrySize = size\n        status.totalCalculatedSize = this.calculatedSize\n      }\n    }\n  }\n  removeItemSize(_index) {}\n  addItemSize(_index, _size) {}\n  requireSize(_k, _v, size, sizeCalculation) {\n    if (size || sizeCalculation) {\n      throw new TypeError(\n        'cannot set size without setting maxSize or maxEntrySize on cache'\n      )\n    }\n  }\n\n  *indexes({ allowStale = this.allowStale } = {}) {\n    if (this.size) {\n      for (let i = this.tail; true; ) {\n        if (!this.isValidIndex(i)) {\n          break\n        }\n        if (allowStale || !this.isStale(i)) {\n          yield i\n        }\n        if (i === this.head) {\n          break\n        } else {\n          i = this.prev[i]\n        }\n      }\n    }\n  }\n\n  *rindexes({ allowStale = this.allowStale } = {}) {\n    if (this.size) {\n      for (let i = this.head; true; ) {\n        if (!this.isValidIndex(i)) {\n          break\n        }\n        if (allowStale || !this.isStale(i)) {\n          yield i\n        }\n        if (i === this.tail) {\n          break\n        } else {\n          i = this.next[i]\n        }\n      }\n    }\n  }\n\n  isValidIndex(index) {\n    return (\n      index !== undefined &&\n      this.keyMap.get(this.keyList[index]) === index\n    )\n  }\n\n  *entries() {\n    for (const i of this.indexes()) {\n      if (\n        this.valList[i] !== undefined &&\n        this.keyList[i] !== undefined &&\n        !this.isBackgroundFetch(this.valList[i])\n      ) {\n        yield [this.keyList[i], this.valList[i]]\n      }\n    }\n  }\n  *rentries() {\n    for (const i of this.rindexes()) {\n      if (\n        this.valList[i] !== undefined &&\n        this.keyList[i] !== undefined &&\n        !this.isBackgroundFetch(this.valList[i])\n      ) {\n        yield [this.keyList[i], this.valList[i]]\n      }\n    }\n  }\n\n  *keys() {\n    for (const i of this.indexes()) {\n      if (\n        this.keyList[i] !== undefined &&\n        !this.isBackgroundFetch(this.valList[i])\n      ) {\n        yield this.keyList[i]\n      }\n    }\n  }\n  *rkeys() {\n    for (const i of this.rindexes()) {\n      if (\n        this.keyList[i] !== undefined &&\n        !this.isBackgroundFetch(this.valList[i])\n      ) {\n        yield this.keyList[i]\n      }\n    }\n  }\n\n  *values() {\n    for (const i of this.indexes()) {\n      if (\n        this.valList[i] !== undefined &&\n        !this.isBackgroundFetch(this.valList[i])\n      ) {\n        yield this.valList[i]\n      }\n    }\n  }\n  *rvalues() {\n    for (const i of this.rindexes()) {\n      if (\n        this.valList[i] !== undefined &&\n        !this.isBackgroundFetch(this.valList[i])\n      ) {\n        yield this.valList[i]\n      }\n    }\n  }\n\n  [Symbol.iterator]() {\n    return this.entries()\n  }\n\n  find(fn, getOptions) {\n    for (const i of this.indexes()) {\n      const v = this.valList[i]\n      const value = this.isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined) continue\n      if (fn(value, this.keyList[i], this)) {\n        return this.get(this.keyList[i], getOptions)\n      }\n    }\n  }\n\n  forEach(fn, thisp = this) {\n    for (const i of this.indexes()) {\n      const v = this.valList[i]\n      const value = this.isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined) continue\n      fn.call(thisp, value, this.keyList[i], this)\n    }\n  }\n\n  rforEach(fn, thisp = this) {\n    for (const i of this.rindexes()) {\n      const v = this.valList[i]\n      const value = this.isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined) continue\n      fn.call(thisp, value, this.keyList[i], this)\n    }\n  }\n\n  get prune() {\n    deprecatedMethod('prune', 'purgeStale')\n    return this.purgeStale\n  }\n\n  purgeStale() {\n    let deleted = false\n    for (const i of this.rindexes({ allowStale: true })) {\n      if (this.isStale(i)) {\n        this.delete(this.keyList[i])\n        deleted = true\n      }\n    }\n    return deleted\n  }\n\n  dump() {\n    const arr = []\n    for (const i of this.indexes({ allowStale: true })) {\n      const key = this.keyList[i]\n      const v = this.valList[i]\n      const value = this.isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined) continue\n      const entry = { value }\n      if (this.ttls) {\n        entry.ttl = this.ttls[i]\n        // always dump the start relative to a portable timestamp\n        // it's ok for this to be a bit slow, it's a rare operation.\n        const age = perf.now() - this.starts[i]\n        entry.start = Math.floor(Date.now() - age)\n      }\n      if (this.sizes) {\n        entry.size = this.sizes[i]\n      }\n      arr.unshift([key, entry])\n    }\n    return arr\n  }\n\n  load(arr) {\n    this.clear()\n    for (const [key, entry] of arr) {\n      if (entry.start) {\n        // entry.start is a portable timestamp, but we may be using\n        // node's performance.now(), so calculate the offset.\n        // it's ok for this to be a bit slow, it's a rare operation.\n        const age = Date.now() - entry.start\n        entry.start = perf.now() - age\n      }\n      this.set(key, entry.value, entry)\n    }\n  }\n\n  dispose(_v, _k, _reason) {}\n\n  set(\n    k,\n    v,\n    {\n      ttl = this.ttl,\n      start,\n      noDisposeOnSet = this.noDisposeOnSet,\n      size = 0,\n      sizeCalculation = this.sizeCalculation,\n      noUpdateTTL = this.noUpdateTTL,\n      status,\n    } = {}\n  ) {\n    size = this.requireSize(k, v, size, sizeCalculation)\n    // if the item doesn't fit, don't do anything\n    // NB: maxEntrySize set to maxSize by default\n    if (this.maxEntrySize && size > this.maxEntrySize) {\n      if (status) {\n        status.set = 'miss'\n        status.maxEntrySizeExceeded = true\n      }\n      // have to delete, in case a background fetch is there already.\n      // in non-async cases, this is a no-op\n      this.delete(k)\n      return this\n    }\n    let index = this.size === 0 ? undefined : this.keyMap.get(k)\n    if (index === undefined) {\n      // addition\n      index = this.newIndex()\n      this.keyList[index] = k\n      this.valList[index] = v\n      this.keyMap.set(k, index)\n      this.next[this.tail] = index\n      this.prev[index] = this.tail\n      this.tail = index\n      this.size++\n      this.addItemSize(index, size, status)\n      if (status) {\n        status.set = 'add'\n      }\n      noUpdateTTL = false\n    } else {\n      // update\n      this.moveToTail(index)\n      const oldVal = this.valList[index]\n      if (v !== oldVal) {\n        if (this.isBackgroundFetch(oldVal)) {\n          oldVal.__abortController.abort(new Error('replaced'))\n        } else {\n          if (!noDisposeOnSet) {\n            this.dispose(oldVal, k, 'set')\n            if (this.disposeAfter) {\n              this.disposed.push([oldVal, k, 'set'])\n            }\n          }\n        }\n        this.removeItemSize(index)\n        this.valList[index] = v\n        this.addItemSize(index, size, status)\n        if (status) {\n          status.set = 'replace'\n          const oldValue =\n            oldVal && this.isBackgroundFetch(oldVal)\n              ? oldVal.__staleWhileFetching\n              : oldVal\n          if (oldValue !== undefined) status.oldValue = oldValue\n        }\n      } else if (status) {\n        status.set = 'update'\n      }\n    }\n    if (ttl !== 0 && this.ttl === 0 && !this.ttls) {\n      this.initializeTTLTracking()\n    }\n    if (!noUpdateTTL) {\n      this.setItemTTL(index, ttl, start)\n    }\n    this.statusTTL(status, index)\n    if (this.disposeAfter) {\n      while (this.disposed.length) {\n        this.disposeAfter(...this.disposed.shift())\n      }\n    }\n    return this\n  }\n\n  newIndex() {\n    if (this.size === 0) {\n      return this.tail\n    }\n    if (this.size === this.max && this.max !== 0) {\n      return this.evict(false)\n    }\n    if (this.free.length !== 0) {\n      return this.free.pop()\n    }\n    // initial fill, just keep writing down the list\n    return this.initialFill++\n  }\n\n  pop() {\n    if (this.size) {\n      const val = this.valList[this.head]\n      this.evict(true)\n      return val\n    }\n  }\n\n  evict(free) {\n    const head = this.head\n    const k = this.keyList[head]\n    const v = this.valList[head]\n    if (this.isBackgroundFetch(v)) {\n      v.__abortController.abort(new Error('evicted'))\n    } else {\n      this.dispose(v, k, 'evict')\n      if (this.disposeAfter) {\n        this.disposed.push([v, k, 'evict'])\n      }\n    }\n    this.removeItemSize(head)\n    // if we aren't about to use the index, then null these out\n    if (free) {\n      this.keyList[head] = null\n      this.valList[head] = null\n      this.free.push(head)\n    }\n    this.head = this.next[head]\n    this.keyMap.delete(k)\n    this.size--\n    return head\n  }\n\n  has(k, { updateAgeOnHas = this.updateAgeOnHas, status } = {}) {\n    const index = this.keyMap.get(k)\n    if (index !== undefined) {\n      if (!this.isStale(index)) {\n        if (updateAgeOnHas) {\n          this.updateItemAge(index)\n        }\n        if (status) status.has = 'hit'\n        this.statusTTL(status, index)\n        return true\n      } else if (status) {\n        status.has = 'stale'\n        this.statusTTL(status, index)\n      }\n    } else if (status) {\n      status.has = 'miss'\n    }\n    return false\n  }\n\n  // like get(), but without any LRU updating or TTL expiration\n  peek(k, { allowStale = this.allowStale } = {}) {\n    const index = this.keyMap.get(k)\n    if (index !== undefined && (allowStale || !this.isStale(index))) {\n      const v = this.valList[index]\n      // either stale and allowed, or forcing a refresh of non-stale value\n      return this.isBackgroundFetch(v) ? v.__staleWhileFetching : v\n    }\n  }\n\n  backgroundFetch(k, index, options, context) {\n    const v = index === undefined ? undefined : this.valList[index]\n    if (this.isBackgroundFetch(v)) {\n      return v\n    }\n    const ac = new AC()\n    if (options.signal) {\n      options.signal.addEventListener('abort', () =>\n        ac.abort(options.signal.reason)\n      )\n    }\n    const fetchOpts = {\n      signal: ac.signal,\n      options,\n      context,\n    }\n    const cb = (v, updateCache = false) => {\n      const { aborted } = ac.signal\n      const ignoreAbort = options.ignoreFetchAbort && v !== undefined\n      if (options.status) {\n        if (aborted && !updateCache) {\n          options.status.fetchAborted = true\n          options.status.fetchError = ac.signal.reason\n          if (ignoreAbort) options.status.fetchAbortIgnored = true\n        } else {\n          options.status.fetchResolved = true\n        }\n      }\n      if (aborted && !ignoreAbort && !updateCache) {\n        return fetchFail(ac.signal.reason)\n      }\n      // either we didn't abort, and are still here, or we did, and ignored\n      if (this.valList[index] === p) {\n        if (v === undefined) {\n          if (p.__staleWhileFetching) {\n            this.valList[index] = p.__staleWhileFetching\n          } else {\n            this.delete(k)\n          }\n        } else {\n          if (options.status) options.status.fetchUpdated = true\n          this.set(k, v, fetchOpts.options)\n        }\n      }\n      return v\n    }\n    const eb = er => {\n      if (options.status) {\n        options.status.fetchRejected = true\n        options.status.fetchError = er\n      }\n      return fetchFail(er)\n    }\n    const fetchFail = er => {\n      const { aborted } = ac.signal\n      const allowStaleAborted =\n        aborted && options.allowStaleOnFetchAbort\n      const allowStale =\n        allowStaleAborted || options.allowStaleOnFetchRejection\n      const noDelete = allowStale || options.noDeleteOnFetchRejection\n      if (this.valList[index] === p) {\n        // if we allow stale on fetch rejections, then we need to ensure that\n        // the stale value is not removed from the cache when the fetch fails.\n        const del = !noDelete || p.__staleWhileFetching === undefined\n        if (del) {\n          this.delete(k)\n        } else if (!allowStaleAborted) {\n          // still replace the *promise* with the stale value,\n          // since we are done with the promise at this point.\n          // leave it untouched if we're still waiting for an\n          // aborted background fetch that hasn't yet returned.\n          this.valList[index] = p.__staleWhileFetching\n        }\n      }\n      if (allowStale) {\n        if (options.status && p.__staleWhileFetching !== undefined) {\n          options.status.returnedStale = true\n        }\n        return p.__staleWhileFetching\n      } else if (p.__returned === p) {\n        throw er\n      }\n    }\n    const pcall = (res, rej) => {\n      this.fetchMethod(k, v, fetchOpts).then(v => res(v), rej)\n      // ignored, we go until we finish, regardless.\n      // defer check until we are actually aborting,\n      // so fetchMethod can override.\n      ac.signal.addEventListener('abort', () => {\n        if (\n          !options.ignoreFetchAbort ||\n          options.allowStaleOnFetchAbort\n        ) {\n          res()\n          // when it eventually resolves, update the cache.\n          if (options.allowStaleOnFetchAbort) {\n            res = v => cb(v, true)\n          }\n        }\n      })\n    }\n    if (options.status) options.status.fetchDispatched = true\n    const p = new Promise(pcall).then(cb, eb)\n    p.__abortController = ac\n    p.__staleWhileFetching = v\n    p.__returned = null\n    if (index === undefined) {\n      // internal, don't expose status.\n      this.set(k, p, { ...fetchOpts.options, status: undefined })\n      index = this.keyMap.get(k)\n    } else {\n      this.valList[index] = p\n    }\n    return p\n  }\n\n  isBackgroundFetch(p) {\n    return (\n      p &&\n      typeof p === 'object' &&\n      typeof p.then === 'function' &&\n      Object.prototype.hasOwnProperty.call(\n        p,\n        '__staleWhileFetching'\n      ) &&\n      Object.prototype.hasOwnProperty.call(p, '__returned') &&\n      (p.__returned === p || p.__returned === null)\n    )\n  }\n\n  // this takes the union of get() and set() opts, because it does both\n  async fetch(\n    k,\n    {\n      // get options\n      allowStale = this.allowStale,\n      updateAgeOnGet = this.updateAgeOnGet,\n      noDeleteOnStaleGet = this.noDeleteOnStaleGet,\n      // set options\n      ttl = this.ttl,\n      noDisposeOnSet = this.noDisposeOnSet,\n      size = 0,\n      sizeCalculation = this.sizeCalculation,\n      noUpdateTTL = this.noUpdateTTL,\n      // fetch exclusive options\n      noDeleteOnFetchRejection = this.noDeleteOnFetchRejection,\n      allowStaleOnFetchRejection = this.allowStaleOnFetchRejection,\n      ignoreFetchAbort = this.ignoreFetchAbort,\n      allowStaleOnFetchAbort = this.allowStaleOnFetchAbort,\n      fetchContext = this.fetchContext,\n      forceRefresh = false,\n      status,\n      signal,\n    } = {}\n  ) {\n    if (!this.fetchMethod) {\n      if (status) status.fetch = 'get'\n      return this.get(k, {\n        allowStale,\n        updateAgeOnGet,\n        noDeleteOnStaleGet,\n        status,\n      })\n    }\n\n    const options = {\n      allowStale,\n      updateAgeOnGet,\n      noDeleteOnStaleGet,\n      ttl,\n      noDisposeOnSet,\n      size,\n      sizeCalculation,\n      noUpdateTTL,\n      noDeleteOnFetchRejection,\n      allowStaleOnFetchRejection,\n      allowStaleOnFetchAbort,\n      ignoreFetchAbort,\n      status,\n      signal,\n    }\n\n    let index = this.keyMap.get(k)\n    if (index === undefined) {\n      if (status) status.fetch = 'miss'\n      const p = this.backgroundFetch(k, index, options, fetchContext)\n      return (p.__returned = p)\n    } else {\n      // in cache, maybe already fetching\n      const v = this.valList[index]\n      if (this.isBackgroundFetch(v)) {\n        const stale =\n          allowStale && v.__staleWhileFetching !== undefined\n        if (status) {\n          status.fetch = 'inflight'\n          if (stale) status.returnedStale = true\n        }\n        return stale ? v.__staleWhileFetching : (v.__returned = v)\n      }\n\n      // if we force a refresh, that means do NOT serve the cached value,\n      // unless we are already in the process of refreshing the cache.\n      const isStale = this.isStale(index)\n      if (!forceRefresh && !isStale) {\n        if (status) status.fetch = 'hit'\n        this.moveToTail(index)\n        if (updateAgeOnGet) {\n          this.updateItemAge(index)\n        }\n        this.statusTTL(status, index)\n        return v\n      }\n\n      // ok, it is stale or a forced refresh, and not already fetching.\n      // refresh the cache.\n      const p = this.backgroundFetch(k, index, options, fetchContext)\n      const hasStale = p.__staleWhileFetching !== undefined\n      const staleVal = hasStale && allowStale\n      if (status) {\n        status.fetch = hasStale && isStale ? 'stale' : 'refresh'\n        if (staleVal && isStale) status.returnedStale = true\n      }\n      return staleVal ? p.__staleWhileFetching : (p.__returned = p)\n    }\n  }\n\n  get(\n    k,\n    {\n      allowStale = this.allowStale,\n      updateAgeOnGet = this.updateAgeOnGet,\n      noDeleteOnStaleGet = this.noDeleteOnStaleGet,\n      status,\n    } = {}\n  ) {\n    const index = this.keyMap.get(k)\n    if (index !== undefined) {\n      const value = this.valList[index]\n      const fetching = this.isBackgroundFetch(value)\n      this.statusTTL(status, index)\n      if (this.isStale(index)) {\n        if (status) status.get = 'stale'\n        // delete only if not an in-flight background fetch\n        if (!fetching) {\n          if (!noDeleteOnStaleGet) {\n            this.delete(k)\n          }\n          if (status) status.returnedStale = allowStale\n          return allowStale ? value : undefined\n        } else {\n          if (status) {\n            status.returnedStale =\n              allowStale && value.__staleWhileFetching !== undefined\n          }\n          return allowStale ? value.__staleWhileFetching : undefined\n        }\n      } else {\n        if (status) status.get = 'hit'\n        // if we're currently fetching it, we don't actually have it yet\n        // it's not stale, which means this isn't a staleWhileRefetching.\n        // If it's not stale, and fetching, AND has a __staleWhileFetching\n        // value, then that means the user fetched with {forceRefresh:true},\n        // so it's safe to return that value.\n        if (fetching) {\n          return value.__staleWhileFetching\n        }\n        this.moveToTail(index)\n        if (updateAgeOnGet) {\n          this.updateItemAge(index)\n        }\n        return value\n      }\n    } else if (status) {\n      status.get = 'miss'\n    }\n  }\n\n  connect(p, n) {\n    this.prev[n] = p\n    this.next[p] = n\n  }\n\n  moveToTail(index) {\n    // if tail already, nothing to do\n    // if head, move head to next[index]\n    // else\n    //   move next[prev[index]] to next[index] (head has no prev)\n    //   move prev[next[index]] to prev[index]\n    // prev[index] = tail\n    // next[tail] = index\n    // tail = index\n    if (index !== this.tail) {\n      if (index === this.head) {\n        this.head = this.next[index]\n      } else {\n        this.connect(this.prev[index], this.next[index])\n      }\n      this.connect(this.tail, index)\n      this.tail = index\n    }\n  }\n\n  get del() {\n    deprecatedMethod('del', 'delete')\n    return this.delete\n  }\n\n  delete(k) {\n    let deleted = false\n    if (this.size !== 0) {\n      const index = this.keyMap.get(k)\n      if (index !== undefined) {\n        deleted = true\n        if (this.size === 1) {\n          this.clear()\n        } else {\n          this.removeItemSize(index)\n          const v = this.valList[index]\n          if (this.isBackgroundFetch(v)) {\n            v.__abortController.abort(new Error('deleted'))\n          } else {\n            this.dispose(v, k, 'delete')\n            if (this.disposeAfter) {\n              this.disposed.push([v, k, 'delete'])\n            }\n          }\n          this.keyMap.delete(k)\n          this.keyList[index] = null\n          this.valList[index] = null\n          if (index === this.tail) {\n            this.tail = this.prev[index]\n          } else if (index === this.head) {\n            this.head = this.next[index]\n          } else {\n            this.next[this.prev[index]] = this.next[index]\n            this.prev[this.next[index]] = this.prev[index]\n          }\n          this.size--\n          this.free.push(index)\n        }\n      }\n    }\n    if (this.disposed) {\n      while (this.disposed.length) {\n        this.disposeAfter(...this.disposed.shift())\n      }\n    }\n    return deleted\n  }\n\n  clear() {\n    for (const index of this.rindexes({ allowStale: true })) {\n      const v = this.valList[index]\n      if (this.isBackgroundFetch(v)) {\n        v.__abortController.abort(new Error('deleted'))\n      } else {\n        const k = this.keyList[index]\n        this.dispose(v, k, 'delete')\n        if (this.disposeAfter) {\n          this.disposed.push([v, k, 'delete'])\n        }\n      }\n    }\n\n    this.keyMap.clear()\n    this.valList.fill(null)\n    this.keyList.fill(null)\n    if (this.ttls) {\n      this.ttls.fill(0)\n      this.starts.fill(0)\n    }\n    if (this.sizes) {\n      this.sizes.fill(0)\n    }\n    this.head = 0\n    this.tail = 0\n    this.initialFill = 1\n    this.free.length = 0\n    this.calculatedSize = 0\n    this.size = 0\n    if (this.disposed) {\n      while (this.disposed.length) {\n        this.disposeAfter(...this.disposed.shift())\n      }\n    }\n  }\n\n  get reset() {\n    deprecatedMethod('reset', 'clear')\n    return this.clear\n  }\n\n  get length() {\n    deprecatedProperty('length', 'size')\n    return this.size\n  }\n\n  static get AbortController() {\n    return AC\n  }\n  static get AbortSignal() {\n    return AS\n  }\n}\n\nexport default LRUCache\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}