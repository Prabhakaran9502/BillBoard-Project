{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"field\", \"id\", \"value\", \"formattedValue\", \"row\", \"rowNode\", \"colDef\", \"isEditable\", \"cellMode\", \"hasFocus\", \"tabIndex\", \"api\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_composeClasses as composeClasses, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { getDataGridUtilityClass } from '../../constants/gridClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['checkboxInput']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n\nconst GridCellCheckboxForwardRef = /*#__PURE__*/React.forwardRef(function GridCellCheckboxRenderer(props, ref) {\n  const {\n    field,\n    id,\n    value: isChecked,\n    rowNode,\n    hasFocus,\n    tabIndex\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const ownerState = {\n    classes: rootProps.classes\n  };\n  const classes = useUtilityClasses(ownerState);\n  const checkboxElement = React.useRef(null);\n  const rippleRef = React.useRef(null);\n  const handleRef = useForkRef(checkboxElement, ref);\n\n  const handleChange = event => {\n    const params = {\n      value: event.target.checked,\n      id\n    };\n    apiRef.current.publishEvent('rowSelectionCheckboxChange', params, event);\n  };\n\n  React.useLayoutEffect(() => {\n    if (tabIndex === 0) {\n      const element = apiRef.current.getCellElement(id, field);\n\n      if (element) {\n        element.tabIndex = -1;\n      }\n    }\n  }, [apiRef, tabIndex, id, field]);\n  React.useEffect(() => {\n    if (hasFocus) {\n      const input = checkboxElement.current?.querySelector('input');\n      input?.focus({\n        preventScroll: true\n      });\n    } else if (rippleRef.current) {\n      // Only available in @mui/material v5.4.1 or later\n      rippleRef.current.stop({});\n    }\n  }, [hasFocus]);\n  const handleKeyDown = React.useCallback(event => {\n    if (event.key === ' ') {\n      // We call event.stopPropagation to avoid selecting the row and also scrolling to bottom\n      // TODO: Remove and add a check inside useGridKeyboardNavigation\n      event.stopPropagation();\n    }\n  }, []);\n\n  if (rowNode.type === 'footer' || rowNode.type === 'pinnedRow') {\n    return null;\n  }\n\n  const isSelectable = apiRef.current.isRowSelectable(id);\n  const label = apiRef.current.getLocaleText(isChecked ? 'checkboxSelectionUnselectRow' : 'checkboxSelectionSelectRow');\n  return /*#__PURE__*/_jsx(rootProps.slots.baseCheckbox, _extends({\n    ref: handleRef,\n    tabIndex: tabIndex,\n    checked: isChecked,\n    onChange: handleChange,\n    className: classes.root,\n    inputProps: {\n      'aria-label': label\n    },\n    onKeyDown: handleKeyDown,\n    disabled: !isSelectable,\n    touchRippleRef: rippleRef\n    /* FIXME: typing error */\n\n  }, rootProps.slotProps?.baseCheckbox, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? GridCellCheckboxForwardRef.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * GridApi that let you manipulate the grid.\n   */\n  api: PropTypes.object.isRequired,\n\n  /**\n   * The mode of the cell.\n   */\n  cellMode: PropTypes.oneOf(['edit', 'view']).isRequired,\n\n  /**\n   * The column of the row that the current cell belongs to.\n   */\n  colDef: PropTypes.object.isRequired,\n\n  /**\n   * The column field of the cell that triggered the event.\n   */\n  field: PropTypes.string.isRequired,\n\n  /**\n   * A ref allowing to set imperative focus.\n   * It can be passed to the element that should receive focus.\n   * @ignore - do not document.\n   */\n  focusElementRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.shape({\n      focus: PropTypes.func.isRequired\n    })\n  })]),\n\n  /**\n   * The cell value formatted with the column valueFormatter.\n   */\n  formattedValue: PropTypes.any,\n\n  /**\n   * If true, the cell is the active element.\n   */\n  hasFocus: PropTypes.bool.isRequired,\n\n  /**\n   * The grid row id.\n   */\n  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n\n  /**\n   * If true, the cell is editable.\n   */\n  isEditable: PropTypes.bool,\n\n  /**\n   * The row model of the row that the current cell belongs to.\n   */\n  row: PropTypes.any.isRequired,\n\n  /**\n   * The node of the row that the current cell belongs to.\n   */\n  rowNode: PropTypes.object.isRequired,\n\n  /**\n   * the tabIndex value.\n   */\n  tabIndex: PropTypes.oneOf([-1, 0]).isRequired,\n\n  /**\n   * The cell value.\n   * If the column has `valueGetter`, use `params.row` to directly access the fields.\n   */\n  value: PropTypes.any\n} : void 0;\nexport { GridCellCheckboxForwardRef };\nexport const GridCellCheckboxRenderer = GridCellCheckboxForwardRef;","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","unstable_composeClasses","composeClasses","unstable_useForkRef","useForkRef","useGridApiContext","useGridRootProps","getDataGridUtilityClass","jsx","_jsx","useUtilityClasses","ownerState","classes","slots","root","GridCellCheckboxForwardRef","forwardRef","GridCellCheckboxRenderer","props","ref","field","id","value","isChecked","rowNode","hasFocus","tabIndex","other","apiRef","rootProps","checkboxElement","useRef","rippleRef","handleRef","handleChange","event","params","target","checked","current","publishEvent","useLayoutEffect","element","getCellElement","useEffect","input","querySelector","focus","preventScroll","stop","handleKeyDown","useCallback","key","stopPropagation","type","isSelectable","isRowSelectable","label","getLocaleText","baseCheckbox","onChange","className","inputProps","onKeyDown","disabled","touchRippleRef","slotProps","process","env","NODE_ENV","propTypes","api","object","isRequired","cellMode","oneOf","colDef","string","focusElementRef","oneOfType","func","shape","formattedValue","any","bool","number","isEditable","row"],"sources":["C:/Users/kb/node_modules/@mui/x-data-grid/components/columnSelection/GridCellCheckboxRenderer.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"field\", \"id\", \"value\", \"formattedValue\", \"row\", \"rowNode\", \"colDef\", \"isEditable\", \"cellMode\", \"hasFocus\", \"tabIndex\", \"api\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_composeClasses as composeClasses, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { getDataGridUtilityClass } from '../../constants/gridClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['checkboxInput']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\nconst GridCellCheckboxForwardRef = /*#__PURE__*/React.forwardRef(function GridCellCheckboxRenderer(props, ref) {\n  const {\n      field,\n      id,\n      value: isChecked,\n      rowNode,\n      hasFocus,\n      tabIndex\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const ownerState = {\n    classes: rootProps.classes\n  };\n  const classes = useUtilityClasses(ownerState);\n  const checkboxElement = React.useRef(null);\n  const rippleRef = React.useRef(null);\n  const handleRef = useForkRef(checkboxElement, ref);\n  const handleChange = event => {\n    const params = {\n      value: event.target.checked,\n      id\n    };\n    apiRef.current.publishEvent('rowSelectionCheckboxChange', params, event);\n  };\n  React.useLayoutEffect(() => {\n    if (tabIndex === 0) {\n      const element = apiRef.current.getCellElement(id, field);\n      if (element) {\n        element.tabIndex = -1;\n      }\n    }\n  }, [apiRef, tabIndex, id, field]);\n  React.useEffect(() => {\n    if (hasFocus) {\n      const input = checkboxElement.current?.querySelector('input');\n      input?.focus({\n        preventScroll: true\n      });\n    } else if (rippleRef.current) {\n      // Only available in @mui/material v5.4.1 or later\n      rippleRef.current.stop({});\n    }\n  }, [hasFocus]);\n  const handleKeyDown = React.useCallback(event => {\n    if (event.key === ' ') {\n      // We call event.stopPropagation to avoid selecting the row and also scrolling to bottom\n      // TODO: Remove and add a check inside useGridKeyboardNavigation\n      event.stopPropagation();\n    }\n  }, []);\n  if (rowNode.type === 'footer' || rowNode.type === 'pinnedRow') {\n    return null;\n  }\n  const isSelectable = apiRef.current.isRowSelectable(id);\n  const label = apiRef.current.getLocaleText(isChecked ? 'checkboxSelectionUnselectRow' : 'checkboxSelectionSelectRow');\n  return /*#__PURE__*/_jsx(rootProps.slots.baseCheckbox, _extends({\n    ref: handleRef,\n    tabIndex: tabIndex,\n    checked: isChecked,\n    onChange: handleChange,\n    className: classes.root,\n    inputProps: {\n      'aria-label': label\n    },\n    onKeyDown: handleKeyDown,\n    disabled: !isSelectable,\n    touchRippleRef: rippleRef /* FIXME: typing error */\n  }, rootProps.slotProps?.baseCheckbox, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? GridCellCheckboxForwardRef.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * GridApi that let you manipulate the grid.\n   */\n  api: PropTypes.object.isRequired,\n  /**\n   * The mode of the cell.\n   */\n  cellMode: PropTypes.oneOf(['edit', 'view']).isRequired,\n  /**\n   * The column of the row that the current cell belongs to.\n   */\n  colDef: PropTypes.object.isRequired,\n  /**\n   * The column field of the cell that triggered the event.\n   */\n  field: PropTypes.string.isRequired,\n  /**\n   * A ref allowing to set imperative focus.\n   * It can be passed to the element that should receive focus.\n   * @ignore - do not document.\n   */\n  focusElementRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.shape({\n      focus: PropTypes.func.isRequired\n    })\n  })]),\n  /**\n   * The cell value formatted with the column valueFormatter.\n   */\n  formattedValue: PropTypes.any,\n  /**\n   * If true, the cell is the active element.\n   */\n  hasFocus: PropTypes.bool.isRequired,\n  /**\n   * The grid row id.\n   */\n  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  /**\n   * If true, the cell is editable.\n   */\n  isEditable: PropTypes.bool,\n  /**\n   * The row model of the row that the current cell belongs to.\n   */\n  row: PropTypes.any.isRequired,\n  /**\n   * The node of the row that the current cell belongs to.\n   */\n  rowNode: PropTypes.object.isRequired,\n  /**\n   * the tabIndex value.\n   */\n  tabIndex: PropTypes.oneOf([-1, 0]).isRequired,\n  /**\n   * The cell value.\n   * If the column has `valueGetter`, use `params.row` to directly access the fields.\n   */\n  value: PropTypes.any\n} : void 0;\nexport { GridCellCheckboxForwardRef };\nexport const GridCellCheckboxRenderer = GridCellCheckboxForwardRef;"],"mappings":"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"},"metadata":{},"sourceType":"module"}