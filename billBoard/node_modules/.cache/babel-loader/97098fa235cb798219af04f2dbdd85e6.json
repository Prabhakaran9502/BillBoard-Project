{"ast":null,"code":"import { createSelector, createSelectorMemoized } from '../../../utils/createSelector';\nimport { gridRowTreeSelector, gridRowsLookupSelector } from '../rows/gridRowsSelector';\nimport { GRID_ID_AUTOGENERATED, isAutoGeneratedRow } from '../rows/gridRowsUtils';\n/**\n * @category Sorting\n * @ignore - do not document.\n */\n\nconst gridSortingStateSelector = state => state.sorting;\n/**\n * Get the id of the rows after the sorting process.\n * @category Sorting\n */\n\n\nexport const gridSortedRowIdsSelector = createSelector(gridSortingStateSelector, sortingState => sortingState.sortedRows);\n/**\n * Get the id and the model of the rows after the sorting process.\n * @category Sorting\n */\n\nexport const gridSortedRowEntriesSelector = createSelectorMemoized(gridSortedRowIdsSelector, gridRowsLookupSelector, gridRowTreeSelector, (sortedIds, idRowsLookup, rowTree) => sortedIds.reduce((acc, id) => {\n  const model = idRowsLookup[id];\n\n  if (model) {\n    acc.push({\n      id,\n      model\n    });\n  }\n\n  const rowNode = rowTree[id];\n\n  if (rowNode && isAutoGeneratedRow(rowNode)) {\n    acc.push({\n      id,\n      model: {\n        [GRID_ID_AUTOGENERATED]: id\n      }\n    });\n  }\n\n  return acc;\n}, []));\n/**\n * Get the current sorting model.\n * @category Sorting\n */\n\nexport const gridSortModelSelector = createSelector(gridSortingStateSelector, sorting => sorting.sortModel);\n/**\n * @category Sorting\n * @ignore - do not document.\n */\n\nexport const gridSortColumnLookupSelector = createSelectorMemoized(gridSortModelSelector, sortModel => {\n  const result = sortModel.reduce((res, sortItem, index) => {\n    res[sortItem.field] = {\n      sortDirection: sortItem.sort,\n      sortIndex: sortModel.length > 1 ? index + 1 : undefined\n    };\n    return res;\n  }, {});\n  return result;\n});","map":{"version":3,"names":["createSelector","createSelectorMemoized","gridRowTreeSelector","gridRowsLookupSelector","GRID_ID_AUTOGENERATED","isAutoGeneratedRow","gridSortingStateSelector","state","sorting","gridSortedRowIdsSelector","sortingState","sortedRows","gridSortedRowEntriesSelector","sortedIds","idRowsLookup","rowTree","reduce","acc","id","model","push","rowNode","gridSortModelSelector","sortModel","gridSortColumnLookupSelector","result","res","sortItem","index","field","sortDirection","sort","sortIndex","length","undefined"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/@mui/x-data-grid/hooks/features/sorting/gridSortingSelector.js"],"sourcesContent":["import { createSelector, createSelectorMemoized } from '../../../utils/createSelector';\nimport { gridRowTreeSelector, gridRowsLookupSelector } from '../rows/gridRowsSelector';\nimport { GRID_ID_AUTOGENERATED, isAutoGeneratedRow } from '../rows/gridRowsUtils';\n/**\n * @category Sorting\n * @ignore - do not document.\n */\nconst gridSortingStateSelector = state => state.sorting;\n\n/**\n * Get the id of the rows after the sorting process.\n * @category Sorting\n */\nexport const gridSortedRowIdsSelector = createSelector(gridSortingStateSelector, sortingState => sortingState.sortedRows);\n\n/**\n * Get the id and the model of the rows after the sorting process.\n * @category Sorting\n */\nexport const gridSortedRowEntriesSelector = createSelectorMemoized(gridSortedRowIdsSelector, gridRowsLookupSelector, gridRowTreeSelector, (sortedIds, idRowsLookup, rowTree) => sortedIds.reduce((acc, id) => {\n  const model = idRowsLookup[id];\n  if (model) {\n    acc.push({\n      id,\n      model\n    });\n  }\n  const rowNode = rowTree[id];\n  if (rowNode && isAutoGeneratedRow(rowNode)) {\n    acc.push({\n      id,\n      model: {\n        [GRID_ID_AUTOGENERATED]: id\n      }\n    });\n  }\n  return acc;\n}, []));\n\n/**\n * Get the current sorting model.\n * @category Sorting\n */\nexport const gridSortModelSelector = createSelector(gridSortingStateSelector, sorting => sorting.sortModel);\n/**\n * @category Sorting\n * @ignore - do not document.\n */\nexport const gridSortColumnLookupSelector = createSelectorMemoized(gridSortModelSelector, sortModel => {\n  const result = sortModel.reduce((res, sortItem, index) => {\n    res[sortItem.field] = {\n      sortDirection: sortItem.sort,\n      sortIndex: sortModel.length > 1 ? index + 1 : undefined\n    };\n    return res;\n  }, {});\n  return result;\n});"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,sBAAzB,QAAuD,+BAAvD;AACA,SAASC,mBAAT,EAA8BC,sBAA9B,QAA4D,0BAA5D;AACA,SAASC,qBAAT,EAAgCC,kBAAhC,QAA0D,uBAA1D;AACA;AACA;AACA;AACA;;AACA,MAAMC,wBAAwB,GAAGC,KAAK,IAAIA,KAAK,CAACC,OAAhD;AAEA;AACA;AACA;AACA;;;AACA,OAAO,MAAMC,wBAAwB,GAAGT,cAAc,CAACM,wBAAD,EAA2BI,YAAY,IAAIA,YAAY,CAACC,UAAxD,CAA/C;AAEP;AACA;AACA;AACA;;AACA,OAAO,MAAMC,4BAA4B,GAAGX,sBAAsB,CAACQ,wBAAD,EAA2BN,sBAA3B,EAAmDD,mBAAnD,EAAwE,CAACW,SAAD,EAAYC,YAAZ,EAA0BC,OAA1B,KAAsCF,SAAS,CAACG,MAAV,CAAiB,CAACC,GAAD,EAAMC,EAAN,KAAa;EAC5M,MAAMC,KAAK,GAAGL,YAAY,CAACI,EAAD,CAA1B;;EACA,IAAIC,KAAJ,EAAW;IACTF,GAAG,CAACG,IAAJ,CAAS;MACPF,EADO;MAEPC;IAFO,CAAT;EAID;;EACD,MAAME,OAAO,GAAGN,OAAO,CAACG,EAAD,CAAvB;;EACA,IAAIG,OAAO,IAAIhB,kBAAkB,CAACgB,OAAD,CAAjC,EAA4C;IAC1CJ,GAAG,CAACG,IAAJ,CAAS;MACPF,EADO;MAEPC,KAAK,EAAE;QACL,CAACf,qBAAD,GAAyBc;MADpB;IAFA,CAAT;EAMD;;EACD,OAAOD,GAAP;AACD,CAlB+K,EAkB7K,EAlB6K,CAA9G,CAA3D;AAoBP;AACA;AACA;AACA;;AACA,OAAO,MAAMK,qBAAqB,GAAGtB,cAAc,CAACM,wBAAD,EAA2BE,OAAO,IAAIA,OAAO,CAACe,SAA9C,CAA5C;AACP;AACA;AACA;AACA;;AACA,OAAO,MAAMC,4BAA4B,GAAGvB,sBAAsB,CAACqB,qBAAD,EAAwBC,SAAS,IAAI;EACrG,MAAME,MAAM,GAAGF,SAAS,CAACP,MAAV,CAAiB,CAACU,GAAD,EAAMC,QAAN,EAAgBC,KAAhB,KAA0B;IACxDF,GAAG,CAACC,QAAQ,CAACE,KAAV,CAAH,GAAsB;MACpBC,aAAa,EAAEH,QAAQ,CAACI,IADJ;MAEpBC,SAAS,EAAET,SAAS,CAACU,MAAV,GAAmB,CAAnB,GAAuBL,KAAK,GAAG,CAA/B,GAAmCM;IAF1B,CAAtB;IAIA,OAAOR,GAAP;EACD,CANc,EAMZ,EANY,CAAf;EAOA,OAAOD,MAAP;AACD,CATiE,CAA3D"},"metadata":{},"sourceType":"module"}