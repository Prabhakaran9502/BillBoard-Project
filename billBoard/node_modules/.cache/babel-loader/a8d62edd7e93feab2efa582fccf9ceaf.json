{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { gridPinnedColumnsSelector, useGridRegisterPipeProcessor, eslintUseValue, gridVisiblePinnedColumnDefinitionsSelector } from '@mui/x-data-grid/internals';\nexport const useGridColumnPinningPreProcessors = (apiRef, props) => {\n  const {\n    disableColumnPinning\n  } = props;\n  let pinnedColumns;\n\n  if (apiRef.current.state.columns) {\n    pinnedColumns = gridPinnedColumnsSelector(apiRef.current.state);\n  } else {\n    pinnedColumns = null;\n  }\n\n  const prevAllPinnedColumns = React.useRef([]);\n  const reorderPinnedColumns = React.useCallback(columnsState => {\n    eslintUseValue(pinnedColumns);\n\n    if (columnsState.orderedFields.length === 0 || disableColumnPinning) {\n      return columnsState;\n    } // HACK: This is a hack needed because the pipe processors aren't pure enough. What\n    // they should be is `gridState -> gridState` transformers, but they only transform a slice\n    // of the state, not the full state. So if they need access to other parts of the state (like\n    // the `state.columns.orderedFields` in this case), they might lag behind because the selectors\n    // are selecting the old state in `apiRef`, not the state being computed in the current pipe processor.\n\n\n    const savedState = apiRef.current.state;\n    apiRef.current.state = _extends({}, savedState, {\n      columns: columnsState\n    });\n    const visibleColumns = gridVisiblePinnedColumnDefinitionsSelector(apiRef);\n    apiRef.current.state = savedState; // HACK: Ends here //\n\n    const leftPinnedColumns = visibleColumns.left.map(c => c.field);\n    const rightPinnedColumns = visibleColumns.right.map(c => c.field);\n    let newOrderedFields;\n    const allPinnedColumns = [...leftPinnedColumns, ...rightPinnedColumns];\n    const {\n      orderedFieldsBeforePinningColumns\n    } = apiRef.current.caches.columnPinning;\n\n    if (orderedFieldsBeforePinningColumns) {\n      newOrderedFields = new Array(columnsState.orderedFields.length).fill(null);\n      const newOrderedFieldsBeforePinningColumns = [...newOrderedFields]; // Contains the fields not added to the orderedFields array yet\n\n      const remainingFields = [...columnsState.orderedFields]; // First, we check if the column was unpinned since the last processing.\n      // If yes and it still exists, we move it back to the same position it was before pinning\n\n      prevAllPinnedColumns.current.forEach(field => {\n        if (!allPinnedColumns.includes(field) && columnsState.lookup[field]) {\n          // Get the position before pinning\n          const index = orderedFieldsBeforePinningColumns.indexOf(field);\n          newOrderedFields[index] = field;\n          newOrderedFieldsBeforePinningColumns[index] = field; // This field was already consumed so we prevent from being added again\n\n          remainingFields.splice(remainingFields.indexOf(field), 1);\n        }\n      }); // For columns still pinned, we keep stored their original positions\n\n      allPinnedColumns.forEach(field => {\n        let index = orderedFieldsBeforePinningColumns.indexOf(field); // If index = -1, the pinned field didn't exist in the last processing, it's possibly being added now\n        // If index >= newOrderedFieldsBeforePinningColumns.length, then one or more columns were removed\n        // In both cases, use the position from the columns array\n        // TODO: detect removed columns and decrease the positions after it\n\n        if (index === -1 || index >= newOrderedFieldsBeforePinningColumns.length) {\n          index = columnsState.orderedFields.indexOf(field);\n        } // The fallback above may make the column to be inserted in a position already occupied\n        // In this case, put it in any empty slot available\n\n\n        if (newOrderedFieldsBeforePinningColumns[index] !== null) {\n          index = 0;\n\n          while (newOrderedFieldsBeforePinningColumns[index] !== null) {\n            index += 1;\n          }\n        }\n\n        newOrderedFields[index] = field;\n        newOrderedFieldsBeforePinningColumns[index] = field; // This field was already consumed so we prevent from being added again\n\n        remainingFields.splice(remainingFields.indexOf(field), 1);\n      }); // The fields remaining are those that're neither pinnned nor were unpinned\n      // For these, we spread them across both arrays making sure to not override existing values\n\n      let i = 0;\n      remainingFields.forEach(field => {\n        while (newOrderedFieldsBeforePinningColumns[i] !== null) {\n          i += 1;\n        }\n\n        newOrderedFieldsBeforePinningColumns[i] = field;\n        newOrderedFields[i] = field;\n      });\n      apiRef.current.caches.columnPinning.orderedFieldsBeforePinningColumns = newOrderedFieldsBeforePinningColumns;\n    } else {\n      newOrderedFields = [...columnsState.orderedFields];\n      apiRef.current.caches.columnPinning.orderedFieldsBeforePinningColumns = [...columnsState.orderedFields];\n    }\n\n    prevAllPinnedColumns.current = allPinnedColumns;\n    const centerColumns = newOrderedFields.filter(field => {\n      return !leftPinnedColumns.includes(field) && !rightPinnedColumns.includes(field);\n    });\n    return _extends({}, columnsState, {\n      orderedFields: [...leftPinnedColumns, ...centerColumns, ...rightPinnedColumns]\n    });\n  }, [apiRef, disableColumnPinning, pinnedColumns]);\n  useGridRegisterPipeProcessor(apiRef, 'hydrateColumns', reorderPinnedColumns);\n  const isColumnPinned = React.useCallback((initialValue, field) => apiRef.current.isColumnPinned(field), [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'isColumnPinned', isColumnPinned);\n};","map":{"version":3,"names":["_extends","React","gridPinnedColumnsSelector","useGridRegisterPipeProcessor","eslintUseValue","gridVisiblePinnedColumnDefinitionsSelector","useGridColumnPinningPreProcessors","apiRef","props","disableColumnPinning","pinnedColumns","current","state","columns","prevAllPinnedColumns","useRef","reorderPinnedColumns","useCallback","columnsState","orderedFields","length","savedState","visibleColumns","leftPinnedColumns","left","map","c","field","rightPinnedColumns","right","newOrderedFields","allPinnedColumns","orderedFieldsBeforePinningColumns","caches","columnPinning","Array","fill","newOrderedFieldsBeforePinningColumns","remainingFields","forEach","includes","lookup","index","indexOf","splice","i","centerColumns","filter","isColumnPinned","initialValue"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/@mui/x-data-grid-pro/esm/hooks/features/columnPinning/useGridColumnPinningPreProcessors.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { gridPinnedColumnsSelector, useGridRegisterPipeProcessor, eslintUseValue, gridVisiblePinnedColumnDefinitionsSelector } from '@mui/x-data-grid/internals';\nexport const useGridColumnPinningPreProcessors = (apiRef, props) => {\n  const {\n    disableColumnPinning\n  } = props;\n  let pinnedColumns;\n  if (apiRef.current.state.columns) {\n    pinnedColumns = gridPinnedColumnsSelector(apiRef.current.state);\n  } else {\n    pinnedColumns = null;\n  }\n  const prevAllPinnedColumns = React.useRef([]);\n  const reorderPinnedColumns = React.useCallback(columnsState => {\n    eslintUseValue(pinnedColumns);\n    if (columnsState.orderedFields.length === 0 || disableColumnPinning) {\n      return columnsState;\n    }\n\n    // HACK: This is a hack needed because the pipe processors aren't pure enough. What\n    // they should be is `gridState -> gridState` transformers, but they only transform a slice\n    // of the state, not the full state. So if they need access to other parts of the state (like\n    // the `state.columns.orderedFields` in this case), they might lag behind because the selectors\n    // are selecting the old state in `apiRef`, not the state being computed in the current pipe processor.\n    const savedState = apiRef.current.state;\n    apiRef.current.state = _extends({}, savedState, {\n      columns: columnsState\n    });\n    const visibleColumns = gridVisiblePinnedColumnDefinitionsSelector(apiRef);\n    apiRef.current.state = savedState;\n    // HACK: Ends here //\n\n    const leftPinnedColumns = visibleColumns.left.map(c => c.field);\n    const rightPinnedColumns = visibleColumns.right.map(c => c.field);\n    let newOrderedFields;\n    const allPinnedColumns = [...leftPinnedColumns, ...rightPinnedColumns];\n    const {\n      orderedFieldsBeforePinningColumns\n    } = apiRef.current.caches.columnPinning;\n    if (orderedFieldsBeforePinningColumns) {\n      newOrderedFields = new Array(columnsState.orderedFields.length).fill(null);\n      const newOrderedFieldsBeforePinningColumns = [...newOrderedFields];\n\n      // Contains the fields not added to the orderedFields array yet\n      const remainingFields = [...columnsState.orderedFields];\n\n      // First, we check if the column was unpinned since the last processing.\n      // If yes and it still exists, we move it back to the same position it was before pinning\n      prevAllPinnedColumns.current.forEach(field => {\n        if (!allPinnedColumns.includes(field) && columnsState.lookup[field]) {\n          // Get the position before pinning\n          const index = orderedFieldsBeforePinningColumns.indexOf(field);\n          newOrderedFields[index] = field;\n          newOrderedFieldsBeforePinningColumns[index] = field;\n          // This field was already consumed so we prevent from being added again\n          remainingFields.splice(remainingFields.indexOf(field), 1);\n        }\n      });\n\n      // For columns still pinned, we keep stored their original positions\n      allPinnedColumns.forEach(field => {\n        let index = orderedFieldsBeforePinningColumns.indexOf(field);\n        // If index = -1, the pinned field didn't exist in the last processing, it's possibly being added now\n        // If index >= newOrderedFieldsBeforePinningColumns.length, then one or more columns were removed\n        // In both cases, use the position from the columns array\n        // TODO: detect removed columns and decrease the positions after it\n        if (index === -1 || index >= newOrderedFieldsBeforePinningColumns.length) {\n          index = columnsState.orderedFields.indexOf(field);\n        }\n\n        // The fallback above may make the column to be inserted in a position already occupied\n        // In this case, put it in any empty slot available\n        if (newOrderedFieldsBeforePinningColumns[index] !== null) {\n          index = 0;\n          while (newOrderedFieldsBeforePinningColumns[index] !== null) {\n            index += 1;\n          }\n        }\n        newOrderedFields[index] = field;\n        newOrderedFieldsBeforePinningColumns[index] = field;\n        // This field was already consumed so we prevent from being added again\n        remainingFields.splice(remainingFields.indexOf(field), 1);\n      });\n\n      // The fields remaining are those that're neither pinnned nor were unpinned\n      // For these, we spread them across both arrays making sure to not override existing values\n      let i = 0;\n      remainingFields.forEach(field => {\n        while (newOrderedFieldsBeforePinningColumns[i] !== null) {\n          i += 1;\n        }\n        newOrderedFieldsBeforePinningColumns[i] = field;\n        newOrderedFields[i] = field;\n      });\n      apiRef.current.caches.columnPinning.orderedFieldsBeforePinningColumns = newOrderedFieldsBeforePinningColumns;\n    } else {\n      newOrderedFields = [...columnsState.orderedFields];\n      apiRef.current.caches.columnPinning.orderedFieldsBeforePinningColumns = [...columnsState.orderedFields];\n    }\n    prevAllPinnedColumns.current = allPinnedColumns;\n    const centerColumns = newOrderedFields.filter(field => {\n      return !leftPinnedColumns.includes(field) && !rightPinnedColumns.includes(field);\n    });\n    return _extends({}, columnsState, {\n      orderedFields: [...leftPinnedColumns, ...centerColumns, ...rightPinnedColumns]\n    });\n  }, [apiRef, disableColumnPinning, pinnedColumns]);\n  useGridRegisterPipeProcessor(apiRef, 'hydrateColumns', reorderPinnedColumns);\n  const isColumnPinned = React.useCallback((initialValue, field) => apiRef.current.isColumnPinned(field), [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'isColumnPinned', isColumnPinned);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}