{"ast":null,"code":"import * as React from 'react';\nimport { getGridCellElement, getGridColumnHeaderElement, getGridRowElement } from '../../../utils/domUtils';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nexport class MissingRowIdError extends Error {}\n/**\n * @requires useGridColumns (method)\n * @requires useGridRows (method)\n * @requires useGridFocus (state)\n * @requires useGridEditing (method)\n * TODO: Impossible priority - useGridEditing also needs to be after useGridParamsApi\n * TODO: Impossible priority - useGridFocus also needs to be after useGridParamsApi\n */\n\nexport function useGridParamsApi(apiRef) {\n  const getColumnHeaderParams = React.useCallback(field => ({\n    field,\n    colDef: apiRef.current.getColumn(field)\n  }), [apiRef]);\n  const getRowParams = React.useCallback(id => {\n    const row = apiRef.current.getRow(id);\n\n    if (!row) {\n      throw new MissingRowIdError(`No row with id #${id} found`);\n    }\n\n    const params = {\n      id,\n      columns: apiRef.current.getAllColumns(),\n      row\n    };\n    return params;\n  }, [apiRef]);\n  const getCellParams = React.useCallback((id, field) => {\n    const colDef = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    const rowNode = apiRef.current.getRowNode(id);\n\n    if (!row || !rowNode) {\n      throw new MissingRowIdError(`No row with id #${id} found`);\n    }\n\n    const rawValue = row[field];\n    const value = colDef?.valueGetter ? colDef.valueGetter(rawValue, row, colDef, apiRef) : rawValue;\n    const cellFocus = gridFocusCellSelector(apiRef);\n    const cellTabIndex = gridTabIndexCellSelector(apiRef);\n    const params = {\n      id,\n      field,\n      row,\n      rowNode,\n      colDef,\n      cellMode: apiRef.current.getCellMode(id, field),\n      hasFocus: cellFocus !== null && cellFocus.field === field && cellFocus.id === id,\n      tabIndex: cellTabIndex && cellTabIndex.field === field && cellTabIndex.id === id ? 0 : -1,\n      value,\n      formattedValue: value,\n      isEditable: false\n    };\n\n    if (colDef && colDef.valueFormatter) {\n      params.formattedValue = colDef.valueFormatter(value, row, colDef, apiRef);\n    }\n\n    params.isEditable = colDef && apiRef.current.isCellEditable(params);\n    return params;\n  }, [apiRef]);\n  const getCellValue = React.useCallback((id, field) => {\n    const colDef = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n\n    if (!row) {\n      throw new MissingRowIdError(`No row with id #${id} found`);\n    }\n\n    if (!colDef || !colDef.valueGetter) {\n      return row[field];\n    }\n\n    return colDef.valueGetter(row[colDef.field], row, colDef, apiRef);\n  }, [apiRef]);\n  const getRowValue = React.useCallback((row, colDef) => {\n    const field = colDef.field;\n\n    if (!colDef || !colDef.valueGetter) {\n      return row[field];\n    }\n\n    const value = row[colDef.field];\n    return colDef.valueGetter(value, row, colDef, apiRef);\n  }, [apiRef]);\n  const getRowFormattedValue = React.useCallback((row, colDef) => {\n    const value = getRowValue(row, colDef);\n\n    if (!colDef || !colDef.valueFormatter) {\n      return value;\n    }\n\n    return colDef.valueFormatter(value, row, colDef, apiRef);\n  }, [apiRef, getRowValue]);\n  const getColumnHeaderElement = React.useCallback(field => {\n    if (!apiRef.current.rootElementRef.current) {\n      return null;\n    }\n\n    return getGridColumnHeaderElement(apiRef.current.rootElementRef.current, field);\n  }, [apiRef]);\n  const getRowElement = React.useCallback(id => {\n    if (!apiRef.current.rootElementRef.current) {\n      return null;\n    }\n\n    return getGridRowElement(apiRef.current.rootElementRef.current, id);\n  }, [apiRef]);\n  const getCellElement = React.useCallback((id, field) => {\n    if (!apiRef.current.rootElementRef.current) {\n      return null;\n    }\n\n    return getGridCellElement(apiRef.current.rootElementRef.current, {\n      id,\n      field\n    });\n  }, [apiRef]);\n  const paramsApi = {\n    getCellValue,\n    getCellParams,\n    getCellElement,\n    getRowValue,\n    getRowFormattedValue,\n    getRowParams,\n    getRowElement,\n    getColumnHeaderParams,\n    getColumnHeaderElement\n  };\n  useGridApiMethod(apiRef, paramsApi, 'public');\n}","map":{"version":3,"names":["React","getGridCellElement","getGridColumnHeaderElement","getGridRowElement","useGridApiMethod","gridFocusCellSelector","gridTabIndexCellSelector","MissingRowIdError","Error","useGridParamsApi","apiRef","getColumnHeaderParams","useCallback","field","colDef","current","getColumn","getRowParams","id","row","getRow","params","columns","getAllColumns","getCellParams","rowNode","getRowNode","rawValue","value","valueGetter","cellFocus","cellTabIndex","cellMode","getCellMode","hasFocus","tabIndex","formattedValue","isEditable","valueFormatter","isCellEditable","getCellValue","getRowValue","getRowFormattedValue","getColumnHeaderElement","rootElementRef","getRowElement","getCellElement","paramsApi"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/@mui/x-data-grid/hooks/features/rows/useGridParamsApi.js"],"sourcesContent":["import * as React from 'react';\nimport { getGridCellElement, getGridColumnHeaderElement, getGridRowElement } from '../../../utils/domUtils';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nexport class MissingRowIdError extends Error {}\n\n/**\n * @requires useGridColumns (method)\n * @requires useGridRows (method)\n * @requires useGridFocus (state)\n * @requires useGridEditing (method)\n * TODO: Impossible priority - useGridEditing also needs to be after useGridParamsApi\n * TODO: Impossible priority - useGridFocus also needs to be after useGridParamsApi\n */\nexport function useGridParamsApi(apiRef) {\n  const getColumnHeaderParams = React.useCallback(field => ({\n    field,\n    colDef: apiRef.current.getColumn(field)\n  }), [apiRef]);\n  const getRowParams = React.useCallback(id => {\n    const row = apiRef.current.getRow(id);\n    if (!row) {\n      throw new MissingRowIdError(`No row with id #${id} found`);\n    }\n    const params = {\n      id,\n      columns: apiRef.current.getAllColumns(),\n      row\n    };\n    return params;\n  }, [apiRef]);\n  const getCellParams = React.useCallback((id, field) => {\n    const colDef = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    const rowNode = apiRef.current.getRowNode(id);\n    if (!row || !rowNode) {\n      throw new MissingRowIdError(`No row with id #${id} found`);\n    }\n    const rawValue = row[field];\n    const value = colDef?.valueGetter ? colDef.valueGetter(rawValue, row, colDef, apiRef) : rawValue;\n    const cellFocus = gridFocusCellSelector(apiRef);\n    const cellTabIndex = gridTabIndexCellSelector(apiRef);\n    const params = {\n      id,\n      field,\n      row,\n      rowNode,\n      colDef,\n      cellMode: apiRef.current.getCellMode(id, field),\n      hasFocus: cellFocus !== null && cellFocus.field === field && cellFocus.id === id,\n      tabIndex: cellTabIndex && cellTabIndex.field === field && cellTabIndex.id === id ? 0 : -1,\n      value,\n      formattedValue: value,\n      isEditable: false\n    };\n    if (colDef && colDef.valueFormatter) {\n      params.formattedValue = colDef.valueFormatter(value, row, colDef, apiRef);\n    }\n    params.isEditable = colDef && apiRef.current.isCellEditable(params);\n    return params;\n  }, [apiRef]);\n  const getCellValue = React.useCallback((id, field) => {\n    const colDef = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    if (!row) {\n      throw new MissingRowIdError(`No row with id #${id} found`);\n    }\n    if (!colDef || !colDef.valueGetter) {\n      return row[field];\n    }\n    return colDef.valueGetter(row[colDef.field], row, colDef, apiRef);\n  }, [apiRef]);\n  const getRowValue = React.useCallback((row, colDef) => {\n    const field = colDef.field;\n    if (!colDef || !colDef.valueGetter) {\n      return row[field];\n    }\n    const value = row[colDef.field];\n    return colDef.valueGetter(value, row, colDef, apiRef);\n  }, [apiRef]);\n  const getRowFormattedValue = React.useCallback((row, colDef) => {\n    const value = getRowValue(row, colDef);\n    if (!colDef || !colDef.valueFormatter) {\n      return value;\n    }\n    return colDef.valueFormatter(value, row, colDef, apiRef);\n  }, [apiRef, getRowValue]);\n  const getColumnHeaderElement = React.useCallback(field => {\n    if (!apiRef.current.rootElementRef.current) {\n      return null;\n    }\n    return getGridColumnHeaderElement(apiRef.current.rootElementRef.current, field);\n  }, [apiRef]);\n  const getRowElement = React.useCallback(id => {\n    if (!apiRef.current.rootElementRef.current) {\n      return null;\n    }\n    return getGridRowElement(apiRef.current.rootElementRef.current, id);\n  }, [apiRef]);\n  const getCellElement = React.useCallback((id, field) => {\n    if (!apiRef.current.rootElementRef.current) {\n      return null;\n    }\n    return getGridCellElement(apiRef.current.rootElementRef.current, {\n      id,\n      field\n    });\n  }, [apiRef]);\n  const paramsApi = {\n    getCellValue,\n    getCellParams,\n    getCellElement,\n    getRowValue,\n    getRowFormattedValue,\n    getRowParams,\n    getRowElement,\n    getColumnHeaderParams,\n    getColumnHeaderElement\n  };\n  useGridApiMethod(apiRef, paramsApi, 'public');\n}"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,kBAAT,EAA6BC,0BAA7B,EAAyDC,iBAAzD,QAAkF,yBAAlF;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,SAASC,qBAAT,EAAgCC,wBAAhC,QAAgE,iCAAhE;AACA,OAAO,MAAMC,iBAAN,SAAgCC,KAAhC,CAAsC;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,gBAAT,CAA0BC,MAA1B,EAAkC;EACvC,MAAMC,qBAAqB,GAAGX,KAAK,CAACY,WAAN,CAAkBC,KAAK,KAAK;IACxDA,KADwD;IAExDC,MAAM,EAAEJ,MAAM,CAACK,OAAP,CAAeC,SAAf,CAAyBH,KAAzB;EAFgD,CAAL,CAAvB,EAG1B,CAACH,MAAD,CAH0B,CAA9B;EAIA,MAAMO,YAAY,GAAGjB,KAAK,CAACY,WAAN,CAAkBM,EAAE,IAAI;IAC3C,MAAMC,GAAG,GAAGT,MAAM,CAACK,OAAP,CAAeK,MAAf,CAAsBF,EAAtB,CAAZ;;IACA,IAAI,CAACC,GAAL,EAAU;MACR,MAAM,IAAIZ,iBAAJ,CAAuB,mBAAkBW,EAAG,QAA5C,CAAN;IACD;;IACD,MAAMG,MAAM,GAAG;MACbH,EADa;MAEbI,OAAO,EAAEZ,MAAM,CAACK,OAAP,CAAeQ,aAAf,EAFI;MAGbJ;IAHa,CAAf;IAKA,OAAOE,MAAP;EACD,CAXoB,EAWlB,CAACX,MAAD,CAXkB,CAArB;EAYA,MAAMc,aAAa,GAAGxB,KAAK,CAACY,WAAN,CAAkB,CAACM,EAAD,EAAKL,KAAL,KAAe;IACrD,MAAMC,MAAM,GAAGJ,MAAM,CAACK,OAAP,CAAeC,SAAf,CAAyBH,KAAzB,CAAf;IACA,MAAMM,GAAG,GAAGT,MAAM,CAACK,OAAP,CAAeK,MAAf,CAAsBF,EAAtB,CAAZ;IACA,MAAMO,OAAO,GAAGf,MAAM,CAACK,OAAP,CAAeW,UAAf,CAA0BR,EAA1B,CAAhB;;IACA,IAAI,CAACC,GAAD,IAAQ,CAACM,OAAb,EAAsB;MACpB,MAAM,IAAIlB,iBAAJ,CAAuB,mBAAkBW,EAAG,QAA5C,CAAN;IACD;;IACD,MAAMS,QAAQ,GAAGR,GAAG,CAACN,KAAD,CAApB;IACA,MAAMe,KAAK,GAAGd,MAAM,EAAEe,WAAR,GAAsBf,MAAM,CAACe,WAAP,CAAmBF,QAAnB,EAA6BR,GAA7B,EAAkCL,MAAlC,EAA0CJ,MAA1C,CAAtB,GAA0EiB,QAAxF;IACA,MAAMG,SAAS,GAAGzB,qBAAqB,CAACK,MAAD,CAAvC;IACA,MAAMqB,YAAY,GAAGzB,wBAAwB,CAACI,MAAD,CAA7C;IACA,MAAMW,MAAM,GAAG;MACbH,EADa;MAEbL,KAFa;MAGbM,GAHa;MAIbM,OAJa;MAKbX,MALa;MAMbkB,QAAQ,EAAEtB,MAAM,CAACK,OAAP,CAAekB,WAAf,CAA2Bf,EAA3B,EAA+BL,KAA/B,CANG;MAObqB,QAAQ,EAAEJ,SAAS,KAAK,IAAd,IAAsBA,SAAS,CAACjB,KAAV,KAAoBA,KAA1C,IAAmDiB,SAAS,CAACZ,EAAV,KAAiBA,EAPjE;MAQbiB,QAAQ,EAAEJ,YAAY,IAAIA,YAAY,CAAClB,KAAb,KAAuBA,KAAvC,IAAgDkB,YAAY,CAACb,EAAb,KAAoBA,EAApE,GAAyE,CAAzE,GAA6E,CAAC,CAR3E;MASbU,KATa;MAUbQ,cAAc,EAAER,KAVH;MAWbS,UAAU,EAAE;IAXC,CAAf;;IAaA,IAAIvB,MAAM,IAAIA,MAAM,CAACwB,cAArB,EAAqC;MACnCjB,MAAM,CAACe,cAAP,GAAwBtB,MAAM,CAACwB,cAAP,CAAsBV,KAAtB,EAA6BT,GAA7B,EAAkCL,MAAlC,EAA0CJ,MAA1C,CAAxB;IACD;;IACDW,MAAM,CAACgB,UAAP,GAAoBvB,MAAM,IAAIJ,MAAM,CAACK,OAAP,CAAewB,cAAf,CAA8BlB,MAA9B,CAA9B;IACA,OAAOA,MAAP;EACD,CA7BqB,EA6BnB,CAACX,MAAD,CA7BmB,CAAtB;EA8BA,MAAM8B,YAAY,GAAGxC,KAAK,CAACY,WAAN,CAAkB,CAACM,EAAD,EAAKL,KAAL,KAAe;IACpD,MAAMC,MAAM,GAAGJ,MAAM,CAACK,OAAP,CAAeC,SAAf,CAAyBH,KAAzB,CAAf;IACA,MAAMM,GAAG,GAAGT,MAAM,CAACK,OAAP,CAAeK,MAAf,CAAsBF,EAAtB,CAAZ;;IACA,IAAI,CAACC,GAAL,EAAU;MACR,MAAM,IAAIZ,iBAAJ,CAAuB,mBAAkBW,EAAG,QAA5C,CAAN;IACD;;IACD,IAAI,CAACJ,MAAD,IAAW,CAACA,MAAM,CAACe,WAAvB,EAAoC;MAClC,OAAOV,GAAG,CAACN,KAAD,CAAV;IACD;;IACD,OAAOC,MAAM,CAACe,WAAP,CAAmBV,GAAG,CAACL,MAAM,CAACD,KAAR,CAAtB,EAAsCM,GAAtC,EAA2CL,MAA3C,EAAmDJ,MAAnD,CAAP;EACD,CAVoB,EAUlB,CAACA,MAAD,CAVkB,CAArB;EAWA,MAAM+B,WAAW,GAAGzC,KAAK,CAACY,WAAN,CAAkB,CAACO,GAAD,EAAML,MAAN,KAAiB;IACrD,MAAMD,KAAK,GAAGC,MAAM,CAACD,KAArB;;IACA,IAAI,CAACC,MAAD,IAAW,CAACA,MAAM,CAACe,WAAvB,EAAoC;MAClC,OAAOV,GAAG,CAACN,KAAD,CAAV;IACD;;IACD,MAAMe,KAAK,GAAGT,GAAG,CAACL,MAAM,CAACD,KAAR,CAAjB;IACA,OAAOC,MAAM,CAACe,WAAP,CAAmBD,KAAnB,EAA0BT,GAA1B,EAA+BL,MAA/B,EAAuCJ,MAAvC,CAAP;EACD,CAPmB,EAOjB,CAACA,MAAD,CAPiB,CAApB;EAQA,MAAMgC,oBAAoB,GAAG1C,KAAK,CAACY,WAAN,CAAkB,CAACO,GAAD,EAAML,MAAN,KAAiB;IAC9D,MAAMc,KAAK,GAAGa,WAAW,CAACtB,GAAD,EAAML,MAAN,CAAzB;;IACA,IAAI,CAACA,MAAD,IAAW,CAACA,MAAM,CAACwB,cAAvB,EAAuC;MACrC,OAAOV,KAAP;IACD;;IACD,OAAOd,MAAM,CAACwB,cAAP,CAAsBV,KAAtB,EAA6BT,GAA7B,EAAkCL,MAAlC,EAA0CJ,MAA1C,CAAP;EACD,CAN4B,EAM1B,CAACA,MAAD,EAAS+B,WAAT,CAN0B,CAA7B;EAOA,MAAME,sBAAsB,GAAG3C,KAAK,CAACY,WAAN,CAAkBC,KAAK,IAAI;IACxD,IAAI,CAACH,MAAM,CAACK,OAAP,CAAe6B,cAAf,CAA8B7B,OAAnC,EAA4C;MAC1C,OAAO,IAAP;IACD;;IACD,OAAOb,0BAA0B,CAACQ,MAAM,CAACK,OAAP,CAAe6B,cAAf,CAA8B7B,OAA/B,EAAwCF,KAAxC,CAAjC;EACD,CAL8B,EAK5B,CAACH,MAAD,CAL4B,CAA/B;EAMA,MAAMmC,aAAa,GAAG7C,KAAK,CAACY,WAAN,CAAkBM,EAAE,IAAI;IAC5C,IAAI,CAACR,MAAM,CAACK,OAAP,CAAe6B,cAAf,CAA8B7B,OAAnC,EAA4C;MAC1C,OAAO,IAAP;IACD;;IACD,OAAOZ,iBAAiB,CAACO,MAAM,CAACK,OAAP,CAAe6B,cAAf,CAA8B7B,OAA/B,EAAwCG,EAAxC,CAAxB;EACD,CALqB,EAKnB,CAACR,MAAD,CALmB,CAAtB;EAMA,MAAMoC,cAAc,GAAG9C,KAAK,CAACY,WAAN,CAAkB,CAACM,EAAD,EAAKL,KAAL,KAAe;IACtD,IAAI,CAACH,MAAM,CAACK,OAAP,CAAe6B,cAAf,CAA8B7B,OAAnC,EAA4C;MAC1C,OAAO,IAAP;IACD;;IACD,OAAOd,kBAAkB,CAACS,MAAM,CAACK,OAAP,CAAe6B,cAAf,CAA8B7B,OAA/B,EAAwC;MAC/DG,EAD+D;MAE/DL;IAF+D,CAAxC,CAAzB;EAID,CARsB,EAQpB,CAACH,MAAD,CARoB,CAAvB;EASA,MAAMqC,SAAS,GAAG;IAChBP,YADgB;IAEhBhB,aAFgB;IAGhBsB,cAHgB;IAIhBL,WAJgB;IAKhBC,oBALgB;IAMhBzB,YANgB;IAOhB4B,aAPgB;IAQhBlC,qBARgB;IAShBgC;EATgB,CAAlB;EAWAvC,gBAAgB,CAACM,MAAD,EAASqC,SAAT,EAAoB,QAApB,CAAhB;AACD"},"metadata":{},"sourceType":"module"}