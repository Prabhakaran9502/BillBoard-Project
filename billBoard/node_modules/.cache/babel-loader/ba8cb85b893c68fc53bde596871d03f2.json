{"ast":null,"code":"\"use strict\";\n\nexports.eachHourOfInterval = eachHourOfInterval;\n\nvar _index = require(\"./addHours.js\");\n\nvar _index2 = require(\"./toDate.js\");\n/**\n * The {@link eachHourOfInterval} function options.\n */\n\n/**\n * @name eachHourOfInterval\n * @category Interval Helpers\n * @summary Return the array of hours within the specified time interval.\n *\n * @description\n * Return the array of hours within the specified time interval.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param interval - The interval.\n * @param options - An object with options.\n *\n * @returns The array with starts of hours from the hour of the interval start to the hour of the interval end\n *\n * @example\n * // Each hour between 6 October 2014, 12:00 and 6 October 2014, 15:00\n * const result = eachHourOfInterval({\n *   start: new Date(2014, 9, 6, 12),\n *   end: new Date(2014, 9, 6, 15)\n * })\n * //=> [\n * //   Mon Oct 06 2014 12:00:00,\n * //   Mon Oct 06 2014 13:00:00,\n * //   Mon Oct 06 2014 14:00:00,\n * //   Mon Oct 06 2014 15:00:00\n * // ]\n */\n\n\nfunction eachHourOfInterval(interval, options) {\n  const startDate = (0, _index2.toDate)(interval.start);\n  const endDate = (0, _index2.toDate)(interval.end);\n  let reversed = +startDate > +endDate;\n  const endTime = reversed ? +startDate : +endDate;\n  let currentDate = reversed ? endDate : startDate;\n  currentDate.setMinutes(0, 0, 0);\n  let step = options?.step ?? 1;\n  if (!step) return [];\n\n  if (step < 0) {\n    step = -step;\n    reversed = !reversed;\n  }\n\n  const dates = [];\n\n  while (+currentDate <= endTime) {\n    dates.push((0, _index2.toDate)(currentDate));\n    currentDate = (0, _index.addHours)(currentDate, step);\n  }\n\n  return reversed ? dates.reverse() : dates;\n}","map":{"version":3,"names":["exports","eachHourOfInterval","_index","require","_index2","interval","options","startDate","toDate","start","endDate","end","reversed","endTime","currentDate","setMinutes","step","dates","push","addHours","reverse"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/date-fns/eachHourOfInterval.js"],"sourcesContent":["\"use strict\";\nexports.eachHourOfInterval = eachHourOfInterval;\nvar _index = require(\"./addHours.js\");\nvar _index2 = require(\"./toDate.js\");\n\n/**\n * The {@link eachHourOfInterval} function options.\n */\n\n/**\n * @name eachHourOfInterval\n * @category Interval Helpers\n * @summary Return the array of hours within the specified time interval.\n *\n * @description\n * Return the array of hours within the specified time interval.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param interval - The interval.\n * @param options - An object with options.\n *\n * @returns The array with starts of hours from the hour of the interval start to the hour of the interval end\n *\n * @example\n * // Each hour between 6 October 2014, 12:00 and 6 October 2014, 15:00\n * const result = eachHourOfInterval({\n *   start: new Date(2014, 9, 6, 12),\n *   end: new Date(2014, 9, 6, 15)\n * })\n * //=> [\n * //   Mon Oct 06 2014 12:00:00,\n * //   Mon Oct 06 2014 13:00:00,\n * //   Mon Oct 06 2014 14:00:00,\n * //   Mon Oct 06 2014 15:00:00\n * // ]\n */\nfunction eachHourOfInterval(interval, options) {\n  const startDate = (0, _index2.toDate)(interval.start);\n  const endDate = (0, _index2.toDate)(interval.end);\n\n  let reversed = +startDate > +endDate;\n  const endTime = reversed ? +startDate : +endDate;\n  let currentDate = reversed ? endDate : startDate;\n  currentDate.setMinutes(0, 0, 0);\n\n  let step = options?.step ?? 1;\n  if (!step) return [];\n  if (step < 0) {\n    step = -step;\n    reversed = !reversed;\n  }\n\n  const dates = [];\n\n  while (+currentDate <= endTime) {\n    dates.push((0, _index2.toDate)(currentDate));\n    currentDate = (0, _index.addHours)(currentDate, step);\n  }\n\n  return reversed ? dates.reverse() : dates;\n}\n"],"mappings":"AAAA;;AACAA,OAAO,CAACC,kBAAR,GAA6BA,kBAA7B;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,eAAD,CAApB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,aAAD,CAArB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,kBAAT,CAA4BI,QAA5B,EAAsCC,OAAtC,EAA+C;EAC7C,MAAMC,SAAS,GAAG,CAAC,GAAGH,OAAO,CAACI,MAAZ,EAAoBH,QAAQ,CAACI,KAA7B,CAAlB;EACA,MAAMC,OAAO,GAAG,CAAC,GAAGN,OAAO,CAACI,MAAZ,EAAoBH,QAAQ,CAACM,GAA7B,CAAhB;EAEA,IAAIC,QAAQ,GAAG,CAACL,SAAD,GAAa,CAACG,OAA7B;EACA,MAAMG,OAAO,GAAGD,QAAQ,GAAG,CAACL,SAAJ,GAAgB,CAACG,OAAzC;EACA,IAAII,WAAW,GAAGF,QAAQ,GAAGF,OAAH,GAAaH,SAAvC;EACAO,WAAW,CAACC,UAAZ,CAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B;EAEA,IAAIC,IAAI,GAAGV,OAAO,EAAEU,IAAT,IAAiB,CAA5B;EACA,IAAI,CAACA,IAAL,EAAW,OAAO,EAAP;;EACX,IAAIA,IAAI,GAAG,CAAX,EAAc;IACZA,IAAI,GAAG,CAACA,IAAR;IACAJ,QAAQ,GAAG,CAACA,QAAZ;EACD;;EAED,MAAMK,KAAK,GAAG,EAAd;;EAEA,OAAO,CAACH,WAAD,IAAgBD,OAAvB,EAAgC;IAC9BI,KAAK,CAACC,IAAN,CAAW,CAAC,GAAGd,OAAO,CAACI,MAAZ,EAAoBM,WAApB,CAAX;IACAA,WAAW,GAAG,CAAC,GAAGZ,MAAM,CAACiB,QAAX,EAAqBL,WAArB,EAAkCE,IAAlC,CAAd;EACD;;EAED,OAAOJ,QAAQ,GAAGK,KAAK,CAACG,OAAN,EAAH,GAAqBH,KAApC;AACD"},"metadata":{},"sourceType":"script"}