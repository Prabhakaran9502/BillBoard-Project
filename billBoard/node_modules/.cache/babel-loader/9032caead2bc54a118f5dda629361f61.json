{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/kb/Downloads/billBoard/billBoard/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/kb/Downloads/billBoard/billBoard/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _assertThisInitialized = require(\"C:/Users/kb/Downloads/billBoard/billBoard/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\n\nvar _inherits = require(\"C:/Users/kb/Downloads/billBoard/billBoard/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"C:/Users/kb/Downloads/billBoard/billBoard/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar _defineProperty = require(\"C:/Users/kb/Downloads/billBoard/billBoard/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\n\nexports.YearParser = void 0;\n\nvar _Parser = require(\"../Parser.js\");\n\nvar _utils = require(\"../utils.js\"); // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n// | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n// |----------|-------|----|-------|-------|-------|\n// | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n// | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n// | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n// | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n// | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n\n\nvar YearParser = /*#__PURE__*/function (_Parser$Parser) {\n  _inherits(YearParser, _Parser$Parser);\n\n  var _super = _createSuper(YearParser);\n\n  function YearParser() {\n    var _this;\n\n    _classCallCheck(this, YearParser);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"priority\", 130);\n\n    _defineProperty(_assertThisInitialized(_this), \"incompatibleTokens\", [\"Y\", \"R\", \"u\", \"w\", \"I\", \"i\", \"e\", \"c\", \"t\", \"T\"]);\n\n    return _this;\n  }\n\n  _createClass(YearParser, [{\n    key: \"parse\",\n    value: function parse(dateString, token, match) {\n      var valueCallback = function valueCallback(year) {\n        return {\n          year: year,\n          isTwoDigitYear: token === \"yy\"\n        };\n      };\n\n      switch (token) {\n        case \"y\":\n          return (0, _utils.mapValue)((0, _utils.parseNDigits)(4, dateString), valueCallback);\n\n        case \"yo\":\n          return (0, _utils.mapValue)(match.ordinalNumber(dateString, {\n            unit: \"year\"\n          }), valueCallback);\n\n        default:\n          return (0, _utils.mapValue)((0, _utils.parseNDigits)(token.length, dateString), valueCallback);\n      }\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(_date, value) {\n      return value.isTwoDigitYear || value.year > 0;\n    }\n  }, {\n    key: \"set\",\n    value: function set(date, flags, value) {\n      var currentYear = date.getFullYear();\n\n      if (value.isTwoDigitYear) {\n        var normalizedTwoDigitYear = (0, _utils.normalizeTwoDigitYear)(value.year, currentYear);\n        date.setFullYear(normalizedTwoDigitYear, 0, 1);\n        date.setHours(0, 0, 0, 0);\n        return date;\n      }\n\n      var year = !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n      date.setFullYear(year, 0, 1);\n      date.setHours(0, 0, 0, 0);\n      return date;\n    }\n  }]);\n\n  return YearParser;\n}(_Parser.Parser);\n\nexports.YearParser = YearParser;","map":{"version":3,"names":["exports","YearParser","_Parser","require","_utils","dateString","token","match","valueCallback","year","isTwoDigitYear","mapValue","parseNDigits","ordinalNumber","unit","length","_date","value","date","flags","currentYear","getFullYear","normalizedTwoDigitYear","normalizeTwoDigitYear","setFullYear","setHours","era","Parser"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/date-fns/parse/_lib/parsers/YearParser.js"],"sourcesContent":["\"use strict\";\nexports.YearParser = void 0;\nvar _Parser = require(\"../Parser.js\");\n\nvar _utils = require(\"../utils.js\");\n\n// From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n// | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n// |----------|-------|----|-------|-------|-------|\n// | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n// | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n// | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n// | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n// | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\nclass YearParser extends _Parser.Parser {\n  priority = 130;\n  incompatibleTokens = [\"Y\", \"R\", \"u\", \"w\", \"I\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n\n  parse(dateString, token, match) {\n    const valueCallback = (year) => ({\n      year,\n      isTwoDigitYear: token === \"yy\",\n    });\n\n    switch (token) {\n      case \"y\":\n        return (0, _utils.mapValue)(\n          (0, _utils.parseNDigits)(4, dateString),\n          valueCallback,\n        );\n      case \"yo\":\n        return (0, _utils.mapValue)(\n          match.ordinalNumber(dateString, {\n            unit: \"year\",\n          }),\n          valueCallback,\n        );\n      default:\n        return (0, _utils.mapValue)(\n          (0, _utils.parseNDigits)(token.length, dateString),\n          valueCallback,\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value.isTwoDigitYear || value.year > 0;\n  }\n\n  set(date, flags, value) {\n    const currentYear = date.getFullYear();\n\n    if (value.isTwoDigitYear) {\n      const normalizedTwoDigitYear = (0, _utils.normalizeTwoDigitYear)(\n        value.year,\n        currentYear,\n      );\n      date.setFullYear(normalizedTwoDigitYear, 0, 1);\n      date.setHours(0, 0, 0, 0);\n      return date;\n    }\n\n    const year =\n      !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n    date.setFullYear(year, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n}\nexports.YearParser = YearParser;\n"],"mappings":"AAAA;;;;;;;;;;;;;;AACAA,OAAO,CAACC,UAAR,GAAqB,KAAK,CAA1B;;AACA,IAAIC,OAAO,GAAGC,OAAO,CAAC,cAAD,CAArB;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,aAAD,CAApB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACMF,U;;;;;;;;;;;;;;;;+DACO,G;;yEACU,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C,C;;;;;;;WAErB,eAAMI,UAAN,EAAkBC,KAAlB,EAAyBC,KAAzB,EAAgC;MAC9B,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,IAAD;QAAA,OAAW;UAC/BA,IAAI,EAAJA,IAD+B;UAE/BC,cAAc,EAAEJ,KAAK,KAAK;QAFK,CAAX;MAAA,CAAtB;;MAKA,QAAQA,KAAR;QACE,KAAK,GAAL;UACE,OAAO,CAAC,GAAGF,MAAM,CAACO,QAAX,EACL,CAAC,GAAGP,MAAM,CAACQ,YAAX,EAAyB,CAAzB,EAA4BP,UAA5B,CADK,EAELG,aAFK,CAAP;;QAIF,KAAK,IAAL;UACE,OAAO,CAAC,GAAGJ,MAAM,CAACO,QAAX,EACLJ,KAAK,CAACM,aAAN,CAAoBR,UAApB,EAAgC;YAC9BS,IAAI,EAAE;UADwB,CAAhC,CADK,EAILN,aAJK,CAAP;;QAMF;UACE,OAAO,CAAC,GAAGJ,MAAM,CAACO,QAAX,EACL,CAAC,GAAGP,MAAM,CAACQ,YAAX,EAAyBN,KAAK,CAACS,MAA/B,EAAuCV,UAAvC,CADK,EAELG,aAFK,CAAP;MAdJ;IAmBD;;;WAED,kBAASQ,KAAT,EAAgBC,KAAhB,EAAuB;MACrB,OAAOA,KAAK,CAACP,cAAN,IAAwBO,KAAK,CAACR,IAAN,GAAa,CAA5C;IACD;;;WAED,aAAIS,IAAJ,EAAUC,KAAV,EAAiBF,KAAjB,EAAwB;MACtB,IAAMG,WAAW,GAAGF,IAAI,CAACG,WAAL,EAApB;;MAEA,IAAIJ,KAAK,CAACP,cAAV,EAA0B;QACxB,IAAMY,sBAAsB,GAAG,CAAC,GAAGlB,MAAM,CAACmB,qBAAX,EAC7BN,KAAK,CAACR,IADuB,EAE7BW,WAF6B,CAA/B;QAIAF,IAAI,CAACM,WAAL,CAAiBF,sBAAjB,EAAyC,CAAzC,EAA4C,CAA5C;QACAJ,IAAI,CAACO,QAAL,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB;QACA,OAAOP,IAAP;MACD;;MAED,IAAMT,IAAI,GACR,EAAE,SAASU,KAAX,KAAqBA,KAAK,CAACO,GAAN,KAAc,CAAnC,GAAuCT,KAAK,CAACR,IAA7C,GAAoD,IAAIQ,KAAK,CAACR,IADhE;MAEAS,IAAI,CAACM,WAAL,CAAiBf,IAAjB,EAAuB,CAAvB,EAA0B,CAA1B;MACAS,IAAI,CAACO,QAAL,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB;MACA,OAAOP,IAAP;IACD;;;;EArDsBhB,OAAO,CAACyB,M;;AAuDjC3B,OAAO,CAACC,UAAR,GAAqBA,UAArB"},"metadata":{},"sourceType":"script"}