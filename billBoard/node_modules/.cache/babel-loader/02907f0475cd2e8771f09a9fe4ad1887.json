{"ast":null,"code":"import { gridStringOrNumberComparator } from '@mui/x-data-grid-premium';\nimport { randomCity, randomCompanyName, randomCountry, randomCreatedDate, randomEmail, randomId, randomJobTitle, randomPhoneNumber, randomRating, randomUpdatedDate, randomUrl, randomUserName, randomBoolean, randomName, randomColor, randomInt } from '../services';\nimport { renderAvatar, renderCountry, renderEmail, renderLink, renderRating, renderEditRating, renderEditCountry } from '../renderer';\nimport { COUNTRY_ISO_OPTIONS_SORTED } from '../services/static-data';\nexport const getEmployeeColumns = () => [{\n  field: 'id',\n  generateData: randomId,\n  hide: true\n}, {\n  field: 'avatar',\n  headerName: 'Avatar',\n  generateData: randomColor,\n  display: 'flex',\n  renderCell: renderAvatar,\n  valueGetter: (value, row) => row.name == null || row.avatar == null ? null : {\n    name: row.name,\n    color: row.avatar\n  },\n  sortable: false,\n  filterable: false,\n  groupable: false,\n  aggregable: false,\n  disableExport: true\n}, {\n  field: 'name',\n  headerName: 'Name',\n  generateData: randomName,\n  dataGeneratorUniquenessEnabled: true,\n  width: 120,\n  editable: true,\n  groupable: false,\n  aggregable: false\n}, {\n  field: 'website',\n  headerName: 'Website',\n  generateData: randomUrl,\n  renderCell: renderLink,\n  width: 160,\n  editable: true,\n  groupable: false,\n  aggregable: false\n}, {\n  field: 'rating',\n  headerName: 'Rating',\n  generateData: randomRating,\n  display: 'flex',\n  renderCell: renderRating,\n  renderEditCell: renderEditRating,\n  width: 180,\n  type: 'number',\n  editable: true,\n  availableAggregationFunctions: ['avg', 'min', 'max', 'size']\n}, {\n  field: 'email',\n  headerName: 'Email',\n  generateData: randomEmail,\n  renderCell: renderEmail,\n  width: 150,\n  editable: true\n}, {\n  field: 'phone',\n  headerName: 'Phone',\n  generateData: randomPhoneNumber,\n  width: 150,\n  editable: true\n}, {\n  field: 'username',\n  headerName: 'Username',\n  generateData: randomUserName,\n  width: 150,\n  editable: true\n}, {\n  field: 'city',\n  headerName: 'City',\n  generateData: randomCity,\n  editable: true\n}, {\n  field: 'country',\n  headerName: 'Country',\n  type: 'singleSelect',\n  valueOptions: COUNTRY_ISO_OPTIONS_SORTED,\n  valueFormatter: value => value?.label,\n  generateData: randomCountry,\n  renderCell: renderCountry,\n  renderEditCell: renderEditCountry,\n  sortComparator: (v1, v2, param1, param2) => gridStringOrNumberComparator(v1.label, v2.label, param1, param2),\n  width: 150,\n  editable: true\n}, {\n  field: 'company',\n  headerName: 'Company',\n  generateData: randomCompanyName,\n  width: 180,\n  editable: true\n}, {\n  field: 'position',\n  headerName: 'Position',\n  generateData: randomJobTitle,\n  width: 180,\n  editable: true\n}, {\n  field: 'lastUpdated',\n  headerName: 'Updated on',\n  generateData: randomUpdatedDate,\n  type: 'dateTime',\n  width: 180,\n  editable: true\n}, {\n  field: 'dateCreated',\n  headerName: 'Created on',\n  generateData: randomCreatedDate,\n  type: 'date',\n  width: 120,\n  editable: true\n}, {\n  field: 'isAdmin',\n  headerName: 'Is admin?',\n  generateData: randomBoolean,\n  type: 'boolean',\n  width: 150,\n  editable: true\n}, {\n  field: 'salary',\n  headerName: 'Salary',\n  generateData: () => randomInt(30000, 80000),\n  type: 'number',\n  valueFormatter: value => {\n    if (!value || typeof value !== 'number') {\n      return value;\n    }\n\n    return `${value.toLocaleString()}$`;\n  }\n}];","map":{"version":3,"names":["gridStringOrNumberComparator","randomCity","randomCompanyName","randomCountry","randomCreatedDate","randomEmail","randomId","randomJobTitle","randomPhoneNumber","randomRating","randomUpdatedDate","randomUrl","randomUserName","randomBoolean","randomName","randomColor","randomInt","renderAvatar","renderCountry","renderEmail","renderLink","renderRating","renderEditRating","renderEditCountry","COUNTRY_ISO_OPTIONS_SORTED","getEmployeeColumns","field","generateData","hide","headerName","display","renderCell","valueGetter","value","row","name","avatar","color","sortable","filterable","groupable","aggregable","disableExport","dataGeneratorUniquenessEnabled","width","editable","renderEditCell","type","availableAggregationFunctions","valueOptions","valueFormatter","label","sortComparator","v1","v2","param1","param2","toLocaleString"],"sources":["C:/Users/kb/node_modules/@mui/x-data-grid-generator/columns/employees.columns.js"],"sourcesContent":["import { gridStringOrNumberComparator } from '@mui/x-data-grid-premium';\nimport { randomCity, randomCompanyName, randomCountry, randomCreatedDate, randomEmail, randomId, randomJobTitle, randomPhoneNumber, randomRating, randomUpdatedDate, randomUrl, randomUserName, randomBoolean, randomName, randomColor, randomInt } from '../services';\nimport { renderAvatar, renderCountry, renderEmail, renderLink, renderRating, renderEditRating, renderEditCountry } from '../renderer';\nimport { COUNTRY_ISO_OPTIONS_SORTED } from '../services/static-data';\nexport const getEmployeeColumns = () => [{\n  field: 'id',\n  generateData: randomId,\n  hide: true\n}, {\n  field: 'avatar',\n  headerName: 'Avatar',\n  generateData: randomColor,\n  display: 'flex',\n  renderCell: renderAvatar,\n  valueGetter: (value, row) => row.name == null || row.avatar == null ? null : {\n    name: row.name,\n    color: row.avatar\n  },\n  sortable: false,\n  filterable: false,\n  groupable: false,\n  aggregable: false,\n  disableExport: true\n}, {\n  field: 'name',\n  headerName: 'Name',\n  generateData: randomName,\n  dataGeneratorUniquenessEnabled: true,\n  width: 120,\n  editable: true,\n  groupable: false,\n  aggregable: false\n}, {\n  field: 'website',\n  headerName: 'Website',\n  generateData: randomUrl,\n  renderCell: renderLink,\n  width: 160,\n  editable: true,\n  groupable: false,\n  aggregable: false\n}, {\n  field: 'rating',\n  headerName: 'Rating',\n  generateData: randomRating,\n  display: 'flex',\n  renderCell: renderRating,\n  renderEditCell: renderEditRating,\n  width: 180,\n  type: 'number',\n  editable: true,\n  availableAggregationFunctions: ['avg', 'min', 'max', 'size']\n}, {\n  field: 'email',\n  headerName: 'Email',\n  generateData: randomEmail,\n  renderCell: renderEmail,\n  width: 150,\n  editable: true\n}, {\n  field: 'phone',\n  headerName: 'Phone',\n  generateData: randomPhoneNumber,\n  width: 150,\n  editable: true\n}, {\n  field: 'username',\n  headerName: 'Username',\n  generateData: randomUserName,\n  width: 150,\n  editable: true\n}, {\n  field: 'city',\n  headerName: 'City',\n  generateData: randomCity,\n  editable: true\n}, {\n  field: 'country',\n  headerName: 'Country',\n  type: 'singleSelect',\n  valueOptions: COUNTRY_ISO_OPTIONS_SORTED,\n  valueFormatter: value => value?.label,\n  generateData: randomCountry,\n  renderCell: renderCountry,\n  renderEditCell: renderEditCountry,\n  sortComparator: (v1, v2, param1, param2) => gridStringOrNumberComparator(v1.label, v2.label, param1, param2),\n  width: 150,\n  editable: true\n}, {\n  field: 'company',\n  headerName: 'Company',\n  generateData: randomCompanyName,\n  width: 180,\n  editable: true\n}, {\n  field: 'position',\n  headerName: 'Position',\n  generateData: randomJobTitle,\n  width: 180,\n  editable: true\n}, {\n  field: 'lastUpdated',\n  headerName: 'Updated on',\n  generateData: randomUpdatedDate,\n  type: 'dateTime',\n  width: 180,\n  editable: true\n}, {\n  field: 'dateCreated',\n  headerName: 'Created on',\n  generateData: randomCreatedDate,\n  type: 'date',\n  width: 120,\n  editable: true\n}, {\n  field: 'isAdmin',\n  headerName: 'Is admin?',\n  generateData: randomBoolean,\n  type: 'boolean',\n  width: 150,\n  editable: true\n}, {\n  field: 'salary',\n  headerName: 'Salary',\n  generateData: () => randomInt(30000, 80000),\n  type: 'number',\n  valueFormatter: value => {\n    if (!value || typeof value !== 'number') {\n      return value;\n    }\n    return `${value.toLocaleString()}$`;\n  }\n}];"],"mappings":"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"},"metadata":{},"sourceType":"module"}