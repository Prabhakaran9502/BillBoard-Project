{"ast":null,"code":"import * as React from 'react';\nimport { TimerBasedCleanupTracking } from '../../utils/cleanupTracking/TimerBasedCleanupTracking';\nimport { FinalizationRegistryBasedCleanupTracking } from '../../utils/cleanupTracking/FinalizationRegistryBasedCleanupTracking';\n/**\n * Signal to the underlying logic what version of the public component API\n * of the data grid is exposed.\n */\n\nvar GridSignature = /*#__PURE__*/function (GridSignature) {\n  GridSignature[\"DataGrid\"] = \"DataGrid\";\n  GridSignature[\"DataGridPro\"] = \"DataGridPro\";\n  return GridSignature;\n}(GridSignature || {}); // We use class to make it easier to detect in heap snapshots by name\n\n\nclass ObjectToBeRetainedByReact {} // Based on https://github.com/Bnaya/use-dispose-uncommitted/blob/main/src/finalization-registry-based-impl.ts\n// Check https://github.com/facebook/react/issues/15317 to get more information\n\n\nexport function createUseGridApiEventHandler(registryContainer) {\n  let cleanupTokensCounter = 0;\n  return function useGridApiEventHandler(apiRef, eventName, handler, options) {\n    if (registryContainer.registry === null) {\n      registryContainer.registry = typeof FinalizationRegistry !== 'undefined' ? new FinalizationRegistryBasedCleanupTracking() : new TimerBasedCleanupTracking();\n    }\n\n    const [objectRetainedByReact] = React.useState(new ObjectToBeRetainedByReact());\n    const subscription = React.useRef(null);\n    const handlerRef = React.useRef();\n    handlerRef.current = handler;\n    const cleanupTokenRef = React.useRef(null);\n\n    if (!subscription.current && handlerRef.current) {\n      const enhancedHandler = (params, event, details) => {\n        if (!event.defaultMuiPrevented) {\n          handlerRef.current?.(params, event, details);\n        }\n      };\n\n      subscription.current = apiRef.current.subscribeEvent(eventName, enhancedHandler, options);\n      cleanupTokensCounter += 1;\n      cleanupTokenRef.current = {\n        cleanupToken: cleanupTokensCounter\n      };\n      registryContainer.registry.register(objectRetainedByReact, // The callback below will be called once this reference stops being retained\n      () => {\n        subscription.current?.();\n        subscription.current = null;\n        cleanupTokenRef.current = null;\n      }, cleanupTokenRef.current);\n    } else if (!handlerRef.current && subscription.current) {\n      subscription.current();\n      subscription.current = null;\n\n      if (cleanupTokenRef.current) {\n        registryContainer.registry.unregister(cleanupTokenRef.current);\n        cleanupTokenRef.current = null;\n      }\n    }\n\n    React.useEffect(() => {\n      if (!subscription.current && handlerRef.current) {\n        const enhancedHandler = (params, event, details) => {\n          if (!event.defaultMuiPrevented) {\n            handlerRef.current?.(params, event, details);\n          }\n        };\n\n        subscription.current = apiRef.current.subscribeEvent(eventName, enhancedHandler, options);\n      }\n\n      if (cleanupTokenRef.current && registryContainer.registry) {\n        // If the effect was called, it means that this render was committed\n        // so we can trust the cleanup function to remove the listener.\n        registryContainer.registry.unregister(cleanupTokenRef.current);\n        cleanupTokenRef.current = null;\n      }\n\n      return () => {\n        subscription.current?.();\n        subscription.current = null;\n      };\n    }, [apiRef, eventName, options]);\n  };\n}\nconst registryContainer = {\n  registry: null\n}; // TODO: move to @mui/x-data-grid/internals\n// eslint-disable-next-line @typescript-eslint/naming-convention\n\nexport const unstable_resetCleanupTracking = () => {\n  registryContainer.registry?.reset();\n  registryContainer.registry = null;\n};\nexport const useGridApiEventHandler = createUseGridApiEventHandler(registryContainer);\nconst optionsSubscriberOptions = {\n  isFirst: true\n};\nexport function useGridApiOptionHandler(apiRef, eventName, handler) {\n  // Validate that only one per event name?\n  useGridApiEventHandler(apiRef, eventName, handler, optionsSubscriberOptions);\n}\nexport { GridSignature };","map":{"version":3,"names":["React","TimerBasedCleanupTracking","FinalizationRegistryBasedCleanupTracking","GridSignature","ObjectToBeRetainedByReact","createUseGridApiEventHandler","registryContainer","cleanupTokensCounter","useGridApiEventHandler","apiRef","eventName","handler","options","registry","FinalizationRegistry","objectRetainedByReact","useState","subscription","useRef","handlerRef","current","cleanupTokenRef","enhancedHandler","params","event","details","defaultMuiPrevented","subscribeEvent","cleanupToken","register","unregister","useEffect","unstable_resetCleanupTracking","reset","optionsSubscriberOptions","isFirst","useGridApiOptionHandler"],"sources":["C:/Users/kb/node_modules/@mui/x-data-grid/hooks/utils/useGridApiEventHandler.js"],"sourcesContent":["import * as React from 'react';\nimport { TimerBasedCleanupTracking } from '../../utils/cleanupTracking/TimerBasedCleanupTracking';\nimport { FinalizationRegistryBasedCleanupTracking } from '../../utils/cleanupTracking/FinalizationRegistryBasedCleanupTracking';\n/**\n * Signal to the underlying logic what version of the public component API\n * of the data grid is exposed.\n */\nvar GridSignature = /*#__PURE__*/function (GridSignature) {\n  GridSignature[\"DataGrid\"] = \"DataGrid\";\n  GridSignature[\"DataGridPro\"] = \"DataGridPro\";\n  return GridSignature;\n}(GridSignature || {});\n// We use class to make it easier to detect in heap snapshots by name\nclass ObjectToBeRetainedByReact {}\n\n// Based on https://github.com/Bnaya/use-dispose-uncommitted/blob/main/src/finalization-registry-based-impl.ts\n// Check https://github.com/facebook/react/issues/15317 to get more information\nexport function createUseGridApiEventHandler(registryContainer) {\n  let cleanupTokensCounter = 0;\n  return function useGridApiEventHandler(apiRef, eventName, handler, options) {\n    if (registryContainer.registry === null) {\n      registryContainer.registry = typeof FinalizationRegistry !== 'undefined' ? new FinalizationRegistryBasedCleanupTracking() : new TimerBasedCleanupTracking();\n    }\n    const [objectRetainedByReact] = React.useState(new ObjectToBeRetainedByReact());\n    const subscription = React.useRef(null);\n    const handlerRef = React.useRef();\n    handlerRef.current = handler;\n    const cleanupTokenRef = React.useRef(null);\n    if (!subscription.current && handlerRef.current) {\n      const enhancedHandler = (params, event, details) => {\n        if (!event.defaultMuiPrevented) {\n          handlerRef.current?.(params, event, details);\n        }\n      };\n      subscription.current = apiRef.current.subscribeEvent(eventName, enhancedHandler, options);\n      cleanupTokensCounter += 1;\n      cleanupTokenRef.current = {\n        cleanupToken: cleanupTokensCounter\n      };\n      registryContainer.registry.register(objectRetainedByReact,\n      // The callback below will be called once this reference stops being retained\n      () => {\n        subscription.current?.();\n        subscription.current = null;\n        cleanupTokenRef.current = null;\n      }, cleanupTokenRef.current);\n    } else if (!handlerRef.current && subscription.current) {\n      subscription.current();\n      subscription.current = null;\n      if (cleanupTokenRef.current) {\n        registryContainer.registry.unregister(cleanupTokenRef.current);\n        cleanupTokenRef.current = null;\n      }\n    }\n    React.useEffect(() => {\n      if (!subscription.current && handlerRef.current) {\n        const enhancedHandler = (params, event, details) => {\n          if (!event.defaultMuiPrevented) {\n            handlerRef.current?.(params, event, details);\n          }\n        };\n        subscription.current = apiRef.current.subscribeEvent(eventName, enhancedHandler, options);\n      }\n      if (cleanupTokenRef.current && registryContainer.registry) {\n        // If the effect was called, it means that this render was committed\n        // so we can trust the cleanup function to remove the listener.\n        registryContainer.registry.unregister(cleanupTokenRef.current);\n        cleanupTokenRef.current = null;\n      }\n      return () => {\n        subscription.current?.();\n        subscription.current = null;\n      };\n    }, [apiRef, eventName, options]);\n  };\n}\nconst registryContainer = {\n  registry: null\n};\n\n// TODO: move to @mui/x-data-grid/internals\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const unstable_resetCleanupTracking = () => {\n  registryContainer.registry?.reset();\n  registryContainer.registry = null;\n};\nexport const useGridApiEventHandler = createUseGridApiEventHandler(registryContainer);\nconst optionsSubscriberOptions = {\n  isFirst: true\n};\nexport function useGridApiOptionHandler(apiRef, eventName, handler) {\n  // Validate that only one per event name?\n  useGridApiEventHandler(apiRef, eventName, handler, optionsSubscriberOptions);\n}\nexport { GridSignature };"],"mappings":"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"},"metadata":{},"sourceType":"module"}