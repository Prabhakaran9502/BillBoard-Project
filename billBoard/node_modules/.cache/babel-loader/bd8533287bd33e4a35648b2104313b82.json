{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridRowGrouping = exports.rowGroupingStateInitializer = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _xDataGridPro = require(\"@mui/x-data-grid-pro\");\n\nvar _internals = require(\"@mui/x-data-grid-pro/internals\");\n\nvar _gridRowGroupingSelector = require(\"./gridRowGroupingSelector\");\n\nvar _gridRowGroupingUtils = require(\"./gridRowGroupingUtils\");\n\nfunction _getRequireWildcardCache(e) {\n  if (\"function\" != typeof WeakMap) return null;\n  var r = new WeakMap(),\n      t = new WeakMap();\n  return (_getRequireWildcardCache = function (e) {\n    return e ? t : r;\n  })(e);\n}\n\nfunction _interopRequireWildcard(e, r) {\n  if (!r && e && e.__esModule) return e;\n  if (null === e || \"object\" != typeof e && \"function\" != typeof e) return {\n    default: e\n  };\n\n  var t = _getRequireWildcardCache(r);\n\n  if (t && t.has(e)) return t.get(e);\n  var n = {\n    __proto__: null\n  },\n      a = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) {\n    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;\n    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];\n  }\n\n  return n.default = e, t && t.set(e, n), n;\n}\n\nconst rowGroupingStateInitializer = (state, props, apiRef) => {\n  apiRef.current.caches.rowGrouping = {\n    rulesOnLastRowTreeCreation: []\n  };\n  return (0, _extends2.default)({}, state, {\n    rowGrouping: {\n      model: props.rowGroupingModel ?? props.initialState?.rowGrouping?.model ?? []\n    }\n  });\n};\n/**\n * @requires useGridColumns (state, method) - can be after, async only\n * @requires useGridRows (state, method) - can be after, async only\n * @requires useGridParamsApi (method) - can be after, async only\n */\n\n\nexports.rowGroupingStateInitializer = rowGroupingStateInitializer;\n\nconst useGridRowGrouping = (apiRef, props) => {\n  apiRef.current.registerControlState({\n    stateId: 'rowGrouping',\n    propModel: props.rowGroupingModel,\n    propOnChange: props.onRowGroupingModelChange,\n    stateSelector: _gridRowGroupingSelector.gridRowGroupingModelSelector,\n    changeEvent: 'rowGroupingModelChange'\n  });\n  /**\n   * API METHODS\n   */\n\n  const setRowGroupingModel = React.useCallback(model => {\n    const currentModel = (0, _gridRowGroupingSelector.gridRowGroupingModelSelector)(apiRef);\n\n    if (currentModel !== model) {\n      apiRef.current.setState((0, _gridRowGroupingUtils.mergeStateWithRowGroupingModel)(model));\n      (0, _gridRowGroupingUtils.setStrategyAvailability)(apiRef, props.disableRowGrouping);\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, props.disableRowGrouping]);\n  const addRowGroupingCriteria = React.useCallback((field, groupingIndex) => {\n    const currentModel = (0, _gridRowGroupingSelector.gridRowGroupingModelSelector)(apiRef);\n\n    if (currentModel.includes(field)) {\n      return;\n    }\n\n    const cleanGroupingIndex = groupingIndex ?? currentModel.length;\n    const updatedModel = [...currentModel.slice(0, cleanGroupingIndex), field, ...currentModel.slice(cleanGroupingIndex)];\n    apiRef.current.setRowGroupingModel(updatedModel);\n  }, [apiRef]);\n  const removeRowGroupingCriteria = React.useCallback(field => {\n    const currentModel = (0, _gridRowGroupingSelector.gridRowGroupingModelSelector)(apiRef);\n\n    if (!currentModel.includes(field)) {\n      return;\n    }\n\n    apiRef.current.setRowGroupingModel(currentModel.filter(el => el !== field));\n  }, [apiRef]);\n  const setRowGroupingCriteriaIndex = React.useCallback((field, targetIndex) => {\n    const currentModel = (0, _gridRowGroupingSelector.gridRowGroupingModelSelector)(apiRef);\n    const currentTargetIndex = currentModel.indexOf(field);\n\n    if (currentTargetIndex === -1) {\n      return;\n    }\n\n    const updatedModel = [...currentModel];\n    updatedModel.splice(targetIndex, 0, updatedModel.splice(currentTargetIndex, 1)[0]);\n    apiRef.current.setRowGroupingModel(updatedModel);\n  }, [apiRef]);\n  const rowGroupingApi = {\n    setRowGroupingModel,\n    addRowGroupingCriteria,\n    removeRowGroupingCriteria,\n    setRowGroupingCriteriaIndex\n  };\n  (0, _xDataGridPro.useGridApiMethod)(apiRef, rowGroupingApi, 'public');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const addColumnMenuButtons = React.useCallback((columnMenuItems, colDef) => {\n    if (props.disableRowGrouping) {\n      return columnMenuItems;\n    }\n\n    if ((0, _gridRowGroupingUtils.isGroupingColumn)(colDef.field) || colDef.groupable) {\n      return [...columnMenuItems, 'columnMenuGroupingItem'];\n    }\n\n    return columnMenuItems;\n  }, [props.disableRowGrouping]);\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    const rowGroupingModelToExport = (0, _gridRowGroupingSelector.gridRowGroupingModelSelector)(apiRef);\n    const shouldExportRowGroupingModel = // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels || // Always export if the model is controlled\n    props.rowGroupingModel != null || // Always export if the model has been initialized\n    props.initialState?.rowGrouping?.model != null || // Export if the model is not empty\n    Object.keys(rowGroupingModelToExport).length > 0;\n\n    if (!shouldExportRowGroupingModel) {\n      return prevState;\n    }\n\n    return (0, _extends2.default)({}, prevState, {\n      rowGrouping: {\n        model: rowGroupingModelToExport\n      }\n    });\n  }, [apiRef, props.rowGroupingModel, props.initialState?.rowGrouping?.model]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    if (props.disableRowGrouping) {\n      return params;\n    }\n\n    const rowGroupingModel = context.stateToRestore.rowGrouping?.model;\n\n    if (rowGroupingModel != null) {\n      apiRef.current.setState((0, _gridRowGroupingUtils.mergeStateWithRowGroupingModel)(rowGroupingModel));\n    }\n\n    return params;\n  }, [apiRef, props.disableRowGrouping]);\n  (0, _internals.useGridRegisterPipeProcessor)(apiRef, 'columnMenu', addColumnMenuButtons);\n  (0, _internals.useGridRegisterPipeProcessor)(apiRef, 'exportState', stateExportPreProcessing);\n  (0, _internals.useGridRegisterPipeProcessor)(apiRef, 'restoreState', stateRestorePreProcessing);\n  /**\n   * EVENTS\n   */\n\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    const cellParams = apiRef.current.getCellParams(params.id, params.field);\n\n    if ((0, _gridRowGroupingUtils.isGroupingColumn)(cellParams.field) && event.key === ' ' && !event.shiftKey) {\n      event.stopPropagation();\n      event.preventDefault();\n\n      if (params.rowNode.type !== 'group') {\n        return;\n      }\n\n      const isOnGroupingCell = props.rowGroupingColumnMode === 'single' || (0, _gridRowGroupingUtils.getRowGroupingFieldFromGroupingCriteria)(params.rowNode.groupingField) === params.field;\n\n      if (!isOnGroupingCell) {\n        return;\n      }\n\n      apiRef.current.setRowChildrenExpansion(params.id, !params.rowNode.childrenExpanded);\n    }\n  }, [apiRef, props.rowGroupingColumnMode]);\n  const checkGroupingColumnsModelDiff = React.useCallback(() => {\n    const sanitizedRowGroupingModel = (0, _gridRowGroupingSelector.gridRowGroupingSanitizedModelSelector)(apiRef);\n    const rulesOnLastRowTreeCreation = apiRef.current.caches.rowGrouping.rulesOnLastRowTreeCreation || [];\n    const groupingRules = (0, _gridRowGroupingUtils.getGroupingRules)({\n      sanitizedRowGroupingModel,\n      columnsLookup: (0, _xDataGridPro.gridColumnLookupSelector)(apiRef)\n    });\n\n    if (!(0, _gridRowGroupingUtils.areGroupingRulesEqual)(rulesOnLastRowTreeCreation, groupingRules)) {\n      apiRef.current.caches.rowGrouping.rulesOnLastRowTreeCreation = groupingRules;\n      apiRef.current.requestPipeProcessorsApplication('hydrateColumns');\n      (0, _gridRowGroupingUtils.setStrategyAvailability)(apiRef, props.disableRowGrouping); // Refresh the row tree creation strategy processing\n      // TODO: Add a clean way to re-run a strategy processing without publishing a private event\n\n      if (apiRef.current.getActiveStrategy('rowTree') === _gridRowGroupingUtils.ROW_GROUPING_STRATEGY) {\n        apiRef.current.publishEvent('activeStrategyProcessorChange', 'rowTreeCreation');\n      }\n    }\n  }, [apiRef, props.disableRowGrouping]);\n  (0, _xDataGridPro.useGridApiEventHandler)(apiRef, 'cellKeyDown', handleCellKeyDown);\n  (0, _xDataGridPro.useGridApiEventHandler)(apiRef, 'columnsChange', checkGroupingColumnsModelDiff);\n  (0, _xDataGridPro.useGridApiEventHandler)(apiRef, 'rowGroupingModelChange', checkGroupingColumnsModelDiff);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (props.rowGroupingModel !== undefined) {\n      apiRef.current.setRowGroupingModel(props.rowGroupingModel);\n    }\n  }, [apiRef, props.rowGroupingModel]);\n};\n\nexports.useGridRowGrouping = useGridRowGrouping;","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","useGridRowGrouping","rowGroupingStateInitializer","_extends2","React","_interopRequireWildcard","_xDataGridPro","_internals","_gridRowGroupingSelector","_gridRowGroupingUtils","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","state","props","apiRef","current","caches","rowGrouping","rulesOnLastRowTreeCreation","model","rowGroupingModel","initialState","registerControlState","stateId","propModel","propOnChange","onRowGroupingModelChange","stateSelector","gridRowGroupingModelSelector","changeEvent","setRowGroupingModel","useCallback","currentModel","setState","mergeStateWithRowGroupingModel","setStrategyAvailability","disableRowGrouping","forceUpdate","addRowGroupingCriteria","field","groupingIndex","includes","cleanGroupingIndex","length","updatedModel","slice","removeRowGroupingCriteria","filter","el","setRowGroupingCriteriaIndex","targetIndex","currentTargetIndex","indexOf","splice","rowGroupingApi","useGridApiMethod","addColumnMenuButtons","columnMenuItems","colDef","isGroupingColumn","groupable","stateExportPreProcessing","prevState","context","rowGroupingModelToExport","shouldExportRowGroupingModel","exportOnlyDirtyModels","keys","stateRestorePreProcessing","params","stateToRestore","useGridRegisterPipeProcessor","handleCellKeyDown","event","cellParams","getCellParams","id","key","shiftKey","stopPropagation","preventDefault","rowNode","type","isOnGroupingCell","rowGroupingColumnMode","getRowGroupingFieldFromGroupingCriteria","groupingField","setRowChildrenExpansion","childrenExpanded","checkGroupingColumnsModelDiff","sanitizedRowGroupingModel","gridRowGroupingSanitizedModelSelector","groupingRules","getGroupingRules","columnsLookup","gridColumnLookupSelector","areGroupingRulesEqual","requestPipeProcessorsApplication","getActiveStrategy","ROW_GROUPING_STRATEGY","publishEvent","useGridApiEventHandler","useEffect","undefined"],"sources":["C:/Users/kb/node_modules/@mui/x-data-grid-premium/hooks/features/rowGrouping/useGridRowGrouping.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridRowGrouping = exports.rowGroupingStateInitializer = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _xDataGridPro = require(\"@mui/x-data-grid-pro\");\nvar _internals = require(\"@mui/x-data-grid-pro/internals\");\nvar _gridRowGroupingSelector = require(\"./gridRowGroupingSelector\");\nvar _gridRowGroupingUtils = require(\"./gridRowGroupingUtils\");\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\nconst rowGroupingStateInitializer = (state, props, apiRef) => {\n  apiRef.current.caches.rowGrouping = {\n    rulesOnLastRowTreeCreation: []\n  };\n  return (0, _extends2.default)({}, state, {\n    rowGrouping: {\n      model: props.rowGroupingModel ?? props.initialState?.rowGrouping?.model ?? []\n    }\n  });\n};\n\n/**\n * @requires useGridColumns (state, method) - can be after, async only\n * @requires useGridRows (state, method) - can be after, async only\n * @requires useGridParamsApi (method) - can be after, async only\n */\nexports.rowGroupingStateInitializer = rowGroupingStateInitializer;\nconst useGridRowGrouping = (apiRef, props) => {\n  apiRef.current.registerControlState({\n    stateId: 'rowGrouping',\n    propModel: props.rowGroupingModel,\n    propOnChange: props.onRowGroupingModelChange,\n    stateSelector: _gridRowGroupingSelector.gridRowGroupingModelSelector,\n    changeEvent: 'rowGroupingModelChange'\n  });\n\n  /**\n   * API METHODS\n   */\n  const setRowGroupingModel = React.useCallback(model => {\n    const currentModel = (0, _gridRowGroupingSelector.gridRowGroupingModelSelector)(apiRef);\n    if (currentModel !== model) {\n      apiRef.current.setState((0, _gridRowGroupingUtils.mergeStateWithRowGroupingModel)(model));\n      (0, _gridRowGroupingUtils.setStrategyAvailability)(apiRef, props.disableRowGrouping);\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, props.disableRowGrouping]);\n  const addRowGroupingCriteria = React.useCallback((field, groupingIndex) => {\n    const currentModel = (0, _gridRowGroupingSelector.gridRowGroupingModelSelector)(apiRef);\n    if (currentModel.includes(field)) {\n      return;\n    }\n    const cleanGroupingIndex = groupingIndex ?? currentModel.length;\n    const updatedModel = [...currentModel.slice(0, cleanGroupingIndex), field, ...currentModel.slice(cleanGroupingIndex)];\n    apiRef.current.setRowGroupingModel(updatedModel);\n  }, [apiRef]);\n  const removeRowGroupingCriteria = React.useCallback(field => {\n    const currentModel = (0, _gridRowGroupingSelector.gridRowGroupingModelSelector)(apiRef);\n    if (!currentModel.includes(field)) {\n      return;\n    }\n    apiRef.current.setRowGroupingModel(currentModel.filter(el => el !== field));\n  }, [apiRef]);\n  const setRowGroupingCriteriaIndex = React.useCallback((field, targetIndex) => {\n    const currentModel = (0, _gridRowGroupingSelector.gridRowGroupingModelSelector)(apiRef);\n    const currentTargetIndex = currentModel.indexOf(field);\n    if (currentTargetIndex === -1) {\n      return;\n    }\n    const updatedModel = [...currentModel];\n    updatedModel.splice(targetIndex, 0, updatedModel.splice(currentTargetIndex, 1)[0]);\n    apiRef.current.setRowGroupingModel(updatedModel);\n  }, [apiRef]);\n  const rowGroupingApi = {\n    setRowGroupingModel,\n    addRowGroupingCriteria,\n    removeRowGroupingCriteria,\n    setRowGroupingCriteriaIndex\n  };\n  (0, _xDataGridPro.useGridApiMethod)(apiRef, rowGroupingApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const addColumnMenuButtons = React.useCallback((columnMenuItems, colDef) => {\n    if (props.disableRowGrouping) {\n      return columnMenuItems;\n    }\n    if ((0, _gridRowGroupingUtils.isGroupingColumn)(colDef.field) || colDef.groupable) {\n      return [...columnMenuItems, 'columnMenuGroupingItem'];\n    }\n    return columnMenuItems;\n  }, [props.disableRowGrouping]);\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    const rowGroupingModelToExport = (0, _gridRowGroupingSelector.gridRowGroupingModelSelector)(apiRef);\n    const shouldExportRowGroupingModel =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the model is controlled\n    props.rowGroupingModel != null ||\n    // Always export if the model has been initialized\n    props.initialState?.rowGrouping?.model != null ||\n    // Export if the model is not empty\n    Object.keys(rowGroupingModelToExport).length > 0;\n    if (!shouldExportRowGroupingModel) {\n      return prevState;\n    }\n    return (0, _extends2.default)({}, prevState, {\n      rowGrouping: {\n        model: rowGroupingModelToExport\n      }\n    });\n  }, [apiRef, props.rowGroupingModel, props.initialState?.rowGrouping?.model]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    if (props.disableRowGrouping) {\n      return params;\n    }\n    const rowGroupingModel = context.stateToRestore.rowGrouping?.model;\n    if (rowGroupingModel != null) {\n      apiRef.current.setState((0, _gridRowGroupingUtils.mergeStateWithRowGroupingModel)(rowGroupingModel));\n    }\n    return params;\n  }, [apiRef, props.disableRowGrouping]);\n  (0, _internals.useGridRegisterPipeProcessor)(apiRef, 'columnMenu', addColumnMenuButtons);\n  (0, _internals.useGridRegisterPipeProcessor)(apiRef, 'exportState', stateExportPreProcessing);\n  (0, _internals.useGridRegisterPipeProcessor)(apiRef, 'restoreState', stateRestorePreProcessing);\n\n  /**\n   * EVENTS\n   */\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    const cellParams = apiRef.current.getCellParams(params.id, params.field);\n    if ((0, _gridRowGroupingUtils.isGroupingColumn)(cellParams.field) && event.key === ' ' && !event.shiftKey) {\n      event.stopPropagation();\n      event.preventDefault();\n      if (params.rowNode.type !== 'group') {\n        return;\n      }\n      const isOnGroupingCell = props.rowGroupingColumnMode === 'single' || (0, _gridRowGroupingUtils.getRowGroupingFieldFromGroupingCriteria)(params.rowNode.groupingField) === params.field;\n      if (!isOnGroupingCell) {\n        return;\n      }\n      apiRef.current.setRowChildrenExpansion(params.id, !params.rowNode.childrenExpanded);\n    }\n  }, [apiRef, props.rowGroupingColumnMode]);\n  const checkGroupingColumnsModelDiff = React.useCallback(() => {\n    const sanitizedRowGroupingModel = (0, _gridRowGroupingSelector.gridRowGroupingSanitizedModelSelector)(apiRef);\n    const rulesOnLastRowTreeCreation = apiRef.current.caches.rowGrouping.rulesOnLastRowTreeCreation || [];\n    const groupingRules = (0, _gridRowGroupingUtils.getGroupingRules)({\n      sanitizedRowGroupingModel,\n      columnsLookup: (0, _xDataGridPro.gridColumnLookupSelector)(apiRef)\n    });\n    if (!(0, _gridRowGroupingUtils.areGroupingRulesEqual)(rulesOnLastRowTreeCreation, groupingRules)) {\n      apiRef.current.caches.rowGrouping.rulesOnLastRowTreeCreation = groupingRules;\n      apiRef.current.requestPipeProcessorsApplication('hydrateColumns');\n      (0, _gridRowGroupingUtils.setStrategyAvailability)(apiRef, props.disableRowGrouping);\n\n      // Refresh the row tree creation strategy processing\n      // TODO: Add a clean way to re-run a strategy processing without publishing a private event\n      if (apiRef.current.getActiveStrategy('rowTree') === _gridRowGroupingUtils.ROW_GROUPING_STRATEGY) {\n        apiRef.current.publishEvent('activeStrategyProcessorChange', 'rowTreeCreation');\n      }\n    }\n  }, [apiRef, props.disableRowGrouping]);\n  (0, _xDataGridPro.useGridApiEventHandler)(apiRef, 'cellKeyDown', handleCellKeyDown);\n  (0, _xDataGridPro.useGridApiEventHandler)(apiRef, 'columnsChange', checkGroupingColumnsModelDiff);\n  (0, _xDataGridPro.useGridApiEventHandler)(apiRef, 'rowGroupingModelChange', checkGroupingColumnsModelDiff);\n\n  /**\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    if (props.rowGroupingModel !== undefined) {\n      apiRef.current.setRowGroupingModel(props.rowGroupingModel);\n    }\n  }, [apiRef, props.rowGroupingModel]);\n};\nexports.useGridRowGrouping = useGridRowGrouping;"],"mappings":"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"},"metadata":{},"sourceType":"script"}