{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridRowGroupingPreProcessors = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _xDataGridPro = require(\"@mui/x-data-grid-pro\");\n\nvar _internals = require(\"@mui/x-data-grid-pro/internals\");\n\nvar _gridRowGroupingSelector = require(\"./gridRowGroupingSelector\");\n\nvar _createGroupingColDef = require(\"./createGroupingColDef\");\n\nvar _gridRowGroupingUtils = require(\"./gridRowGroupingUtils\");\n\nfunction _getRequireWildcardCache(e) {\n  if (\"function\" != typeof WeakMap) return null;\n  var r = new WeakMap(),\n      t = new WeakMap();\n  return (_getRequireWildcardCache = function (e) {\n    return e ? t : r;\n  })(e);\n}\n\nfunction _interopRequireWildcard(e, r) {\n  if (!r && e && e.__esModule) return e;\n  if (null === e || \"object\" != typeof e && \"function\" != typeof e) return {\n    default: e\n  };\n\n  var t = _getRequireWildcardCache(r);\n\n  if (t && t.has(e)) return t.get(e);\n  var n = {\n    __proto__: null\n  },\n      a = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) {\n    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;\n    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];\n  }\n\n  return n.default = e, t && t.set(e, n), n;\n}\n\nconst useGridRowGroupingPreProcessors = (apiRef, props) => {\n  const getGroupingColDefs = React.useCallback(columnsState => {\n    if (props.disableRowGrouping) {\n      return [];\n    }\n\n    const groupingColDefProp = props.groupingColDef; // We can't use `gridGroupingRowsSanitizedModelSelector` here because the new columns are not in the state yet\n\n    const rowGroupingModel = (0, _gridRowGroupingSelector.gridRowGroupingModelSelector)(apiRef).filter(field => !!columnsState.lookup[field]);\n\n    if (rowGroupingModel.length === 0) {\n      return [];\n    }\n\n    switch (props.rowGroupingColumnMode) {\n      case 'single':\n        {\n          return [(0, _createGroupingColDef.createGroupingColDefForAllGroupingCriteria)({\n            apiRef,\n            rowGroupingModel,\n            colDefOverride: (0, _gridRowGroupingUtils.getColDefOverrides)(groupingColDefProp, rowGroupingModel),\n            columnsLookup: columnsState.lookup\n          })];\n        }\n\n      case 'multiple':\n        {\n          return rowGroupingModel.map(groupingCriteria => (0, _createGroupingColDef.createGroupingColDefForOneGroupingCriteria)({\n            groupingCriteria,\n            colDefOverride: (0, _gridRowGroupingUtils.getColDefOverrides)(groupingColDefProp, [groupingCriteria]),\n            groupedByColDef: columnsState.lookup[groupingCriteria],\n            columnsLookup: columnsState.lookup\n          }));\n        }\n\n      default:\n        {\n          return [];\n        }\n    }\n  }, [apiRef, props.groupingColDef, props.rowGroupingColumnMode, props.disableRowGrouping]);\n  const updateGroupingColumn = React.useCallback(columnsState => {\n    const groupingColDefs = getGroupingColDefs(columnsState);\n    let newColumnFields = [];\n    const newColumnsLookup = {}; // We only keep the non-grouping columns\n\n    columnsState.orderedFields.forEach(field => {\n      if (!(0, _gridRowGroupingUtils.isGroupingColumn)(field)) {\n        newColumnFields.push(field);\n        newColumnsLookup[field] = columnsState.lookup[field];\n      }\n    }); // We add the grouping column\n\n    groupingColDefs.forEach(groupingColDef => {\n      const matchingGroupingColDef = columnsState.lookup[groupingColDef.field];\n\n      if (matchingGroupingColDef) {\n        groupingColDef.width = matchingGroupingColDef.width;\n        groupingColDef.flex = matchingGroupingColDef.flex;\n      }\n\n      newColumnsLookup[groupingColDef.field] = groupingColDef;\n    });\n    const startIndex = newColumnFields[0] === _xDataGridPro.GRID_CHECKBOX_SELECTION_FIELD ? 1 : 0;\n    newColumnFields = [...newColumnFields.slice(0, startIndex), ...groupingColDefs.map(colDef => colDef.field), ...newColumnFields.slice(startIndex)];\n    columnsState.orderedFields = newColumnFields;\n    columnsState.lookup = newColumnsLookup;\n    return columnsState;\n  }, [getGroupingColDefs]);\n  const createRowTreeForRowGrouping = React.useCallback(params => {\n    const sanitizedRowGroupingModel = (0, _gridRowGroupingSelector.gridRowGroupingSanitizedModelSelector)(apiRef);\n    const columnsLookup = (0, _xDataGridPro.gridColumnLookupSelector)(apiRef);\n    const groupingRules = (0, _gridRowGroupingUtils.getGroupingRules)({\n      sanitizedRowGroupingModel,\n      columnsLookup\n    });\n    apiRef.current.caches.rowGrouping.rulesOnLastRowTreeCreation = groupingRules;\n\n    const getRowTreeBuilderNode = rowId => {\n      const row = params.dataRowIdToModelLookup[rowId];\n      const parentPath = groupingRules.map(groupingRule => (0, _gridRowGroupingUtils.getCellGroupingCriteria)({\n        row,\n        groupingRule,\n        colDef: columnsLookup[groupingRule.field],\n        apiRef\n      })).filter(cell => cell.key != null);\n      const leafGroupingCriteria = {\n        key: rowId.toString(),\n        field: null\n      };\n      return {\n        path: [...parentPath, leafGroupingCriteria],\n        id: rowId\n      };\n    };\n\n    if (params.updates.type === 'full') {\n      return (0, _internals.createRowTree)({\n        previousTree: params.previousTree,\n        nodes: params.updates.rows.map(getRowTreeBuilderNode),\n        defaultGroupingExpansionDepth: props.defaultGroupingExpansionDepth,\n        isGroupExpandedByDefault: props.isGroupExpandedByDefault,\n        groupingName: _gridRowGroupingUtils.ROW_GROUPING_STRATEGY\n      });\n    }\n\n    return (0, _internals.updateRowTree)({\n      nodes: {\n        inserted: params.updates.actions.insert.map(getRowTreeBuilderNode),\n        modified: params.updates.actions.modify.map(getRowTreeBuilderNode),\n        removed: params.updates.actions.remove\n      },\n      previousTree: params.previousTree,\n      previousTreeDepth: params.previousTreeDepths,\n      defaultGroupingExpansionDepth: props.defaultGroupingExpansionDepth,\n      isGroupExpandedByDefault: props.isGroupExpandedByDefault,\n      groupingName: _gridRowGroupingUtils.ROW_GROUPING_STRATEGY\n    });\n  }, [apiRef, props.defaultGroupingExpansionDepth, props.isGroupExpandedByDefault]);\n  const filterRows = React.useCallback(params => {\n    const rowTree = (0, _xDataGridPro.gridRowTreeSelector)(apiRef);\n    return (0, _gridRowGroupingUtils.filterRowTreeFromGroupingColumns)({\n      rowTree,\n      isRowMatchingFilters: params.isRowMatchingFilters,\n      filterModel: params.filterModel,\n      apiRef\n    });\n  }, [apiRef]);\n  const sortRows = React.useCallback(params => {\n    const rowTree = (0, _xDataGridPro.gridRowTreeSelector)(apiRef);\n    return (0, _internals.sortRowTree)({\n      rowTree,\n      sortRowList: params.sortRowList,\n      disableChildrenSorting: false,\n      shouldRenderGroupBelowLeaves: true\n    });\n  }, [apiRef]);\n  (0, _internals.useGridRegisterPipeProcessor)(apiRef, 'hydrateColumns', updateGroupingColumn);\n  (0, _internals.useGridRegisterStrategyProcessor)(apiRef, _gridRowGroupingUtils.ROW_GROUPING_STRATEGY, 'rowTreeCreation', createRowTreeForRowGrouping);\n  (0, _internals.useGridRegisterStrategyProcessor)(apiRef, _gridRowGroupingUtils.ROW_GROUPING_STRATEGY, 'filtering', filterRows);\n  (0, _internals.useGridRegisterStrategyProcessor)(apiRef, _gridRowGroupingUtils.ROW_GROUPING_STRATEGY, 'sorting', sortRows);\n  (0, _internals.useGridRegisterStrategyProcessor)(apiRef, _gridRowGroupingUtils.ROW_GROUPING_STRATEGY, 'visibleRowsLookupCreation', _internals.getVisibleRowsLookup);\n  /**\n   * 1ST RENDER\n   */\n\n  (0, _xDataGridPro.useFirstRender)(() => {\n    (0, _gridRowGroupingUtils.setStrategyAvailability)(apiRef, props.disableRowGrouping);\n  });\n  /**\n   * EFFECTS\n   */\n\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (!isFirstRender.current) {\n      (0, _gridRowGroupingUtils.setStrategyAvailability)(apiRef, props.disableRowGrouping);\n    } else {\n      isFirstRender.current = false;\n    }\n  }, [apiRef, props.disableRowGrouping]);\n};\n\nexports.useGridRowGroupingPreProcessors = useGridRowGroupingPreProcessors;","map":{"version":3,"names":["Object","defineProperty","exports","value","useGridRowGroupingPreProcessors","React","_interopRequireWildcard","require","_xDataGridPro","_internals","_gridRowGroupingSelector","_createGroupingColDef","_gridRowGroupingUtils","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","apiRef","props","getGroupingColDefs","useCallback","columnsState","disableRowGrouping","groupingColDefProp","groupingColDef","rowGroupingModel","gridRowGroupingModelSelector","filter","field","lookup","length","rowGroupingColumnMode","createGroupingColDefForAllGroupingCriteria","colDefOverride","getColDefOverrides","columnsLookup","map","groupingCriteria","createGroupingColDefForOneGroupingCriteria","groupedByColDef","updateGroupingColumn","groupingColDefs","newColumnFields","newColumnsLookup","orderedFields","forEach","isGroupingColumn","push","matchingGroupingColDef","width","flex","startIndex","GRID_CHECKBOX_SELECTION_FIELD","slice","colDef","createRowTreeForRowGrouping","params","sanitizedRowGroupingModel","gridRowGroupingSanitizedModelSelector","gridColumnLookupSelector","groupingRules","getGroupingRules","current","caches","rowGrouping","rulesOnLastRowTreeCreation","getRowTreeBuilderNode","rowId","row","dataRowIdToModelLookup","parentPath","groupingRule","getCellGroupingCriteria","cell","key","leafGroupingCriteria","toString","path","id","updates","type","createRowTree","previousTree","nodes","rows","defaultGroupingExpansionDepth","isGroupExpandedByDefault","groupingName","ROW_GROUPING_STRATEGY","updateRowTree","inserted","actions","insert","modified","modify","removed","remove","previousTreeDepth","previousTreeDepths","filterRows","rowTree","gridRowTreeSelector","filterRowTreeFromGroupingColumns","isRowMatchingFilters","filterModel","sortRows","sortRowTree","sortRowList","disableChildrenSorting","shouldRenderGroupBelowLeaves","useGridRegisterPipeProcessor","useGridRegisterStrategyProcessor","getVisibleRowsLookup","useFirstRender","setStrategyAvailability","isFirstRender","useRef","useEffect"],"sources":["C:/Users/kb/node_modules/@mui/x-data-grid-premium/hooks/features/rowGrouping/useGridRowGroupingPreProcessors.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridRowGroupingPreProcessors = void 0;\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _xDataGridPro = require(\"@mui/x-data-grid-pro\");\nvar _internals = require(\"@mui/x-data-grid-pro/internals\");\nvar _gridRowGroupingSelector = require(\"./gridRowGroupingSelector\");\nvar _createGroupingColDef = require(\"./createGroupingColDef\");\nvar _gridRowGroupingUtils = require(\"./gridRowGroupingUtils\");\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\nconst useGridRowGroupingPreProcessors = (apiRef, props) => {\n  const getGroupingColDefs = React.useCallback(columnsState => {\n    if (props.disableRowGrouping) {\n      return [];\n    }\n    const groupingColDefProp = props.groupingColDef;\n\n    // We can't use `gridGroupingRowsSanitizedModelSelector` here because the new columns are not in the state yet\n    const rowGroupingModel = (0, _gridRowGroupingSelector.gridRowGroupingModelSelector)(apiRef).filter(field => !!columnsState.lookup[field]);\n    if (rowGroupingModel.length === 0) {\n      return [];\n    }\n    switch (props.rowGroupingColumnMode) {\n      case 'single':\n        {\n          return [(0, _createGroupingColDef.createGroupingColDefForAllGroupingCriteria)({\n            apiRef,\n            rowGroupingModel,\n            colDefOverride: (0, _gridRowGroupingUtils.getColDefOverrides)(groupingColDefProp, rowGroupingModel),\n            columnsLookup: columnsState.lookup\n          })];\n        }\n      case 'multiple':\n        {\n          return rowGroupingModel.map(groupingCriteria => (0, _createGroupingColDef.createGroupingColDefForOneGroupingCriteria)({\n            groupingCriteria,\n            colDefOverride: (0, _gridRowGroupingUtils.getColDefOverrides)(groupingColDefProp, [groupingCriteria]),\n            groupedByColDef: columnsState.lookup[groupingCriteria],\n            columnsLookup: columnsState.lookup\n          }));\n        }\n      default:\n        {\n          return [];\n        }\n    }\n  }, [apiRef, props.groupingColDef, props.rowGroupingColumnMode, props.disableRowGrouping]);\n  const updateGroupingColumn = React.useCallback(columnsState => {\n    const groupingColDefs = getGroupingColDefs(columnsState);\n    let newColumnFields = [];\n    const newColumnsLookup = {};\n\n    // We only keep the non-grouping columns\n    columnsState.orderedFields.forEach(field => {\n      if (!(0, _gridRowGroupingUtils.isGroupingColumn)(field)) {\n        newColumnFields.push(field);\n        newColumnsLookup[field] = columnsState.lookup[field];\n      }\n    });\n\n    // We add the grouping column\n    groupingColDefs.forEach(groupingColDef => {\n      const matchingGroupingColDef = columnsState.lookup[groupingColDef.field];\n      if (matchingGroupingColDef) {\n        groupingColDef.width = matchingGroupingColDef.width;\n        groupingColDef.flex = matchingGroupingColDef.flex;\n      }\n      newColumnsLookup[groupingColDef.field] = groupingColDef;\n    });\n    const startIndex = newColumnFields[0] === _xDataGridPro.GRID_CHECKBOX_SELECTION_FIELD ? 1 : 0;\n    newColumnFields = [...newColumnFields.slice(0, startIndex), ...groupingColDefs.map(colDef => colDef.field), ...newColumnFields.slice(startIndex)];\n    columnsState.orderedFields = newColumnFields;\n    columnsState.lookup = newColumnsLookup;\n    return columnsState;\n  }, [getGroupingColDefs]);\n  const createRowTreeForRowGrouping = React.useCallback(params => {\n    const sanitizedRowGroupingModel = (0, _gridRowGroupingSelector.gridRowGroupingSanitizedModelSelector)(apiRef);\n    const columnsLookup = (0, _xDataGridPro.gridColumnLookupSelector)(apiRef);\n    const groupingRules = (0, _gridRowGroupingUtils.getGroupingRules)({\n      sanitizedRowGroupingModel,\n      columnsLookup\n    });\n    apiRef.current.caches.rowGrouping.rulesOnLastRowTreeCreation = groupingRules;\n    const getRowTreeBuilderNode = rowId => {\n      const row = params.dataRowIdToModelLookup[rowId];\n      const parentPath = groupingRules.map(groupingRule => (0, _gridRowGroupingUtils.getCellGroupingCriteria)({\n        row,\n        groupingRule,\n        colDef: columnsLookup[groupingRule.field],\n        apiRef\n      })).filter(cell => cell.key != null);\n      const leafGroupingCriteria = {\n        key: rowId.toString(),\n        field: null\n      };\n      return {\n        path: [...parentPath, leafGroupingCriteria],\n        id: rowId\n      };\n    };\n    if (params.updates.type === 'full') {\n      return (0, _internals.createRowTree)({\n        previousTree: params.previousTree,\n        nodes: params.updates.rows.map(getRowTreeBuilderNode),\n        defaultGroupingExpansionDepth: props.defaultGroupingExpansionDepth,\n        isGroupExpandedByDefault: props.isGroupExpandedByDefault,\n        groupingName: _gridRowGroupingUtils.ROW_GROUPING_STRATEGY\n      });\n    }\n    return (0, _internals.updateRowTree)({\n      nodes: {\n        inserted: params.updates.actions.insert.map(getRowTreeBuilderNode),\n        modified: params.updates.actions.modify.map(getRowTreeBuilderNode),\n        removed: params.updates.actions.remove\n      },\n      previousTree: params.previousTree,\n      previousTreeDepth: params.previousTreeDepths,\n      defaultGroupingExpansionDepth: props.defaultGroupingExpansionDepth,\n      isGroupExpandedByDefault: props.isGroupExpandedByDefault,\n      groupingName: _gridRowGroupingUtils.ROW_GROUPING_STRATEGY\n    });\n  }, [apiRef, props.defaultGroupingExpansionDepth, props.isGroupExpandedByDefault]);\n  const filterRows = React.useCallback(params => {\n    const rowTree = (0, _xDataGridPro.gridRowTreeSelector)(apiRef);\n    return (0, _gridRowGroupingUtils.filterRowTreeFromGroupingColumns)({\n      rowTree,\n      isRowMatchingFilters: params.isRowMatchingFilters,\n      filterModel: params.filterModel,\n      apiRef\n    });\n  }, [apiRef]);\n  const sortRows = React.useCallback(params => {\n    const rowTree = (0, _xDataGridPro.gridRowTreeSelector)(apiRef);\n    return (0, _internals.sortRowTree)({\n      rowTree,\n      sortRowList: params.sortRowList,\n      disableChildrenSorting: false,\n      shouldRenderGroupBelowLeaves: true\n    });\n  }, [apiRef]);\n  (0, _internals.useGridRegisterPipeProcessor)(apiRef, 'hydrateColumns', updateGroupingColumn);\n  (0, _internals.useGridRegisterStrategyProcessor)(apiRef, _gridRowGroupingUtils.ROW_GROUPING_STRATEGY, 'rowTreeCreation', createRowTreeForRowGrouping);\n  (0, _internals.useGridRegisterStrategyProcessor)(apiRef, _gridRowGroupingUtils.ROW_GROUPING_STRATEGY, 'filtering', filterRows);\n  (0, _internals.useGridRegisterStrategyProcessor)(apiRef, _gridRowGroupingUtils.ROW_GROUPING_STRATEGY, 'sorting', sortRows);\n  (0, _internals.useGridRegisterStrategyProcessor)(apiRef, _gridRowGroupingUtils.ROW_GROUPING_STRATEGY, 'visibleRowsLookupCreation', _internals.getVisibleRowsLookup);\n\n  /**\n   * 1ST RENDER\n   */\n  (0, _xDataGridPro.useFirstRender)(() => {\n    (0, _gridRowGroupingUtils.setStrategyAvailability)(apiRef, props.disableRowGrouping);\n  });\n\n  /**\n   * EFFECTS\n   */\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (!isFirstRender.current) {\n      (0, _gridRowGroupingUtils.setStrategyAvailability)(apiRef, props.disableRowGrouping);\n    } else {\n      isFirstRender.current = false;\n    }\n  }, [apiRef, props.disableRowGrouping]);\n};\nexports.useGridRowGroupingPreProcessors = useGridRowGroupingPreProcessors;"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,+BAAR,GAA0C,KAAK,CAA/C;;AACA,IAAIC,KAAK,GAAGC,uBAAuB,CAACC,OAAO,CAAC,OAAD,CAAR,CAAnC;;AACA,IAAIC,aAAa,GAAGD,OAAO,CAAC,sBAAD,CAA3B;;AACA,IAAIE,UAAU,GAAGF,OAAO,CAAC,gCAAD,CAAxB;;AACA,IAAIG,wBAAwB,GAAGH,OAAO,CAAC,2BAAD,CAAtC;;AACA,IAAII,qBAAqB,GAAGJ,OAAO,CAAC,wBAAD,CAAnC;;AACA,IAAIK,qBAAqB,GAAGL,OAAO,CAAC,wBAAD,CAAnC;;AACA,SAASM,wBAAT,CAAkCC,CAAlC,EAAqC;EAAE,IAAI,cAAc,OAAOC,OAAzB,EAAkC,OAAO,IAAP;EAAa,IAAIC,CAAC,GAAG,IAAID,OAAJ,EAAR;EAAA,IAAuBE,CAAC,GAAG,IAAIF,OAAJ,EAA3B;EAA0C,OAAO,CAACF,wBAAwB,GAAG,UAAUC,CAAV,EAAa;IAAE,OAAOA,CAAC,GAAGG,CAAH,GAAOD,CAAf;EAAmB,CAA9D,EAAgEF,CAAhE,CAAP;AAA4E;;AAC5M,SAASR,uBAAT,CAAiCQ,CAAjC,EAAoCE,CAApC,EAAuC;EAAE,IAAI,CAACA,CAAD,IAAMF,CAAN,IAAWA,CAAC,CAACI,UAAjB,EAA6B,OAAOJ,CAAP;EAAU,IAAI,SAASA,CAAT,IAAc,YAAY,OAAOA,CAAnB,IAAwB,cAAc,OAAOA,CAA/D,EAAkE,OAAO;IAAEK,OAAO,EAAEL;EAAX,CAAP;;EAAuB,IAAIG,CAAC,GAAGJ,wBAAwB,CAACG,CAAD,CAAhC;;EAAqC,IAAIC,CAAC,IAAIA,CAAC,CAACG,GAAF,CAAMN,CAAN,CAAT,EAAmB,OAAOG,CAAC,CAACI,GAAF,CAAMP,CAAN,CAAP;EAAiB,IAAIQ,CAAC,GAAG;IAAEC,SAAS,EAAE;EAAb,CAAR;EAAA,IAA6BC,CAAC,GAAGxB,MAAM,CAACC,cAAP,IAAyBD,MAAM,CAACyB,wBAAjE;;EAA2F,KAAK,IAAIC,CAAT,IAAcZ,CAAd,EAAiB,IAAI,cAAcY,CAAd,IAAmB,GAAGC,cAAH,CAAkBC,IAAlB,CAAuBd,CAAvB,EAA0BY,CAA1B,CAAvB,EAAqD;IAAE,IAAIG,CAAC,GAAGL,CAAC,GAAGxB,MAAM,CAACyB,wBAAP,CAAgCX,CAAhC,EAAmCY,CAAnC,CAAH,GAA2C,IAApD;IAA0DG,CAAC,KAAKA,CAAC,CAACR,GAAF,IAASQ,CAAC,CAACC,GAAhB,CAAD,GAAwB9B,MAAM,CAACC,cAAP,CAAsBqB,CAAtB,EAAyBI,CAAzB,EAA4BG,CAA5B,CAAxB,GAAyDP,CAAC,CAACI,CAAD,CAAD,GAAOZ,CAAC,CAACY,CAAD,CAAjE;EAAuE;;EAAC,OAAOJ,CAAC,CAACH,OAAF,GAAYL,CAAZ,EAAeG,CAAC,IAAIA,CAAC,CAACa,GAAF,CAAMhB,CAAN,EAASQ,CAAT,CAApB,EAAiCA,CAAxC;AAA4C;;AACnkB,MAAMlB,+BAA+B,GAAG,CAAC2B,MAAD,EAASC,KAAT,KAAmB;EACzD,MAAMC,kBAAkB,GAAG5B,KAAK,CAAC6B,WAAN,CAAkBC,YAAY,IAAI;IAC3D,IAAIH,KAAK,CAACI,kBAAV,EAA8B;MAC5B,OAAO,EAAP;IACD;;IACD,MAAMC,kBAAkB,GAAGL,KAAK,CAACM,cAAjC,CAJ2D,CAM3D;;IACA,MAAMC,gBAAgB,GAAG,CAAC,GAAG7B,wBAAwB,CAAC8B,4BAA7B,EAA2DT,MAA3D,EAAmEU,MAAnE,CAA0EC,KAAK,IAAI,CAAC,CAACP,YAAY,CAACQ,MAAb,CAAoBD,KAApB,CAArF,CAAzB;;IACA,IAAIH,gBAAgB,CAACK,MAAjB,KAA4B,CAAhC,EAAmC;MACjC,OAAO,EAAP;IACD;;IACD,QAAQZ,KAAK,CAACa,qBAAd;MACE,KAAK,QAAL;QACE;UACE,OAAO,CAAC,CAAC,GAAGlC,qBAAqB,CAACmC,0CAA1B,EAAsE;YAC5Ef,MAD4E;YAE5EQ,gBAF4E;YAG5EQ,cAAc,EAAE,CAAC,GAAGnC,qBAAqB,CAACoC,kBAA1B,EAA8CX,kBAA9C,EAAkEE,gBAAlE,CAH4D;YAI5EU,aAAa,EAAEd,YAAY,CAACQ;UAJgD,CAAtE,CAAD,CAAP;QAMD;;MACH,KAAK,UAAL;QACE;UACE,OAAOJ,gBAAgB,CAACW,GAAjB,CAAqBC,gBAAgB,IAAI,CAAC,GAAGxC,qBAAqB,CAACyC,0CAA1B,EAAsE;YACpHD,gBADoH;YAEpHJ,cAAc,EAAE,CAAC,GAAGnC,qBAAqB,CAACoC,kBAA1B,EAA8CX,kBAA9C,EAAkE,CAACc,gBAAD,CAAlE,CAFoG;YAGpHE,eAAe,EAAElB,YAAY,CAACQ,MAAb,CAAoBQ,gBAApB,CAHmG;YAIpHF,aAAa,EAAEd,YAAY,CAACQ;UAJwF,CAAtE,CAAzC,CAAP;QAMD;;MACH;QACE;UACE,OAAO,EAAP;QACD;IAtBL;EAwBD,CAnC0B,EAmCxB,CAACZ,MAAD,EAASC,KAAK,CAACM,cAAf,EAA+BN,KAAK,CAACa,qBAArC,EAA4Db,KAAK,CAACI,kBAAlE,CAnCwB,CAA3B;EAoCA,MAAMkB,oBAAoB,GAAGjD,KAAK,CAAC6B,WAAN,CAAkBC,YAAY,IAAI;IAC7D,MAAMoB,eAAe,GAAGtB,kBAAkB,CAACE,YAAD,CAA1C;IACA,IAAIqB,eAAe,GAAG,EAAtB;IACA,MAAMC,gBAAgB,GAAG,EAAzB,CAH6D,CAK7D;;IACAtB,YAAY,CAACuB,aAAb,CAA2BC,OAA3B,CAAmCjB,KAAK,IAAI;MAC1C,IAAI,CAAC,CAAC,GAAG9B,qBAAqB,CAACgD,gBAA1B,EAA4ClB,KAA5C,CAAL,EAAyD;QACvDc,eAAe,CAACK,IAAhB,CAAqBnB,KAArB;QACAe,gBAAgB,CAACf,KAAD,CAAhB,GAA0BP,YAAY,CAACQ,MAAb,CAAoBD,KAApB,CAA1B;MACD;IACF,CALD,EAN6D,CAa7D;;IACAa,eAAe,CAACI,OAAhB,CAAwBrB,cAAc,IAAI;MACxC,MAAMwB,sBAAsB,GAAG3B,YAAY,CAACQ,MAAb,CAAoBL,cAAc,CAACI,KAAnC,CAA/B;;MACA,IAAIoB,sBAAJ,EAA4B;QAC1BxB,cAAc,CAACyB,KAAf,GAAuBD,sBAAsB,CAACC,KAA9C;QACAzB,cAAc,CAAC0B,IAAf,GAAsBF,sBAAsB,CAACE,IAA7C;MACD;;MACDP,gBAAgB,CAACnB,cAAc,CAACI,KAAhB,CAAhB,GAAyCJ,cAAzC;IACD,CAPD;IAQA,MAAM2B,UAAU,GAAGT,eAAe,CAAC,CAAD,CAAf,KAAuBhD,aAAa,CAAC0D,6BAArC,GAAqE,CAArE,GAAyE,CAA5F;IACAV,eAAe,GAAG,CAAC,GAAGA,eAAe,CAACW,KAAhB,CAAsB,CAAtB,EAAyBF,UAAzB,CAAJ,EAA0C,GAAGV,eAAe,CAACL,GAAhB,CAAoBkB,MAAM,IAAIA,MAAM,CAAC1B,KAArC,CAA7C,EAA0F,GAAGc,eAAe,CAACW,KAAhB,CAAsBF,UAAtB,CAA7F,CAAlB;IACA9B,YAAY,CAACuB,aAAb,GAA6BF,eAA7B;IACArB,YAAY,CAACQ,MAAb,GAAsBc,gBAAtB;IACA,OAAOtB,YAAP;EACD,CA3B4B,EA2B1B,CAACF,kBAAD,CA3B0B,CAA7B;EA4BA,MAAMoC,2BAA2B,GAAGhE,KAAK,CAAC6B,WAAN,CAAkBoC,MAAM,IAAI;IAC9D,MAAMC,yBAAyB,GAAG,CAAC,GAAG7D,wBAAwB,CAAC8D,qCAA7B,EAAoEzC,MAApE,CAAlC;IACA,MAAMkB,aAAa,GAAG,CAAC,GAAGzC,aAAa,CAACiE,wBAAlB,EAA4C1C,MAA5C,CAAtB;IACA,MAAM2C,aAAa,GAAG,CAAC,GAAG9D,qBAAqB,CAAC+D,gBAA1B,EAA4C;MAChEJ,yBADgE;MAEhEtB;IAFgE,CAA5C,CAAtB;IAIAlB,MAAM,CAAC6C,OAAP,CAAeC,MAAf,CAAsBC,WAAtB,CAAkCC,0BAAlC,GAA+DL,aAA/D;;IACA,MAAMM,qBAAqB,GAAGC,KAAK,IAAI;MACrC,MAAMC,GAAG,GAAGZ,MAAM,CAACa,sBAAP,CAA8BF,KAA9B,CAAZ;MACA,MAAMG,UAAU,GAAGV,aAAa,CAACxB,GAAd,CAAkBmC,YAAY,IAAI,CAAC,GAAGzE,qBAAqB,CAAC0E,uBAA1B,EAAmD;QACtGJ,GADsG;QAEtGG,YAFsG;QAGtGjB,MAAM,EAAEnB,aAAa,CAACoC,YAAY,CAAC3C,KAAd,CAHiF;QAItGX;MAJsG,CAAnD,CAAlC,EAKfU,MALe,CAKR8C,IAAI,IAAIA,IAAI,CAACC,GAAL,IAAY,IALZ,CAAnB;MAMA,MAAMC,oBAAoB,GAAG;QAC3BD,GAAG,EAAEP,KAAK,CAACS,QAAN,EADsB;QAE3BhD,KAAK,EAAE;MAFoB,CAA7B;MAIA,OAAO;QACLiD,IAAI,EAAE,CAAC,GAAGP,UAAJ,EAAgBK,oBAAhB,CADD;QAELG,EAAE,EAAEX;MAFC,CAAP;IAID,CAhBD;;IAiBA,IAAIX,MAAM,CAACuB,OAAP,CAAeC,IAAf,KAAwB,MAA5B,EAAoC;MAClC,OAAO,CAAC,GAAGrF,UAAU,CAACsF,aAAf,EAA8B;QACnCC,YAAY,EAAE1B,MAAM,CAAC0B,YADc;QAEnCC,KAAK,EAAE3B,MAAM,CAACuB,OAAP,CAAeK,IAAf,CAAoBhD,GAApB,CAAwB8B,qBAAxB,CAF4B;QAGnCmB,6BAA6B,EAAEnE,KAAK,CAACmE,6BAHF;QAInCC,wBAAwB,EAAEpE,KAAK,CAACoE,wBAJG;QAKnCC,YAAY,EAAEzF,qBAAqB,CAAC0F;MALD,CAA9B,CAAP;IAOD;;IACD,OAAO,CAAC,GAAG7F,UAAU,CAAC8F,aAAf,EAA8B;MACnCN,KAAK,EAAE;QACLO,QAAQ,EAAElC,MAAM,CAACuB,OAAP,CAAeY,OAAf,CAAuBC,MAAvB,CAA8BxD,GAA9B,CAAkC8B,qBAAlC,CADL;QAEL2B,QAAQ,EAAErC,MAAM,CAACuB,OAAP,CAAeY,OAAf,CAAuBG,MAAvB,CAA8B1D,GAA9B,CAAkC8B,qBAAlC,CAFL;QAGL6B,OAAO,EAAEvC,MAAM,CAACuB,OAAP,CAAeY,OAAf,CAAuBK;MAH3B,CAD4B;MAMnCd,YAAY,EAAE1B,MAAM,CAAC0B,YANc;MAOnCe,iBAAiB,EAAEzC,MAAM,CAAC0C,kBAPS;MAQnCb,6BAA6B,EAAEnE,KAAK,CAACmE,6BARF;MASnCC,wBAAwB,EAAEpE,KAAK,CAACoE,wBATG;MAUnCC,YAAY,EAAEzF,qBAAqB,CAAC0F;IAVD,CAA9B,CAAP;EAYD,CA9CmC,EA8CjC,CAACvE,MAAD,EAASC,KAAK,CAACmE,6BAAf,EAA8CnE,KAAK,CAACoE,wBAApD,CA9CiC,CAApC;EA+CA,MAAMa,UAAU,GAAG5G,KAAK,CAAC6B,WAAN,CAAkBoC,MAAM,IAAI;IAC7C,MAAM4C,OAAO,GAAG,CAAC,GAAG1G,aAAa,CAAC2G,mBAAlB,EAAuCpF,MAAvC,CAAhB;IACA,OAAO,CAAC,GAAGnB,qBAAqB,CAACwG,gCAA1B,EAA4D;MACjEF,OADiE;MAEjEG,oBAAoB,EAAE/C,MAAM,CAAC+C,oBAFoC;MAGjEC,WAAW,EAAEhD,MAAM,CAACgD,WAH6C;MAIjEvF;IAJiE,CAA5D,CAAP;EAMD,CARkB,EAQhB,CAACA,MAAD,CARgB,CAAnB;EASA,MAAMwF,QAAQ,GAAGlH,KAAK,CAAC6B,WAAN,CAAkBoC,MAAM,IAAI;IAC3C,MAAM4C,OAAO,GAAG,CAAC,GAAG1G,aAAa,CAAC2G,mBAAlB,EAAuCpF,MAAvC,CAAhB;IACA,OAAO,CAAC,GAAGtB,UAAU,CAAC+G,WAAf,EAA4B;MACjCN,OADiC;MAEjCO,WAAW,EAAEnD,MAAM,CAACmD,WAFa;MAGjCC,sBAAsB,EAAE,KAHS;MAIjCC,4BAA4B,EAAE;IAJG,CAA5B,CAAP;EAMD,CARgB,EAQd,CAAC5F,MAAD,CARc,CAAjB;EASA,CAAC,GAAGtB,UAAU,CAACmH,4BAAf,EAA6C7F,MAA7C,EAAqD,gBAArD,EAAuEuB,oBAAvE;EACA,CAAC,GAAG7C,UAAU,CAACoH,gCAAf,EAAiD9F,MAAjD,EAAyDnB,qBAAqB,CAAC0F,qBAA/E,EAAsG,iBAAtG,EAAyHjC,2BAAzH;EACA,CAAC,GAAG5D,UAAU,CAACoH,gCAAf,EAAiD9F,MAAjD,EAAyDnB,qBAAqB,CAAC0F,qBAA/E,EAAsG,WAAtG,EAAmHW,UAAnH;EACA,CAAC,GAAGxG,UAAU,CAACoH,gCAAf,EAAiD9F,MAAjD,EAAyDnB,qBAAqB,CAAC0F,qBAA/E,EAAsG,SAAtG,EAAiHiB,QAAjH;EACA,CAAC,GAAG9G,UAAU,CAACoH,gCAAf,EAAiD9F,MAAjD,EAAyDnB,qBAAqB,CAAC0F,qBAA/E,EAAsG,2BAAtG,EAAmI7F,UAAU,CAACqH,oBAA9I;EAEA;AACF;AACA;;EACE,CAAC,GAAGtH,aAAa,CAACuH,cAAlB,EAAkC,MAAM;IACtC,CAAC,GAAGnH,qBAAqB,CAACoH,uBAA1B,EAAmDjG,MAAnD,EAA2DC,KAAK,CAACI,kBAAjE;EACD,CAFD;EAIA;AACF;AACA;;EACE,MAAM6F,aAAa,GAAG5H,KAAK,CAAC6H,MAAN,CAAa,IAAb,CAAtB;EACA7H,KAAK,CAAC8H,SAAN,CAAgB,MAAM;IACpB,IAAI,CAACF,aAAa,CAACrD,OAAnB,EAA4B;MAC1B,CAAC,GAAGhE,qBAAqB,CAACoH,uBAA1B,EAAmDjG,MAAnD,EAA2DC,KAAK,CAACI,kBAAjE;IACD,CAFD,MAEO;MACL6F,aAAa,CAACrD,OAAd,GAAwB,KAAxB;IACD;EACF,CAND,EAMG,CAAC7C,MAAD,EAASC,KAAK,CAACI,kBAAf,CANH;AAOD,CA1JD;;AA2JAlC,OAAO,CAACE,+BAAR,GAA0CA,+BAA1C"},"metadata":{},"sourceType":"script"}