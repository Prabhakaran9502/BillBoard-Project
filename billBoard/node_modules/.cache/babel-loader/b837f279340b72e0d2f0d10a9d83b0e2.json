{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_ownerDocument as ownerDocument, unstable_useEventCallback as useEventcallback } from '@mui/utils';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { isNavigationKey } from '../../../utils/keyboardUtils';\nimport { gridFocusCellSelector, gridFocusColumnGroupHeaderSelector } from './gridFocusStateSelector';\nimport { gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { getVisibleRows } from '../../utils/useGridVisibleRows';\nimport { clamp } from '../../../utils/utils';\nimport { gridPinnedRowsSelector } from '../rows/gridRowsSelector';\nexport const focusStateInitializer = state => _extends({}, state, {\n  focus: {\n    cell: null,\n    columnHeader: null,\n    columnHeaderFilter: null,\n    columnGroupHeader: null\n  },\n  tabIndex: {\n    cell: null,\n    columnHeader: null,\n    columnHeaderFilter: null,\n    columnGroupHeader: null\n  }\n});\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridRows (method)\n * @requires useGridEditing (event)\n */\n\nexport const useGridFocus = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridFocus');\n  const lastClickedCell = React.useRef(null);\n  const publishCellFocusOut = React.useCallback((cell, event) => {\n    if (cell) {\n      // The row might have been deleted\n      if (apiRef.current.getRow(cell.id)) {\n        apiRef.current.publishEvent('cellFocusOut', apiRef.current.getCellParams(cell.id, cell.field), event);\n      }\n    }\n  }, [apiRef]);\n  const setCellFocus = React.useCallback((id, field) => {\n    const focusedCell = gridFocusCellSelector(apiRef);\n\n    if (focusedCell?.id === id && focusedCell?.field === field) {\n      return;\n    }\n\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on cell with id=${id} and field=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          cell: {\n            id,\n            field\n          },\n          columnHeader: null,\n          columnHeaderFilter: null,\n          columnGroupHeader: null\n        },\n        focus: {\n          cell: {\n            id,\n            field\n          },\n          columnHeader: null,\n          columnHeaderFilter: null,\n          columnGroupHeader: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate(); // The row might have been deleted\n\n    if (!apiRef.current.getRow(id)) {\n      return;\n    }\n\n    if (focusedCell) {\n      // There's a focused cell but another cell was clicked\n      // Publishes an event to notify that the focus was lost\n      publishCellFocusOut(focusedCell, {});\n    }\n\n    apiRef.current.publishEvent('cellFocusIn', apiRef.current.getCellParams(id, field));\n  }, [apiRef, logger, publishCellFocusOut]);\n  const setColumnHeaderFocus = React.useCallback(function (field) {\n    let event = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const cell = gridFocusCellSelector(apiRef);\n    publishCellFocusOut(cell, event);\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on column header with colIndex=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          columnHeader: {\n            field\n          },\n          columnHeaderFilter: null,\n          cell: null,\n          columnGroupHeader: null\n        },\n        focus: {\n          columnHeader: {\n            field\n          },\n          columnHeaderFilter: null,\n          cell: null,\n          columnGroupHeader: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger, publishCellFocusOut]);\n  const setColumnHeaderFilterFocus = React.useCallback(function (field) {\n    let event = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const cell = gridFocusCellSelector(apiRef);\n    publishCellFocusOut(cell, event);\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on column header filter with colIndex=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          columnHeader: null,\n          columnHeaderFilter: {\n            field\n          },\n          cell: null,\n          columnGroupHeader: null\n        },\n        focus: {\n          columnHeader: null,\n          columnHeaderFilter: {\n            field\n          },\n          cell: null,\n          columnGroupHeader: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger, publishCellFocusOut]);\n  const setColumnGroupHeaderFocus = React.useCallback(function (field, depth) {\n    let event = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const cell = gridFocusCellSelector(apiRef);\n\n    if (cell) {\n      apiRef.current.publishEvent('cellFocusOut', apiRef.current.getCellParams(cell.id, cell.field), event);\n    }\n\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        tabIndex: {\n          columnGroupHeader: {\n            field,\n            depth\n          },\n          columnHeader: null,\n          columnHeaderFilter: null,\n          cell: null\n        },\n        focus: {\n          columnGroupHeader: {\n            field,\n            depth\n          },\n          columnHeader: null,\n          columnHeaderFilter: null,\n          cell: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const getColumnGroupHeaderFocus = React.useCallback(() => gridFocusColumnGroupHeaderSelector(apiRef), [apiRef]);\n  const moveFocusToRelativeCell = React.useCallback((id, field, direction) => {\n    let columnIndexToFocus = apiRef.current.getColumnIndex(field);\n    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n    const currentPage = getVisibleRows(apiRef, {\n      pagination: props.pagination,\n      paginationMode: props.paginationMode\n    });\n    const pinnedRows = gridPinnedRowsSelector(apiRef); // Include pinned rows as well\n\n    const currentPageRows = [].concat(pinnedRows.top || [], currentPage.rows, pinnedRows.bottom || []);\n    let rowIndexToFocus = currentPageRows.findIndex(row => row.id === id);\n\n    if (direction === 'right') {\n      columnIndexToFocus += 1;\n    } else if (direction === 'left') {\n      columnIndexToFocus -= 1;\n    } else {\n      rowIndexToFocus += 1;\n    }\n\n    if (columnIndexToFocus >= visibleColumns.length) {\n      // Go to next row if we are after the last column\n      rowIndexToFocus += 1;\n\n      if (rowIndexToFocus < currentPageRows.length) {\n        // Go to first column of the next row if there's one more row\n        columnIndexToFocus = 0;\n      }\n    } else if (columnIndexToFocus < 0) {\n      // Go to previous row if we are before the first column\n      rowIndexToFocus -= 1;\n\n      if (rowIndexToFocus >= 0) {\n        // Go to last column of the previous if there's one more row\n        columnIndexToFocus = visibleColumns.length - 1;\n      }\n    }\n\n    rowIndexToFocus = clamp(rowIndexToFocus, 0, currentPageRows.length - 1);\n    const rowToFocus = currentPageRows[rowIndexToFocus];\n\n    if (!rowToFocus) {\n      return;\n    }\n\n    const colSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowToFocus.id, columnIndexToFocus);\n\n    if (colSpanInfo && colSpanInfo.spannedByColSpan) {\n      if (direction === 'left' || direction === 'below') {\n        columnIndexToFocus = colSpanInfo.leftVisibleCellIndex;\n      } else if (direction === 'right') {\n        columnIndexToFocus = colSpanInfo.rightVisibleCellIndex;\n      }\n    }\n\n    columnIndexToFocus = clamp(columnIndexToFocus, 0, visibleColumns.length - 1);\n    const columnToFocus = visibleColumns[columnIndexToFocus];\n    apiRef.current.setCellFocus(rowToFocus.id, columnToFocus.field);\n  }, [apiRef, props.pagination, props.paginationMode]);\n  const handleCellDoubleClick = React.useCallback(_ref => {\n    let {\n      id,\n      field\n    } = _ref;\n    apiRef.current.setCellFocus(id, field);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // GRID_CELL_NAVIGATION_KEY_DOWN handles the focus on Enter, Tab and navigation keys\n    if (event.key === 'Enter' || event.key === 'Tab' || event.key === 'Shift' || isNavigationKey(event.key)) {\n      return;\n    }\n\n    apiRef.current.setCellFocus(params.id, params.field);\n  }, [apiRef]);\n  const handleColumnHeaderFocus = React.useCallback((_ref2, event) => {\n    let {\n      field\n    } = _ref2;\n\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef]);\n  const handleColumnGroupHeaderFocus = React.useCallback((_ref3, event) => {\n    let {\n      fields,\n      depth\n    } = _ref3;\n\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    const focusedColumnGroup = gridFocusColumnGroupHeaderSelector(apiRef);\n\n    if (focusedColumnGroup !== null && focusedColumnGroup.depth === depth && fields.includes(focusedColumnGroup.field)) {\n      // This group cell has already been focused\n      return;\n    }\n\n    apiRef.current.setColumnGroupHeaderFocus(fields[0], depth, event);\n  }, [apiRef]);\n  const handleBlur = React.useCallback((_, event) => {\n    if (event.relatedTarget?.getAttribute('class')?.includes(gridClasses.columnHeader)) {\n      return;\n    }\n\n    logger.debug(`Clearing focus`);\n    apiRef.current.setState(state => _extends({}, state, {\n      focus: {\n        cell: null,\n        columnHeader: null,\n        columnHeaderFilter: null,\n        columnGroupHeader: null\n      }\n    }));\n  }, [logger, apiRef]);\n  const handleCellMouseDown = React.useCallback(params => {\n    lastClickedCell.current = params;\n  }, []);\n  const handleDocumentClick = React.useCallback(event => {\n    const cellParams = lastClickedCell.current;\n    lastClickedCell.current = null;\n    const focusedCell = gridFocusCellSelector(apiRef);\n    const canUpdateFocus = apiRef.current.unstable_applyPipeProcessors('canUpdateFocus', true, {\n      event,\n      cell: cellParams\n    });\n\n    if (!canUpdateFocus) {\n      return;\n    }\n\n    if (!focusedCell) {\n      if (cellParams) {\n        apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n      }\n\n      return;\n    }\n\n    if (cellParams?.id === focusedCell.id && cellParams?.field === focusedCell.field) {\n      return;\n    }\n\n    const cellElement = apiRef.current.getCellElement(focusedCell.id, focusedCell.field);\n\n    if (cellElement?.contains(event.target)) {\n      return;\n    }\n\n    if (cellParams) {\n      apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n    } else {\n      apiRef.current.setState(state => _extends({}, state, {\n        focus: {\n          cell: null,\n          columnHeader: null,\n          columnHeaderFilter: null,\n          columnGroupHeader: null\n        }\n      }));\n      apiRef.current.forceUpdate(); // There's a focused cell but another element (not a cell) was clicked\n      // Publishes an event to notify that the focus was lost\n\n      publishCellFocusOut(focusedCell, event);\n    }\n  }, [apiRef, publishCellFocusOut]);\n  const handleCellModeChange = React.useCallback(params => {\n    if (params.cellMode === 'view') {\n      return;\n    }\n\n    const cell = gridFocusCellSelector(apiRef);\n\n    if (cell?.id !== params.id || cell?.field !== params.field) {\n      apiRef.current.setCellFocus(params.id, params.field);\n    }\n  }, [apiRef]);\n  const handleRowSet = React.useCallback(() => {\n    const cell = gridFocusCellSelector(apiRef); // If the focused cell is in a row which does not exist anymore, then remove the focus\n\n    if (cell && !apiRef.current.getRow(cell.id)) {\n      apiRef.current.setState(state => _extends({}, state, {\n        focus: {\n          cell: null,\n          columnHeader: null,\n          columnHeaderFilter: null,\n          columnGroupHeader: null\n        }\n      }));\n    }\n  }, [apiRef]);\n  const handlePaginationModelChange = useEventcallback(() => {\n    const currentFocusedCell = gridFocusCellSelector(apiRef);\n\n    if (!currentFocusedCell) {\n      return;\n    }\n\n    const currentPage = getVisibleRows(apiRef, {\n      pagination: props.pagination,\n      paginationMode: props.paginationMode\n    });\n    const rowIsInCurrentPage = currentPage.rows.find(row => row.id === currentFocusedCell.id);\n\n    if (rowIsInCurrentPage) {\n      return;\n    }\n\n    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        tabIndex: {\n          cell: {\n            id: currentPage.rows[0].id,\n            field: visibleColumns[0].field\n          },\n          columnGroupHeader: null,\n          columnHeader: null,\n          columnHeaderFilter: null\n        }\n      });\n    });\n  });\n  const focusApi = {\n    setCellFocus,\n    setColumnHeaderFocus,\n    setColumnHeaderFilterFocus\n  };\n  const focusPrivateApi = {\n    moveFocusToRelativeCell,\n    setColumnGroupHeaderFocus,\n    getColumnGroupHeaderFocus\n  };\n  useGridApiMethod(apiRef, focusApi, 'public');\n  useGridApiMethod(apiRef, focusPrivateApi, 'private');\n  React.useEffect(() => {\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.addEventListener('mouseup', handleDocumentClick);\n    return () => {\n      doc.removeEventListener('mouseup', handleDocumentClick);\n    };\n  }, [apiRef, handleDocumentClick]);\n  useGridApiEventHandler(apiRef, 'columnHeaderBlur', handleBlur);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', handleCellDoubleClick);\n  useGridApiEventHandler(apiRef, 'cellMouseDown', handleCellMouseDown);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n  useGridApiEventHandler(apiRef, 'cellModeChange', handleCellModeChange);\n  useGridApiEventHandler(apiRef, 'columnHeaderFocus', handleColumnHeaderFocus);\n  useGridApiEventHandler(apiRef, 'columnGroupHeaderFocus', handleColumnGroupHeaderFocus);\n  useGridApiEventHandler(apiRef, 'rowsSet', handleRowSet);\n  useGridApiEventHandler(apiRef, 'paginationModelChange', handlePaginationModelChange);\n};","map":{"version":3,"names":["_extends","React","unstable_ownerDocument","ownerDocument","unstable_useEventCallback","useEventcallback","gridClasses","useGridApiMethod","useGridLogger","useGridApiEventHandler","isNavigationKey","gridFocusCellSelector","gridFocusColumnGroupHeaderSelector","gridVisibleColumnDefinitionsSelector","getVisibleRows","clamp","gridPinnedRowsSelector","focusStateInitializer","state","focus","cell","columnHeader","columnHeaderFilter","columnGroupHeader","tabIndex","useGridFocus","apiRef","props","logger","lastClickedCell","useRef","publishCellFocusOut","useCallback","event","current","getRow","id","publishEvent","getCellParams","field","setCellFocus","focusedCell","setState","debug","forceUpdate","setColumnHeaderFocus","setColumnHeaderFilterFocus","setColumnGroupHeaderFocus","depth","getColumnGroupHeaderFocus","moveFocusToRelativeCell","direction","columnIndexToFocus","getColumnIndex","visibleColumns","currentPage","pagination","paginationMode","pinnedRows","currentPageRows","concat","top","rows","bottom","rowIndexToFocus","findIndex","row","length","rowToFocus","colSpanInfo","unstable_getCellColSpanInfo","spannedByColSpan","leftVisibleCellIndex","rightVisibleCellIndex","columnToFocus","handleCellDoubleClick","handleCellKeyDown","params","key","handleColumnHeaderFocus","target","currentTarget","handleColumnGroupHeaderFocus","fields","focusedColumnGroup","includes","handleBlur","_","relatedTarget","getAttribute","handleCellMouseDown","handleDocumentClick","cellParams","canUpdateFocus","unstable_applyPipeProcessors","cellElement","getCellElement","contains","handleCellModeChange","cellMode","handleRowSet","handlePaginationModelChange","currentFocusedCell","rowIsInCurrentPage","find","focusApi","focusPrivateApi","useEffect","doc","rootElementRef","addEventListener","removeEventListener"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/@mui/x-data-grid/hooks/features/focus/useGridFocus.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_ownerDocument as ownerDocument, unstable_useEventCallback as useEventcallback } from '@mui/utils';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { isNavigationKey } from '../../../utils/keyboardUtils';\nimport { gridFocusCellSelector, gridFocusColumnGroupHeaderSelector } from './gridFocusStateSelector';\nimport { gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { getVisibleRows } from '../../utils/useGridVisibleRows';\nimport { clamp } from '../../../utils/utils';\nimport { gridPinnedRowsSelector } from '../rows/gridRowsSelector';\nexport const focusStateInitializer = state => _extends({}, state, {\n  focus: {\n    cell: null,\n    columnHeader: null,\n    columnHeaderFilter: null,\n    columnGroupHeader: null\n  },\n  tabIndex: {\n    cell: null,\n    columnHeader: null,\n    columnHeaderFilter: null,\n    columnGroupHeader: null\n  }\n});\n\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridRows (method)\n * @requires useGridEditing (event)\n */\nexport const useGridFocus = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridFocus');\n  const lastClickedCell = React.useRef(null);\n  const publishCellFocusOut = React.useCallback((cell, event) => {\n    if (cell) {\n      // The row might have been deleted\n      if (apiRef.current.getRow(cell.id)) {\n        apiRef.current.publishEvent('cellFocusOut', apiRef.current.getCellParams(cell.id, cell.field), event);\n      }\n    }\n  }, [apiRef]);\n  const setCellFocus = React.useCallback((id, field) => {\n    const focusedCell = gridFocusCellSelector(apiRef);\n    if (focusedCell?.id === id && focusedCell?.field === field) {\n      return;\n    }\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on cell with id=${id} and field=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          cell: {\n            id,\n            field\n          },\n          columnHeader: null,\n          columnHeaderFilter: null,\n          columnGroupHeader: null\n        },\n        focus: {\n          cell: {\n            id,\n            field\n          },\n          columnHeader: null,\n          columnHeaderFilter: null,\n          columnGroupHeader: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n\n    // The row might have been deleted\n    if (!apiRef.current.getRow(id)) {\n      return;\n    }\n    if (focusedCell) {\n      // There's a focused cell but another cell was clicked\n      // Publishes an event to notify that the focus was lost\n      publishCellFocusOut(focusedCell, {});\n    }\n    apiRef.current.publishEvent('cellFocusIn', apiRef.current.getCellParams(id, field));\n  }, [apiRef, logger, publishCellFocusOut]);\n  const setColumnHeaderFocus = React.useCallback((field, event = {}) => {\n    const cell = gridFocusCellSelector(apiRef);\n    publishCellFocusOut(cell, event);\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on column header with colIndex=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          columnHeader: {\n            field\n          },\n          columnHeaderFilter: null,\n          cell: null,\n          columnGroupHeader: null\n        },\n        focus: {\n          columnHeader: {\n            field\n          },\n          columnHeaderFilter: null,\n          cell: null,\n          columnGroupHeader: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger, publishCellFocusOut]);\n  const setColumnHeaderFilterFocus = React.useCallback((field, event = {}) => {\n    const cell = gridFocusCellSelector(apiRef);\n    publishCellFocusOut(cell, event);\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on column header filter with colIndex=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          columnHeader: null,\n          columnHeaderFilter: {\n            field\n          },\n          cell: null,\n          columnGroupHeader: null\n        },\n        focus: {\n          columnHeader: null,\n          columnHeaderFilter: {\n            field\n          },\n          cell: null,\n          columnGroupHeader: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger, publishCellFocusOut]);\n  const setColumnGroupHeaderFocus = React.useCallback((field, depth, event = {}) => {\n    const cell = gridFocusCellSelector(apiRef);\n    if (cell) {\n      apiRef.current.publishEvent('cellFocusOut', apiRef.current.getCellParams(cell.id, cell.field), event);\n    }\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        tabIndex: {\n          columnGroupHeader: {\n            field,\n            depth\n          },\n          columnHeader: null,\n          columnHeaderFilter: null,\n          cell: null\n        },\n        focus: {\n          columnGroupHeader: {\n            field,\n            depth\n          },\n          columnHeader: null,\n          columnHeaderFilter: null,\n          cell: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const getColumnGroupHeaderFocus = React.useCallback(() => gridFocusColumnGroupHeaderSelector(apiRef), [apiRef]);\n  const moveFocusToRelativeCell = React.useCallback((id, field, direction) => {\n    let columnIndexToFocus = apiRef.current.getColumnIndex(field);\n    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n    const currentPage = getVisibleRows(apiRef, {\n      pagination: props.pagination,\n      paginationMode: props.paginationMode\n    });\n    const pinnedRows = gridPinnedRowsSelector(apiRef);\n\n    // Include pinned rows as well\n    const currentPageRows = [].concat(pinnedRows.top || [], currentPage.rows, pinnedRows.bottom || []);\n    let rowIndexToFocus = currentPageRows.findIndex(row => row.id === id);\n    if (direction === 'right') {\n      columnIndexToFocus += 1;\n    } else if (direction === 'left') {\n      columnIndexToFocus -= 1;\n    } else {\n      rowIndexToFocus += 1;\n    }\n    if (columnIndexToFocus >= visibleColumns.length) {\n      // Go to next row if we are after the last column\n      rowIndexToFocus += 1;\n      if (rowIndexToFocus < currentPageRows.length) {\n        // Go to first column of the next row if there's one more row\n        columnIndexToFocus = 0;\n      }\n    } else if (columnIndexToFocus < 0) {\n      // Go to previous row if we are before the first column\n      rowIndexToFocus -= 1;\n      if (rowIndexToFocus >= 0) {\n        // Go to last column of the previous if there's one more row\n        columnIndexToFocus = visibleColumns.length - 1;\n      }\n    }\n    rowIndexToFocus = clamp(rowIndexToFocus, 0, currentPageRows.length - 1);\n    const rowToFocus = currentPageRows[rowIndexToFocus];\n    if (!rowToFocus) {\n      return;\n    }\n    const colSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowToFocus.id, columnIndexToFocus);\n    if (colSpanInfo && colSpanInfo.spannedByColSpan) {\n      if (direction === 'left' || direction === 'below') {\n        columnIndexToFocus = colSpanInfo.leftVisibleCellIndex;\n      } else if (direction === 'right') {\n        columnIndexToFocus = colSpanInfo.rightVisibleCellIndex;\n      }\n    }\n    columnIndexToFocus = clamp(columnIndexToFocus, 0, visibleColumns.length - 1);\n    const columnToFocus = visibleColumns[columnIndexToFocus];\n    apiRef.current.setCellFocus(rowToFocus.id, columnToFocus.field);\n  }, [apiRef, props.pagination, props.paginationMode]);\n  const handleCellDoubleClick = React.useCallback(({\n    id,\n    field\n  }) => {\n    apiRef.current.setCellFocus(id, field);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // GRID_CELL_NAVIGATION_KEY_DOWN handles the focus on Enter, Tab and navigation keys\n    if (event.key === 'Enter' || event.key === 'Tab' || event.key === 'Shift' || isNavigationKey(event.key)) {\n      return;\n    }\n    apiRef.current.setCellFocus(params.id, params.field);\n  }, [apiRef]);\n  const handleColumnHeaderFocus = React.useCallback(({\n    field\n  }, event) => {\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef]);\n  const handleColumnGroupHeaderFocus = React.useCallback(({\n    fields,\n    depth\n  }, event) => {\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n    const focusedColumnGroup = gridFocusColumnGroupHeaderSelector(apiRef);\n    if (focusedColumnGroup !== null && focusedColumnGroup.depth === depth && fields.includes(focusedColumnGroup.field)) {\n      // This group cell has already been focused\n      return;\n    }\n    apiRef.current.setColumnGroupHeaderFocus(fields[0], depth, event);\n  }, [apiRef]);\n  const handleBlur = React.useCallback((_, event) => {\n    if (event.relatedTarget?.getAttribute('class')?.includes(gridClasses.columnHeader)) {\n      return;\n    }\n    logger.debug(`Clearing focus`);\n    apiRef.current.setState(state => _extends({}, state, {\n      focus: {\n        cell: null,\n        columnHeader: null,\n        columnHeaderFilter: null,\n        columnGroupHeader: null\n      }\n    }));\n  }, [logger, apiRef]);\n  const handleCellMouseDown = React.useCallback(params => {\n    lastClickedCell.current = params;\n  }, []);\n  const handleDocumentClick = React.useCallback(event => {\n    const cellParams = lastClickedCell.current;\n    lastClickedCell.current = null;\n    const focusedCell = gridFocusCellSelector(apiRef);\n    const canUpdateFocus = apiRef.current.unstable_applyPipeProcessors('canUpdateFocus', true, {\n      event,\n      cell: cellParams\n    });\n    if (!canUpdateFocus) {\n      return;\n    }\n    if (!focusedCell) {\n      if (cellParams) {\n        apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n      }\n      return;\n    }\n    if (cellParams?.id === focusedCell.id && cellParams?.field === focusedCell.field) {\n      return;\n    }\n    const cellElement = apiRef.current.getCellElement(focusedCell.id, focusedCell.field);\n    if (cellElement?.contains(event.target)) {\n      return;\n    }\n    if (cellParams) {\n      apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n    } else {\n      apiRef.current.setState(state => _extends({}, state, {\n        focus: {\n          cell: null,\n          columnHeader: null,\n          columnHeaderFilter: null,\n          columnGroupHeader: null\n        }\n      }));\n      apiRef.current.forceUpdate();\n\n      // There's a focused cell but another element (not a cell) was clicked\n      // Publishes an event to notify that the focus was lost\n      publishCellFocusOut(focusedCell, event);\n    }\n  }, [apiRef, publishCellFocusOut]);\n  const handleCellModeChange = React.useCallback(params => {\n    if (params.cellMode === 'view') {\n      return;\n    }\n    const cell = gridFocusCellSelector(apiRef);\n    if (cell?.id !== params.id || cell?.field !== params.field) {\n      apiRef.current.setCellFocus(params.id, params.field);\n    }\n  }, [apiRef]);\n  const handleRowSet = React.useCallback(() => {\n    const cell = gridFocusCellSelector(apiRef);\n\n    // If the focused cell is in a row which does not exist anymore, then remove the focus\n    if (cell && !apiRef.current.getRow(cell.id)) {\n      apiRef.current.setState(state => _extends({}, state, {\n        focus: {\n          cell: null,\n          columnHeader: null,\n          columnHeaderFilter: null,\n          columnGroupHeader: null\n        }\n      }));\n    }\n  }, [apiRef]);\n  const handlePaginationModelChange = useEventcallback(() => {\n    const currentFocusedCell = gridFocusCellSelector(apiRef);\n    if (!currentFocusedCell) {\n      return;\n    }\n    const currentPage = getVisibleRows(apiRef, {\n      pagination: props.pagination,\n      paginationMode: props.paginationMode\n    });\n    const rowIsInCurrentPage = currentPage.rows.find(row => row.id === currentFocusedCell.id);\n    if (rowIsInCurrentPage) {\n      return;\n    }\n    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        tabIndex: {\n          cell: {\n            id: currentPage.rows[0].id,\n            field: visibleColumns[0].field\n          },\n          columnGroupHeader: null,\n          columnHeader: null,\n          columnHeaderFilter: null\n        }\n      });\n    });\n  });\n  const focusApi = {\n    setCellFocus,\n    setColumnHeaderFocus,\n    setColumnHeaderFilterFocus\n  };\n  const focusPrivateApi = {\n    moveFocusToRelativeCell,\n    setColumnGroupHeaderFocus,\n    getColumnGroupHeaderFocus\n  };\n  useGridApiMethod(apiRef, focusApi, 'public');\n  useGridApiMethod(apiRef, focusPrivateApi, 'private');\n  React.useEffect(() => {\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.addEventListener('mouseup', handleDocumentClick);\n    return () => {\n      doc.removeEventListener('mouseup', handleDocumentClick);\n    };\n  }, [apiRef, handleDocumentClick]);\n  useGridApiEventHandler(apiRef, 'columnHeaderBlur', handleBlur);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', handleCellDoubleClick);\n  useGridApiEventHandler(apiRef, 'cellMouseDown', handleCellMouseDown);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n  useGridApiEventHandler(apiRef, 'cellModeChange', handleCellModeChange);\n  useGridApiEventHandler(apiRef, 'columnHeaderFocus', handleColumnHeaderFocus);\n  useGridApiEventHandler(apiRef, 'columnGroupHeaderFocus', handleColumnGroupHeaderFocus);\n  useGridApiEventHandler(apiRef, 'rowsSet', handleRowSet);\n  useGridApiEventHandler(apiRef, 'paginationModelChange', handlePaginationModelChange);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}