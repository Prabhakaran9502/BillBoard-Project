{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { gridSortedRowEntriesSelector, gridSortedRowIdsSelector, gridSortModelSelector } from './gridSortingSelector';\nimport { GRID_ROOT_GROUP_ID, gridRowTreeSelector } from '../rows';\nimport { useFirstRender } from '../../utils/useFirstRender';\nimport { useGridRegisterStrategyProcessor, GRID_DEFAULT_STRATEGY } from '../../core/strategyProcessing';\nimport { buildAggregatedSortingApplier, mergeStateWithSortModel, getNextGridSortDirection, sanitizeSortModel } from './gridSortingUtils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { getTreeNodeDescendants } from '../rows/gridRowsUtils';\nexport const sortingStateInitializer = (state, props) => {\n  const sortModel = props.sortModel ?? props.initialState?.sorting?.sortModel ?? [];\n  return _extends({}, state, {\n    sorting: {\n      sortModel: sanitizeSortModel(sortModel, props.disableMultipleColumnsSorting),\n      sortedRows: []\n    }\n  });\n};\n/**\n * @requires useGridRows (event)\n * @requires useGridColumns (event)\n */\n\nexport const useGridSorting = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridSorting');\n  apiRef.current.registerControlState({\n    stateId: 'sortModel',\n    propModel: props.sortModel,\n    propOnChange: props.onSortModelChange,\n    stateSelector: gridSortModelSelector,\n    changeEvent: 'sortModelChange'\n  });\n  const upsertSortModel = React.useCallback((field, sortItem) => {\n    const sortModel = gridSortModelSelector(apiRef);\n    const existingIdx = sortModel.findIndex(c => c.field === field);\n    let newSortModel = [...sortModel];\n\n    if (existingIdx > -1) {\n      if (sortItem?.sort == null) {\n        newSortModel.splice(existingIdx, 1);\n      } else {\n        newSortModel.splice(existingIdx, 1, sortItem);\n      }\n    } else {\n      newSortModel = [...sortModel, sortItem];\n    }\n\n    return newSortModel;\n  }, [apiRef]);\n  const createSortItem = React.useCallback((col, directionOverride) => {\n    const sortModel = gridSortModelSelector(apiRef);\n    const existing = sortModel.find(c => c.field === col.field);\n\n    if (existing) {\n      const nextSort = directionOverride === undefined ? getNextGridSortDirection(col.sortingOrder ?? props.sortingOrder, existing.sort) : directionOverride;\n      return nextSort === undefined ? undefined : _extends({}, existing, {\n        sort: nextSort\n      });\n    }\n\n    return {\n      field: col.field,\n      sort: directionOverride === undefined ? getNextGridSortDirection(col.sortingOrder ?? props.sortingOrder) : directionOverride\n    };\n  }, [apiRef, props.sortingOrder]);\n  const addColumnMenuItem = React.useCallback((columnMenuItems, colDef) => {\n    if (colDef == null || colDef.sortable === false || props.disableColumnSorting) {\n      return columnMenuItems;\n    }\n\n    const sortingOrder = colDef.sortingOrder || props.sortingOrder;\n\n    if (sortingOrder.some(item => !!item)) {\n      return [...columnMenuItems, 'columnMenuSortItem'];\n    }\n\n    return columnMenuItems;\n  }, [props.sortingOrder, props.disableColumnSorting]);\n  /**\n   * API METHODS\n   */\n\n  const applySorting = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      if (props.sortingMode === 'server') {\n        logger.debug('Skipping sorting rows as sortingMode = server');\n        return _extends({}, state, {\n          sorting: _extends({}, state.sorting, {\n            sortedRows: getTreeNodeDescendants(gridRowTreeSelector(apiRef), GRID_ROOT_GROUP_ID, false)\n          })\n        });\n      }\n\n      const sortModel = gridSortModelSelector(state, apiRef.current.instanceId);\n      const sortRowList = buildAggregatedSortingApplier(sortModel, apiRef);\n      const sortedRows = apiRef.current.applyStrategyProcessor('sorting', {\n        sortRowList\n      });\n      return _extends({}, state, {\n        sorting: _extends({}, state.sorting, {\n          sortedRows\n        })\n      });\n    });\n    apiRef.current.publishEvent('sortedRowsSet');\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger, props.sortingMode]);\n  const setSortModel = React.useCallback(model => {\n    const currentModel = gridSortModelSelector(apiRef);\n\n    if (currentModel !== model) {\n      logger.debug(`Setting sort model`);\n      apiRef.current.setState(mergeStateWithSortModel(model, props.disableMultipleColumnsSorting));\n      apiRef.current.forceUpdate();\n      apiRef.current.applySorting();\n    }\n  }, [apiRef, logger, props.disableMultipleColumnsSorting]);\n  const sortColumn = React.useCallback((field, direction, allowMultipleSorting) => {\n    const column = apiRef.current.getColumn(field);\n    const sortItem = createSortItem(column, direction);\n    let sortModel;\n\n    if (!allowMultipleSorting || props.disableMultipleColumnsSorting) {\n      sortModel = sortItem?.sort == null ? [] : [sortItem];\n    } else {\n      sortModel = upsertSortModel(column.field, sortItem);\n    }\n\n    apiRef.current.setSortModel(sortModel);\n  }, [apiRef, upsertSortModel, createSortItem, props.disableMultipleColumnsSorting]);\n  const getSortModel = React.useCallback(() => gridSortModelSelector(apiRef), [apiRef]);\n  const getSortedRows = React.useCallback(() => {\n    const sortedRows = gridSortedRowEntriesSelector(apiRef);\n    return sortedRows.map(row => row.model);\n  }, [apiRef]);\n  const getSortedRowIds = React.useCallback(() => gridSortedRowIdsSelector(apiRef), [apiRef]);\n  const getRowIdFromRowIndex = React.useCallback(index => apiRef.current.getSortedRowIds()[index], [apiRef]);\n  const sortApi = {\n    getSortModel,\n    getSortedRows,\n    getSortedRowIds,\n    getRowIdFromRowIndex,\n    setSortModel,\n    sortColumn,\n    applySorting\n  };\n  useGridApiMethod(apiRef, sortApi, 'public');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    const sortModelToExport = gridSortModelSelector(apiRef);\n    const shouldExportSortModel = // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels || // Always export if the model is controlled\n    props.sortModel != null || // Always export if the model has been initialized\n    props.initialState?.sorting?.sortModel != null || // Export if the model is not empty\n    sortModelToExport.length > 0;\n\n    if (!shouldExportSortModel) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      sorting: {\n        sortModel: sortModelToExport\n      }\n    });\n  }, [apiRef, props.sortModel, props.initialState?.sorting?.sortModel]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const sortModel = context.stateToRestore.sorting?.sortModel;\n\n    if (sortModel == null) {\n      return params;\n    }\n\n    apiRef.current.setState(mergeStateWithSortModel(sortModel, props.disableMultipleColumnsSorting));\n    return _extends({}, params, {\n      callbacks: [...params.callbacks, apiRef.current.applySorting]\n    });\n  }, [apiRef, props.disableMultipleColumnsSorting]);\n  const flatSortingMethod = React.useCallback(params => {\n    const rowTree = gridRowTreeSelector(apiRef);\n    const rootGroupNode = rowTree[GRID_ROOT_GROUP_ID];\n    const sortedChildren = params.sortRowList ? params.sortRowList(rootGroupNode.children.map(childId => rowTree[childId])) : [...rootGroupNode.children];\n\n    if (rootGroupNode.footerId != null) {\n      sortedChildren.push(rootGroupNode.footerId);\n    }\n\n    return sortedChildren;\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'sorting', flatSortingMethod);\n  /**\n   * EVENTS\n   */\n\n  const handleColumnHeaderClick = React.useCallback((_ref, event) => {\n    let {\n      field,\n      colDef\n    } = _ref;\n\n    if (!colDef.sortable || props.disableColumnSorting) {\n      return;\n    }\n\n    const allowMultipleSorting = event.shiftKey || event.metaKey || event.ctrlKey;\n    sortColumn(field, undefined, allowMultipleSorting);\n  }, [sortColumn, props.disableColumnSorting]);\n  const handleColumnHeaderKeyDown = React.useCallback((_ref2, event) => {\n    let {\n      field,\n      colDef\n    } = _ref2;\n\n    if (!colDef.sortable || props.disableColumnSorting) {\n      return;\n    } // Ctrl + Enter opens the column menu\n\n\n    if (event.key === 'Enter' && !event.ctrlKey && !event.metaKey) {\n      sortColumn(field, undefined, event.shiftKey);\n    }\n  }, [sortColumn, props.disableColumnSorting]);\n  const handleColumnsChange = React.useCallback(() => {\n    // When the columns change we check that the sorted columns are still part of the dataset\n    const sortModel = gridSortModelSelector(apiRef);\n    const latestColumns = gridColumnLookupSelector(apiRef);\n\n    if (sortModel.length > 0) {\n      const newModel = sortModel.filter(sortItem => latestColumns[sortItem.field]);\n\n      if (newModel.length < sortModel.length) {\n        apiRef.current.setSortModel(newModel);\n      }\n    }\n  }, [apiRef]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'sorting') {\n      apiRef.current.applySorting();\n    }\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuItem);\n  useGridApiEventHandler(apiRef, 'columnHeaderClick', handleColumnHeaderClick);\n  useGridApiEventHandler(apiRef, 'columnHeaderKeyDown', handleColumnHeaderKeyDown);\n  useGridApiEventHandler(apiRef, 'rowsSet', apiRef.current.applySorting);\n  useGridApiEventHandler(apiRef, 'columnsChange', handleColumnsChange);\n  useGridApiEventHandler(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n  /**\n   * 1ST RENDER\n   */\n\n  useFirstRender(() => {\n    apiRef.current.applySorting();\n  });\n  /**\n   * EFFECTS\n   */\n\n  useEnhancedEffect(() => {\n    if (props.sortModel !== undefined) {\n      apiRef.current.setSortModel(props.sortModel);\n    }\n  }, [apiRef, props.sortModel]);\n};","map":{"version":3,"names":["_extends","React","unstable_useEnhancedEffect","useEnhancedEffect","useGridApiEventHandler","useGridApiMethod","useGridLogger","gridColumnLookupSelector","gridSortedRowEntriesSelector","gridSortedRowIdsSelector","gridSortModelSelector","GRID_ROOT_GROUP_ID","gridRowTreeSelector","useFirstRender","useGridRegisterStrategyProcessor","GRID_DEFAULT_STRATEGY","buildAggregatedSortingApplier","mergeStateWithSortModel","getNextGridSortDirection","sanitizeSortModel","useGridRegisterPipeProcessor","getTreeNodeDescendants","sortingStateInitializer","state","props","sortModel","initialState","sorting","disableMultipleColumnsSorting","sortedRows","useGridSorting","apiRef","logger","current","registerControlState","stateId","propModel","propOnChange","onSortModelChange","stateSelector","changeEvent","upsertSortModel","useCallback","field","sortItem","existingIdx","findIndex","c","newSortModel","sort","splice","createSortItem","col","directionOverride","existing","find","nextSort","undefined","sortingOrder","addColumnMenuItem","columnMenuItems","colDef","sortable","disableColumnSorting","some","item","applySorting","setState","sortingMode","debug","instanceId","sortRowList","applyStrategyProcessor","publishEvent","forceUpdate","setSortModel","model","currentModel","sortColumn","direction","allowMultipleSorting","column","getColumn","getSortModel","getSortedRows","map","row","getSortedRowIds","getRowIdFromRowIndex","index","sortApi","stateExportPreProcessing","prevState","context","sortModelToExport","shouldExportSortModel","exportOnlyDirtyModels","length","stateRestorePreProcessing","params","stateToRestore","callbacks","flatSortingMethod","rowTree","rootGroupNode","sortedChildren","children","childId","footerId","push","handleColumnHeaderClick","event","shiftKey","metaKey","ctrlKey","handleColumnHeaderKeyDown","key","handleColumnsChange","latestColumns","newModel","filter","handleStrategyProcessorChange","methodName"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/@mui/x-data-grid/hooks/features/sorting/useGridSorting.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { gridSortedRowEntriesSelector, gridSortedRowIdsSelector, gridSortModelSelector } from './gridSortingSelector';\nimport { GRID_ROOT_GROUP_ID, gridRowTreeSelector } from '../rows';\nimport { useFirstRender } from '../../utils/useFirstRender';\nimport { useGridRegisterStrategyProcessor, GRID_DEFAULT_STRATEGY } from '../../core/strategyProcessing';\nimport { buildAggregatedSortingApplier, mergeStateWithSortModel, getNextGridSortDirection, sanitizeSortModel } from './gridSortingUtils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { getTreeNodeDescendants } from '../rows/gridRowsUtils';\nexport const sortingStateInitializer = (state, props) => {\n  const sortModel = props.sortModel ?? props.initialState?.sorting?.sortModel ?? [];\n  return _extends({}, state, {\n    sorting: {\n      sortModel: sanitizeSortModel(sortModel, props.disableMultipleColumnsSorting),\n      sortedRows: []\n    }\n  });\n};\n\n/**\n * @requires useGridRows (event)\n * @requires useGridColumns (event)\n */\nexport const useGridSorting = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridSorting');\n  apiRef.current.registerControlState({\n    stateId: 'sortModel',\n    propModel: props.sortModel,\n    propOnChange: props.onSortModelChange,\n    stateSelector: gridSortModelSelector,\n    changeEvent: 'sortModelChange'\n  });\n  const upsertSortModel = React.useCallback((field, sortItem) => {\n    const sortModel = gridSortModelSelector(apiRef);\n    const existingIdx = sortModel.findIndex(c => c.field === field);\n    let newSortModel = [...sortModel];\n    if (existingIdx > -1) {\n      if (sortItem?.sort == null) {\n        newSortModel.splice(existingIdx, 1);\n      } else {\n        newSortModel.splice(existingIdx, 1, sortItem);\n      }\n    } else {\n      newSortModel = [...sortModel, sortItem];\n    }\n    return newSortModel;\n  }, [apiRef]);\n  const createSortItem = React.useCallback((col, directionOverride) => {\n    const sortModel = gridSortModelSelector(apiRef);\n    const existing = sortModel.find(c => c.field === col.field);\n    if (existing) {\n      const nextSort = directionOverride === undefined ? getNextGridSortDirection(col.sortingOrder ?? props.sortingOrder, existing.sort) : directionOverride;\n      return nextSort === undefined ? undefined : _extends({}, existing, {\n        sort: nextSort\n      });\n    }\n    return {\n      field: col.field,\n      sort: directionOverride === undefined ? getNextGridSortDirection(col.sortingOrder ?? props.sortingOrder) : directionOverride\n    };\n  }, [apiRef, props.sortingOrder]);\n  const addColumnMenuItem = React.useCallback((columnMenuItems, colDef) => {\n    if (colDef == null || colDef.sortable === false || props.disableColumnSorting) {\n      return columnMenuItems;\n    }\n    const sortingOrder = colDef.sortingOrder || props.sortingOrder;\n    if (sortingOrder.some(item => !!item)) {\n      return [...columnMenuItems, 'columnMenuSortItem'];\n    }\n    return columnMenuItems;\n  }, [props.sortingOrder, props.disableColumnSorting]);\n\n  /**\n   * API METHODS\n   */\n  const applySorting = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      if (props.sortingMode === 'server') {\n        logger.debug('Skipping sorting rows as sortingMode = server');\n        return _extends({}, state, {\n          sorting: _extends({}, state.sorting, {\n            sortedRows: getTreeNodeDescendants(gridRowTreeSelector(apiRef), GRID_ROOT_GROUP_ID, false)\n          })\n        });\n      }\n      const sortModel = gridSortModelSelector(state, apiRef.current.instanceId);\n      const sortRowList = buildAggregatedSortingApplier(sortModel, apiRef);\n      const sortedRows = apiRef.current.applyStrategyProcessor('sorting', {\n        sortRowList\n      });\n      return _extends({}, state, {\n        sorting: _extends({}, state.sorting, {\n          sortedRows\n        })\n      });\n    });\n    apiRef.current.publishEvent('sortedRowsSet');\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger, props.sortingMode]);\n  const setSortModel = React.useCallback(model => {\n    const currentModel = gridSortModelSelector(apiRef);\n    if (currentModel !== model) {\n      logger.debug(`Setting sort model`);\n      apiRef.current.setState(mergeStateWithSortModel(model, props.disableMultipleColumnsSorting));\n      apiRef.current.forceUpdate();\n      apiRef.current.applySorting();\n    }\n  }, [apiRef, logger, props.disableMultipleColumnsSorting]);\n  const sortColumn = React.useCallback((field, direction, allowMultipleSorting) => {\n    const column = apiRef.current.getColumn(field);\n    const sortItem = createSortItem(column, direction);\n    let sortModel;\n    if (!allowMultipleSorting || props.disableMultipleColumnsSorting) {\n      sortModel = sortItem?.sort == null ? [] : [sortItem];\n    } else {\n      sortModel = upsertSortModel(column.field, sortItem);\n    }\n    apiRef.current.setSortModel(sortModel);\n  }, [apiRef, upsertSortModel, createSortItem, props.disableMultipleColumnsSorting]);\n  const getSortModel = React.useCallback(() => gridSortModelSelector(apiRef), [apiRef]);\n  const getSortedRows = React.useCallback(() => {\n    const sortedRows = gridSortedRowEntriesSelector(apiRef);\n    return sortedRows.map(row => row.model);\n  }, [apiRef]);\n  const getSortedRowIds = React.useCallback(() => gridSortedRowIdsSelector(apiRef), [apiRef]);\n  const getRowIdFromRowIndex = React.useCallback(index => apiRef.current.getSortedRowIds()[index], [apiRef]);\n  const sortApi = {\n    getSortModel,\n    getSortedRows,\n    getSortedRowIds,\n    getRowIdFromRowIndex,\n    setSortModel,\n    sortColumn,\n    applySorting\n  };\n  useGridApiMethod(apiRef, sortApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    const sortModelToExport = gridSortModelSelector(apiRef);\n    const shouldExportSortModel =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the model is controlled\n    props.sortModel != null ||\n    // Always export if the model has been initialized\n    props.initialState?.sorting?.sortModel != null ||\n    // Export if the model is not empty\n    sortModelToExport.length > 0;\n    if (!shouldExportSortModel) {\n      return prevState;\n    }\n    return _extends({}, prevState, {\n      sorting: {\n        sortModel: sortModelToExport\n      }\n    });\n  }, [apiRef, props.sortModel, props.initialState?.sorting?.sortModel]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const sortModel = context.stateToRestore.sorting?.sortModel;\n    if (sortModel == null) {\n      return params;\n    }\n    apiRef.current.setState(mergeStateWithSortModel(sortModel, props.disableMultipleColumnsSorting));\n    return _extends({}, params, {\n      callbacks: [...params.callbacks, apiRef.current.applySorting]\n    });\n  }, [apiRef, props.disableMultipleColumnsSorting]);\n  const flatSortingMethod = React.useCallback(params => {\n    const rowTree = gridRowTreeSelector(apiRef);\n    const rootGroupNode = rowTree[GRID_ROOT_GROUP_ID];\n    const sortedChildren = params.sortRowList ? params.sortRowList(rootGroupNode.children.map(childId => rowTree[childId])) : [...rootGroupNode.children];\n    if (rootGroupNode.footerId != null) {\n      sortedChildren.push(rootGroupNode.footerId);\n    }\n    return sortedChildren;\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'sorting', flatSortingMethod);\n\n  /**\n   * EVENTS\n   */\n  const handleColumnHeaderClick = React.useCallback(({\n    field,\n    colDef\n  }, event) => {\n    if (!colDef.sortable || props.disableColumnSorting) {\n      return;\n    }\n    const allowMultipleSorting = event.shiftKey || event.metaKey || event.ctrlKey;\n    sortColumn(field, undefined, allowMultipleSorting);\n  }, [sortColumn, props.disableColumnSorting]);\n  const handleColumnHeaderKeyDown = React.useCallback(({\n    field,\n    colDef\n  }, event) => {\n    if (!colDef.sortable || props.disableColumnSorting) {\n      return;\n    }\n    // Ctrl + Enter opens the column menu\n    if (event.key === 'Enter' && !event.ctrlKey && !event.metaKey) {\n      sortColumn(field, undefined, event.shiftKey);\n    }\n  }, [sortColumn, props.disableColumnSorting]);\n  const handleColumnsChange = React.useCallback(() => {\n    // When the columns change we check that the sorted columns are still part of the dataset\n    const sortModel = gridSortModelSelector(apiRef);\n    const latestColumns = gridColumnLookupSelector(apiRef);\n    if (sortModel.length > 0) {\n      const newModel = sortModel.filter(sortItem => latestColumns[sortItem.field]);\n      if (newModel.length < sortModel.length) {\n        apiRef.current.setSortModel(newModel);\n      }\n    }\n  }, [apiRef]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'sorting') {\n      apiRef.current.applySorting();\n    }\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuItem);\n  useGridApiEventHandler(apiRef, 'columnHeaderClick', handleColumnHeaderClick);\n  useGridApiEventHandler(apiRef, 'columnHeaderKeyDown', handleColumnHeaderKeyDown);\n  useGridApiEventHandler(apiRef, 'rowsSet', apiRef.current.applySorting);\n  useGridApiEventHandler(apiRef, 'columnsChange', handleColumnsChange);\n  useGridApiEventHandler(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n\n  /**\n   * 1ST RENDER\n   */\n  useFirstRender(() => {\n    apiRef.current.applySorting();\n  });\n\n  /**\n   * EFFECTS\n   */\n  useEnhancedEffect(() => {\n    if (props.sortModel !== undefined) {\n      apiRef.current.setSortModel(props.sortModel);\n    }\n  }, [apiRef, props.sortModel]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}