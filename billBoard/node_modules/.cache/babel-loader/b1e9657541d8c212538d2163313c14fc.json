{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildExcel = buildExcel;\nexports.getDataForValueOptionsSheet = getDataForValueOptionsSheet;\nexports.serializeColumn = void 0;\nexports.serializeColumns = serializeColumns;\nexports.serializeRowUnsafe = void 0;\nexports.setupExcelExportWebWorker = setupExcelExportWebWorker;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _xDataGridPro = require(\"@mui/x-data-grid-pro\");\n\nvar _internals = require(\"@mui/x-data-grid/internals\");\n\nfunction _getRequireWildcardCache(e) {\n  if (\"function\" != typeof WeakMap) return null;\n  var r = new WeakMap(),\n      t = new WeakMap();\n  return (_getRequireWildcardCache = function (e) {\n    return e ? t : r;\n  })(e);\n}\n\nfunction _interopRequireWildcard(e, r) {\n  if (!r && e && e.__esModule) return e;\n  if (null === e || \"object\" != typeof e && \"function\" != typeof e) return {\n    default: e\n  };\n\n  var t = _getRequireWildcardCache(r);\n\n  if (t && t.has(e)) return t.get(e);\n  var n = {\n    __proto__: null\n  },\n      a = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) {\n    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;\n    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];\n  }\n\n  return n.default = e, t && t.set(e, n), n;\n}\n\nconst getExcelJs = async () => {\n  const excelJsModule = await Promise.resolve().then(() => _interopRequireWildcard(require('exceljs')));\n  return excelJsModule.default ?? excelJsModule;\n};\n\nconst warnInvalidFormattedValue = (0, _internals.buildWarning)(['MUI X: When the value of a field is an object or a `renderCell` is provided, the Excel export might not display the value correctly.', 'You can provide a `valueFormatter` with a string representation to be used.']);\n\nconst getFormattedValueOptions = (colDef, row, valueOptions, api) => {\n  if (!colDef.valueOptions) {\n    return [];\n  }\n\n  let valueOptionsFormatted = valueOptions;\n\n  if (colDef.valueFormatter) {\n    valueOptionsFormatted = valueOptionsFormatted.map(option => {\n      if (typeof option === 'object') {\n        return option;\n      }\n\n      return String(colDef.valueFormatter(option, row, colDef, {\n        current: api\n      }));\n    });\n  }\n\n  return valueOptionsFormatted.map(option => typeof option === 'object' ? option.label : option);\n};\n/**\n * FIXME: This function mutates the colspan info, but colspan info assumes that the columns\n * passed to it are always consistent. In this case, the exported columns may differ from the\n * actual rendered columns.\n * The caller of this function MUST call `resetColSpan()` before and after usage.\n */\n\n\nconst serializeRowUnsafe = (id, columns, apiRef, defaultValueOptionsFormulae, options) => {\n  const row = {};\n  const dataValidation = {};\n  const mergedCells = [];\n  const firstCellParams = apiRef.current.getCellParams(id, columns[0].field);\n  const outlineLevel = firstCellParams.rowNode.depth;\n  const hasColSpan = (0, _internals.gridHasColSpanSelector)(apiRef);\n\n  if (hasColSpan) {\n    // `colSpan` is only calculated for rendered rows, so we need to calculate it during export for every row\n    apiRef.current.calculateColSpan({\n      rowId: id,\n      minFirstColumn: 0,\n      maxLastColumn: columns.length,\n      columns\n    });\n  }\n\n  columns.forEach((column, colIndex) => {\n    const colSpanInfo = hasColSpan ? apiRef.current.unstable_getCellColSpanInfo(id, colIndex) : undefined;\n\n    if (colSpanInfo && colSpanInfo.spannedByColSpan) {\n      return;\n    }\n\n    if (colSpanInfo && colSpanInfo.cellProps.colSpan > 1) {\n      mergedCells.push({\n        leftIndex: colIndex + 1,\n        rightIndex: colIndex + colSpanInfo.cellProps.colSpan\n      });\n    }\n\n    const cellParams = apiRef.current.getCellParams(id, column.field);\n    let cellValue;\n\n    switch (cellParams.colDef.type) {\n      case 'singleSelect':\n        {\n          const castColumn = cellParams.colDef;\n\n          if (typeof castColumn.valueOptions === 'function') {\n            // If value option depends on the row, set specific options to the cell\n            // This dataValidation is buggy with LibreOffice and does not allow to have coma\n            const valueOptions = castColumn.valueOptions({\n              id,\n              row,\n              field: cellParams.field\n            });\n            const formattedValueOptions = getFormattedValueOptions(castColumn, row, valueOptions, apiRef.current);\n            dataValidation[castColumn.field] = {\n              type: 'list',\n              allowBlank: true,\n              formulae: [`\"${formattedValueOptions.map(x => x.toString().replaceAll(',', 'CHAR(44)')).join(',')}\"`]\n            };\n          } else {\n            const address = defaultValueOptionsFormulae[column.field].address; // If value option is defined for the column, refer to another sheet\n\n            dataValidation[castColumn.field] = {\n              type: 'list',\n              allowBlank: true,\n              formulae: [address]\n            };\n          }\n\n          const formattedValue = apiRef.current.getCellParams(id, castColumn.field).formattedValue;\n\n          if (process.env.NODE_ENV !== 'production') {\n            if (String(cellParams.formattedValue) === '[object Object]') {\n              warnInvalidFormattedValue();\n            }\n          }\n\n          if ((0, _internals.isObject)(formattedValue)) {\n            row[castColumn.field] = formattedValue?.label;\n          } else {\n            row[castColumn.field] = formattedValue;\n          }\n\n          break;\n        }\n\n      case 'boolean':\n      case 'number':\n        cellValue = apiRef.current.getCellParams(id, column.field).value;\n        break;\n\n      case 'date':\n      case 'dateTime':\n        {\n          // Excel does not do any timezone conversion, so we create a date using UTC instead of local timezone\n          // Solution from: https://github.com/exceljs/exceljs/issues/486#issuecomment-432557582\n          // About Date.UTC(): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/UTC#exemples\n          const value = apiRef.current.getCellParams(id, column.field).value; // value may be `undefined` in auto-generated grouping rows\n\n          if (!value) {\n            break;\n          }\n\n          const utcDate = new Date(Date.UTC(value.getFullYear(), value.getMonth(), value.getDate(), value.getHours(), value.getMinutes(), value.getSeconds()));\n          row[column.field] = utcDate;\n          break;\n        }\n\n      case 'actions':\n        break;\n\n      default:\n        cellValue = apiRef.current.getCellParams(id, column.field).formattedValue;\n\n        if (process.env.NODE_ENV !== 'production') {\n          if (String(cellParams.formattedValue) === '[object Object]') {\n            warnInvalidFormattedValue();\n          }\n        }\n\n        break;\n    }\n\n    if (typeof cellValue === 'string' && options.escapeFormulas) {\n      // See https://owasp.org/www-community/attacks/CSV_Injection\n      if (['=', '+', '-', '@', '\\t', '\\r'].includes(cellValue[0])) {\n        cellValue = `'${cellValue}`;\n      }\n    }\n\n    if (typeof cellValue !== 'undefined') {\n      row[column.field] = cellValue;\n    }\n  });\n  return {\n    row,\n    dataValidation,\n    outlineLevel,\n    mergedCells\n  };\n};\n\nexports.serializeRowUnsafe = serializeRowUnsafe;\nconst defaultColumnsStyles = {\n  [_xDataGridPro.GRID_DATE_COL_DEF.type]: {\n    numFmt: 'dd.mm.yyyy'\n  },\n  [_xDataGridPro.GRID_DATETIME_COL_DEF.type]: {\n    numFmt: 'dd.mm.yyyy hh:mm'\n  }\n};\n\nconst serializeColumn = (column, columnsStyles) => {\n  const {\n    field,\n    type\n  } = column;\n  return {\n    key: field,\n    headerText: column.headerName ?? column.field,\n    // Excel width must stay between 0 and 255 (https://support.microsoft.com/en-us/office/change-the-column-width-and-row-height-72f5e3cc-994d-43e8-ae58-9774a0905f46)\n    // From the example of column width behavior (https://docs.microsoft.com/en-US/office/troubleshoot/excel/determine-column-widths#example-of-column-width-behavior)\n    // a value of 10 corresponds to 75px. This is an approximation, because column width depends on the font-size\n    width: Math.min(255, column.width ? column.width / 7.5 : 8.43),\n    style: (0, _extends2.default)({}, type && defaultColumnsStyles?.[type], columnsStyles?.[field])\n  };\n};\n\nexports.serializeColumn = serializeColumn;\n\nconst addColumnGroupingHeaders = (worksheet, columns, columnGroupPaths, columnGroupDetails) => {\n  const maxDepth = Math.max(...columns.map(_ref => {\n    let {\n      key\n    } = _ref;\n    return columnGroupPaths[key]?.length ?? 0;\n  }));\n\n  if (maxDepth === 0) {\n    return;\n  }\n\n  for (let rowIndex = 0; rowIndex < maxDepth; rowIndex += 1) {\n    const row = columns.map(_ref2 => {\n      let {\n        key\n      } = _ref2;\n      const groupingPath = columnGroupPaths[key];\n\n      if (groupingPath.length <= rowIndex) {\n        return {\n          groupId: null,\n          parents: groupingPath\n        };\n      }\n\n      return (0, _extends2.default)({}, columnGroupDetails[groupingPath[rowIndex]], {\n        parents: groupingPath.slice(0, rowIndex)\n      });\n    });\n    const newRow = worksheet.addRow(row.map(group => group.groupId === null ? null : group?.headerName ?? group.groupId)); // use `rowCount`, since worksheet can have additional rows added in `exceljsPreProcess`\n\n    const lastRowIndex = newRow.worksheet.rowCount;\n    let leftIndex = 0;\n    let rightIndex = 1;\n\n    while (rightIndex < columns.length) {\n      const {\n        groupId: leftGroupId,\n        parents: leftParents\n      } = row[leftIndex];\n      const {\n        groupId: rightGroupId,\n        parents: rightParents\n      } = row[rightIndex];\n      const areInSameGroup = leftGroupId === rightGroupId && leftParents.length === rightParents.length && leftParents.every((leftParent, index) => rightParents[index] === leftParent);\n\n      if (areInSameGroup) {\n        rightIndex += 1;\n      } else {\n        if (rightIndex - leftIndex > 1) {\n          worksheet.mergeCells(lastRowIndex, leftIndex + 1, lastRowIndex, rightIndex);\n        }\n\n        leftIndex = rightIndex;\n        rightIndex += 1;\n      }\n    }\n\n    if (rightIndex - leftIndex > 1) {\n      worksheet.mergeCells(lastRowIndex, leftIndex + 1, lastRowIndex, rightIndex);\n    }\n  }\n};\n\nfunction serializeColumns(columns, styles) {\n  return columns.map(column => serializeColumn(column, styles));\n}\n\nasync function getDataForValueOptionsSheet(columns, valueOptionsSheetName, api) {\n  const candidateColumns = columns.filter(column => (0, _internals.isSingleSelectColDef)(column) && Array.isArray(column.valueOptions)); // Creates a temp worksheet to obtain the column letters\n\n  const excelJS = await getExcelJs();\n  const workbook = new excelJS.Workbook();\n  const worksheet = workbook.addWorksheet('Sheet1');\n  worksheet.columns = candidateColumns.map(column => ({\n    key: column.field\n  }));\n  return candidateColumns.reduce((acc, column) => {\n    const singleSelectColumn = column;\n    const formattedValueOptions = getFormattedValueOptions(singleSelectColumn, {}, singleSelectColumn.valueOptions, api);\n    const header = column.headerName ?? column.field;\n    const values = [header, ...formattedValueOptions];\n    const letter = worksheet.getColumn(column.field).letter;\n    const address = `${valueOptionsSheetName}!$${letter}$2:$${letter}$${values.length}`;\n    acc[column.field] = {\n      values,\n      address\n    };\n    return acc;\n  }, {});\n}\n\nfunction addSerializedRowToWorksheet(serializedRow, worksheet) {\n  const {\n    row,\n    dataValidation,\n    outlineLevel,\n    mergedCells\n  } = serializedRow;\n  const newRow = worksheet.addRow(row);\n  Object.keys(dataValidation).forEach(field => {\n    newRow.getCell(field).dataValidation = (0, _extends2.default)({}, dataValidation[field]);\n  });\n\n  if (outlineLevel) {\n    newRow.outlineLevel = outlineLevel;\n  } // use `rowCount`, since worksheet can have additional rows added in `exceljsPreProcess`\n\n\n  const lastRowIndex = newRow.worksheet.rowCount;\n  mergedCells.forEach(mergedCell => {\n    worksheet.mergeCells(lastRowIndex, mergedCell.leftIndex, lastRowIndex, mergedCell.rightIndex);\n  });\n}\n\nasync function createValueOptionsSheetIfNeeded(valueOptionsData, sheetName, workbook) {\n  if (Object.keys(valueOptionsData).length === 0) {\n    return;\n  }\n\n  const valueOptionsWorksheet = workbook.addWorksheet(sheetName);\n  valueOptionsWorksheet.columns = Object.keys(valueOptionsData).map(key => ({\n    key\n  }));\n  Object.entries(valueOptionsData).forEach(_ref3 => {\n    let [field, {\n      values\n    }] = _ref3;\n    valueOptionsWorksheet.getColumn(field).values = values;\n  });\n}\n\nasync function buildExcel(options, apiRef) {\n  const {\n    columns,\n    rowIds,\n    includeHeaders,\n    includeColumnGroupsHeaders,\n    valueOptionsSheetName = 'Options',\n    exceljsPreProcess,\n    exceljsPostProcess,\n    columnsStyles = {}\n  } = options;\n  const excelJS = await getExcelJs();\n  const workbook = new excelJS.Workbook();\n  const worksheet = workbook.addWorksheet('Sheet1');\n  const serializedColumns = serializeColumns(columns, columnsStyles);\n  worksheet.columns = serializedColumns;\n\n  if (exceljsPreProcess) {\n    await exceljsPreProcess({\n      workbook,\n      worksheet\n    });\n  }\n\n  if (includeColumnGroupsHeaders) {\n    const columnGroupPaths = columns.reduce((acc, column) => {\n      acc[column.field] = apiRef.current.getColumnGroupPath(column.field);\n      return acc;\n    }, {});\n    addColumnGroupingHeaders(worksheet, serializedColumns, columnGroupPaths, apiRef.current.getAllGroupDetails());\n  }\n\n  if (includeHeaders) {\n    worksheet.addRow(columns.map(column => column.headerName ?? column.field));\n  }\n\n  const valueOptionsData = await getDataForValueOptionsSheet(columns, valueOptionsSheetName, apiRef.current);\n  createValueOptionsSheetIfNeeded(valueOptionsData, valueOptionsSheetName, workbook);\n  apiRef.current.resetColSpan();\n  rowIds.forEach(id => {\n    const serializedRow = serializeRowUnsafe(id, columns, apiRef, valueOptionsData, options);\n    addSerializedRowToWorksheet(serializedRow, worksheet);\n  });\n  apiRef.current.resetColSpan();\n\n  if (exceljsPostProcess) {\n    await exceljsPostProcess({\n      workbook,\n      worksheet\n    });\n  }\n\n  return workbook;\n}\n\nfunction setupExcelExportWebWorker() {\n  let workerOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  // eslint-disable-next-line no-restricted-globals\n  addEventListener('message', async event => {\n    const {\n      serializedColumns,\n      serializedRows,\n      options,\n      valueOptionsSheetName,\n      valueOptionsData,\n      columnGroupDetails,\n      columnGroupPaths\n    } = event.data;\n    const {\n      exceljsPostProcess,\n      exceljsPreProcess\n    } = workerOptions;\n    const excelJS = await getExcelJs();\n    const workbook = new excelJS.Workbook();\n    const worksheet = workbook.addWorksheet('Sheet1');\n    worksheet.columns = serializedColumns;\n\n    if (exceljsPreProcess) {\n      await exceljsPreProcess({\n        workbook,\n        worksheet\n      });\n    }\n\n    if (options.includeColumnGroupsHeaders) {\n      addColumnGroupingHeaders(worksheet, serializedColumns, columnGroupPaths, columnGroupDetails);\n    }\n\n    const includeHeaders = options.includeHeaders ?? true;\n\n    if (includeHeaders) {\n      worksheet.addRow(serializedColumns.map(column => column.headerText));\n    }\n\n    createValueOptionsSheetIfNeeded(valueOptionsData, valueOptionsSheetName, workbook);\n    serializedRows.forEach(serializedRow => {\n      addSerializedRowToWorksheet(serializedRow, worksheet);\n    });\n\n    if (exceljsPostProcess) {\n      await exceljsPostProcess({\n        workbook,\n        worksheet\n      });\n    }\n\n    postMessage(await workbook.xlsx.writeBuffer());\n  });\n}","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","buildExcel","getDataForValueOptionsSheet","serializeColumn","serializeColumns","serializeRowUnsafe","setupExcelExportWebWorker","_extends2","_xDataGridPro","_internals","_getRequireWildcardCache","e","WeakMap","r","t","_interopRequireWildcard","__esModule","default","has","get","n","__proto__","a","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","getExcelJs","excelJsModule","Promise","resolve","then","warnInvalidFormattedValue","buildWarning","getFormattedValueOptions","colDef","row","valueOptions","api","valueOptionsFormatted","valueFormatter","map","option","String","current","label","id","columns","apiRef","defaultValueOptionsFormulae","options","dataValidation","mergedCells","firstCellParams","getCellParams","field","outlineLevel","rowNode","depth","hasColSpan","gridHasColSpanSelector","calculateColSpan","rowId","minFirstColumn","maxLastColumn","length","forEach","column","colIndex","colSpanInfo","unstable_getCellColSpanInfo","undefined","spannedByColSpan","cellProps","colSpan","push","leftIndex","rightIndex","cellParams","cellValue","type","castColumn","formattedValueOptions","allowBlank","formulae","x","toString","replaceAll","join","address","formattedValue","process","env","NODE_ENV","isObject","utcDate","Date","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","escapeFormulas","includes","defaultColumnsStyles","GRID_DATE_COL_DEF","numFmt","GRID_DATETIME_COL_DEF","columnsStyles","key","headerText","headerName","width","Math","min","style","addColumnGroupingHeaders","worksheet","columnGroupPaths","columnGroupDetails","maxDepth","max","rowIndex","groupingPath","groupId","parents","slice","newRow","addRow","group","lastRowIndex","rowCount","leftGroupId","leftParents","rightGroupId","rightParents","areInSameGroup","every","leftParent","index","mergeCells","styles","valueOptionsSheetName","candidateColumns","filter","isSingleSelectColDef","Array","isArray","excelJS","workbook","Workbook","addWorksheet","reduce","acc","singleSelectColumn","header","values","letter","getColumn","addSerializedRowToWorksheet","serializedRow","keys","getCell","mergedCell","createValueOptionsSheetIfNeeded","valueOptionsData","sheetName","valueOptionsWorksheet","entries","rowIds","includeHeaders","includeColumnGroupsHeaders","exceljsPreProcess","exceljsPostProcess","serializedColumns","getColumnGroupPath","getAllGroupDetails","resetColSpan","workerOptions","addEventListener","event","serializedRows","data","postMessage","xlsx","writeBuffer"],"sources":["C:/Users/kb/node_modules/@mui/x-data-grid-premium/hooks/features/export/serializer/excelSerializer.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildExcel = buildExcel;\nexports.getDataForValueOptionsSheet = getDataForValueOptionsSheet;\nexports.serializeColumn = void 0;\nexports.serializeColumns = serializeColumns;\nexports.serializeRowUnsafe = void 0;\nexports.setupExcelExportWebWorker = setupExcelExportWebWorker;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _xDataGridPro = require(\"@mui/x-data-grid-pro\");\nvar _internals = require(\"@mui/x-data-grid/internals\");\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\nconst getExcelJs = async () => {\n  const excelJsModule = await Promise.resolve().then(() => _interopRequireWildcard(require('exceljs')));\n  return excelJsModule.default ?? excelJsModule;\n};\nconst warnInvalidFormattedValue = (0, _internals.buildWarning)(['MUI X: When the value of a field is an object or a `renderCell` is provided, the Excel export might not display the value correctly.', 'You can provide a `valueFormatter` with a string representation to be used.']);\nconst getFormattedValueOptions = (colDef, row, valueOptions, api) => {\n  if (!colDef.valueOptions) {\n    return [];\n  }\n  let valueOptionsFormatted = valueOptions;\n  if (colDef.valueFormatter) {\n    valueOptionsFormatted = valueOptionsFormatted.map(option => {\n      if (typeof option === 'object') {\n        return option;\n      }\n      return String(colDef.valueFormatter(option, row, colDef, {\n        current: api\n      }));\n    });\n  }\n  return valueOptionsFormatted.map(option => typeof option === 'object' ? option.label : option);\n};\n/**\n * FIXME: This function mutates the colspan info, but colspan info assumes that the columns\n * passed to it are always consistent. In this case, the exported columns may differ from the\n * actual rendered columns.\n * The caller of this function MUST call `resetColSpan()` before and after usage.\n */\nconst serializeRowUnsafe = (id, columns, apiRef, defaultValueOptionsFormulae, options) => {\n  const row = {};\n  const dataValidation = {};\n  const mergedCells = [];\n  const firstCellParams = apiRef.current.getCellParams(id, columns[0].field);\n  const outlineLevel = firstCellParams.rowNode.depth;\n  const hasColSpan = (0, _internals.gridHasColSpanSelector)(apiRef);\n  if (hasColSpan) {\n    // `colSpan` is only calculated for rendered rows, so we need to calculate it during export for every row\n    apiRef.current.calculateColSpan({\n      rowId: id,\n      minFirstColumn: 0,\n      maxLastColumn: columns.length,\n      columns\n    });\n  }\n  columns.forEach((column, colIndex) => {\n    const colSpanInfo = hasColSpan ? apiRef.current.unstable_getCellColSpanInfo(id, colIndex) : undefined;\n    if (colSpanInfo && colSpanInfo.spannedByColSpan) {\n      return;\n    }\n    if (colSpanInfo && colSpanInfo.cellProps.colSpan > 1) {\n      mergedCells.push({\n        leftIndex: colIndex + 1,\n        rightIndex: colIndex + colSpanInfo.cellProps.colSpan\n      });\n    }\n    const cellParams = apiRef.current.getCellParams(id, column.field);\n    let cellValue;\n    switch (cellParams.colDef.type) {\n      case 'singleSelect':\n        {\n          const castColumn = cellParams.colDef;\n          if (typeof castColumn.valueOptions === 'function') {\n            // If value option depends on the row, set specific options to the cell\n            // This dataValidation is buggy with LibreOffice and does not allow to have coma\n            const valueOptions = castColumn.valueOptions({\n              id,\n              row,\n              field: cellParams.field\n            });\n            const formattedValueOptions = getFormattedValueOptions(castColumn, row, valueOptions, apiRef.current);\n            dataValidation[castColumn.field] = {\n              type: 'list',\n              allowBlank: true,\n              formulae: [`\"${formattedValueOptions.map(x => x.toString().replaceAll(',', 'CHAR(44)')).join(',')}\"`]\n            };\n          } else {\n            const address = defaultValueOptionsFormulae[column.field].address;\n\n            // If value option is defined for the column, refer to another sheet\n            dataValidation[castColumn.field] = {\n              type: 'list',\n              allowBlank: true,\n              formulae: [address]\n            };\n          }\n          const formattedValue = apiRef.current.getCellParams(id, castColumn.field).formattedValue;\n          if (process.env.NODE_ENV !== 'production') {\n            if (String(cellParams.formattedValue) === '[object Object]') {\n              warnInvalidFormattedValue();\n            }\n          }\n          if ((0, _internals.isObject)(formattedValue)) {\n            row[castColumn.field] = formattedValue?.label;\n          } else {\n            row[castColumn.field] = formattedValue;\n          }\n          break;\n        }\n      case 'boolean':\n      case 'number':\n        cellValue = apiRef.current.getCellParams(id, column.field).value;\n        break;\n      case 'date':\n      case 'dateTime':\n        {\n          // Excel does not do any timezone conversion, so we create a date using UTC instead of local timezone\n          // Solution from: https://github.com/exceljs/exceljs/issues/486#issuecomment-432557582\n          // About Date.UTC(): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/UTC#exemples\n          const value = apiRef.current.getCellParams(id, column.field).value;\n          // value may be `undefined` in auto-generated grouping rows\n          if (!value) {\n            break;\n          }\n          const utcDate = new Date(Date.UTC(value.getFullYear(), value.getMonth(), value.getDate(), value.getHours(), value.getMinutes(), value.getSeconds()));\n          row[column.field] = utcDate;\n          break;\n        }\n      case 'actions':\n        break;\n      default:\n        cellValue = apiRef.current.getCellParams(id, column.field).formattedValue;\n        if (process.env.NODE_ENV !== 'production') {\n          if (String(cellParams.formattedValue) === '[object Object]') {\n            warnInvalidFormattedValue();\n          }\n        }\n        break;\n    }\n    if (typeof cellValue === 'string' && options.escapeFormulas) {\n      // See https://owasp.org/www-community/attacks/CSV_Injection\n      if (['=', '+', '-', '@', '\\t', '\\r'].includes(cellValue[0])) {\n        cellValue = `'${cellValue}`;\n      }\n    }\n    if (typeof cellValue !== 'undefined') {\n      row[column.field] = cellValue;\n    }\n  });\n  return {\n    row,\n    dataValidation,\n    outlineLevel,\n    mergedCells\n  };\n};\nexports.serializeRowUnsafe = serializeRowUnsafe;\nconst defaultColumnsStyles = {\n  [_xDataGridPro.GRID_DATE_COL_DEF.type]: {\n    numFmt: 'dd.mm.yyyy'\n  },\n  [_xDataGridPro.GRID_DATETIME_COL_DEF.type]: {\n    numFmt: 'dd.mm.yyyy hh:mm'\n  }\n};\nconst serializeColumn = (column, columnsStyles) => {\n  const {\n    field,\n    type\n  } = column;\n  return {\n    key: field,\n    headerText: column.headerName ?? column.field,\n    // Excel width must stay between 0 and 255 (https://support.microsoft.com/en-us/office/change-the-column-width-and-row-height-72f5e3cc-994d-43e8-ae58-9774a0905f46)\n    // From the example of column width behavior (https://docs.microsoft.com/en-US/office/troubleshoot/excel/determine-column-widths#example-of-column-width-behavior)\n    // a value of 10 corresponds to 75px. This is an approximation, because column width depends on the font-size\n    width: Math.min(255, column.width ? column.width / 7.5 : 8.43),\n    style: (0, _extends2.default)({}, type && defaultColumnsStyles?.[type], columnsStyles?.[field])\n  };\n};\nexports.serializeColumn = serializeColumn;\nconst addColumnGroupingHeaders = (worksheet, columns, columnGroupPaths, columnGroupDetails) => {\n  const maxDepth = Math.max(...columns.map(({\n    key\n  }) => columnGroupPaths[key]?.length ?? 0));\n  if (maxDepth === 0) {\n    return;\n  }\n  for (let rowIndex = 0; rowIndex < maxDepth; rowIndex += 1) {\n    const row = columns.map(({\n      key\n    }) => {\n      const groupingPath = columnGroupPaths[key];\n      if (groupingPath.length <= rowIndex) {\n        return {\n          groupId: null,\n          parents: groupingPath\n        };\n      }\n      return (0, _extends2.default)({}, columnGroupDetails[groupingPath[rowIndex]], {\n        parents: groupingPath.slice(0, rowIndex)\n      });\n    });\n    const newRow = worksheet.addRow(row.map(group => group.groupId === null ? null : group?.headerName ?? group.groupId));\n\n    // use `rowCount`, since worksheet can have additional rows added in `exceljsPreProcess`\n    const lastRowIndex = newRow.worksheet.rowCount;\n    let leftIndex = 0;\n    let rightIndex = 1;\n    while (rightIndex < columns.length) {\n      const {\n        groupId: leftGroupId,\n        parents: leftParents\n      } = row[leftIndex];\n      const {\n        groupId: rightGroupId,\n        parents: rightParents\n      } = row[rightIndex];\n      const areInSameGroup = leftGroupId === rightGroupId && leftParents.length === rightParents.length && leftParents.every((leftParent, index) => rightParents[index] === leftParent);\n      if (areInSameGroup) {\n        rightIndex += 1;\n      } else {\n        if (rightIndex - leftIndex > 1) {\n          worksheet.mergeCells(lastRowIndex, leftIndex + 1, lastRowIndex, rightIndex);\n        }\n        leftIndex = rightIndex;\n        rightIndex += 1;\n      }\n    }\n    if (rightIndex - leftIndex > 1) {\n      worksheet.mergeCells(lastRowIndex, leftIndex + 1, lastRowIndex, rightIndex);\n    }\n  }\n};\nfunction serializeColumns(columns, styles) {\n  return columns.map(column => serializeColumn(column, styles));\n}\nasync function getDataForValueOptionsSheet(columns, valueOptionsSheetName, api) {\n  const candidateColumns = columns.filter(column => (0, _internals.isSingleSelectColDef)(column) && Array.isArray(column.valueOptions));\n\n  // Creates a temp worksheet to obtain the column letters\n  const excelJS = await getExcelJs();\n  const workbook = new excelJS.Workbook();\n  const worksheet = workbook.addWorksheet('Sheet1');\n  worksheet.columns = candidateColumns.map(column => ({\n    key: column.field\n  }));\n  return candidateColumns.reduce((acc, column) => {\n    const singleSelectColumn = column;\n    const formattedValueOptions = getFormattedValueOptions(singleSelectColumn, {}, singleSelectColumn.valueOptions, api);\n    const header = column.headerName ?? column.field;\n    const values = [header, ...formattedValueOptions];\n    const letter = worksheet.getColumn(column.field).letter;\n    const address = `${valueOptionsSheetName}!$${letter}$2:$${letter}$${values.length}`;\n    acc[column.field] = {\n      values,\n      address\n    };\n    return acc;\n  }, {});\n}\nfunction addSerializedRowToWorksheet(serializedRow, worksheet) {\n  const {\n    row,\n    dataValidation,\n    outlineLevel,\n    mergedCells\n  } = serializedRow;\n  const newRow = worksheet.addRow(row);\n  Object.keys(dataValidation).forEach(field => {\n    newRow.getCell(field).dataValidation = (0, _extends2.default)({}, dataValidation[field]);\n  });\n  if (outlineLevel) {\n    newRow.outlineLevel = outlineLevel;\n  }\n\n  // use `rowCount`, since worksheet can have additional rows added in `exceljsPreProcess`\n  const lastRowIndex = newRow.worksheet.rowCount;\n  mergedCells.forEach(mergedCell => {\n    worksheet.mergeCells(lastRowIndex, mergedCell.leftIndex, lastRowIndex, mergedCell.rightIndex);\n  });\n}\nasync function createValueOptionsSheetIfNeeded(valueOptionsData, sheetName, workbook) {\n  if (Object.keys(valueOptionsData).length === 0) {\n    return;\n  }\n  const valueOptionsWorksheet = workbook.addWorksheet(sheetName);\n  valueOptionsWorksheet.columns = Object.keys(valueOptionsData).map(key => ({\n    key\n  }));\n  Object.entries(valueOptionsData).forEach(([field, {\n    values\n  }]) => {\n    valueOptionsWorksheet.getColumn(field).values = values;\n  });\n}\nasync function buildExcel(options, apiRef) {\n  const {\n    columns,\n    rowIds,\n    includeHeaders,\n    includeColumnGroupsHeaders,\n    valueOptionsSheetName = 'Options',\n    exceljsPreProcess,\n    exceljsPostProcess,\n    columnsStyles = {}\n  } = options;\n  const excelJS = await getExcelJs();\n  const workbook = new excelJS.Workbook();\n  const worksheet = workbook.addWorksheet('Sheet1');\n  const serializedColumns = serializeColumns(columns, columnsStyles);\n  worksheet.columns = serializedColumns;\n  if (exceljsPreProcess) {\n    await exceljsPreProcess({\n      workbook,\n      worksheet\n    });\n  }\n  if (includeColumnGroupsHeaders) {\n    const columnGroupPaths = columns.reduce((acc, column) => {\n      acc[column.field] = apiRef.current.getColumnGroupPath(column.field);\n      return acc;\n    }, {});\n    addColumnGroupingHeaders(worksheet, serializedColumns, columnGroupPaths, apiRef.current.getAllGroupDetails());\n  }\n  if (includeHeaders) {\n    worksheet.addRow(columns.map(column => column.headerName ?? column.field));\n  }\n  const valueOptionsData = await getDataForValueOptionsSheet(columns, valueOptionsSheetName, apiRef.current);\n  createValueOptionsSheetIfNeeded(valueOptionsData, valueOptionsSheetName, workbook);\n  apiRef.current.resetColSpan();\n  rowIds.forEach(id => {\n    const serializedRow = serializeRowUnsafe(id, columns, apiRef, valueOptionsData, options);\n    addSerializedRowToWorksheet(serializedRow, worksheet);\n  });\n  apiRef.current.resetColSpan();\n  if (exceljsPostProcess) {\n    await exceljsPostProcess({\n      workbook,\n      worksheet\n    });\n  }\n  return workbook;\n}\nfunction setupExcelExportWebWorker(workerOptions = {}) {\n  // eslint-disable-next-line no-restricted-globals\n  addEventListener('message', async event => {\n    const {\n      serializedColumns,\n      serializedRows,\n      options,\n      valueOptionsSheetName,\n      valueOptionsData,\n      columnGroupDetails,\n      columnGroupPaths\n    } = event.data;\n    const {\n      exceljsPostProcess,\n      exceljsPreProcess\n    } = workerOptions;\n    const excelJS = await getExcelJs();\n    const workbook = new excelJS.Workbook();\n    const worksheet = workbook.addWorksheet('Sheet1');\n    worksheet.columns = serializedColumns;\n    if (exceljsPreProcess) {\n      await exceljsPreProcess({\n        workbook,\n        worksheet\n      });\n    }\n    if (options.includeColumnGroupsHeaders) {\n      addColumnGroupingHeaders(worksheet, serializedColumns, columnGroupPaths, columnGroupDetails);\n    }\n    const includeHeaders = options.includeHeaders ?? true;\n    if (includeHeaders) {\n      worksheet.addRow(serializedColumns.map(column => column.headerText));\n    }\n    createValueOptionsSheetIfNeeded(valueOptionsData, valueOptionsSheetName, workbook);\n    serializedRows.forEach(serializedRow => {\n      addSerializedRowToWorksheet(serializedRow, worksheet);\n    });\n    if (exceljsPostProcess) {\n      await exceljsPostProcess({\n        workbook,\n        worksheet\n      });\n    }\n    postMessage(await workbook.xlsx.writeBuffer());\n  });\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}