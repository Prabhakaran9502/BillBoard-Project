{"ast":null,"code":"import * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { unstable_useControlled as useControlled } from '@mui/utils';\nlet warnedOnceNotValidView = false;\nexport function useViews(_ref) {\n  let {\n    onChange,\n    onViewChange,\n    openTo,\n    view: inView,\n    views,\n    autoFocus,\n    focusedView: inFocusedView,\n    onFocusedViewChange\n  } = _ref;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!warnedOnceNotValidView) {\n      if (inView != null && !views.includes(inView)) {\n        console.warn(`MUI X: \\`view=\"${inView}\"\\` is not a valid prop.`, `It must be an element of \\`views=[\"${views.join('\", \"')}\"]\\`.`);\n        warnedOnceNotValidView = true;\n      }\n\n      if (inView == null && openTo != null && !views.includes(openTo)) {\n        console.warn(`MUI X: \\`openTo=\"${openTo}\"\\` is not a valid prop.`, `It must be an element of \\`views=[\"${views.join('\", \"')}\"]\\`.`);\n        warnedOnceNotValidView = true;\n      }\n    }\n  }\n\n  const previousOpenTo = React.useRef(openTo);\n  const previousViews = React.useRef(views);\n  const defaultView = React.useRef(views.includes(openTo) ? openTo : views[0]);\n  const [view, setView] = useControlled({\n    name: 'useViews',\n    state: 'view',\n    controlled: inView,\n    default: defaultView.current\n  });\n  const defaultFocusedView = React.useRef(autoFocus ? view : null);\n  const [focusedView, setFocusedView] = useControlled({\n    name: 'useViews',\n    state: 'focusedView',\n    controlled: inFocusedView,\n    default: defaultFocusedView.current\n  });\n  React.useEffect(() => {\n    // Update the current view when `openTo` or `views` props change\n    if (previousOpenTo.current && previousOpenTo.current !== openTo || previousViews.current && previousViews.current.some(previousView => !views.includes(previousView))) {\n      setView(views.includes(openTo) ? openTo : views[0]);\n      previousViews.current = views;\n      previousOpenTo.current = openTo;\n    }\n  }, [openTo, setView, view, views]);\n  const viewIndex = views.indexOf(view);\n  const previousView = views[viewIndex - 1] ?? null;\n  const nextView = views[viewIndex + 1] ?? null;\n  const handleFocusedViewChange = useEventCallback((viewToFocus, hasFocus) => {\n    if (hasFocus) {\n      // Focus event\n      setFocusedView(viewToFocus);\n    } else {\n      // Blur event\n      setFocusedView(prevFocusedView => viewToFocus === prevFocusedView ? null : prevFocusedView // If false the blur is due to view switching\n      );\n    }\n\n    onFocusedViewChange?.(viewToFocus, hasFocus);\n  });\n  const handleChangeView = useEventCallback(newView => {\n    // always keep the focused view in sync\n    handleFocusedViewChange(newView, true);\n\n    if (newView === view) {\n      return;\n    }\n\n    setView(newView);\n\n    if (onViewChange) {\n      onViewChange(newView);\n    }\n  });\n  const goToNextView = useEventCallback(() => {\n    if (nextView) {\n      handleChangeView(nextView);\n    }\n  });\n  const setValueAndGoToNextView = useEventCallback((value, currentViewSelectionState, selectedView) => {\n    const isSelectionFinishedOnCurrentView = currentViewSelectionState === 'finish';\n    const hasMoreViews = selectedView ? // handles case like `DateTimePicker`, where a view might return a `finish` selection state\n    // but when it's not the final view given all `views` -> overall selection state should be `partial`.\n    views.indexOf(selectedView) < views.length - 1 : Boolean(nextView);\n    const globalSelectionState = isSelectionFinishedOnCurrentView && hasMoreViews ? 'partial' : currentViewSelectionState;\n    onChange(value, globalSelectionState, selectedView); // Detects if the selected view is not the active one.\n    // Can happen if multiple views are displayed, like in `DesktopDateTimePicker` or `MultiSectionDigitalClock`.\n\n    if (selectedView && selectedView !== view) {\n      const nextViewAfterSelected = views[views.indexOf(selectedView) + 1];\n\n      if (nextViewAfterSelected) {\n        // move to next view after the selected one\n        handleChangeView(nextViewAfterSelected);\n      }\n    } else if (isSelectionFinishedOnCurrentView) {\n      goToNextView();\n    }\n  });\n  return {\n    view,\n    setView: handleChangeView,\n    focusedView,\n    setFocusedView: handleFocusedViewChange,\n    nextView,\n    previousView,\n    // Always return up-to-date default view instead of the initial one (i.e. defaultView.current)\n    defaultView: views.includes(openTo) ? openTo : views[0],\n    goToNextView,\n    setValueAndGoToNextView\n  };\n}","map":{"version":3,"names":["React","useEventCallback","unstable_useControlled","useControlled","warnedOnceNotValidView","useViews","onChange","onViewChange","openTo","view","inView","views","autoFocus","focusedView","inFocusedView","onFocusedViewChange","process","env","NODE_ENV","includes","console","warn","join","previousOpenTo","useRef","previousViews","defaultView","setView","name","state","controlled","default","current","defaultFocusedView","setFocusedView","useEffect","some","previousView","viewIndex","indexOf","nextView","handleFocusedViewChange","viewToFocus","hasFocus","prevFocusedView","handleChangeView","newView","goToNextView","setValueAndGoToNextView","value","currentViewSelectionState","selectedView","isSelectionFinishedOnCurrentView","hasMoreViews","length","Boolean","globalSelectionState","nextViewAfterSelected"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/@mui/x-date-pickers/internals/hooks/useViews.js"],"sourcesContent":["import * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { unstable_useControlled as useControlled } from '@mui/utils';\nlet warnedOnceNotValidView = false;\nexport function useViews({\n  onChange,\n  onViewChange,\n  openTo,\n  view: inView,\n  views,\n  autoFocus,\n  focusedView: inFocusedView,\n  onFocusedViewChange\n}) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!warnedOnceNotValidView) {\n      if (inView != null && !views.includes(inView)) {\n        console.warn(`MUI X: \\`view=\"${inView}\"\\` is not a valid prop.`, `It must be an element of \\`views=[\"${views.join('\", \"')}\"]\\`.`);\n        warnedOnceNotValidView = true;\n      }\n      if (inView == null && openTo != null && !views.includes(openTo)) {\n        console.warn(`MUI X: \\`openTo=\"${openTo}\"\\` is not a valid prop.`, `It must be an element of \\`views=[\"${views.join('\", \"')}\"]\\`.`);\n        warnedOnceNotValidView = true;\n      }\n    }\n  }\n  const previousOpenTo = React.useRef(openTo);\n  const previousViews = React.useRef(views);\n  const defaultView = React.useRef(views.includes(openTo) ? openTo : views[0]);\n  const [view, setView] = useControlled({\n    name: 'useViews',\n    state: 'view',\n    controlled: inView,\n    default: defaultView.current\n  });\n  const defaultFocusedView = React.useRef(autoFocus ? view : null);\n  const [focusedView, setFocusedView] = useControlled({\n    name: 'useViews',\n    state: 'focusedView',\n    controlled: inFocusedView,\n    default: defaultFocusedView.current\n  });\n  React.useEffect(() => {\n    // Update the current view when `openTo` or `views` props change\n    if (previousOpenTo.current && previousOpenTo.current !== openTo || previousViews.current && previousViews.current.some(previousView => !views.includes(previousView))) {\n      setView(views.includes(openTo) ? openTo : views[0]);\n      previousViews.current = views;\n      previousOpenTo.current = openTo;\n    }\n  }, [openTo, setView, view, views]);\n  const viewIndex = views.indexOf(view);\n  const previousView = views[viewIndex - 1] ?? null;\n  const nextView = views[viewIndex + 1] ?? null;\n  const handleFocusedViewChange = useEventCallback((viewToFocus, hasFocus) => {\n    if (hasFocus) {\n      // Focus event\n      setFocusedView(viewToFocus);\n    } else {\n      // Blur event\n      setFocusedView(prevFocusedView => viewToFocus === prevFocusedView ? null : prevFocusedView // If false the blur is due to view switching\n      );\n    }\n    onFocusedViewChange?.(viewToFocus, hasFocus);\n  });\n  const handleChangeView = useEventCallback(newView => {\n    // always keep the focused view in sync\n    handleFocusedViewChange(newView, true);\n    if (newView === view) {\n      return;\n    }\n    setView(newView);\n    if (onViewChange) {\n      onViewChange(newView);\n    }\n  });\n  const goToNextView = useEventCallback(() => {\n    if (nextView) {\n      handleChangeView(nextView);\n    }\n  });\n  const setValueAndGoToNextView = useEventCallback((value, currentViewSelectionState, selectedView) => {\n    const isSelectionFinishedOnCurrentView = currentViewSelectionState === 'finish';\n    const hasMoreViews = selectedView ?\n    // handles case like `DateTimePicker`, where a view might return a `finish` selection state\n    // but when it's not the final view given all `views` -> overall selection state should be `partial`.\n    views.indexOf(selectedView) < views.length - 1 : Boolean(nextView);\n    const globalSelectionState = isSelectionFinishedOnCurrentView && hasMoreViews ? 'partial' : currentViewSelectionState;\n    onChange(value, globalSelectionState, selectedView);\n    // Detects if the selected view is not the active one.\n    // Can happen if multiple views are displayed, like in `DesktopDateTimePicker` or `MultiSectionDigitalClock`.\n    if (selectedView && selectedView !== view) {\n      const nextViewAfterSelected = views[views.indexOf(selectedView) + 1];\n      if (nextViewAfterSelected) {\n        // move to next view after the selected one\n        handleChangeView(nextViewAfterSelected);\n      }\n    } else if (isSelectionFinishedOnCurrentView) {\n      goToNextView();\n    }\n  });\n  return {\n    view,\n    setView: handleChangeView,\n    focusedView,\n    setFocusedView: handleFocusedViewChange,\n    nextView,\n    previousView,\n    // Always return up-to-date default view instead of the initial one (i.e. defaultView.current)\n    defaultView: views.includes(openTo) ? openTo : views[0],\n    goToNextView,\n    setValueAndGoToNextView\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}