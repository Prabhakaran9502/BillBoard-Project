{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridSignature, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridRowsLookupSelector } from '../rows/gridRowsSelector';\nimport { gridRowSelectionStateSelector, selectedGridRowsSelector, selectedIdsLookupSelector } from './gridRowSelectionSelector';\nimport { gridPaginatedVisibleSortedGridRowIdsSelector } from '../pagination';\nimport { gridFocusCellSelector } from '../focus/gridFocusStateSelector';\nimport { gridExpandedSortedRowIdsSelector, gridFilterModelSelector } from '../filter/gridFilterSelector';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF, GRID_ACTIONS_COLUMN_TYPE } from '../../../colDef';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { isKeyboardEvent, isNavigationKey } from '../../../utils/keyboardUtils';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../../../constants/gridDetailPanelToggleField';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { isEventTargetInPortal } from '../../../utils/domUtils';\nimport { isMultipleRowSelectionEnabled } from './utils';\n\nconst getSelectionModelPropValue = (selectionModelProp, prevSelectionModel) => {\n  if (selectionModelProp == null) {\n    return selectionModelProp;\n  }\n\n  if (Array.isArray(selectionModelProp)) {\n    return selectionModelProp;\n  }\n\n  if (prevSelectionModel && prevSelectionModel[0] === selectionModelProp) {\n    return prevSelectionModel;\n  }\n\n  return [selectionModelProp];\n};\n\nexport const rowSelectionStateInitializer = (state, props) => _extends({}, state, {\n  rowSelection: props.rowSelection ? getSelectionModelPropValue(props.rowSelectionModel) ?? [] : []\n});\n/**\n * @requires useGridRows (state, method) - can be after\n * @requires useGridParamsApi (method) - can be after\n * @requires useGridFocus (state) - can be after\n * @requires useGridKeyboardNavigation (`cellKeyDown` event must first be consumed by it)\n */\n\nexport const useGridRowSelection = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridSelection');\n\n  const runIfRowSelectionIsEnabled = callback => function () {\n    if (props.rowSelection) {\n      callback(...arguments);\n    }\n  };\n\n  const propRowSelectionModel = React.useMemo(() => {\n    return getSelectionModelPropValue(props.rowSelectionModel, gridRowSelectionStateSelector(apiRef.current.state));\n  }, [apiRef, props.rowSelectionModel]);\n  const lastRowToggled = React.useRef(null);\n  apiRef.current.registerControlState({\n    stateId: 'rowSelection',\n    propModel: propRowSelectionModel,\n    propOnChange: props.onRowSelectionModelChange,\n    stateSelector: gridRowSelectionStateSelector,\n    changeEvent: 'rowSelectionChange'\n  });\n  const {\n    checkboxSelection,\n    disableRowSelectionOnClick,\n    isRowSelectable: propIsRowSelectable\n  } = props;\n  const canHaveMultipleSelection = isMultipleRowSelectionEnabled(props);\n  const visibleRows = useGridVisibleRows(apiRef, props);\n  const expandMouseRowRangeSelection = React.useCallback(id => {\n    let endId = id;\n    const startId = lastRowToggled.current ?? id;\n    const isSelected = apiRef.current.isRowSelected(id);\n\n    if (isSelected) {\n      const visibleRowIds = gridExpandedSortedRowIdsSelector(apiRef);\n      const startIndex = visibleRowIds.findIndex(rowId => rowId === startId);\n      const endIndex = visibleRowIds.findIndex(rowId => rowId === endId);\n\n      if (startIndex === endIndex) {\n        return;\n      }\n\n      if (startIndex > endIndex) {\n        endId = visibleRowIds[endIndex + 1];\n      } else {\n        endId = visibleRowIds[endIndex - 1];\n      }\n    }\n\n    lastRowToggled.current = id;\n    apiRef.current.selectRowRange({\n      startId,\n      endId\n    }, !isSelected);\n  }, [apiRef]);\n  /**\n   * API METHODS\n   */\n\n  const setRowSelectionModel = React.useCallback(model => {\n    if (props.signature === GridSignature.DataGrid && !canHaveMultipleSelection && Array.isArray(model) && model.length > 1) {\n      throw new Error(['MUI X: `rowSelectionModel` can only contain 1 item in DataGrid.', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock multiple selection.'].join('\\n'));\n    }\n\n    const currentModel = gridRowSelectionStateSelector(apiRef.current.state);\n\n    if (currentModel !== model) {\n      logger.debug(`Setting selection model`);\n      apiRef.current.setState(state => _extends({}, state, {\n        rowSelection: props.rowSelection ? model : []\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger, props.rowSelection, props.signature, canHaveMultipleSelection]);\n  const isRowSelected = React.useCallback(id => gridRowSelectionStateSelector(apiRef.current.state).includes(id), [apiRef]);\n  const isRowSelectable = React.useCallback(id => {\n    if (propIsRowSelectable && !propIsRowSelectable(apiRef.current.getRowParams(id))) {\n      return false;\n    }\n\n    const rowNode = apiRef.current.getRowNode(id);\n\n    if (rowNode?.type === 'footer' || rowNode?.type === 'pinnedRow') {\n      return false;\n    }\n\n    return true;\n  }, [apiRef, propIsRowSelectable]);\n  const getSelectedRows = React.useCallback(() => selectedGridRowsSelector(apiRef), [apiRef]);\n  const selectRow = React.useCallback(function (id) {\n    let isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let resetSelection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (!apiRef.current.isRowSelectable(id)) {\n      return;\n    }\n\n    lastRowToggled.current = id;\n\n    if (resetSelection) {\n      logger.debug(`Setting selection for row ${id}`);\n      apiRef.current.setRowSelectionModel(isSelected ? [id] : []);\n    } else {\n      logger.debug(`Toggling selection for row ${id}`);\n      const selection = gridRowSelectionStateSelector(apiRef.current.state);\n      const newSelection = selection.filter(el => el !== id);\n\n      if (isSelected) {\n        newSelection.push(id);\n      }\n\n      const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n\n      if (isSelectionValid) {\n        apiRef.current.setRowSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, logger, canHaveMultipleSelection]);\n  const selectRows = React.useCallback(function (ids) {\n    let isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let resetSelection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    logger.debug(`Setting selection for several rows`);\n    const selectableIds = ids.filter(id => apiRef.current.isRowSelectable(id));\n    let newSelection;\n\n    if (resetSelection) {\n      newSelection = isSelected ? selectableIds : [];\n    } else {\n      // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n      const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n\n      selectableIds.forEach(id => {\n        if (isSelected) {\n          selectionLookup[id] = id;\n        } else {\n          delete selectionLookup[id];\n        }\n      });\n      newSelection = Object.values(selectionLookup);\n    }\n\n    const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n\n    if (isSelectionValid) {\n      apiRef.current.setRowSelectionModel(newSelection);\n    }\n  }, [apiRef, logger, canHaveMultipleSelection]);\n  const selectRowRange = React.useCallback(function (_ref) {\n    let {\n      startId,\n      endId\n    } = _ref;\n    let isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let resetSelection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (!apiRef.current.getRow(startId) || !apiRef.current.getRow(endId)) {\n      return;\n    }\n\n    logger.debug(`Expanding selection from row ${startId} to row ${endId}`); // Using rows from all pages allow to select a range across several pages\n\n    const allPagesRowIds = gridExpandedSortedRowIdsSelector(apiRef);\n    const startIndex = allPagesRowIds.indexOf(startId);\n    const endIndex = allPagesRowIds.indexOf(endId);\n    const [start, end] = startIndex > endIndex ? [endIndex, startIndex] : [startIndex, endIndex];\n    const rowsBetweenStartAndEnd = allPagesRowIds.slice(start, end + 1);\n    apiRef.current.selectRows(rowsBetweenStartAndEnd, isSelected, resetSelection);\n  }, [apiRef, logger]);\n  const selectionPublicApi = {\n    selectRow,\n    setRowSelectionModel,\n    getSelectedRows,\n    isRowSelected,\n    isRowSelectable\n  };\n  const selectionPrivateApi = {\n    selectRows,\n    selectRowRange\n  };\n  useGridApiMethod(apiRef, selectionPublicApi, 'public');\n  useGridApiMethod(apiRef, selectionPrivateApi, props.signature === GridSignature.DataGrid ? 'private' : 'public');\n  /**\n   * EVENTS\n   */\n\n  const removeOutdatedSelection = React.useCallback(() => {\n    if (props.keepNonExistentRowsSelected) {\n      return;\n    }\n\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n    const rowsLookup = gridRowsLookupSelector(apiRef); // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n\n    const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n\n    let hasChanged = false;\n    currentSelection.forEach(id => {\n      if (!rowsLookup[id]) {\n        delete selectionLookup[id];\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      apiRef.current.setRowSelectionModel(Object.values(selectionLookup));\n    }\n  }, [apiRef, props.keepNonExistentRowsSelected]);\n  const handleSingleRowSelection = React.useCallback((id, event) => {\n    const hasCtrlKey = event.metaKey || event.ctrlKey; // multiple selection is only allowed if:\n    // - it is a checkboxSelection\n    // - it is a keyboard selection\n    // - Ctrl is pressed\n\n    const isMultipleSelectionDisabled = !checkboxSelection && !hasCtrlKey && !isKeyboardEvent(event);\n    const resetSelection = !canHaveMultipleSelection || isMultipleSelectionDisabled;\n    const isSelected = apiRef.current.isRowSelected(id);\n\n    if (resetSelection) {\n      apiRef.current.selectRow(id, !isMultipleSelectionDisabled ? !isSelected : true, true);\n    } else {\n      apiRef.current.selectRow(id, !isSelected, false);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection]);\n  const handleRowClick = React.useCallback((params, event) => {\n    if (disableRowSelectionOnClick) {\n      return;\n    }\n\n    const field = event.target.closest(`.${gridClasses.cell}`)?.getAttribute('data-field');\n\n    if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // click on checkbox should not trigger row selection\n      return;\n    }\n\n    if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n      // click to open the detail panel should not select the row\n      return;\n    }\n\n    if (field) {\n      const column = apiRef.current.getColumn(field);\n\n      if (column?.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n\n    const rowNode = apiRef.current.getRowNode(params.id);\n\n    if (rowNode.type === 'pinnedRow') {\n      return;\n    }\n\n    if (event.shiftKey && canHaveMultipleSelection) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      handleSingleRowSelection(params.id, event);\n    }\n  }, [disableRowSelectionOnClick, canHaveMultipleSelection, apiRef, expandMouseRowRangeSelection, handleSingleRowSelection]);\n  const preventSelectionOnShift = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.shiftKey) {\n      window.getSelection()?.removeAllRanges();\n    }\n  }, [canHaveMultipleSelection]);\n  const handleRowSelectionCheckboxChange = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.nativeEvent.shiftKey) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      apiRef.current.selectRow(params.id, params.value, !canHaveMultipleSelection);\n    }\n  }, [apiRef, expandMouseRowRangeSelection, canHaveMultipleSelection]);\n  const handleHeaderSelectionCheckboxChange = React.useCallback(params => {\n    const shouldLimitSelectionToCurrentPage = props.checkboxSelectionVisibleOnly && props.pagination;\n    const rowsToBeSelected = shouldLimitSelectionToCurrentPage ? gridPaginatedVisibleSortedGridRowIdsSelector(apiRef) : gridExpandedSortedRowIdsSelector(apiRef);\n    const filterModel = gridFilterModelSelector(apiRef);\n    apiRef.current.selectRows(rowsToBeSelected, params.value, filterModel?.items.length > 0);\n  }, [apiRef, props.checkboxSelectionVisibleOnly, props.pagination]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Get the most recent cell mode because it may have been changed by another listener\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.Edit) {\n      return;\n    } // Ignore portal\n    // Do not apply shortcuts if the focus is not on the cell root component\n\n\n    if (isEventTargetInPortal(event)) {\n      return;\n    }\n\n    if (isNavigationKey(event.key) && event.shiftKey) {\n      // The cell that has focus after the keyboard navigation\n      const focusCell = gridFocusCellSelector(apiRef);\n\n      if (focusCell && focusCell.id !== params.id) {\n        event.preventDefault();\n        const isNextRowSelected = apiRef.current.isRowSelected(focusCell.id);\n\n        if (!canHaveMultipleSelection) {\n          apiRef.current.selectRow(focusCell.id, !isNextRowSelected, true);\n          return;\n        }\n\n        const newRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(focusCell.id);\n        const previousRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(params.id);\n        let start;\n        let end;\n\n        if (newRowIndex > previousRowIndex) {\n          if (isNextRowSelected) {\n            // We are navigating to the bottom of the page and adding selected rows\n            start = previousRowIndex;\n            end = newRowIndex - 1;\n          } else {\n            // We are navigating to the bottom of the page and removing selected rows\n            start = previousRowIndex;\n            end = newRowIndex;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (isNextRowSelected) {\n            // We are navigating to the top of the page and removing selected rows\n            start = newRowIndex + 1;\n            end = previousRowIndex;\n          } else {\n            // We are navigating to the top of the page and adding selected rows\n            start = newRowIndex;\n            end = previousRowIndex;\n          }\n        }\n\n        const rowsBetweenStartAndEnd = visibleRows.rows.slice(start, end + 1).map(row => row.id);\n        apiRef.current.selectRows(rowsBetweenStartAndEnd, !isNextRowSelected);\n        return;\n      }\n    }\n\n    if (event.key === ' ' && event.shiftKey) {\n      event.preventDefault();\n      handleSingleRowSelection(params.id, event);\n      return;\n    }\n\n    if (event.key === 'a' && (event.ctrlKey || event.metaKey)) {\n      event.preventDefault();\n      selectRows(apiRef.current.getAllRowIds(), true);\n    }\n  }, [apiRef, handleSingleRowSelection, selectRows, visibleRows.rows, canHaveMultipleSelection]);\n  useGridApiEventHandler(apiRef, 'sortedRowsSet', runIfRowSelectionIsEnabled(removeOutdatedSelection));\n  useGridApiEventHandler(apiRef, 'rowClick', runIfRowSelectionIsEnabled(handleRowClick));\n  useGridApiEventHandler(apiRef, 'rowSelectionCheckboxChange', runIfRowSelectionIsEnabled(handleRowSelectionCheckboxChange));\n  useGridApiEventHandler(apiRef, 'headerSelectionCheckboxChange', handleHeaderSelectionCheckboxChange);\n  useGridApiEventHandler(apiRef, 'cellMouseDown', runIfRowSelectionIsEnabled(preventSelectionOnShift));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfRowSelectionIsEnabled(handleCellKeyDown));\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (propRowSelectionModel !== undefined) {\n      apiRef.current.setRowSelectionModel(propRowSelectionModel);\n    }\n  }, [apiRef, propRowSelectionModel, props.rowSelection]);\n  React.useEffect(() => {\n    if (!props.rowSelection) {\n      apiRef.current.setRowSelectionModel([]);\n    }\n  }, [apiRef, props.rowSelection]);\n  const isStateControlled = propRowSelectionModel != null;\n  React.useEffect(() => {\n    if (isStateControlled || !props.rowSelection) {\n      return;\n    } // props.isRowSelectable changed\n\n\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n\n    if (isRowSelectable) {\n      const newSelection = currentSelection.filter(id => isRowSelectable(id));\n\n      if (newSelection.length < currentSelection.length) {\n        apiRef.current.setRowSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, isRowSelectable, isStateControlled, props.rowSelection]);\n  React.useEffect(() => {\n    if (!props.rowSelection || isStateControlled) {\n      return;\n    }\n\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n\n    if (!canHaveMultipleSelection && currentSelection.length > 1) {\n      // See https://github.com/mui/mui-x/issues/8455\n      apiRef.current.setRowSelectionModel([]);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection, isStateControlled, props.rowSelection]);\n};","map":{"version":3,"names":["_extends","React","GridSignature","useGridApiEventHandler","useGridApiMethod","useGridLogger","gridRowsLookupSelector","gridRowSelectionStateSelector","selectedGridRowsSelector","selectedIdsLookupSelector","gridPaginatedVisibleSortedGridRowIdsSelector","gridFocusCellSelector","gridExpandedSortedRowIdsSelector","gridFilterModelSelector","GRID_CHECKBOX_SELECTION_COL_DEF","GRID_ACTIONS_COLUMN_TYPE","GridCellModes","isKeyboardEvent","isNavigationKey","useGridVisibleRows","GRID_DETAIL_PANEL_TOGGLE_FIELD","gridClasses","isEventTargetInPortal","isMultipleRowSelectionEnabled","getSelectionModelPropValue","selectionModelProp","prevSelectionModel","Array","isArray","rowSelectionStateInitializer","state","props","rowSelection","rowSelectionModel","useGridRowSelection","apiRef","logger","runIfRowSelectionIsEnabled","callback","propRowSelectionModel","useMemo","current","lastRowToggled","useRef","registerControlState","stateId","propModel","propOnChange","onRowSelectionModelChange","stateSelector","changeEvent","checkboxSelection","disableRowSelectionOnClick","isRowSelectable","propIsRowSelectable","canHaveMultipleSelection","visibleRows","expandMouseRowRangeSelection","useCallback","id","endId","startId","isSelected","isRowSelected","visibleRowIds","startIndex","findIndex","rowId","endIndex","selectRowRange","setRowSelectionModel","model","signature","DataGrid","length","Error","join","currentModel","debug","setState","forceUpdate","includes","getRowParams","rowNode","getRowNode","type","getSelectedRows","selectRow","resetSelection","selection","newSelection","filter","el","push","isSelectionValid","selectRows","ids","selectableIds","selectionLookup","forEach","Object","values","getRow","allPagesRowIds","indexOf","start","end","rowsBetweenStartAndEnd","slice","selectionPublicApi","selectionPrivateApi","removeOutdatedSelection","keepNonExistentRowsSelected","currentSelection","rowsLookup","hasChanged","handleSingleRowSelection","event","hasCtrlKey","metaKey","ctrlKey","isMultipleSelectionDisabled","handleRowClick","params","field","target","closest","cell","getAttribute","column","getColumn","shiftKey","preventSelectionOnShift","window","getSelection","removeAllRanges","handleRowSelectionCheckboxChange","nativeEvent","value","handleHeaderSelectionCheckboxChange","shouldLimitSelectionToCurrentPage","checkboxSelectionVisibleOnly","pagination","rowsToBeSelected","filterModel","items","handleCellKeyDown","getCellMode","Edit","key","focusCell","preventDefault","isNextRowSelected","newRowIndex","getRowIndexRelativeToVisibleRows","previousRowIndex","rows","map","row","getAllRowIds","useEffect","undefined","isStateControlled"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/@mui/x-data-grid/hooks/features/rowSelection/useGridRowSelection.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridSignature, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridRowsLookupSelector } from '../rows/gridRowsSelector';\nimport { gridRowSelectionStateSelector, selectedGridRowsSelector, selectedIdsLookupSelector } from './gridRowSelectionSelector';\nimport { gridPaginatedVisibleSortedGridRowIdsSelector } from '../pagination';\nimport { gridFocusCellSelector } from '../focus/gridFocusStateSelector';\nimport { gridExpandedSortedRowIdsSelector, gridFilterModelSelector } from '../filter/gridFilterSelector';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF, GRID_ACTIONS_COLUMN_TYPE } from '../../../colDef';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { isKeyboardEvent, isNavigationKey } from '../../../utils/keyboardUtils';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../../../constants/gridDetailPanelToggleField';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { isEventTargetInPortal } from '../../../utils/domUtils';\nimport { isMultipleRowSelectionEnabled } from './utils';\nconst getSelectionModelPropValue = (selectionModelProp, prevSelectionModel) => {\n  if (selectionModelProp == null) {\n    return selectionModelProp;\n  }\n  if (Array.isArray(selectionModelProp)) {\n    return selectionModelProp;\n  }\n  if (prevSelectionModel && prevSelectionModel[0] === selectionModelProp) {\n    return prevSelectionModel;\n  }\n  return [selectionModelProp];\n};\nexport const rowSelectionStateInitializer = (state, props) => _extends({}, state, {\n  rowSelection: props.rowSelection ? getSelectionModelPropValue(props.rowSelectionModel) ?? [] : []\n});\n\n/**\n * @requires useGridRows (state, method) - can be after\n * @requires useGridParamsApi (method) - can be after\n * @requires useGridFocus (state) - can be after\n * @requires useGridKeyboardNavigation (`cellKeyDown` event must first be consumed by it)\n */\nexport const useGridRowSelection = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridSelection');\n  const runIfRowSelectionIsEnabled = callback => (...args) => {\n    if (props.rowSelection) {\n      callback(...args);\n    }\n  };\n  const propRowSelectionModel = React.useMemo(() => {\n    return getSelectionModelPropValue(props.rowSelectionModel, gridRowSelectionStateSelector(apiRef.current.state));\n  }, [apiRef, props.rowSelectionModel]);\n  const lastRowToggled = React.useRef(null);\n  apiRef.current.registerControlState({\n    stateId: 'rowSelection',\n    propModel: propRowSelectionModel,\n    propOnChange: props.onRowSelectionModelChange,\n    stateSelector: gridRowSelectionStateSelector,\n    changeEvent: 'rowSelectionChange'\n  });\n  const {\n    checkboxSelection,\n    disableRowSelectionOnClick,\n    isRowSelectable: propIsRowSelectable\n  } = props;\n  const canHaveMultipleSelection = isMultipleRowSelectionEnabled(props);\n  const visibleRows = useGridVisibleRows(apiRef, props);\n  const expandMouseRowRangeSelection = React.useCallback(id => {\n    let endId = id;\n    const startId = lastRowToggled.current ?? id;\n    const isSelected = apiRef.current.isRowSelected(id);\n    if (isSelected) {\n      const visibleRowIds = gridExpandedSortedRowIdsSelector(apiRef);\n      const startIndex = visibleRowIds.findIndex(rowId => rowId === startId);\n      const endIndex = visibleRowIds.findIndex(rowId => rowId === endId);\n      if (startIndex === endIndex) {\n        return;\n      }\n      if (startIndex > endIndex) {\n        endId = visibleRowIds[endIndex + 1];\n      } else {\n        endId = visibleRowIds[endIndex - 1];\n      }\n    }\n    lastRowToggled.current = id;\n    apiRef.current.selectRowRange({\n      startId,\n      endId\n    }, !isSelected);\n  }, [apiRef]);\n\n  /**\n   * API METHODS\n   */\n  const setRowSelectionModel = React.useCallback(model => {\n    if (props.signature === GridSignature.DataGrid && !canHaveMultipleSelection && Array.isArray(model) && model.length > 1) {\n      throw new Error(['MUI X: `rowSelectionModel` can only contain 1 item in DataGrid.', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock multiple selection.'].join('\\n'));\n    }\n    const currentModel = gridRowSelectionStateSelector(apiRef.current.state);\n    if (currentModel !== model) {\n      logger.debug(`Setting selection model`);\n      apiRef.current.setState(state => _extends({}, state, {\n        rowSelection: props.rowSelection ? model : []\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger, props.rowSelection, props.signature, canHaveMultipleSelection]);\n  const isRowSelected = React.useCallback(id => gridRowSelectionStateSelector(apiRef.current.state).includes(id), [apiRef]);\n  const isRowSelectable = React.useCallback(id => {\n    if (propIsRowSelectable && !propIsRowSelectable(apiRef.current.getRowParams(id))) {\n      return false;\n    }\n    const rowNode = apiRef.current.getRowNode(id);\n    if (rowNode?.type === 'footer' || rowNode?.type === 'pinnedRow') {\n      return false;\n    }\n    return true;\n  }, [apiRef, propIsRowSelectable]);\n  const getSelectedRows = React.useCallback(() => selectedGridRowsSelector(apiRef), [apiRef]);\n  const selectRow = React.useCallback((id, isSelected = true, resetSelection = false) => {\n    if (!apiRef.current.isRowSelectable(id)) {\n      return;\n    }\n    lastRowToggled.current = id;\n    if (resetSelection) {\n      logger.debug(`Setting selection for row ${id}`);\n      apiRef.current.setRowSelectionModel(isSelected ? [id] : []);\n    } else {\n      logger.debug(`Toggling selection for row ${id}`);\n      const selection = gridRowSelectionStateSelector(apiRef.current.state);\n      const newSelection = selection.filter(el => el !== id);\n      if (isSelected) {\n        newSelection.push(id);\n      }\n      const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n      if (isSelectionValid) {\n        apiRef.current.setRowSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, logger, canHaveMultipleSelection]);\n  const selectRows = React.useCallback((ids, isSelected = true, resetSelection = false) => {\n    logger.debug(`Setting selection for several rows`);\n    const selectableIds = ids.filter(id => apiRef.current.isRowSelectable(id));\n    let newSelection;\n    if (resetSelection) {\n      newSelection = isSelected ? selectableIds : [];\n    } else {\n      // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n      const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n      selectableIds.forEach(id => {\n        if (isSelected) {\n          selectionLookup[id] = id;\n        } else {\n          delete selectionLookup[id];\n        }\n      });\n      newSelection = Object.values(selectionLookup);\n    }\n    const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n    if (isSelectionValid) {\n      apiRef.current.setRowSelectionModel(newSelection);\n    }\n  }, [apiRef, logger, canHaveMultipleSelection]);\n  const selectRowRange = React.useCallback(({\n    startId,\n    endId\n  }, isSelected = true, resetSelection = false) => {\n    if (!apiRef.current.getRow(startId) || !apiRef.current.getRow(endId)) {\n      return;\n    }\n    logger.debug(`Expanding selection from row ${startId} to row ${endId}`);\n\n    // Using rows from all pages allow to select a range across several pages\n    const allPagesRowIds = gridExpandedSortedRowIdsSelector(apiRef);\n    const startIndex = allPagesRowIds.indexOf(startId);\n    const endIndex = allPagesRowIds.indexOf(endId);\n    const [start, end] = startIndex > endIndex ? [endIndex, startIndex] : [startIndex, endIndex];\n    const rowsBetweenStartAndEnd = allPagesRowIds.slice(start, end + 1);\n    apiRef.current.selectRows(rowsBetweenStartAndEnd, isSelected, resetSelection);\n  }, [apiRef, logger]);\n  const selectionPublicApi = {\n    selectRow,\n    setRowSelectionModel,\n    getSelectedRows,\n    isRowSelected,\n    isRowSelectable\n  };\n  const selectionPrivateApi = {\n    selectRows,\n    selectRowRange\n  };\n  useGridApiMethod(apiRef, selectionPublicApi, 'public');\n  useGridApiMethod(apiRef, selectionPrivateApi, props.signature === GridSignature.DataGrid ? 'private' : 'public');\n\n  /**\n   * EVENTS\n   */\n  const removeOutdatedSelection = React.useCallback(() => {\n    if (props.keepNonExistentRowsSelected) {\n      return;\n    }\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n    const rowsLookup = gridRowsLookupSelector(apiRef);\n\n    // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n    const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n    let hasChanged = false;\n    currentSelection.forEach(id => {\n      if (!rowsLookup[id]) {\n        delete selectionLookup[id];\n        hasChanged = true;\n      }\n    });\n    if (hasChanged) {\n      apiRef.current.setRowSelectionModel(Object.values(selectionLookup));\n    }\n  }, [apiRef, props.keepNonExistentRowsSelected]);\n  const handleSingleRowSelection = React.useCallback((id, event) => {\n    const hasCtrlKey = event.metaKey || event.ctrlKey;\n\n    // multiple selection is only allowed if:\n    // - it is a checkboxSelection\n    // - it is a keyboard selection\n    // - Ctrl is pressed\n\n    const isMultipleSelectionDisabled = !checkboxSelection && !hasCtrlKey && !isKeyboardEvent(event);\n    const resetSelection = !canHaveMultipleSelection || isMultipleSelectionDisabled;\n    const isSelected = apiRef.current.isRowSelected(id);\n    if (resetSelection) {\n      apiRef.current.selectRow(id, !isMultipleSelectionDisabled ? !isSelected : true, true);\n    } else {\n      apiRef.current.selectRow(id, !isSelected, false);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection]);\n  const handleRowClick = React.useCallback((params, event) => {\n    if (disableRowSelectionOnClick) {\n      return;\n    }\n    const field = event.target.closest(`.${gridClasses.cell}`)?.getAttribute('data-field');\n    if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // click on checkbox should not trigger row selection\n      return;\n    }\n    if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n      // click to open the detail panel should not select the row\n      return;\n    }\n    if (field) {\n      const column = apiRef.current.getColumn(field);\n      if (column?.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n    const rowNode = apiRef.current.getRowNode(params.id);\n    if (rowNode.type === 'pinnedRow') {\n      return;\n    }\n    if (event.shiftKey && canHaveMultipleSelection) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      handleSingleRowSelection(params.id, event);\n    }\n  }, [disableRowSelectionOnClick, canHaveMultipleSelection, apiRef, expandMouseRowRangeSelection, handleSingleRowSelection]);\n  const preventSelectionOnShift = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.shiftKey) {\n      window.getSelection()?.removeAllRanges();\n    }\n  }, [canHaveMultipleSelection]);\n  const handleRowSelectionCheckboxChange = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.nativeEvent.shiftKey) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      apiRef.current.selectRow(params.id, params.value, !canHaveMultipleSelection);\n    }\n  }, [apiRef, expandMouseRowRangeSelection, canHaveMultipleSelection]);\n  const handleHeaderSelectionCheckboxChange = React.useCallback(params => {\n    const shouldLimitSelectionToCurrentPage = props.checkboxSelectionVisibleOnly && props.pagination;\n    const rowsToBeSelected = shouldLimitSelectionToCurrentPage ? gridPaginatedVisibleSortedGridRowIdsSelector(apiRef) : gridExpandedSortedRowIdsSelector(apiRef);\n    const filterModel = gridFilterModelSelector(apiRef);\n    apiRef.current.selectRows(rowsToBeSelected, params.value, filterModel?.items.length > 0);\n  }, [apiRef, props.checkboxSelectionVisibleOnly, props.pagination]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Get the most recent cell mode because it may have been changed by another listener\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.Edit) {\n      return;\n    }\n\n    // Ignore portal\n    // Do not apply shortcuts if the focus is not on the cell root component\n    if (isEventTargetInPortal(event)) {\n      return;\n    }\n    if (isNavigationKey(event.key) && event.shiftKey) {\n      // The cell that has focus after the keyboard navigation\n      const focusCell = gridFocusCellSelector(apiRef);\n      if (focusCell && focusCell.id !== params.id) {\n        event.preventDefault();\n        const isNextRowSelected = apiRef.current.isRowSelected(focusCell.id);\n        if (!canHaveMultipleSelection) {\n          apiRef.current.selectRow(focusCell.id, !isNextRowSelected, true);\n          return;\n        }\n        const newRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(focusCell.id);\n        const previousRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(params.id);\n        let start;\n        let end;\n        if (newRowIndex > previousRowIndex) {\n          if (isNextRowSelected) {\n            // We are navigating to the bottom of the page and adding selected rows\n            start = previousRowIndex;\n            end = newRowIndex - 1;\n          } else {\n            // We are navigating to the bottom of the page and removing selected rows\n            start = previousRowIndex;\n            end = newRowIndex;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (isNextRowSelected) {\n            // We are navigating to the top of the page and removing selected rows\n            start = newRowIndex + 1;\n            end = previousRowIndex;\n          } else {\n            // We are navigating to the top of the page and adding selected rows\n            start = newRowIndex;\n            end = previousRowIndex;\n          }\n        }\n        const rowsBetweenStartAndEnd = visibleRows.rows.slice(start, end + 1).map(row => row.id);\n        apiRef.current.selectRows(rowsBetweenStartAndEnd, !isNextRowSelected);\n        return;\n      }\n    }\n    if (event.key === ' ' && event.shiftKey) {\n      event.preventDefault();\n      handleSingleRowSelection(params.id, event);\n      return;\n    }\n    if (event.key === 'a' && (event.ctrlKey || event.metaKey)) {\n      event.preventDefault();\n      selectRows(apiRef.current.getAllRowIds(), true);\n    }\n  }, [apiRef, handleSingleRowSelection, selectRows, visibleRows.rows, canHaveMultipleSelection]);\n  useGridApiEventHandler(apiRef, 'sortedRowsSet', runIfRowSelectionIsEnabled(removeOutdatedSelection));\n  useGridApiEventHandler(apiRef, 'rowClick', runIfRowSelectionIsEnabled(handleRowClick));\n  useGridApiEventHandler(apiRef, 'rowSelectionCheckboxChange', runIfRowSelectionIsEnabled(handleRowSelectionCheckboxChange));\n  useGridApiEventHandler(apiRef, 'headerSelectionCheckboxChange', handleHeaderSelectionCheckboxChange);\n  useGridApiEventHandler(apiRef, 'cellMouseDown', runIfRowSelectionIsEnabled(preventSelectionOnShift));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfRowSelectionIsEnabled(handleCellKeyDown));\n\n  /**\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    if (propRowSelectionModel !== undefined) {\n      apiRef.current.setRowSelectionModel(propRowSelectionModel);\n    }\n  }, [apiRef, propRowSelectionModel, props.rowSelection]);\n  React.useEffect(() => {\n    if (!props.rowSelection) {\n      apiRef.current.setRowSelectionModel([]);\n    }\n  }, [apiRef, props.rowSelection]);\n  const isStateControlled = propRowSelectionModel != null;\n  React.useEffect(() => {\n    if (isStateControlled || !props.rowSelection) {\n      return;\n    }\n\n    // props.isRowSelectable changed\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n    if (isRowSelectable) {\n      const newSelection = currentSelection.filter(id => isRowSelectable(id));\n      if (newSelection.length < currentSelection.length) {\n        apiRef.current.setRowSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, isRowSelectable, isStateControlled, props.rowSelection]);\n  React.useEffect(() => {\n    if (!props.rowSelection || isStateControlled) {\n      return;\n    }\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n    if (!canHaveMultipleSelection && currentSelection.length > 1) {\n      // See https://github.com/mui/mui-x/issues/8455\n      apiRef.current.setRowSelectionModel([]);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection, isStateControlled, props.rowSelection]);\n};"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,EAAwBC,sBAAxB,QAAsD,oCAAtD;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAASC,sBAAT,QAAuC,0BAAvC;AACA,SAASC,6BAAT,EAAwCC,wBAAxC,EAAkEC,yBAAlE,QAAmG,4BAAnG;AACA,SAASC,4CAAT,QAA6D,eAA7D;AACA,SAASC,qBAAT,QAAsC,iCAAtC;AACA,SAASC,gCAAT,EAA2CC,uBAA3C,QAA0E,8BAA1E;AACA,SAASC,+BAAT,EAA0CC,wBAA1C,QAA0E,iBAA1E;AACA,SAASC,aAAT,QAA8B,kCAA9B;AACA,SAASC,eAAT,EAA0BC,eAA1B,QAAiD,8BAAjD;AACA,SAASC,kBAAT,QAAmC,gCAAnC;AACA,SAASC,8BAAT,QAA+C,+CAA/C;AACA,SAASC,WAAT,QAA4B,gCAA5B;AACA,SAASC,qBAAT,QAAsC,yBAAtC;AACA,SAASC,6BAAT,QAA8C,SAA9C;;AACA,MAAMC,0BAA0B,GAAG,CAACC,kBAAD,EAAqBC,kBAArB,KAA4C;EAC7E,IAAID,kBAAkB,IAAI,IAA1B,EAAgC;IAC9B,OAAOA,kBAAP;EACD;;EACD,IAAIE,KAAK,CAACC,OAAN,CAAcH,kBAAd,CAAJ,EAAuC;IACrC,OAAOA,kBAAP;EACD;;EACD,IAAIC,kBAAkB,IAAIA,kBAAkB,CAAC,CAAD,CAAlB,KAA0BD,kBAApD,EAAwE;IACtE,OAAOC,kBAAP;EACD;;EACD,OAAO,CAACD,kBAAD,CAAP;AACD,CAXD;;AAYA,OAAO,MAAMI,4BAA4B,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB/B,QAAQ,CAAC,EAAD,EAAK8B,KAAL,EAAY;EAChFE,YAAY,EAAED,KAAK,CAACC,YAAN,GAAqBR,0BAA0B,CAACO,KAAK,CAACE,iBAAP,CAA1B,IAAuD,EAA5E,GAAiF;AADf,CAAZ,CAA/D;AAIP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,mBAAmB,GAAG,CAACC,MAAD,EAASJ,KAAT,KAAmB;EACpD,MAAMK,MAAM,GAAG/B,aAAa,CAAC8B,MAAD,EAAS,kBAAT,CAA5B;;EACA,MAAME,0BAA0B,GAAGC,QAAQ,IAAI,YAAa;IAC1D,IAAIP,KAAK,CAACC,YAAV,EAAwB;MACtBM,QAAQ,CAAC,YAAD,CAAR;IACD;EACF,CAJD;;EAKA,MAAMC,qBAAqB,GAAGtC,KAAK,CAACuC,OAAN,CAAc,MAAM;IAChD,OAAOhB,0BAA0B,CAACO,KAAK,CAACE,iBAAP,EAA0B1B,6BAA6B,CAAC4B,MAAM,CAACM,OAAP,CAAeX,KAAhB,CAAvD,CAAjC;EACD,CAF6B,EAE3B,CAACK,MAAD,EAASJ,KAAK,CAACE,iBAAf,CAF2B,CAA9B;EAGA,MAAMS,cAAc,GAAGzC,KAAK,CAAC0C,MAAN,CAAa,IAAb,CAAvB;EACAR,MAAM,CAACM,OAAP,CAAeG,oBAAf,CAAoC;IAClCC,OAAO,EAAE,cADyB;IAElCC,SAAS,EAAEP,qBAFuB;IAGlCQ,YAAY,EAAEhB,KAAK,CAACiB,yBAHc;IAIlCC,aAAa,EAAE1C,6BAJmB;IAKlC2C,WAAW,EAAE;EALqB,CAApC;EAOA,MAAM;IACJC,iBADI;IAEJC,0BAFI;IAGJC,eAAe,EAAEC;EAHb,IAIFvB,KAJJ;EAKA,MAAMwB,wBAAwB,GAAGhC,6BAA6B,CAACQ,KAAD,CAA9D;EACA,MAAMyB,WAAW,GAAGrC,kBAAkB,CAACgB,MAAD,EAASJ,KAAT,CAAtC;EACA,MAAM0B,4BAA4B,GAAGxD,KAAK,CAACyD,WAAN,CAAkBC,EAAE,IAAI;IAC3D,IAAIC,KAAK,GAAGD,EAAZ;IACA,MAAME,OAAO,GAAGnB,cAAc,CAACD,OAAf,IAA0BkB,EAA1C;IACA,MAAMG,UAAU,GAAG3B,MAAM,CAACM,OAAP,CAAesB,aAAf,CAA6BJ,EAA7B,CAAnB;;IACA,IAAIG,UAAJ,EAAgB;MACd,MAAME,aAAa,GAAGpD,gCAAgC,CAACuB,MAAD,CAAtD;MACA,MAAM8B,UAAU,GAAGD,aAAa,CAACE,SAAd,CAAwBC,KAAK,IAAIA,KAAK,KAAKN,OAA3C,CAAnB;MACA,MAAMO,QAAQ,GAAGJ,aAAa,CAACE,SAAd,CAAwBC,KAAK,IAAIA,KAAK,KAAKP,KAA3C,CAAjB;;MACA,IAAIK,UAAU,KAAKG,QAAnB,EAA6B;QAC3B;MACD;;MACD,IAAIH,UAAU,GAAGG,QAAjB,EAA2B;QACzBR,KAAK,GAAGI,aAAa,CAACI,QAAQ,GAAG,CAAZ,CAArB;MACD,CAFD,MAEO;QACLR,KAAK,GAAGI,aAAa,CAACI,QAAQ,GAAG,CAAZ,CAArB;MACD;IACF;;IACD1B,cAAc,CAACD,OAAf,GAAyBkB,EAAzB;IACAxB,MAAM,CAACM,OAAP,CAAe4B,cAAf,CAA8B;MAC5BR,OAD4B;MAE5BD;IAF4B,CAA9B,EAGG,CAACE,UAHJ;EAID,CAtBoC,EAsBlC,CAAC3B,MAAD,CAtBkC,CAArC;EAwBA;AACF;AACA;;EACE,MAAMmC,oBAAoB,GAAGrE,KAAK,CAACyD,WAAN,CAAkBa,KAAK,IAAI;IACtD,IAAIxC,KAAK,CAACyC,SAAN,KAAoBtE,aAAa,CAACuE,QAAlC,IAA8C,CAAClB,wBAA/C,IAA2E5B,KAAK,CAACC,OAAN,CAAc2C,KAAd,CAA3E,IAAmGA,KAAK,CAACG,MAAN,GAAe,CAAtH,EAAyH;MACvH,MAAM,IAAIC,KAAJ,CAAU,CAAC,iEAAD,EAAoE,+FAApE,EAAqKC,IAArK,CAA0K,IAA1K,CAAV,CAAN;IACD;;IACD,MAAMC,YAAY,GAAGtE,6BAA6B,CAAC4B,MAAM,CAACM,OAAP,CAAeX,KAAhB,CAAlD;;IACA,IAAI+C,YAAY,KAAKN,KAArB,EAA4B;MAC1BnC,MAAM,CAAC0C,KAAP,CAAc,yBAAd;MACA3C,MAAM,CAACM,OAAP,CAAesC,QAAf,CAAwBjD,KAAK,IAAI9B,QAAQ,CAAC,EAAD,EAAK8B,KAAL,EAAY;QACnDE,YAAY,EAAED,KAAK,CAACC,YAAN,GAAqBuC,KAArB,GAA6B;MADQ,CAAZ,CAAzC;MAGApC,MAAM,CAACM,OAAP,CAAeuC,WAAf;IACD;EACF,CAZ4B,EAY1B,CAAC7C,MAAD,EAASC,MAAT,EAAiBL,KAAK,CAACC,YAAvB,EAAqCD,KAAK,CAACyC,SAA3C,EAAsDjB,wBAAtD,CAZ0B,CAA7B;EAaA,MAAMQ,aAAa,GAAG9D,KAAK,CAACyD,WAAN,CAAkBC,EAAE,IAAIpD,6BAA6B,CAAC4B,MAAM,CAACM,OAAP,CAAeX,KAAhB,CAA7B,CAAoDmD,QAApD,CAA6DtB,EAA7D,CAAxB,EAA0F,CAACxB,MAAD,CAA1F,CAAtB;EACA,MAAMkB,eAAe,GAAGpD,KAAK,CAACyD,WAAN,CAAkBC,EAAE,IAAI;IAC9C,IAAIL,mBAAmB,IAAI,CAACA,mBAAmB,CAACnB,MAAM,CAACM,OAAP,CAAeyC,YAAf,CAA4BvB,EAA5B,CAAD,CAA/C,EAAkF;MAChF,OAAO,KAAP;IACD;;IACD,MAAMwB,OAAO,GAAGhD,MAAM,CAACM,OAAP,CAAe2C,UAAf,CAA0BzB,EAA1B,CAAhB;;IACA,IAAIwB,OAAO,EAAEE,IAAT,KAAkB,QAAlB,IAA8BF,OAAO,EAAEE,IAAT,KAAkB,WAApD,EAAiE;MAC/D,OAAO,KAAP;IACD;;IACD,OAAO,IAAP;EACD,CATuB,EASrB,CAAClD,MAAD,EAASmB,mBAAT,CATqB,CAAxB;EAUA,MAAMgC,eAAe,GAAGrF,KAAK,CAACyD,WAAN,CAAkB,MAAMlD,wBAAwB,CAAC2B,MAAD,CAAhD,EAA0D,CAACA,MAAD,CAA1D,CAAxB;EACA,MAAMoD,SAAS,GAAGtF,KAAK,CAACyD,WAAN,CAAkB,UAACC,EAAD,EAAmD;IAAA,IAA9CG,UAA8C,uEAAjC,IAAiC;IAAA,IAA3B0B,cAA2B,uEAAV,KAAU;;IACrF,IAAI,CAACrD,MAAM,CAACM,OAAP,CAAeY,eAAf,CAA+BM,EAA/B,CAAL,EAAyC;MACvC;IACD;;IACDjB,cAAc,CAACD,OAAf,GAAyBkB,EAAzB;;IACA,IAAI6B,cAAJ,EAAoB;MAClBpD,MAAM,CAAC0C,KAAP,CAAc,6BAA4BnB,EAAG,EAA7C;MACAxB,MAAM,CAACM,OAAP,CAAe6B,oBAAf,CAAoCR,UAAU,GAAG,CAACH,EAAD,CAAH,GAAU,EAAxD;IACD,CAHD,MAGO;MACLvB,MAAM,CAAC0C,KAAP,CAAc,8BAA6BnB,EAAG,EAA9C;MACA,MAAM8B,SAAS,GAAGlF,6BAA6B,CAAC4B,MAAM,CAACM,OAAP,CAAeX,KAAhB,CAA/C;MACA,MAAM4D,YAAY,GAAGD,SAAS,CAACE,MAAV,CAAiBC,EAAE,IAAIA,EAAE,KAAKjC,EAA9B,CAArB;;MACA,IAAIG,UAAJ,EAAgB;QACd4B,YAAY,CAACG,IAAb,CAAkBlC,EAAlB;MACD;;MACD,MAAMmC,gBAAgB,GAAGJ,YAAY,CAAChB,MAAb,GAAsB,CAAtB,IAA2BnB,wBAApD;;MACA,IAAIuC,gBAAJ,EAAsB;QACpB3D,MAAM,CAACM,OAAP,CAAe6B,oBAAf,CAAoCoB,YAApC;MACD;IACF;EACF,CApBiB,EAoBf,CAACvD,MAAD,EAASC,MAAT,EAAiBmB,wBAAjB,CApBe,CAAlB;EAqBA,MAAMwC,UAAU,GAAG9F,KAAK,CAACyD,WAAN,CAAkB,UAACsC,GAAD,EAAoD;IAAA,IAA9ClC,UAA8C,uEAAjC,IAAiC;IAAA,IAA3B0B,cAA2B,uEAAV,KAAU;IACvFpD,MAAM,CAAC0C,KAAP,CAAc,oCAAd;IACA,MAAMmB,aAAa,GAAGD,GAAG,CAACL,MAAJ,CAAWhC,EAAE,IAAIxB,MAAM,CAACM,OAAP,CAAeY,eAAf,CAA+BM,EAA/B,CAAjB,CAAtB;IACA,IAAI+B,YAAJ;;IACA,IAAIF,cAAJ,EAAoB;MAClBE,YAAY,GAAG5B,UAAU,GAAGmC,aAAH,GAAmB,EAA5C;IACD,CAFD,MAEO;MACL;MACA,MAAMC,eAAe,GAAGlG,QAAQ,CAAC,EAAD,EAAKS,yBAAyB,CAAC0B,MAAD,CAA9B,CAAhC;;MACA8D,aAAa,CAACE,OAAd,CAAsBxC,EAAE,IAAI;QAC1B,IAAIG,UAAJ,EAAgB;UACdoC,eAAe,CAACvC,EAAD,CAAf,GAAsBA,EAAtB;QACD,CAFD,MAEO;UACL,OAAOuC,eAAe,CAACvC,EAAD,CAAtB;QACD;MACF,CAND;MAOA+B,YAAY,GAAGU,MAAM,CAACC,MAAP,CAAcH,eAAd,CAAf;IACD;;IACD,MAAMJ,gBAAgB,GAAGJ,YAAY,CAAChB,MAAb,GAAsB,CAAtB,IAA2BnB,wBAApD;;IACA,IAAIuC,gBAAJ,EAAsB;MACpB3D,MAAM,CAACM,OAAP,CAAe6B,oBAAf,CAAoCoB,YAApC;IACD;EACF,CAtBkB,EAsBhB,CAACvD,MAAD,EAASC,MAAT,EAAiBmB,wBAAjB,CAtBgB,CAAnB;EAuBA,MAAMc,cAAc,GAAGpE,KAAK,CAACyD,WAAN,CAAkB,gBAGQ;IAAA,IAHP;MACxCG,OADwC;MAExCD;IAFwC,CAGO;IAAA,IAA9CE,UAA8C,uEAAjC,IAAiC;IAAA,IAA3B0B,cAA2B,uEAAV,KAAU;;IAC/C,IAAI,CAACrD,MAAM,CAACM,OAAP,CAAe6D,MAAf,CAAsBzC,OAAtB,CAAD,IAAmC,CAAC1B,MAAM,CAACM,OAAP,CAAe6D,MAAf,CAAsB1C,KAAtB,CAAxC,EAAsE;MACpE;IACD;;IACDxB,MAAM,CAAC0C,KAAP,CAAc,gCAA+BjB,OAAQ,WAAUD,KAAM,EAArE,EAJ+C,CAM/C;;IACA,MAAM2C,cAAc,GAAG3F,gCAAgC,CAACuB,MAAD,CAAvD;IACA,MAAM8B,UAAU,GAAGsC,cAAc,CAACC,OAAf,CAAuB3C,OAAvB,CAAnB;IACA,MAAMO,QAAQ,GAAGmC,cAAc,CAACC,OAAf,CAAuB5C,KAAvB,CAAjB;IACA,MAAM,CAAC6C,KAAD,EAAQC,GAAR,IAAezC,UAAU,GAAGG,QAAb,GAAwB,CAACA,QAAD,EAAWH,UAAX,CAAxB,GAAiD,CAACA,UAAD,EAAaG,QAAb,CAAtE;IACA,MAAMuC,sBAAsB,GAAGJ,cAAc,CAACK,KAAf,CAAqBH,KAArB,EAA4BC,GAAG,GAAG,CAAlC,CAA/B;IACAvE,MAAM,CAACM,OAAP,CAAesD,UAAf,CAA0BY,sBAA1B,EAAkD7C,UAAlD,EAA8D0B,cAA9D;EACD,CAhBsB,EAgBpB,CAACrD,MAAD,EAASC,MAAT,CAhBoB,CAAvB;EAiBA,MAAMyE,kBAAkB,GAAG;IACzBtB,SADyB;IAEzBjB,oBAFyB;IAGzBgB,eAHyB;IAIzBvB,aAJyB;IAKzBV;EALyB,CAA3B;EAOA,MAAMyD,mBAAmB,GAAG;IAC1Bf,UAD0B;IAE1B1B;EAF0B,CAA5B;EAIAjE,gBAAgB,CAAC+B,MAAD,EAAS0E,kBAAT,EAA6B,QAA7B,CAAhB;EACAzG,gBAAgB,CAAC+B,MAAD,EAAS2E,mBAAT,EAA8B/E,KAAK,CAACyC,SAAN,KAAoBtE,aAAa,CAACuE,QAAlC,GAA6C,SAA7C,GAAyD,QAAvF,CAAhB;EAEA;AACF;AACA;;EACE,MAAMsC,uBAAuB,GAAG9G,KAAK,CAACyD,WAAN,CAAkB,MAAM;IACtD,IAAI3B,KAAK,CAACiF,2BAAV,EAAuC;MACrC;IACD;;IACD,MAAMC,gBAAgB,GAAG1G,6BAA6B,CAAC4B,MAAM,CAACM,OAAP,CAAeX,KAAhB,CAAtD;IACA,MAAMoF,UAAU,GAAG5G,sBAAsB,CAAC6B,MAAD,CAAzC,CALsD,CAOtD;;IACA,MAAM+D,eAAe,GAAGlG,QAAQ,CAAC,EAAD,EAAKS,yBAAyB,CAAC0B,MAAD,CAA9B,CAAhC;;IACA,IAAIgF,UAAU,GAAG,KAAjB;IACAF,gBAAgB,CAACd,OAAjB,CAAyBxC,EAAE,IAAI;MAC7B,IAAI,CAACuD,UAAU,CAACvD,EAAD,CAAf,EAAqB;QACnB,OAAOuC,eAAe,CAACvC,EAAD,CAAtB;QACAwD,UAAU,GAAG,IAAb;MACD;IACF,CALD;;IAMA,IAAIA,UAAJ,EAAgB;MACdhF,MAAM,CAACM,OAAP,CAAe6B,oBAAf,CAAoC8B,MAAM,CAACC,MAAP,CAAcH,eAAd,CAApC;IACD;EACF,CAnB+B,EAmB7B,CAAC/D,MAAD,EAASJ,KAAK,CAACiF,2BAAf,CAnB6B,CAAhC;EAoBA,MAAMI,wBAAwB,GAAGnH,KAAK,CAACyD,WAAN,CAAkB,CAACC,EAAD,EAAK0D,KAAL,KAAe;IAChE,MAAMC,UAAU,GAAGD,KAAK,CAACE,OAAN,IAAiBF,KAAK,CAACG,OAA1C,CADgE,CAGhE;IACA;IACA;IACA;;IAEA,MAAMC,2BAA2B,GAAG,CAACtE,iBAAD,IAAsB,CAACmE,UAAvB,IAAqC,CAACrG,eAAe,CAACoG,KAAD,CAAzF;IACA,MAAM7B,cAAc,GAAG,CAACjC,wBAAD,IAA6BkE,2BAApD;IACA,MAAM3D,UAAU,GAAG3B,MAAM,CAACM,OAAP,CAAesB,aAAf,CAA6BJ,EAA7B,CAAnB;;IACA,IAAI6B,cAAJ,EAAoB;MAClBrD,MAAM,CAACM,OAAP,CAAe8C,SAAf,CAAyB5B,EAAzB,EAA6B,CAAC8D,2BAAD,GAA+B,CAAC3D,UAAhC,GAA6C,IAA1E,EAAgF,IAAhF;IACD,CAFD,MAEO;MACL3B,MAAM,CAACM,OAAP,CAAe8C,SAAf,CAAyB5B,EAAzB,EAA6B,CAACG,UAA9B,EAA0C,KAA1C;IACD;EACF,CAhBgC,EAgB9B,CAAC3B,MAAD,EAASoB,wBAAT,EAAmCJ,iBAAnC,CAhB8B,CAAjC;EAiBA,MAAMuE,cAAc,GAAGzH,KAAK,CAACyD,WAAN,CAAkB,CAACiE,MAAD,EAASN,KAAT,KAAmB;IAC1D,IAAIjE,0BAAJ,EAAgC;MAC9B;IACD;;IACD,MAAMwE,KAAK,GAAGP,KAAK,CAACQ,MAAN,CAAaC,OAAb,CAAsB,IAAGzG,WAAW,CAAC0G,IAAK,EAA1C,GAA8CC,YAA9C,CAA2D,YAA3D,CAAd;;IACA,IAAIJ,KAAK,KAAK9G,+BAA+B,CAAC8G,KAA9C,EAAqD;MACnD;MACA;IACD;;IACD,IAAIA,KAAK,KAAKxG,8BAAd,EAA8C;MAC5C;MACA;IACD;;IACD,IAAIwG,KAAJ,EAAW;MACT,MAAMK,MAAM,GAAG9F,MAAM,CAACM,OAAP,CAAeyF,SAAf,CAAyBN,KAAzB,CAAf;;MACA,IAAIK,MAAM,EAAE5C,IAAR,KAAiBtE,wBAArB,EAA+C;QAC7C;MACD;IACF;;IACD,MAAMoE,OAAO,GAAGhD,MAAM,CAACM,OAAP,CAAe2C,UAAf,CAA0BuC,MAAM,CAAChE,EAAjC,CAAhB;;IACA,IAAIwB,OAAO,CAACE,IAAR,KAAiB,WAArB,EAAkC;MAChC;IACD;;IACD,IAAIgC,KAAK,CAACc,QAAN,IAAkB5E,wBAAtB,EAAgD;MAC9CE,4BAA4B,CAACkE,MAAM,CAAChE,EAAR,CAA5B;IACD,CAFD,MAEO;MACLyD,wBAAwB,CAACO,MAAM,CAAChE,EAAR,EAAY0D,KAAZ,CAAxB;IACD;EACF,CA5BsB,EA4BpB,CAACjE,0BAAD,EAA6BG,wBAA7B,EAAuDpB,MAAvD,EAA+DsB,4BAA/D,EAA6F2D,wBAA7F,CA5BoB,CAAvB;EA6BA,MAAMgB,uBAAuB,GAAGnI,KAAK,CAACyD,WAAN,CAAkB,CAACiE,MAAD,EAASN,KAAT,KAAmB;IACnE,IAAI9D,wBAAwB,IAAI8D,KAAK,CAACc,QAAtC,EAAgD;MAC9CE,MAAM,CAACC,YAAP,IAAuBC,eAAvB;IACD;EACF,CAJ+B,EAI7B,CAAChF,wBAAD,CAJ6B,CAAhC;EAKA,MAAMiF,gCAAgC,GAAGvI,KAAK,CAACyD,WAAN,CAAkB,CAACiE,MAAD,EAASN,KAAT,KAAmB;IAC5E,IAAI9D,wBAAwB,IAAI8D,KAAK,CAACoB,WAAN,CAAkBN,QAAlD,EAA4D;MAC1D1E,4BAA4B,CAACkE,MAAM,CAAChE,EAAR,CAA5B;IACD,CAFD,MAEO;MACLxB,MAAM,CAACM,OAAP,CAAe8C,SAAf,CAAyBoC,MAAM,CAAChE,EAAhC,EAAoCgE,MAAM,CAACe,KAA3C,EAAkD,CAACnF,wBAAnD;IACD;EACF,CANwC,EAMtC,CAACpB,MAAD,EAASsB,4BAAT,EAAuCF,wBAAvC,CANsC,CAAzC;EAOA,MAAMoF,mCAAmC,GAAG1I,KAAK,CAACyD,WAAN,CAAkBiE,MAAM,IAAI;IACtE,MAAMiB,iCAAiC,GAAG7G,KAAK,CAAC8G,4BAAN,IAAsC9G,KAAK,CAAC+G,UAAtF;IACA,MAAMC,gBAAgB,GAAGH,iCAAiC,GAAGlI,4CAA4C,CAACyB,MAAD,CAA/C,GAA0DvB,gCAAgC,CAACuB,MAAD,CAApJ;IACA,MAAM6G,WAAW,GAAGnI,uBAAuB,CAACsB,MAAD,CAA3C;IACAA,MAAM,CAACM,OAAP,CAAesD,UAAf,CAA0BgD,gBAA1B,EAA4CpB,MAAM,CAACe,KAAnD,EAA0DM,WAAW,EAAEC,KAAb,CAAmBvE,MAAnB,GAA4B,CAAtF;EACD,CAL2C,EAKzC,CAACvC,MAAD,EAASJ,KAAK,CAAC8G,4BAAf,EAA6C9G,KAAK,CAAC+G,UAAnD,CALyC,CAA5C;EAMA,MAAMI,iBAAiB,GAAGjJ,KAAK,CAACyD,WAAN,CAAkB,CAACiE,MAAD,EAASN,KAAT,KAAmB;IAC7D;IACA,IAAIlF,MAAM,CAACM,OAAP,CAAe0G,WAAf,CAA2BxB,MAAM,CAAChE,EAAlC,EAAsCgE,MAAM,CAACC,KAA7C,MAAwD5G,aAAa,CAACoI,IAA1E,EAAgF;MAC9E;IACD,CAJ4D,CAM7D;IACA;;;IACA,IAAI9H,qBAAqB,CAAC+F,KAAD,CAAzB,EAAkC;MAChC;IACD;;IACD,IAAInG,eAAe,CAACmG,KAAK,CAACgC,GAAP,CAAf,IAA8BhC,KAAK,CAACc,QAAxC,EAAkD;MAChD;MACA,MAAMmB,SAAS,GAAG3I,qBAAqB,CAACwB,MAAD,CAAvC;;MACA,IAAImH,SAAS,IAAIA,SAAS,CAAC3F,EAAV,KAAiBgE,MAAM,CAAChE,EAAzC,EAA6C;QAC3C0D,KAAK,CAACkC,cAAN;QACA,MAAMC,iBAAiB,GAAGrH,MAAM,CAACM,OAAP,CAAesB,aAAf,CAA6BuF,SAAS,CAAC3F,EAAvC,CAA1B;;QACA,IAAI,CAACJ,wBAAL,EAA+B;UAC7BpB,MAAM,CAACM,OAAP,CAAe8C,SAAf,CAAyB+D,SAAS,CAAC3F,EAAnC,EAAuC,CAAC6F,iBAAxC,EAA2D,IAA3D;UACA;QACD;;QACD,MAAMC,WAAW,GAAGtH,MAAM,CAACM,OAAP,CAAeiH,gCAAf,CAAgDJ,SAAS,CAAC3F,EAA1D,CAApB;QACA,MAAMgG,gBAAgB,GAAGxH,MAAM,CAACM,OAAP,CAAeiH,gCAAf,CAAgD/B,MAAM,CAAChE,EAAvD,CAAzB;QACA,IAAI8C,KAAJ;QACA,IAAIC,GAAJ;;QACA,IAAI+C,WAAW,GAAGE,gBAAlB,EAAoC;UAClC,IAAIH,iBAAJ,EAAuB;YACrB;YACA/C,KAAK,GAAGkD,gBAAR;YACAjD,GAAG,GAAG+C,WAAW,GAAG,CAApB;UACD,CAJD,MAIO;YACL;YACAhD,KAAK,GAAGkD,gBAAR;YACAjD,GAAG,GAAG+C,WAAN;UACD;QACF,CAVD,MAUO;UACL;UACA,IAAID,iBAAJ,EAAuB;YACrB;YACA/C,KAAK,GAAGgD,WAAW,GAAG,CAAtB;YACA/C,GAAG,GAAGiD,gBAAN;UACD,CAJD,MAIO;YACL;YACAlD,KAAK,GAAGgD,WAAR;YACA/C,GAAG,GAAGiD,gBAAN;UACD;QACF;;QACD,MAAMhD,sBAAsB,GAAGnD,WAAW,CAACoG,IAAZ,CAAiBhD,KAAjB,CAAuBH,KAAvB,EAA8BC,GAAG,GAAG,CAApC,EAAuCmD,GAAvC,CAA2CC,GAAG,IAAIA,GAAG,CAACnG,EAAtD,CAA/B;QACAxB,MAAM,CAACM,OAAP,CAAesD,UAAf,CAA0BY,sBAA1B,EAAkD,CAAC6C,iBAAnD;QACA;MACD;IACF;;IACD,IAAInC,KAAK,CAACgC,GAAN,KAAc,GAAd,IAAqBhC,KAAK,CAACc,QAA/B,EAAyC;MACvCd,KAAK,CAACkC,cAAN;MACAnC,wBAAwB,CAACO,MAAM,CAAChE,EAAR,EAAY0D,KAAZ,CAAxB;MACA;IACD;;IACD,IAAIA,KAAK,CAACgC,GAAN,KAAc,GAAd,KAAsBhC,KAAK,CAACG,OAAN,IAAiBH,KAAK,CAACE,OAA7C,CAAJ,EAA2D;MACzDF,KAAK,CAACkC,cAAN;MACAxD,UAAU,CAAC5D,MAAM,CAACM,OAAP,CAAesH,YAAf,EAAD,EAAgC,IAAhC,CAAV;IACD;EACF,CA7DyB,EA6DvB,CAAC5H,MAAD,EAASiF,wBAAT,EAAmCrB,UAAnC,EAA+CvC,WAAW,CAACoG,IAA3D,EAAiErG,wBAAjE,CA7DuB,CAA1B;EA8DApD,sBAAsB,CAACgC,MAAD,EAAS,eAAT,EAA0BE,0BAA0B,CAAC0E,uBAAD,CAApD,CAAtB;EACA5G,sBAAsB,CAACgC,MAAD,EAAS,UAAT,EAAqBE,0BAA0B,CAACqF,cAAD,CAA/C,CAAtB;EACAvH,sBAAsB,CAACgC,MAAD,EAAS,4BAAT,EAAuCE,0BAA0B,CAACmG,gCAAD,CAAjE,CAAtB;EACArI,sBAAsB,CAACgC,MAAD,EAAS,+BAAT,EAA0CwG,mCAA1C,CAAtB;EACAxI,sBAAsB,CAACgC,MAAD,EAAS,eAAT,EAA0BE,0BAA0B,CAAC+F,uBAAD,CAApD,CAAtB;EACAjI,sBAAsB,CAACgC,MAAD,EAAS,aAAT,EAAwBE,0BAA0B,CAAC6G,iBAAD,CAAlD,CAAtB;EAEA;AACF;AACA;;EACEjJ,KAAK,CAAC+J,SAAN,CAAgB,MAAM;IACpB,IAAIzH,qBAAqB,KAAK0H,SAA9B,EAAyC;MACvC9H,MAAM,CAACM,OAAP,CAAe6B,oBAAf,CAAoC/B,qBAApC;IACD;EACF,CAJD,EAIG,CAACJ,MAAD,EAASI,qBAAT,EAAgCR,KAAK,CAACC,YAAtC,CAJH;EAKA/B,KAAK,CAAC+J,SAAN,CAAgB,MAAM;IACpB,IAAI,CAACjI,KAAK,CAACC,YAAX,EAAyB;MACvBG,MAAM,CAACM,OAAP,CAAe6B,oBAAf,CAAoC,EAApC;IACD;EACF,CAJD,EAIG,CAACnC,MAAD,EAASJ,KAAK,CAACC,YAAf,CAJH;EAKA,MAAMkI,iBAAiB,GAAG3H,qBAAqB,IAAI,IAAnD;EACAtC,KAAK,CAAC+J,SAAN,CAAgB,MAAM;IACpB,IAAIE,iBAAiB,IAAI,CAACnI,KAAK,CAACC,YAAhC,EAA8C;MAC5C;IACD,CAHmB,CAKpB;;;IACA,MAAMiF,gBAAgB,GAAG1G,6BAA6B,CAAC4B,MAAM,CAACM,OAAP,CAAeX,KAAhB,CAAtD;;IACA,IAAIuB,eAAJ,EAAqB;MACnB,MAAMqC,YAAY,GAAGuB,gBAAgB,CAACtB,MAAjB,CAAwBhC,EAAE,IAAIN,eAAe,CAACM,EAAD,CAA7C,CAArB;;MACA,IAAI+B,YAAY,CAAChB,MAAb,GAAsBuC,gBAAgB,CAACvC,MAA3C,EAAmD;QACjDvC,MAAM,CAACM,OAAP,CAAe6B,oBAAf,CAAoCoB,YAApC;MACD;IACF;EACF,CAbD,EAaG,CAACvD,MAAD,EAASkB,eAAT,EAA0B6G,iBAA1B,EAA6CnI,KAAK,CAACC,YAAnD,CAbH;EAcA/B,KAAK,CAAC+J,SAAN,CAAgB,MAAM;IACpB,IAAI,CAACjI,KAAK,CAACC,YAAP,IAAuBkI,iBAA3B,EAA8C;MAC5C;IACD;;IACD,MAAMjD,gBAAgB,GAAG1G,6BAA6B,CAAC4B,MAAM,CAACM,OAAP,CAAeX,KAAhB,CAAtD;;IACA,IAAI,CAACyB,wBAAD,IAA6B0D,gBAAgB,CAACvC,MAAjB,GAA0B,CAA3D,EAA8D;MAC5D;MACAvC,MAAM,CAACM,OAAP,CAAe6B,oBAAf,CAAoC,EAApC;IACD;EACF,CATD,EASG,CAACnC,MAAD,EAASoB,wBAAT,EAAmCJ,iBAAnC,EAAsD+G,iBAAtD,EAAyEnI,KAAK,CAACC,YAA/E,CATH;AAUD,CA1VM"},"metadata":{},"sourceType":"module"}