{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"worker\", \"exceljsPostProcess\", \"exceljsPreProcess\", \"columnsStyles\", \"includeHeaders\", \"getRowsToExport\", \"valueOptionsSheetName\"];\nimport * as React from 'react';\nimport { useGridApiMethod, useGridLogger, useGridApiOptionHandler } from '@mui/x-data-grid';\nimport { useGridRegisterPipeProcessor, exportAs, getColumnsToExport, defaultGetRowsToExport } from '@mui/x-data-grid/internals';\nimport { buildExcel, getDataForValueOptionsSheet, serializeColumns, serializeRowUnsafe } from './serializer/excelSerializer';\nimport { GridExcelExportMenuItem } from '../../../components';\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridSelection (state)\n * @requires useGridParamsApi (method)\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const useGridExcelExport = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridExcelExport');\n  const getDataAsExcel = React.useCallback(function () {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    logger.debug(`Get data as excel`);\n    const getRowsToExport = options.getRowsToExport ?? defaultGetRowsToExport;\n    const exportedRowIds = getRowsToExport({\n      apiRef\n    });\n    const exportedColumns = getColumnsToExport({\n      apiRef,\n      options\n    });\n    return buildExcel({\n      columns: exportedColumns,\n      rowIds: exportedRowIds,\n      includeHeaders: options.includeHeaders ?? true,\n      includeColumnGroupsHeaders: options.includeColumnGroupsHeaders ?? true,\n      valueOptionsSheetName: options?.valueOptionsSheetName || 'Options',\n      columnsStyles: options?.columnsStyles,\n      exceljsPreProcess: options?.exceljsPreProcess,\n      exceljsPostProcess: options?.exceljsPostProcess,\n      escapeFormulas: options.escapeFormulas ?? true\n    }, apiRef);\n  }, [logger, apiRef]);\n  const exportDataAsExcel = React.useCallback(async function () {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    const {\n      worker: workerFn,\n      exceljsPostProcess,\n      exceljsPreProcess,\n      getRowsToExport = defaultGetRowsToExport,\n      valueOptionsSheetName = 'Options'\n    } = options,\n          cloneableOptions = _objectWithoutPropertiesLoose(options, _excluded);\n\n    const sendExcelToUser = buffer => {\n      const blob = new Blob([buffer], {\n        type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n      });\n      exportAs(blob, 'xlsx', options?.fileName);\n    };\n\n    if (!workerFn) {\n      apiRef.current.publishEvent('excelExportStateChange', 'pending');\n      const workbook = await getDataAsExcel(options);\n\n      if (workbook === null) {\n        return;\n      }\n\n      const content = await workbook.xlsx.writeBuffer();\n      apiRef.current.publishEvent('excelExportStateChange', 'finished');\n      sendExcelToUser(content);\n      return;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (exceljsPostProcess) {\n        console.warn([`MUI X: The exceljsPostProcess option is not supported when a web worker is used.`, 'As alternative, pass the callback to the same option in setupExcelExportWebWorker.'].join('\\n'));\n      }\n\n      if (exceljsPreProcess) {\n        console.warn([`MUI X: The exceljsPreProcess option is not supported when a web worker is used.`, 'As alternative, pass the callback to the same option in setupExcelExportWebWorker.'].join('\\n'));\n      }\n    }\n\n    const worker = workerFn();\n    apiRef.current.publishEvent('excelExportStateChange', 'pending');\n\n    worker.onmessage = async event => {\n      sendExcelToUser(event.data);\n      apiRef.current.publishEvent('excelExportStateChange', 'finished');\n      worker.terminate();\n    };\n\n    const exportedRowIds = getRowsToExport({\n      apiRef\n    });\n    const exportedColumns = getColumnsToExport({\n      apiRef,\n      options\n    });\n    const valueOptionsData = await getDataForValueOptionsSheet(exportedColumns, valueOptionsSheetName, apiRef.current);\n    const serializedColumns = serializeColumns(exportedColumns, options.columnsStyles || {});\n    apiRef.current.resetColSpan();\n    const serializedRows = exportedRowIds.map(id => serializeRowUnsafe(id, exportedColumns, apiRef, valueOptionsData, {\n      escapeFormulas: options.escapeFormulas ?? true\n    }));\n    apiRef.current.resetColSpan();\n    const columnGroupPaths = exportedColumns.reduce((acc, column) => {\n      acc[column.field] = apiRef.current.getColumnGroupPath(column.field);\n      return acc;\n    }, {});\n    const message = {\n      serializedColumns,\n      serializedRows,\n      valueOptionsData,\n      columnGroupPaths,\n      columnGroupDetails: apiRef.current.getAllGroupDetails(),\n      options: cloneableOptions,\n      valueOptionsSheetName\n    };\n    worker.postMessage(message);\n  }, [apiRef, getDataAsExcel]);\n  const excelExportApi = {\n    getDataAsExcel,\n    exportDataAsExcel\n  };\n  useGridApiMethod(apiRef, excelExportApi, 'public');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const addExportMenuButtons = React.useCallback((initialValue, options) => {\n    if (options.excelOptions?.disableToolbarButton) {\n      return initialValue;\n    }\n\n    return [...initialValue, {\n      component: /*#__PURE__*/_jsx(GridExcelExportMenuItem, {\n        options: options.excelOptions\n      }),\n      componentName: 'excelExport'\n    }];\n  }, []);\n  useGridRegisterPipeProcessor(apiRef, 'exportMenu', addExportMenuButtons);\n  useGridApiOptionHandler(apiRef, 'excelExportStateChange', props.onExcelExportStateChange);\n};","map":{"version":3,"names":["_objectWithoutPropertiesLoose","_excluded","React","useGridApiMethod","useGridLogger","useGridApiOptionHandler","useGridRegisterPipeProcessor","exportAs","getColumnsToExport","defaultGetRowsToExport","buildExcel","getDataForValueOptionsSheet","serializeColumns","serializeRowUnsafe","GridExcelExportMenuItem","jsx","_jsx","useGridExcelExport","apiRef","props","logger","getDataAsExcel","useCallback","options","debug","getRowsToExport","exportedRowIds","exportedColumns","columns","rowIds","includeHeaders","includeColumnGroupsHeaders","valueOptionsSheetName","columnsStyles","exceljsPreProcess","exceljsPostProcess","escapeFormulas","exportDataAsExcel","worker","workerFn","cloneableOptions","sendExcelToUser","buffer","blob","Blob","type","fileName","current","publishEvent","workbook","content","xlsx","writeBuffer","process","env","NODE_ENV","console","warn","join","onmessage","event","data","terminate","valueOptionsData","serializedColumns","resetColSpan","serializedRows","map","id","columnGroupPaths","reduce","acc","column","field","getColumnGroupPath","message","columnGroupDetails","getAllGroupDetails","postMessage","excelExportApi","addExportMenuButtons","initialValue","excelOptions","disableToolbarButton","component","componentName","onExcelExportStateChange"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/@mui/x-data-grid-premium/esm/hooks/features/export/useGridExcelExport.js"],"sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"worker\", \"exceljsPostProcess\", \"exceljsPreProcess\", \"columnsStyles\", \"includeHeaders\", \"getRowsToExport\", \"valueOptionsSheetName\"];\nimport * as React from 'react';\nimport { useGridApiMethod, useGridLogger, useGridApiOptionHandler } from '@mui/x-data-grid';\nimport { useGridRegisterPipeProcessor, exportAs, getColumnsToExport, defaultGetRowsToExport } from '@mui/x-data-grid/internals';\nimport { buildExcel, getDataForValueOptionsSheet, serializeColumns, serializeRowUnsafe } from './serializer/excelSerializer';\nimport { GridExcelExportMenuItem } from '../../../components';\n\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridSelection (state)\n * @requires useGridParamsApi (method)\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const useGridExcelExport = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridExcelExport');\n  const getDataAsExcel = React.useCallback((options = {}) => {\n    logger.debug(`Get data as excel`);\n    const getRowsToExport = options.getRowsToExport ?? defaultGetRowsToExport;\n    const exportedRowIds = getRowsToExport({\n      apiRef\n    });\n    const exportedColumns = getColumnsToExport({\n      apiRef,\n      options\n    });\n    return buildExcel({\n      columns: exportedColumns,\n      rowIds: exportedRowIds,\n      includeHeaders: options.includeHeaders ?? true,\n      includeColumnGroupsHeaders: options.includeColumnGroupsHeaders ?? true,\n      valueOptionsSheetName: options?.valueOptionsSheetName || 'Options',\n      columnsStyles: options?.columnsStyles,\n      exceljsPreProcess: options?.exceljsPreProcess,\n      exceljsPostProcess: options?.exceljsPostProcess,\n      escapeFormulas: options.escapeFormulas ?? true\n    }, apiRef);\n  }, [logger, apiRef]);\n  const exportDataAsExcel = React.useCallback(async (options = {}) => {\n    const {\n        worker: workerFn,\n        exceljsPostProcess,\n        exceljsPreProcess,\n        getRowsToExport = defaultGetRowsToExport,\n        valueOptionsSheetName = 'Options'\n      } = options,\n      cloneableOptions = _objectWithoutPropertiesLoose(options, _excluded);\n    const sendExcelToUser = buffer => {\n      const blob = new Blob([buffer], {\n        type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n      });\n      exportAs(blob, 'xlsx', options?.fileName);\n    };\n    if (!workerFn) {\n      apiRef.current.publishEvent('excelExportStateChange', 'pending');\n      const workbook = await getDataAsExcel(options);\n      if (workbook === null) {\n        return;\n      }\n      const content = await workbook.xlsx.writeBuffer();\n      apiRef.current.publishEvent('excelExportStateChange', 'finished');\n      sendExcelToUser(content);\n      return;\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      if (exceljsPostProcess) {\n        console.warn([`MUI X: The exceljsPostProcess option is not supported when a web worker is used.`, 'As alternative, pass the callback to the same option in setupExcelExportWebWorker.'].join('\\n'));\n      }\n      if (exceljsPreProcess) {\n        console.warn([`MUI X: The exceljsPreProcess option is not supported when a web worker is used.`, 'As alternative, pass the callback to the same option in setupExcelExportWebWorker.'].join('\\n'));\n      }\n    }\n    const worker = workerFn();\n    apiRef.current.publishEvent('excelExportStateChange', 'pending');\n    worker.onmessage = async event => {\n      sendExcelToUser(event.data);\n      apiRef.current.publishEvent('excelExportStateChange', 'finished');\n      worker.terminate();\n    };\n    const exportedRowIds = getRowsToExport({\n      apiRef\n    });\n    const exportedColumns = getColumnsToExport({\n      apiRef,\n      options\n    });\n    const valueOptionsData = await getDataForValueOptionsSheet(exportedColumns, valueOptionsSheetName, apiRef.current);\n    const serializedColumns = serializeColumns(exportedColumns, options.columnsStyles || {});\n    apiRef.current.resetColSpan();\n    const serializedRows = exportedRowIds.map(id => serializeRowUnsafe(id, exportedColumns, apiRef, valueOptionsData, {\n      escapeFormulas: options.escapeFormulas ?? true\n    }));\n    apiRef.current.resetColSpan();\n    const columnGroupPaths = exportedColumns.reduce((acc, column) => {\n      acc[column.field] = apiRef.current.getColumnGroupPath(column.field);\n      return acc;\n    }, {});\n    const message = {\n      serializedColumns,\n      serializedRows,\n      valueOptionsData,\n      columnGroupPaths,\n      columnGroupDetails: apiRef.current.getAllGroupDetails(),\n      options: cloneableOptions,\n      valueOptionsSheetName\n    };\n    worker.postMessage(message);\n  }, [apiRef, getDataAsExcel]);\n  const excelExportApi = {\n    getDataAsExcel,\n    exportDataAsExcel\n  };\n  useGridApiMethod(apiRef, excelExportApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const addExportMenuButtons = React.useCallback((initialValue, options) => {\n    if (options.excelOptions?.disableToolbarButton) {\n      return initialValue;\n    }\n    return [...initialValue, {\n      component: /*#__PURE__*/_jsx(GridExcelExportMenuItem, {\n        options: options.excelOptions\n      }),\n      componentName: 'excelExport'\n    }];\n  }, []);\n  useGridRegisterPipeProcessor(apiRef, 'exportMenu', addExportMenuButtons);\n  useGridApiOptionHandler(apiRef, 'excelExportStateChange', props.onExcelExportStateChange);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}