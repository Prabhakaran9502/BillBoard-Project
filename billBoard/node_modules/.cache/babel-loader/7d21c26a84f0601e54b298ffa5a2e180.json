{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { resolveComponentProps } from '@mui/base/utils';\nimport { refType } from '@mui/utils';\nimport { singleItemValueManager } from '../internals/utils/valueManagers';\nimport { useDatePickerDefaultizedProps } from '../DatePicker/shared';\nimport { usePickersTranslations } from '../hooks/usePickersTranslations';\nimport { useUtils } from '../internals/hooks/useUtils';\nimport { validateDate } from '../internals/utils/validation/validateDate';\nimport { useDesktopPicker } from '../internals/hooks/useDesktopPicker';\nimport { CalendarIcon } from '../icons';\nimport { DateField } from '../DateField';\nimport { extractValidationProps } from '../internals/utils/validation/extractValidationProps';\nimport { renderDateViewCalendar } from '../dateViewRenderers';\nimport { resolveDateFormat } from '../internals/utils/date-utils';\n/**\n * Demos:\n *\n * - [DatePicker](https://mui.com/x/react-date-pickers/date-picker/)\n * - [Validation](https://mui.com/x/react-date-pickers/validation/)\n *\n * API:\n *\n * - [DesktopDatePicker API](https://mui.com/x/api/date-pickers/desktop-date-picker/)\n */\n\nconst DesktopDatePicker = /*#__PURE__*/React.forwardRef(function DesktopDatePicker(inProps, ref) {\n  const translations = usePickersTranslations();\n  const utils = useUtils(); // Props with the default values common to all date pickers\n\n  const defaultizedProps = useDatePickerDefaultizedProps(inProps, 'MuiDesktopDatePicker');\n\n  const viewRenderers = _extends({\n    day: renderDateViewCalendar,\n    month: renderDateViewCalendar,\n    year: renderDateViewCalendar\n  }, defaultizedProps.viewRenderers); // Props with the default values specific to the desktop variant\n\n\n  const props = _extends({}, defaultizedProps, {\n    viewRenderers,\n    format: resolveDateFormat(utils, defaultizedProps, false),\n    yearsPerRow: defaultizedProps.yearsPerRow ?? 4,\n    slots: _extends({\n      openPickerIcon: CalendarIcon,\n      field: DateField\n    }, defaultizedProps.slots),\n    slotProps: _extends({}, defaultizedProps.slotProps, {\n      field: ownerState => _extends({}, resolveComponentProps(defaultizedProps.slotProps?.field, ownerState), extractValidationProps(defaultizedProps), {\n        ref\n      }),\n      toolbar: _extends({\n        hidden: true\n      }, defaultizedProps.slotProps?.toolbar)\n    })\n  });\n\n  const {\n    renderPicker\n  } = useDesktopPicker({\n    props,\n    valueManager: singleItemValueManager,\n    valueType: 'date',\n    getOpenDialogAriaText: props.localeText?.openDatePickerDialogue ?? translations.openDatePickerDialogue,\n    validator: validateDate\n  });\n  return renderPicker();\n});\nDesktopDatePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the main element is focused during the first mount.\n   * This main element is:\n   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).\n   * - the `input` element if there is a field rendered.\n   */\n  autoFocus: PropTypes.bool,\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the popover or modal will close after submitting the full date.\n   * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  closeOnSelect: PropTypes.bool,\n\n  /**\n   * Formats the day of week displayed in the calendar header.\n   * @param {TDate} date The date of the day of week provided by the adapter.\n   * @returns {string} The name to display.\n   * @default (date: TDate) => adapter.format(date, 'weekdayShort').charAt(0).toUpperCase()\n   */\n  dayOfWeekFormatter: PropTypes.func,\n\n  /**\n   * The default value.\n   * Used when the component is not controlled.\n   */\n  defaultValue: PropTypes.object,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, disable values after the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * If `true`, today's date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\n   * If `true`, the open picker button will not be rendered (renders only the field).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * If `true`, disable values before the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * If `true`, the week number will be display in the calendar.\n   */\n  displayWeekNumber: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  enableAccessibleFieldDOMStructure: PropTypes.any,\n\n  /**\n   * The day view will show as many weeks as needed after the end of the current month to match this value.\n   * Put it to 6 to have a fixed number of weeks in Gregorian calendars\n   */\n  fixedWeekNumber: PropTypes.number,\n\n  /**\n   * Format of the date when rendered in the input(s).\n   * Defaults to localized format based on the used `views`.\n   */\n  format: PropTypes.string,\n\n  /**\n   * Density of the format when rendered in the input.\n   * Setting `formatDensity` to `\"spacious\"` will add a space before and after each `/`, `-` and `.` character.\n   * @default \"dense\"\n   */\n  formatDensity: PropTypes.oneOf(['dense', 'spacious']),\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * The label content.\n   */\n  label: PropTypes.node,\n\n  /**\n   * If `true`, calls `renderLoading` instead of rendering the day calendar.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Locale for components texts.\n   * Allows overriding texts coming from `LocalizationProvider` and `theme`.\n   */\n  localeText: PropTypes.object,\n\n  /**\n   * Maximal selectable date.\n   */\n  maxDate: PropTypes.object,\n\n  /**\n   * Minimal selectable date.\n   */\n  minDate: PropTypes.object,\n\n  /**\n   * Months rendered per row.\n   * @default 3\n   */\n  monthsPerRow: PropTypes.oneOf([3, 4]),\n\n  /**\n   * Name attribute used by the `input` element in the Field.\n   */\n  name: PropTypes.string,\n\n  /**\n   * Callback fired when the value is accepted.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The value that was just accepted.\n   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value changes.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The new value.\n   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see `open`).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the error associated to the current value changes.\n   * If the error has a non-null value, then the `TextField` will be rendered in `error` state.\n   *\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TError} error The new error describing why the current value is not valid.\n   * @param {TValue} value The value associated to the error.\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback fired on month change.\n   * @template TDate\n   * @param {TDate} month The new month.\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see `open`).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Callback fired when the selected sections change.\n   * @param {FieldSelectedSections} newValue The new selected sections.\n   */\n  onSelectedSectionsChange: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   * @template TView\n   * @param {TView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Callback fired on year change.\n   * @template TDate\n   * @param {TDate} year The new year.\n   */\n  onYearChange: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   * @default false\n   */\n  open: PropTypes.bool,\n\n  /**\n   * The default visible view.\n   * Used when the component view is not controlled.\n   * Must be a valid option from `views` list.\n   */\n  openTo: PropTypes.oneOf(['day', 'month', 'year']),\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n  readOnly: PropTypes.bool,\n\n  /**\n   * If `true`, disable heavy animations.\n   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * The date used to generate the new value when both `value` and `defaultValue` are empty.\n   * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.\n   */\n  referenceDate: PropTypes.object,\n\n  /**\n   * Component displaying when passed `loading` true.\n   * @returns {React.ReactNode} The node to render when loading.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n\n  /**\n   * The currently selected sections.\n   * This prop accepts four formats:\n   * 1. If a number is provided, the section at this index will be selected.\n   * 2. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.\n   * 3. If `\"all\"` is provided, all the sections will be selected.\n   * 4. If `null` is provided, no section will be selected.\n   * If not provided, the selected sections will be handled internally.\n   */\n  selectedSections: PropTypes.oneOfType([PropTypes.oneOf(['all', 'day', 'empty', 'hours', 'meridiem', 'minutes', 'month', 'seconds', 'weekDay', 'year']), PropTypes.number]),\n\n  /**\n   * Disable specific date.\n   *\n   * Warning: This function can be called multiple times (for example when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.\n   *\n   * @template TDate\n   * @param {TDate} day The date to test.\n   * @returns {boolean} If `true` the date will be disabled.\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\n   * Disable specific month.\n   * @template TDate\n   * @param {TDate} month The month to test.\n   * @returns {boolean} If `true`, the month will be disabled.\n   */\n  shouldDisableMonth: PropTypes.func,\n\n  /**\n   * Disable specific year.\n   * @template TDate\n   * @param {TDate} year The year to test.\n   * @returns {boolean} If `true`, the year will be disabled.\n   */\n  shouldDisableYear: PropTypes.func,\n\n  /**\n   * If `true`, days outside the current month are rendered:\n   *\n   * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.\n   *\n   * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.\n   *\n   * - ignored if `calendars` equals more than `1` on range pickers.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n\n  /**\n   * Overridable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * Choose which timezone to use for the value.\n   * Example: \"default\", \"system\", \"UTC\", \"America/New_York\".\n   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.\n   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.\n   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.\n   */\n  timezone: PropTypes.string,\n\n  /**\n   * The selected value.\n   * Used when the component is controlled.\n   */\n  value: PropTypes.object,\n\n  /**\n   * The visible view.\n   * Used when the component view is controlled.\n   * Must be a valid option from `views` list.\n   */\n  view: PropTypes.oneOf(['day', 'month', 'year']),\n\n  /**\n   * Define custom view renderers for each section.\n   * If `null`, the section will only have field editing.\n   * If `undefined`, internally defined view will be used.\n   */\n  viewRenderers: PropTypes.shape({\n    day: PropTypes.func,\n    month: PropTypes.func,\n    year: PropTypes.func\n  }),\n\n  /**\n   * Available views.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['day', 'month', 'year']).isRequired),\n\n  /**\n   * Years rendered per row.\n   * @default 4\n   */\n  yearsPerRow: PropTypes.oneOf([3, 4])\n};\nexport { DesktopDatePicker };","map":{"version":3,"names":["_extends","React","PropTypes","resolveComponentProps","refType","singleItemValueManager","useDatePickerDefaultizedProps","usePickersTranslations","useUtils","validateDate","useDesktopPicker","CalendarIcon","DateField","extractValidationProps","renderDateViewCalendar","resolveDateFormat","DesktopDatePicker","forwardRef","inProps","ref","translations","utils","defaultizedProps","viewRenderers","day","month","year","props","format","yearsPerRow","slots","openPickerIcon","field","slotProps","ownerState","toolbar","hidden","renderPicker","valueManager","valueType","getOpenDialogAriaText","localeText","openDatePickerDialogue","validator","propTypes","autoFocus","bool","className","string","closeOnSelect","dayOfWeekFormatter","func","defaultValue","object","disabled","disableFuture","disableHighlightToday","disableOpenPicker","disablePast","displayWeekNumber","enableAccessibleFieldDOMStructure","any","fixedWeekNumber","number","formatDensity","oneOf","inputRef","label","node","loading","maxDate","minDate","monthsPerRow","name","onAccept","onChange","onClose","onError","onMonthChange","onOpen","onSelectedSectionsChange","onViewChange","onYearChange","open","openTo","orientation","readOnly","reduceAnimations","referenceDate","renderLoading","selectedSections","oneOfType","shouldDisableDate","shouldDisableMonth","shouldDisableYear","showDaysOutsideCurrentMonth","sx","arrayOf","timezone","value","view","shape","views","isRequired"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/@mui/x-date-pickers/DesktopDatePicker/DesktopDatePicker.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { resolveComponentProps } from '@mui/base/utils';\nimport { refType } from '@mui/utils';\nimport { singleItemValueManager } from '../internals/utils/valueManagers';\nimport { useDatePickerDefaultizedProps } from '../DatePicker/shared';\nimport { usePickersTranslations } from '../hooks/usePickersTranslations';\nimport { useUtils } from '../internals/hooks/useUtils';\nimport { validateDate } from '../internals/utils/validation/validateDate';\nimport { useDesktopPicker } from '../internals/hooks/useDesktopPicker';\nimport { CalendarIcon } from '../icons';\nimport { DateField } from '../DateField';\nimport { extractValidationProps } from '../internals/utils/validation/extractValidationProps';\nimport { renderDateViewCalendar } from '../dateViewRenderers';\nimport { resolveDateFormat } from '../internals/utils/date-utils';\n/**\n * Demos:\n *\n * - [DatePicker](https://mui.com/x/react-date-pickers/date-picker/)\n * - [Validation](https://mui.com/x/react-date-pickers/validation/)\n *\n * API:\n *\n * - [DesktopDatePicker API](https://mui.com/x/api/date-pickers/desktop-date-picker/)\n */\nconst DesktopDatePicker = /*#__PURE__*/React.forwardRef(function DesktopDatePicker(inProps, ref) {\n  const translations = usePickersTranslations();\n  const utils = useUtils();\n\n  // Props with the default values common to all date pickers\n  const defaultizedProps = useDatePickerDefaultizedProps(inProps, 'MuiDesktopDatePicker');\n  const viewRenderers = _extends({\n    day: renderDateViewCalendar,\n    month: renderDateViewCalendar,\n    year: renderDateViewCalendar\n  }, defaultizedProps.viewRenderers);\n\n  // Props with the default values specific to the desktop variant\n  const props = _extends({}, defaultizedProps, {\n    viewRenderers,\n    format: resolveDateFormat(utils, defaultizedProps, false),\n    yearsPerRow: defaultizedProps.yearsPerRow ?? 4,\n    slots: _extends({\n      openPickerIcon: CalendarIcon,\n      field: DateField\n    }, defaultizedProps.slots),\n    slotProps: _extends({}, defaultizedProps.slotProps, {\n      field: ownerState => _extends({}, resolveComponentProps(defaultizedProps.slotProps?.field, ownerState), extractValidationProps(defaultizedProps), {\n        ref\n      }),\n      toolbar: _extends({\n        hidden: true\n      }, defaultizedProps.slotProps?.toolbar)\n    })\n  });\n  const {\n    renderPicker\n  } = useDesktopPicker({\n    props,\n    valueManager: singleItemValueManager,\n    valueType: 'date',\n    getOpenDialogAriaText: props.localeText?.openDatePickerDialogue ?? translations.openDatePickerDialogue,\n    validator: validateDate\n  });\n  return renderPicker();\n});\nDesktopDatePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * If `true`, the main element is focused during the first mount.\n   * This main element is:\n   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).\n   * - the `input` element if there is a field rendered.\n   */\n  autoFocus: PropTypes.bool,\n  className: PropTypes.string,\n  /**\n   * If `true`, the popover or modal will close after submitting the full date.\n   * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  closeOnSelect: PropTypes.bool,\n  /**\n   * Formats the day of week displayed in the calendar header.\n   * @param {TDate} date The date of the day of week provided by the adapter.\n   * @returns {string} The name to display.\n   * @default (date: TDate) => adapter.format(date, 'weekdayShort').charAt(0).toUpperCase()\n   */\n  dayOfWeekFormatter: PropTypes.func,\n  /**\n   * The default value.\n   * Used when the component is not controlled.\n   */\n  defaultValue: PropTypes.object,\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, disable values after the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n  /**\n   * If `true`, today's date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n  /**\n   * If `true`, the open picker button will not be rendered (renders only the field).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n  /**\n   * If `true`, disable values before the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n  /**\n   * If `true`, the week number will be display in the calendar.\n   */\n  displayWeekNumber: PropTypes.bool,\n  /**\n   * @default false\n   */\n  enableAccessibleFieldDOMStructure: PropTypes.any,\n  /**\n   * The day view will show as many weeks as needed after the end of the current month to match this value.\n   * Put it to 6 to have a fixed number of weeks in Gregorian calendars\n   */\n  fixedWeekNumber: PropTypes.number,\n  /**\n   * Format of the date when rendered in the input(s).\n   * Defaults to localized format based on the used `views`.\n   */\n  format: PropTypes.string,\n  /**\n   * Density of the format when rendered in the input.\n   * Setting `formatDensity` to `\"spacious\"` will add a space before and after each `/`, `-` and `.` character.\n   * @default \"dense\"\n   */\n  formatDensity: PropTypes.oneOf(['dense', 'spacious']),\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * The label content.\n   */\n  label: PropTypes.node,\n  /**\n   * If `true`, calls `renderLoading` instead of rendering the day calendar.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n  /**\n   * Locale for components texts.\n   * Allows overriding texts coming from `LocalizationProvider` and `theme`.\n   */\n  localeText: PropTypes.object,\n  /**\n   * Maximal selectable date.\n   */\n  maxDate: PropTypes.object,\n  /**\n   * Minimal selectable date.\n   */\n  minDate: PropTypes.object,\n  /**\n   * Months rendered per row.\n   * @default 3\n   */\n  monthsPerRow: PropTypes.oneOf([3, 4]),\n  /**\n   * Name attribute used by the `input` element in the Field.\n   */\n  name: PropTypes.string,\n  /**\n   * Callback fired when the value is accepted.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The value that was just accepted.\n   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.\n   */\n  onAccept: PropTypes.func,\n  /**\n   * Callback fired when the value changes.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The new value.\n   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see `open`).\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the error associated to the current value changes.\n   * If the error has a non-null value, then the `TextField` will be rendered in `error` state.\n   *\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TError} error The new error describing why the current value is not valid.\n   * @param {TValue} value The value associated to the error.\n   */\n  onError: PropTypes.func,\n  /**\n   * Callback fired on month change.\n   * @template TDate\n   * @param {TDate} month The new month.\n   */\n  onMonthChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see `open`).\n   */\n  onOpen: PropTypes.func,\n  /**\n   * Callback fired when the selected sections change.\n   * @param {FieldSelectedSections} newValue The new selected sections.\n   */\n  onSelectedSectionsChange: PropTypes.func,\n  /**\n   * Callback fired on view change.\n   * @template TView\n   * @param {TView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n  /**\n   * Callback fired on year change.\n   * @template TDate\n   * @param {TDate} year The new year.\n   */\n  onYearChange: PropTypes.func,\n  /**\n   * Control the popup or dialog open state.\n   * @default false\n   */\n  open: PropTypes.bool,\n  /**\n   * The default visible view.\n   * Used when the component view is not controlled.\n   * Must be a valid option from `views` list.\n   */\n  openTo: PropTypes.oneOf(['day', 'month', 'year']),\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n  readOnly: PropTypes.bool,\n  /**\n   * If `true`, disable heavy animations.\n   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13\n   */\n  reduceAnimations: PropTypes.bool,\n  /**\n   * The date used to generate the new value when both `value` and `defaultValue` are empty.\n   * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.\n   */\n  referenceDate: PropTypes.object,\n  /**\n   * Component displaying when passed `loading` true.\n   * @returns {React.ReactNode} The node to render when loading.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n  /**\n   * The currently selected sections.\n   * This prop accepts four formats:\n   * 1. If a number is provided, the section at this index will be selected.\n   * 2. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.\n   * 3. If `\"all\"` is provided, all the sections will be selected.\n   * 4. If `null` is provided, no section will be selected.\n   * If not provided, the selected sections will be handled internally.\n   */\n  selectedSections: PropTypes.oneOfType([PropTypes.oneOf(['all', 'day', 'empty', 'hours', 'meridiem', 'minutes', 'month', 'seconds', 'weekDay', 'year']), PropTypes.number]),\n  /**\n   * Disable specific date.\n   *\n   * Warning: This function can be called multiple times (for example when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.\n   *\n   * @template TDate\n   * @param {TDate} day The date to test.\n   * @returns {boolean} If `true` the date will be disabled.\n   */\n  shouldDisableDate: PropTypes.func,\n  /**\n   * Disable specific month.\n   * @template TDate\n   * @param {TDate} month The month to test.\n   * @returns {boolean} If `true`, the month will be disabled.\n   */\n  shouldDisableMonth: PropTypes.func,\n  /**\n   * Disable specific year.\n   * @template TDate\n   * @param {TDate} year The year to test.\n   * @returns {boolean} If `true`, the year will be disabled.\n   */\n  shouldDisableYear: PropTypes.func,\n  /**\n   * If `true`, days outside the current month are rendered:\n   *\n   * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.\n   *\n   * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.\n   *\n   * - ignored if `calendars` equals more than `1` on range pickers.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n  /**\n   * Overridable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Choose which timezone to use for the value.\n   * Example: \"default\", \"system\", \"UTC\", \"America/New_York\".\n   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.\n   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.\n   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.\n   */\n  timezone: PropTypes.string,\n  /**\n   * The selected value.\n   * Used when the component is controlled.\n   */\n  value: PropTypes.object,\n  /**\n   * The visible view.\n   * Used when the component view is controlled.\n   * Must be a valid option from `views` list.\n   */\n  view: PropTypes.oneOf(['day', 'month', 'year']),\n  /**\n   * Define custom view renderers for each section.\n   * If `null`, the section will only have field editing.\n   * If `undefined`, internally defined view will be used.\n   */\n  viewRenderers: PropTypes.shape({\n    day: PropTypes.func,\n    month: PropTypes.func,\n    year: PropTypes.func\n  }),\n  /**\n   * Available views.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['day', 'month', 'year']).isRequired),\n  /**\n   * Years rendered per row.\n   * @default 4\n   */\n  yearsPerRow: PropTypes.oneOf([3, 4])\n};\nexport { DesktopDatePicker };"],"mappings":"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"},"metadata":{},"sourceType":"module"}