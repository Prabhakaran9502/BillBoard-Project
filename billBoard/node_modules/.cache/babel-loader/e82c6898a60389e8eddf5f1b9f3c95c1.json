{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"groupId\", \"children\"];\nimport * as React from 'react';\nimport { isLeaf } from '../../../models/gridColumnGrouping';\nimport { gridColumnGroupsLookupSelector, gridColumnGroupsUnwrappedModelSelector } from './gridColumnGroupsSelector';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { getColumnGroupsHeaderStructure, unwrapGroupingColumnModel } from './gridColumnGroupsUtils';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { gridColumnFieldsSelector, gridVisibleColumnFieldsSelector } from '../columns';\n\nconst createGroupLookup = columnGroupingModel => {\n  let groupLookup = {};\n  columnGroupingModel.forEach(node => {\n    if (isLeaf(node)) {\n      return;\n    }\n\n    const {\n      groupId,\n      children\n    } = node,\n          other = _objectWithoutPropertiesLoose(node, _excluded);\n\n    if (!groupId) {\n      throw new Error('MUI X: An element of the columnGroupingModel does not have either `field` or `groupId`.');\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!children) {\n        console.warn(`MUI X: group groupId=${groupId} has no children.`);\n      }\n    }\n\n    const groupParam = _extends({}, other, {\n      groupId\n    });\n\n    const subTreeLookup = createGroupLookup(children);\n\n    if (subTreeLookup[groupId] !== undefined || groupLookup[groupId] !== undefined) {\n      throw new Error(`MUI X: The groupId ${groupId} is used multiple times in the columnGroupingModel.`);\n    }\n\n    groupLookup = _extends({}, groupLookup, subTreeLookup, {\n      [groupId]: groupParam\n    });\n  });\n  return _extends({}, groupLookup);\n};\n\nexport const columnGroupsStateInitializer = (state, props, apiRef) => {\n  if (!props.columnGroupingModel) {\n    return state;\n  }\n\n  const columnFields = gridColumnFieldsSelector(apiRef);\n  const visibleColumnFields = gridVisibleColumnFieldsSelector(apiRef);\n  const groupLookup = createGroupLookup(props.columnGroupingModel ?? []);\n  const unwrappedGroupingModel = unwrapGroupingColumnModel(props.columnGroupingModel ?? []);\n  const columnGroupsHeaderStructure = getColumnGroupsHeaderStructure(columnFields, unwrappedGroupingModel, apiRef.current.state.pinnedColumns ?? {});\n  const maxDepth = visibleColumnFields.length === 0 ? 0 : Math.max(...visibleColumnFields.map(field => unwrappedGroupingModel[field]?.length ?? 0));\n  return _extends({}, state, {\n    columnGrouping: {\n      lookup: groupLookup,\n      unwrappedGroupingModel,\n      headerStructure: columnGroupsHeaderStructure,\n      maxDepth\n    }\n  });\n};\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n */\n\nexport const useGridColumnGrouping = (apiRef, props) => {\n  /**\n   * API METHODS\n   */\n  const getColumnGroupPath = React.useCallback(field => {\n    const unwrappedGroupingModel = gridColumnGroupsUnwrappedModelSelector(apiRef);\n    return unwrappedGroupingModel[field] ?? [];\n  }, [apiRef]);\n  const getAllGroupDetails = React.useCallback(() => {\n    const columnGroupLookup = gridColumnGroupsLookupSelector(apiRef);\n    return columnGroupLookup;\n  }, [apiRef]);\n  const columnGroupingApi = {\n    getColumnGroupPath,\n    getAllGroupDetails\n  };\n  useGridApiMethod(apiRef, columnGroupingApi, 'public');\n  const handleColumnIndexChange = React.useCallback(() => {\n    const unwrappedGroupingModel = unwrapGroupingColumnModel(props.columnGroupingModel ?? []);\n    apiRef.current.setState(state => {\n      const orderedFields = state.columns?.orderedFields ?? [];\n      const pinnedColumns = state.pinnedColumns ?? {};\n      const columnGroupsHeaderStructure = getColumnGroupsHeaderStructure(orderedFields, unwrappedGroupingModel, pinnedColumns);\n      return _extends({}, state, {\n        columnGrouping: _extends({}, state.columnGrouping, {\n          headerStructure: columnGroupsHeaderStructure\n        })\n      });\n    });\n  }, [apiRef, props.columnGroupingModel]);\n  const updateColumnGroupingState = React.useCallback(columnGroupingModel => {\n    // @ts-expect-error Move this logic to `Pro` package\n    const pinnedColumns = apiRef.current.getPinnedColumns?.() ?? {};\n    const columnFields = gridColumnFieldsSelector(apiRef);\n    const visibleColumnFields = gridVisibleColumnFieldsSelector(apiRef);\n    const groupLookup = createGroupLookup(columnGroupingModel ?? []);\n    const unwrappedGroupingModel = unwrapGroupingColumnModel(columnGroupingModel ?? []);\n    const columnGroupsHeaderStructure = getColumnGroupsHeaderStructure(columnFields, unwrappedGroupingModel, pinnedColumns);\n    const maxDepth = visibleColumnFields.length === 0 ? 0 : Math.max(...visibleColumnFields.map(field => unwrappedGroupingModel[field]?.length ?? 0));\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        columnGrouping: {\n          lookup: groupLookup,\n          unwrappedGroupingModel,\n          headerStructure: columnGroupsHeaderStructure,\n          maxDepth\n        }\n      });\n    });\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'columnIndexChange', handleColumnIndexChange);\n  useGridApiEventHandler(apiRef, 'columnsChange', () => {\n    updateColumnGroupingState(props.columnGroupingModel);\n  });\n  useGridApiEventHandler(apiRef, 'columnVisibilityModelChange', () => {\n    updateColumnGroupingState(props.columnGroupingModel);\n  });\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    updateColumnGroupingState(props.columnGroupingModel);\n  }, [updateColumnGroupingState, props.columnGroupingModel]);\n};","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","isLeaf","gridColumnGroupsLookupSelector","gridColumnGroupsUnwrappedModelSelector","useGridApiMethod","getColumnGroupsHeaderStructure","unwrapGroupingColumnModel","useGridApiEventHandler","gridColumnFieldsSelector","gridVisibleColumnFieldsSelector","createGroupLookup","columnGroupingModel","groupLookup","forEach","node","groupId","children","other","Error","process","env","NODE_ENV","console","warn","groupParam","subTreeLookup","undefined","columnGroupsStateInitializer","state","props","apiRef","columnFields","visibleColumnFields","unwrappedGroupingModel","columnGroupsHeaderStructure","current","pinnedColumns","maxDepth","length","Math","max","map","field","columnGrouping","lookup","headerStructure","useGridColumnGrouping","getColumnGroupPath","useCallback","getAllGroupDetails","columnGroupLookup","columnGroupingApi","handleColumnIndexChange","setState","orderedFields","columns","updateColumnGroupingState","getPinnedColumns","useEffect"],"sources":["C:/Users/kb/node_modules/@mui/x-data-grid/hooks/features/columnGrouping/useGridColumnGrouping.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"groupId\", \"children\"];\nimport * as React from 'react';\nimport { isLeaf } from '../../../models/gridColumnGrouping';\nimport { gridColumnGroupsLookupSelector, gridColumnGroupsUnwrappedModelSelector } from './gridColumnGroupsSelector';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { getColumnGroupsHeaderStructure, unwrapGroupingColumnModel } from './gridColumnGroupsUtils';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { gridColumnFieldsSelector, gridVisibleColumnFieldsSelector } from '../columns';\nconst createGroupLookup = columnGroupingModel => {\n  let groupLookup = {};\n  columnGroupingModel.forEach(node => {\n    if (isLeaf(node)) {\n      return;\n    }\n    const {\n        groupId,\n        children\n      } = node,\n      other = _objectWithoutPropertiesLoose(node, _excluded);\n    if (!groupId) {\n      throw new Error('MUI X: An element of the columnGroupingModel does not have either `field` or `groupId`.');\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      if (!children) {\n        console.warn(`MUI X: group groupId=${groupId} has no children.`);\n      }\n    }\n    const groupParam = _extends({}, other, {\n      groupId\n    });\n    const subTreeLookup = createGroupLookup(children);\n    if (subTreeLookup[groupId] !== undefined || groupLookup[groupId] !== undefined) {\n      throw new Error(`MUI X: The groupId ${groupId} is used multiple times in the columnGroupingModel.`);\n    }\n    groupLookup = _extends({}, groupLookup, subTreeLookup, {\n      [groupId]: groupParam\n    });\n  });\n  return _extends({}, groupLookup);\n};\nexport const columnGroupsStateInitializer = (state, props, apiRef) => {\n  if (!props.columnGroupingModel) {\n    return state;\n  }\n  const columnFields = gridColumnFieldsSelector(apiRef);\n  const visibleColumnFields = gridVisibleColumnFieldsSelector(apiRef);\n  const groupLookup = createGroupLookup(props.columnGroupingModel ?? []);\n  const unwrappedGroupingModel = unwrapGroupingColumnModel(props.columnGroupingModel ?? []);\n  const columnGroupsHeaderStructure = getColumnGroupsHeaderStructure(columnFields, unwrappedGroupingModel, apiRef.current.state.pinnedColumns ?? {});\n  const maxDepth = visibleColumnFields.length === 0 ? 0 : Math.max(...visibleColumnFields.map(field => unwrappedGroupingModel[field]?.length ?? 0));\n  return _extends({}, state, {\n    columnGrouping: {\n      lookup: groupLookup,\n      unwrappedGroupingModel,\n      headerStructure: columnGroupsHeaderStructure,\n      maxDepth\n    }\n  });\n};\n\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n */\nexport const useGridColumnGrouping = (apiRef, props) => {\n  /**\n   * API METHODS\n   */\n  const getColumnGroupPath = React.useCallback(field => {\n    const unwrappedGroupingModel = gridColumnGroupsUnwrappedModelSelector(apiRef);\n    return unwrappedGroupingModel[field] ?? [];\n  }, [apiRef]);\n  const getAllGroupDetails = React.useCallback(() => {\n    const columnGroupLookup = gridColumnGroupsLookupSelector(apiRef);\n    return columnGroupLookup;\n  }, [apiRef]);\n  const columnGroupingApi = {\n    getColumnGroupPath,\n    getAllGroupDetails\n  };\n  useGridApiMethod(apiRef, columnGroupingApi, 'public');\n  const handleColumnIndexChange = React.useCallback(() => {\n    const unwrappedGroupingModel = unwrapGroupingColumnModel(props.columnGroupingModel ?? []);\n    apiRef.current.setState(state => {\n      const orderedFields = state.columns?.orderedFields ?? [];\n      const pinnedColumns = state.pinnedColumns ?? {};\n      const columnGroupsHeaderStructure = getColumnGroupsHeaderStructure(orderedFields, unwrappedGroupingModel, pinnedColumns);\n      return _extends({}, state, {\n        columnGrouping: _extends({}, state.columnGrouping, {\n          headerStructure: columnGroupsHeaderStructure\n        })\n      });\n    });\n  }, [apiRef, props.columnGroupingModel]);\n  const updateColumnGroupingState = React.useCallback(columnGroupingModel => {\n    // @ts-expect-error Move this logic to `Pro` package\n    const pinnedColumns = apiRef.current.getPinnedColumns?.() ?? {};\n    const columnFields = gridColumnFieldsSelector(apiRef);\n    const visibleColumnFields = gridVisibleColumnFieldsSelector(apiRef);\n    const groupLookup = createGroupLookup(columnGroupingModel ?? []);\n    const unwrappedGroupingModel = unwrapGroupingColumnModel(columnGroupingModel ?? []);\n    const columnGroupsHeaderStructure = getColumnGroupsHeaderStructure(columnFields, unwrappedGroupingModel, pinnedColumns);\n    const maxDepth = visibleColumnFields.length === 0 ? 0 : Math.max(...visibleColumnFields.map(field => unwrappedGroupingModel[field]?.length ?? 0));\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        columnGrouping: {\n          lookup: groupLookup,\n          unwrappedGroupingModel,\n          headerStructure: columnGroupsHeaderStructure,\n          maxDepth\n        }\n      });\n    });\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'columnIndexChange', handleColumnIndexChange);\n  useGridApiEventHandler(apiRef, 'columnsChange', () => {\n    updateColumnGroupingState(props.columnGroupingModel);\n  });\n  useGridApiEventHandler(apiRef, 'columnVisibilityModelChange', () => {\n    updateColumnGroupingState(props.columnGroupingModel);\n  });\n\n  /**\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    updateColumnGroupingState(props.columnGroupingModel);\n  }, [updateColumnGroupingState, props.columnGroupingModel]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}