{"ast":null,"code":"import { createSelector, createSelectorMemoized } from '../../../utils/createSelector';\n\nconst gridRowsStateSelector = state => state.rows;\n\nexport const gridRowCountSelector = createSelector(gridRowsStateSelector, rows => rows.totalRowCount);\nexport const gridRowsLoadingSelector = createSelector(gridRowsStateSelector, rows => rows.loading);\nexport const gridTopLevelRowCountSelector = createSelector(gridRowsStateSelector, rows => rows.totalTopLevelRowCount); // TODO rows v6: Rename\n\nexport const gridRowsLookupSelector = createSelector(gridRowsStateSelector, rows => rows.dataRowIdToModelLookup);\nexport const gridRowsDataRowIdToIdLookupSelector = createSelector(gridRowsStateSelector, rows => rows.dataRowIdToIdLookup);\nexport const gridRowTreeSelector = createSelector(gridRowsStateSelector, rows => rows.tree);\nexport const gridRowGroupingNameSelector = createSelector(gridRowsStateSelector, rows => rows.groupingName);\nexport const gridRowTreeDepthsSelector = createSelector(gridRowsStateSelector, rows => rows.treeDepths);\nexport const gridRowMaximumTreeDepthSelector = createSelectorMemoized(gridRowsStateSelector, rows => {\n  const entries = Object.entries(rows.treeDepths);\n\n  if (entries.length === 0) {\n    return 1;\n  }\n\n  return entries.filter(_ref => {\n    let [, nodeCount] = _ref;\n    return nodeCount > 0;\n  }).map(_ref2 => {\n    let [depth] = _ref2;\n    return Number(depth);\n  }).sort((a, b) => b - a)[0] + 1;\n});\nexport const gridDataRowIdsSelector = createSelector(gridRowsStateSelector, rows => rows.dataRowIds);\n/**\n * @ignore - do not document.\n */\n\nexport const gridAdditionalRowGroupsSelector = createSelector(gridRowsStateSelector, rows => rows?.additionalRowGroups);\n/**\n * @ignore - do not document.\n */\n\nexport const gridPinnedRowsSelector = createSelectorMemoized(gridAdditionalRowGroupsSelector, additionalRowGroups => {\n  const rawPinnedRows = additionalRowGroups?.pinnedRows;\n  return {\n    bottom: rawPinnedRows?.bottom?.map(rowEntry => ({\n      id: rowEntry.id,\n      model: rowEntry.model ?? {}\n    })) ?? [],\n    top: rawPinnedRows?.top?.map(rowEntry => ({\n      id: rowEntry.id,\n      model: rowEntry.model ?? {}\n    })) ?? []\n  };\n});\n/**\n * @ignore - do not document.\n */\n\nexport const gridPinnedRowsCountSelector = createSelector(gridPinnedRowsSelector, pinnedRows => {\n  return (pinnedRows?.top?.length || 0) + (pinnedRows?.bottom?.length || 0);\n});","map":{"version":3,"names":["createSelector","createSelectorMemoized","gridRowsStateSelector","state","rows","gridRowCountSelector","totalRowCount","gridRowsLoadingSelector","loading","gridTopLevelRowCountSelector","totalTopLevelRowCount","gridRowsLookupSelector","dataRowIdToModelLookup","gridRowsDataRowIdToIdLookupSelector","dataRowIdToIdLookup","gridRowTreeSelector","tree","gridRowGroupingNameSelector","groupingName","gridRowTreeDepthsSelector","treeDepths","gridRowMaximumTreeDepthSelector","entries","Object","length","filter","nodeCount","map","depth","Number","sort","a","b","gridDataRowIdsSelector","dataRowIds","gridAdditionalRowGroupsSelector","additionalRowGroups","gridPinnedRowsSelector","rawPinnedRows","pinnedRows","bottom","rowEntry","id","model","top","gridPinnedRowsCountSelector"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsSelector.js"],"sourcesContent":["import { createSelector, createSelectorMemoized } from '../../../utils/createSelector';\nconst gridRowsStateSelector = state => state.rows;\nexport const gridRowCountSelector = createSelector(gridRowsStateSelector, rows => rows.totalRowCount);\nexport const gridRowsLoadingSelector = createSelector(gridRowsStateSelector, rows => rows.loading);\nexport const gridTopLevelRowCountSelector = createSelector(gridRowsStateSelector, rows => rows.totalTopLevelRowCount);\n\n// TODO rows v6: Rename\nexport const gridRowsLookupSelector = createSelector(gridRowsStateSelector, rows => rows.dataRowIdToModelLookup);\nexport const gridRowsDataRowIdToIdLookupSelector = createSelector(gridRowsStateSelector, rows => rows.dataRowIdToIdLookup);\nexport const gridRowTreeSelector = createSelector(gridRowsStateSelector, rows => rows.tree);\nexport const gridRowGroupingNameSelector = createSelector(gridRowsStateSelector, rows => rows.groupingName);\nexport const gridRowTreeDepthsSelector = createSelector(gridRowsStateSelector, rows => rows.treeDepths);\nexport const gridRowMaximumTreeDepthSelector = createSelectorMemoized(gridRowsStateSelector, rows => {\n  const entries = Object.entries(rows.treeDepths);\n  if (entries.length === 0) {\n    return 1;\n  }\n  return entries.filter(([, nodeCount]) => nodeCount > 0).map(([depth]) => Number(depth)).sort((a, b) => b - a)[0] + 1;\n});\nexport const gridDataRowIdsSelector = createSelector(gridRowsStateSelector, rows => rows.dataRowIds);\n\n/**\n * @ignore - do not document.\n */\nexport const gridAdditionalRowGroupsSelector = createSelector(gridRowsStateSelector, rows => rows?.additionalRowGroups);\n\n/**\n * @ignore - do not document.\n */\nexport const gridPinnedRowsSelector = createSelectorMemoized(gridAdditionalRowGroupsSelector, additionalRowGroups => {\n  const rawPinnedRows = additionalRowGroups?.pinnedRows;\n  return {\n    bottom: rawPinnedRows?.bottom?.map(rowEntry => ({\n      id: rowEntry.id,\n      model: rowEntry.model ?? {}\n    })) ?? [],\n    top: rawPinnedRows?.top?.map(rowEntry => ({\n      id: rowEntry.id,\n      model: rowEntry.model ?? {}\n    })) ?? []\n  };\n});\n\n/**\n * @ignore - do not document.\n */\nexport const gridPinnedRowsCountSelector = createSelector(gridPinnedRowsSelector, pinnedRows => {\n  return (pinnedRows?.top?.length || 0) + (pinnedRows?.bottom?.length || 0);\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}