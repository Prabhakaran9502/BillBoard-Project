{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GRID_AGGREGATION_FUNCTIONS = void 0;\n\nvar _internals = require(\"@mui/x-data-grid-pro/internals\");\n\nconst sumAgg = {\n  apply: _ref => {\n    let {\n      values\n    } = _ref;\n    let sum = 0;\n\n    for (let i = 0; i < values.length; i += 1) {\n      const value = values[i];\n\n      if ((0, _internals.isNumber)(value)) {\n        sum += value;\n      }\n    }\n\n    return sum;\n  },\n  columnTypes: ['number']\n};\nconst avgAgg = {\n  apply: _ref2 => {\n    let {\n      values\n    } = _ref2;\n\n    if (values.length === 0) {\n      return null;\n    }\n\n    let sum = 0;\n    let valuesCount = 0;\n\n    for (let i = 0; i < values.length; i += 1) {\n      const value = values[i];\n\n      if ((0, _internals.isNumber)(value)) {\n        valuesCount += 1;\n        sum += value;\n      }\n    }\n\n    return sum / valuesCount;\n  },\n  columnTypes: ['number']\n};\nconst minAgg = {\n  apply: _ref3 => {\n    let {\n      values\n    } = _ref3;\n\n    if (values.length === 0) {\n      return null;\n    }\n\n    let min = +Infinity;\n\n    for (let i = 0; i < values.length; i += 1) {\n      const value = values[i];\n\n      if (value != null && value < min) {\n        min = value;\n      }\n    }\n\n    return min;\n  },\n  columnTypes: ['number', 'date', 'dateTime']\n};\nconst maxAgg = {\n  apply: _ref4 => {\n    let {\n      values\n    } = _ref4;\n\n    if (values.length === 0) {\n      return null;\n    }\n\n    let max = -Infinity;\n\n    for (let i = 0; i < values.length; i += 1) {\n      const value = values[i];\n\n      if (value != null && value > max) {\n        max = value;\n      }\n    }\n\n    return max;\n  },\n  columnTypes: ['number', 'date', 'dateTime']\n};\nconst sizeAgg = {\n  apply: _ref5 => {\n    let {\n      values\n    } = _ref5;\n    return values.filter(value => typeof value !== 'undefined').length;\n  },\n  valueFormatter: value => {\n    if (value == null || !(0, _internals.isNumber)(value)) {\n      return value;\n    }\n\n    return value.toLocaleString();\n  },\n  hasCellUnit: false\n};\nconst GRID_AGGREGATION_FUNCTIONS = exports.GRID_AGGREGATION_FUNCTIONS = {\n  sum: sumAgg,\n  avg: avgAgg,\n  min: minAgg,\n  max: maxAgg,\n  size: sizeAgg\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","GRID_AGGREGATION_FUNCTIONS","_internals","require","sumAgg","apply","values","sum","i","length","isNumber","columnTypes","avgAgg","valuesCount","minAgg","min","Infinity","maxAgg","max","sizeAgg","filter","valueFormatter","toLocaleString","hasCellUnit","avg","size"],"sources":["C:/Users/kb/node_modules/@mui/x-data-grid-premium/hooks/features/aggregation/gridAggregationFunctions.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GRID_AGGREGATION_FUNCTIONS = void 0;\nvar _internals = require(\"@mui/x-data-grid-pro/internals\");\nconst sumAgg = {\n  apply: ({\n    values\n  }) => {\n    let sum = 0;\n    for (let i = 0; i < values.length; i += 1) {\n      const value = values[i];\n      if ((0, _internals.isNumber)(value)) {\n        sum += value;\n      }\n    }\n    return sum;\n  },\n  columnTypes: ['number']\n};\nconst avgAgg = {\n  apply: ({\n    values\n  }) => {\n    if (values.length === 0) {\n      return null;\n    }\n    let sum = 0;\n    let valuesCount = 0;\n    for (let i = 0; i < values.length; i += 1) {\n      const value = values[i];\n      if ((0, _internals.isNumber)(value)) {\n        valuesCount += 1;\n        sum += value;\n      }\n    }\n    return sum / valuesCount;\n  },\n  columnTypes: ['number']\n};\nconst minAgg = {\n  apply: ({\n    values\n  }) => {\n    if (values.length === 0) {\n      return null;\n    }\n    let min = +Infinity;\n    for (let i = 0; i < values.length; i += 1) {\n      const value = values[i];\n      if (value != null && value < min) {\n        min = value;\n      }\n    }\n    return min;\n  },\n  columnTypes: ['number', 'date', 'dateTime']\n};\nconst maxAgg = {\n  apply: ({\n    values\n  }) => {\n    if (values.length === 0) {\n      return null;\n    }\n    let max = -Infinity;\n    for (let i = 0; i < values.length; i += 1) {\n      const value = values[i];\n      if (value != null && value > max) {\n        max = value;\n      }\n    }\n    return max;\n  },\n  columnTypes: ['number', 'date', 'dateTime']\n};\nconst sizeAgg = {\n  apply: ({\n    values\n  }) => {\n    return values.filter(value => typeof value !== 'undefined').length;\n  },\n  valueFormatter: value => {\n    if (value == null || !(0, _internals.isNumber)(value)) {\n      return value;\n    }\n    return value.toLocaleString();\n  },\n  hasCellUnit: false\n};\nconst GRID_AGGREGATION_FUNCTIONS = exports.GRID_AGGREGATION_FUNCTIONS = {\n  sum: sumAgg,\n  avg: avgAgg,\n  min: minAgg,\n  max: maxAgg,\n  size: sizeAgg\n};"],"mappings":"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"},"metadata":{},"sourceType":"script"}