{"ast":null,"code":"import * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport useControlled from '@mui/utils/useControlled';\nimport { useUtils } from './useUtils';\n/**\n * Hooks making sure that:\n * - The value returned by `onChange` always have the timezone of `props.value` or `props.defaultValue` if defined\n * - The value rendered is always the one from `props.timezone` if defined\n */\n\nexport const useValueWithTimezone = _ref => {\n  let {\n    timezone: timezoneProp,\n    value: valueProp,\n    defaultValue,\n    onChange,\n    valueManager\n  } = _ref;\n  const utils = useUtils();\n  const firstDefaultValue = React.useRef(defaultValue);\n  const inputValue = valueProp ?? firstDefaultValue.current ?? valueManager.emptyValue;\n  const inputTimezone = React.useMemo(() => valueManager.getTimezone(utils, inputValue), [utils, valueManager, inputValue]);\n  const setInputTimezone = useEventCallback(newValue => {\n    if (inputTimezone == null) {\n      return newValue;\n    }\n\n    return valueManager.setTimezone(utils, inputTimezone, newValue);\n  });\n  const timezoneToRender = timezoneProp ?? inputTimezone ?? 'default';\n  const valueWithTimezoneToRender = React.useMemo(() => valueManager.setTimezone(utils, timezoneToRender, inputValue), [valueManager, utils, timezoneToRender, inputValue]);\n  const handleValueChange = useEventCallback(function (newValue) {\n    const newValueWithInputTimezone = setInputTimezone(newValue);\n\n    for (var _len = arguments.length, otherParams = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      otherParams[_key - 1] = arguments[_key];\n    }\n\n    onChange?.(newValueWithInputTimezone, ...otherParams);\n  });\n  return {\n    value: valueWithTimezoneToRender,\n    handleValueChange,\n    timezone: timezoneToRender\n  };\n};\n/**\n * Wrapper around `useControlled` and `useValueWithTimezone`\n */\n\nexport const useControlledValueWithTimezone = _ref2 => {\n  let {\n    name,\n    timezone: timezoneProp,\n    value: valueProp,\n    defaultValue,\n    onChange: onChangeProp,\n    valueManager\n  } = _ref2;\n  const [valueWithInputTimezone, setValue] = useControlled({\n    name,\n    state: 'value',\n    controlled: valueProp,\n    default: defaultValue ?? valueManager.emptyValue\n  });\n  const onChange = useEventCallback(function (newValue) {\n    setValue(newValue);\n\n    for (var _len2 = arguments.length, otherParams = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      otherParams[_key2 - 1] = arguments[_key2];\n    }\n\n    onChangeProp?.(newValue, ...otherParams);\n  });\n  return useValueWithTimezone({\n    timezone: timezoneProp,\n    value: valueWithInputTimezone,\n    defaultValue: undefined,\n    onChange,\n    valueManager\n  });\n};","map":{"version":3,"names":["React","useEventCallback","useControlled","useUtils","useValueWithTimezone","timezone","timezoneProp","value","valueProp","defaultValue","onChange","valueManager","utils","firstDefaultValue","useRef","inputValue","current","emptyValue","inputTimezone","useMemo","getTimezone","setInputTimezone","newValue","setTimezone","timezoneToRender","valueWithTimezoneToRender","handleValueChange","newValueWithInputTimezone","otherParams","useControlledValueWithTimezone","name","onChangeProp","valueWithInputTimezone","setValue","state","controlled","default","undefined"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/@mui/x-date-pickers/internals/hooks/useValueWithTimezone.js"],"sourcesContent":["import * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport useControlled from '@mui/utils/useControlled';\nimport { useUtils } from './useUtils';\n/**\n * Hooks making sure that:\n * - The value returned by `onChange` always have the timezone of `props.value` or `props.defaultValue` if defined\n * - The value rendered is always the one from `props.timezone` if defined\n */\nexport const useValueWithTimezone = ({\n  timezone: timezoneProp,\n  value: valueProp,\n  defaultValue,\n  onChange,\n  valueManager\n}) => {\n  const utils = useUtils();\n  const firstDefaultValue = React.useRef(defaultValue);\n  const inputValue = valueProp ?? firstDefaultValue.current ?? valueManager.emptyValue;\n  const inputTimezone = React.useMemo(() => valueManager.getTimezone(utils, inputValue), [utils, valueManager, inputValue]);\n  const setInputTimezone = useEventCallback(newValue => {\n    if (inputTimezone == null) {\n      return newValue;\n    }\n    return valueManager.setTimezone(utils, inputTimezone, newValue);\n  });\n  const timezoneToRender = timezoneProp ?? inputTimezone ?? 'default';\n  const valueWithTimezoneToRender = React.useMemo(() => valueManager.setTimezone(utils, timezoneToRender, inputValue), [valueManager, utils, timezoneToRender, inputValue]);\n  const handleValueChange = useEventCallback((newValue, ...otherParams) => {\n    const newValueWithInputTimezone = setInputTimezone(newValue);\n    onChange?.(newValueWithInputTimezone, ...otherParams);\n  });\n  return {\n    value: valueWithTimezoneToRender,\n    handleValueChange,\n    timezone: timezoneToRender\n  };\n};\n\n/**\n * Wrapper around `useControlled` and `useValueWithTimezone`\n */\nexport const useControlledValueWithTimezone = ({\n  name,\n  timezone: timezoneProp,\n  value: valueProp,\n  defaultValue,\n  onChange: onChangeProp,\n  valueManager\n}) => {\n  const [valueWithInputTimezone, setValue] = useControlled({\n    name,\n    state: 'value',\n    controlled: valueProp,\n    default: defaultValue ?? valueManager.emptyValue\n  });\n  const onChange = useEventCallback((newValue, ...otherParams) => {\n    setValue(newValue);\n    onChangeProp?.(newValue, ...otherParams);\n  });\n  return useValueWithTimezone({\n    timezone: timezoneProp,\n    value: valueWithInputTimezone,\n    defaultValue: undefined,\n    onChange,\n    valueManager\n  });\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}