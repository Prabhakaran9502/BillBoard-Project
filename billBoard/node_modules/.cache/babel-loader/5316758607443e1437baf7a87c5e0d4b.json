{"ast":null,"code":"import * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n */\n\nexport const useGridColumnSpanning = apiRef => {\n  const lookup = React.useRef({});\n\n  const getCellColSpanInfo = (rowId, columnIndex) => {\n    return lookup.current[rowId]?.[columnIndex];\n  };\n\n  const resetColSpan = () => {\n    lookup.current = {};\n  }; // Calculate `colSpan` for each cell in the row\n\n\n  const calculateColSpan = React.useCallback(_ref => {\n    let {\n      rowId,\n      minFirstColumn,\n      maxLastColumn,\n      columns\n    } = _ref;\n\n    for (let i = minFirstColumn; i < maxLastColumn; i += 1) {\n      const cellProps = calculateCellColSpan({\n        apiRef,\n        lookup: lookup.current,\n        columnIndex: i,\n        rowId,\n        minFirstColumnIndex: minFirstColumn,\n        maxLastColumnIndex: maxLastColumn,\n        columns\n      });\n\n      if (cellProps.colSpan > 1) {\n        i += cellProps.colSpan - 1;\n      }\n    }\n  }, [apiRef]);\n  const columnSpanningPublicApi = {\n    unstable_getCellColSpanInfo: getCellColSpanInfo\n  };\n  const columnSpanningPrivateApi = {\n    resetColSpan,\n    calculateColSpan\n  };\n  useGridApiMethod(apiRef, columnSpanningPublicApi, 'public');\n  useGridApiMethod(apiRef, columnSpanningPrivateApi, 'private');\n  useGridApiEventHandler(apiRef, 'columnOrderChange', resetColSpan);\n};\n\nfunction calculateCellColSpan(params) {\n  const {\n    apiRef,\n    lookup,\n    columnIndex,\n    rowId,\n    minFirstColumnIndex,\n    maxLastColumnIndex,\n    columns\n  } = params;\n  const columnsLength = columns.length;\n  const column = columns[columnIndex];\n  const row = apiRef.current.getRow(rowId);\n  const value = apiRef.current.getRowValue(row, column);\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(value, row, column, apiRef) : column.colSpan;\n\n  if (!colSpan || colSpan === 1) {\n    setCellColSpanInfo(lookup, rowId, columnIndex, {\n      spannedByColSpan: false,\n      cellProps: {\n        colSpan: 1,\n        width: column.computedWidth\n      }\n    });\n    return {\n      colSpan: 1\n    };\n  }\n\n  let width = column.computedWidth;\n\n  for (let j = 1; j < colSpan; j += 1) {\n    const nextColumnIndex = columnIndex + j; // Cells should be spanned only within their column section (left-pinned, right-pinned and unpinned).\n\n    if (nextColumnIndex >= minFirstColumnIndex && nextColumnIndex < maxLastColumnIndex) {\n      const nextColumn = columns[nextColumnIndex];\n      width += nextColumn.computedWidth;\n      setCellColSpanInfo(lookup, rowId, columnIndex + j, {\n        spannedByColSpan: true,\n        rightVisibleCellIndex: Math.min(columnIndex + colSpan, columnsLength - 1),\n        leftVisibleCellIndex: columnIndex\n      });\n    }\n\n    setCellColSpanInfo(lookup, rowId, columnIndex, {\n      spannedByColSpan: false,\n      cellProps: {\n        colSpan,\n        width\n      }\n    });\n  }\n\n  return {\n    colSpan\n  };\n}\n\nfunction setCellColSpanInfo(lookup, rowId, columnIndex, cellColSpanInfo) {\n  if (!lookup[rowId]) {\n    lookup[rowId] = {};\n  }\n\n  lookup[rowId][columnIndex] = cellColSpanInfo;\n}","map":{"version":3,"names":["React","useGridApiMethod","useGridApiEventHandler","useGridColumnSpanning","apiRef","lookup","useRef","getCellColSpanInfo","rowId","columnIndex","current","resetColSpan","calculateColSpan","useCallback","minFirstColumn","maxLastColumn","columns","i","cellProps","calculateCellColSpan","minFirstColumnIndex","maxLastColumnIndex","colSpan","columnSpanningPublicApi","unstable_getCellColSpanInfo","columnSpanningPrivateApi","params","columnsLength","length","column","row","getRow","value","getRowValue","setCellColSpanInfo","spannedByColSpan","width","computedWidth","j","nextColumnIndex","nextColumn","rightVisibleCellIndex","Math","min","leftVisibleCellIndex","cellColSpanInfo"],"sources":["C:/Users/kb/node_modules/@mui/x-data-grid/hooks/features/columns/useGridColumnSpanning.js"],"sourcesContent":["import * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n */\nexport const useGridColumnSpanning = apiRef => {\n  const lookup = React.useRef({});\n  const getCellColSpanInfo = (rowId, columnIndex) => {\n    return lookup.current[rowId]?.[columnIndex];\n  };\n  const resetColSpan = () => {\n    lookup.current = {};\n  };\n\n  // Calculate `colSpan` for each cell in the row\n  const calculateColSpan = React.useCallback(({\n    rowId,\n    minFirstColumn,\n    maxLastColumn,\n    columns\n  }) => {\n    for (let i = minFirstColumn; i < maxLastColumn; i += 1) {\n      const cellProps = calculateCellColSpan({\n        apiRef,\n        lookup: lookup.current,\n        columnIndex: i,\n        rowId,\n        minFirstColumnIndex: minFirstColumn,\n        maxLastColumnIndex: maxLastColumn,\n        columns\n      });\n      if (cellProps.colSpan > 1) {\n        i += cellProps.colSpan - 1;\n      }\n    }\n  }, [apiRef]);\n  const columnSpanningPublicApi = {\n    unstable_getCellColSpanInfo: getCellColSpanInfo\n  };\n  const columnSpanningPrivateApi = {\n    resetColSpan,\n    calculateColSpan\n  };\n  useGridApiMethod(apiRef, columnSpanningPublicApi, 'public');\n  useGridApiMethod(apiRef, columnSpanningPrivateApi, 'private');\n  useGridApiEventHandler(apiRef, 'columnOrderChange', resetColSpan);\n};\nfunction calculateCellColSpan(params) {\n  const {\n    apiRef,\n    lookup,\n    columnIndex,\n    rowId,\n    minFirstColumnIndex,\n    maxLastColumnIndex,\n    columns\n  } = params;\n  const columnsLength = columns.length;\n  const column = columns[columnIndex];\n  const row = apiRef.current.getRow(rowId);\n  const value = apiRef.current.getRowValue(row, column);\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(value, row, column, apiRef) : column.colSpan;\n  if (!colSpan || colSpan === 1) {\n    setCellColSpanInfo(lookup, rowId, columnIndex, {\n      spannedByColSpan: false,\n      cellProps: {\n        colSpan: 1,\n        width: column.computedWidth\n      }\n    });\n    return {\n      colSpan: 1\n    };\n  }\n  let width = column.computedWidth;\n  for (let j = 1; j < colSpan; j += 1) {\n    const nextColumnIndex = columnIndex + j;\n    // Cells should be spanned only within their column section (left-pinned, right-pinned and unpinned).\n    if (nextColumnIndex >= minFirstColumnIndex && nextColumnIndex < maxLastColumnIndex) {\n      const nextColumn = columns[nextColumnIndex];\n      width += nextColumn.computedWidth;\n      setCellColSpanInfo(lookup, rowId, columnIndex + j, {\n        spannedByColSpan: true,\n        rightVisibleCellIndex: Math.min(columnIndex + colSpan, columnsLength - 1),\n        leftVisibleCellIndex: columnIndex\n      });\n    }\n    setCellColSpanInfo(lookup, rowId, columnIndex, {\n      spannedByColSpan: false,\n      cellProps: {\n        colSpan,\n        width\n      }\n    });\n  }\n  return {\n    colSpan\n  };\n}\nfunction setCellColSpanInfo(lookup, rowId, columnIndex, cellColSpanInfo) {\n  if (!lookup[rowId]) {\n    lookup[rowId] = {};\n  }\n  lookup[rowId][columnIndex] = cellColSpanInfo;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}