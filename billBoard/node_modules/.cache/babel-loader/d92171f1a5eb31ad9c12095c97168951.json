{"ast":null,"code":"import * as React from 'react';\nimport { unstable_composeClasses as composeClasses } from '@mui/utils';\nimport { getDataGridUtilityClass, useGridSelector } from '@mui/x-data-grid';\nimport { EMPTY_DETAIL_PANELS } from '@mui/x-data-grid/internals';\nimport { useGridPrivateApiContext } from '../hooks/utils/useGridPrivateApiContext';\nimport { useGridRootProps } from '../hooks/utils/useGridRootProps';\nimport { gridDetailPanelExpandedRowsContentCacheSelector, gridDetailPanelExpandedRowsHeightCacheSelector, gridDetailPanelExpandedRowIdsSelector } from '../hooks/features/detailPanel';\nimport { GridDetailPanel } from './GridDetailPanel';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = () => {\n  const slots = {\n    detailPanel: ['detailPanel']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, {});\n};\n\nexport function GridDetailPanels(props) {\n  const rootProps = useGridRootProps();\n\n  if (!rootProps.getDetailPanelContent) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(GridDetailPanelsImpl, props);\n}\n\nfunction GridDetailPanelsImpl(_ref) {\n  let {\n    virtualScroller\n  } = _ref;\n  const apiRef = useGridPrivateApiContext();\n  const classes = useUtilityClasses();\n  const {\n    setPanels\n  } = virtualScroller;\n  const expandedRowIds = useGridSelector(apiRef, gridDetailPanelExpandedRowIdsSelector);\n  const detailPanelsContent = useGridSelector(apiRef, gridDetailPanelExpandedRowsContentCacheSelector);\n  const detailPanelsHeights = useGridSelector(apiRef, gridDetailPanelExpandedRowsHeightCacheSelector);\n  const getDetailPanel = React.useCallback(rowId => {\n    const content = detailPanelsContent[rowId]; // Check if the id exists in the current page\n\n    const rowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(rowId);\n    const exists = rowIndex !== undefined;\n\n    if (! /*#__PURE__*/React.isValidElement(content) || !exists) {\n      return null;\n    }\n\n    const hasAutoHeight = apiRef.current.detailPanelHasAutoHeight(rowId);\n    const height = hasAutoHeight ? 'auto' : detailPanelsHeights[rowId];\n    return /*#__PURE__*/_jsx(GridDetailPanel, {\n      rowId: rowId,\n      height: height,\n      className: classes.detailPanel,\n      children: content\n    }, `panel-${rowId}`);\n  }, [apiRef, classes.detailPanel, detailPanelsHeights, detailPanelsContent]);\n  React.useEffect(() => {\n    if (expandedRowIds.length === 0) {\n      setPanels(EMPTY_DETAIL_PANELS);\n    } else {\n      setPanels(new Map(expandedRowIds.map(rowId => [rowId, getDetailPanel(rowId)])));\n    }\n  }, [expandedRowIds, setPanels, getDetailPanel]);\n  return null;\n}","map":{"version":3,"names":["React","unstable_composeClasses","composeClasses","getDataGridUtilityClass","useGridSelector","EMPTY_DETAIL_PANELS","useGridPrivateApiContext","useGridRootProps","gridDetailPanelExpandedRowsContentCacheSelector","gridDetailPanelExpandedRowsHeightCacheSelector","gridDetailPanelExpandedRowIdsSelector","GridDetailPanel","jsx","_jsx","useUtilityClasses","slots","detailPanel","GridDetailPanels","props","rootProps","getDetailPanelContent","createElement","GridDetailPanelsImpl","virtualScroller","apiRef","classes","setPanels","expandedRowIds","detailPanelsContent","detailPanelsHeights","getDetailPanel","useCallback","rowId","content","rowIndex","current","getRowIndexRelativeToVisibleRows","exists","undefined","isValidElement","hasAutoHeight","detailPanelHasAutoHeight","height","className","children","useEffect","length","Map","map"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/@mui/x-data-grid-pro/esm/components/GridDetailPanels.js"],"sourcesContent":["import * as React from 'react';\nimport { unstable_composeClasses as composeClasses } from '@mui/utils';\nimport { getDataGridUtilityClass, useGridSelector } from '@mui/x-data-grid';\nimport { EMPTY_DETAIL_PANELS } from '@mui/x-data-grid/internals';\nimport { useGridPrivateApiContext } from '../hooks/utils/useGridPrivateApiContext';\nimport { useGridRootProps } from '../hooks/utils/useGridRootProps';\nimport { gridDetailPanelExpandedRowsContentCacheSelector, gridDetailPanelExpandedRowsHeightCacheSelector, gridDetailPanelExpandedRowIdsSelector } from '../hooks/features/detailPanel';\nimport { GridDetailPanel } from './GridDetailPanel';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = () => {\n  const slots = {\n    detailPanel: ['detailPanel']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, {});\n};\nexport function GridDetailPanels(props) {\n  const rootProps = useGridRootProps();\n  if (!rootProps.getDetailPanelContent) {\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(GridDetailPanelsImpl, props);\n}\nfunction GridDetailPanelsImpl({\n  virtualScroller\n}) {\n  const apiRef = useGridPrivateApiContext();\n  const classes = useUtilityClasses();\n  const {\n    setPanels\n  } = virtualScroller;\n  const expandedRowIds = useGridSelector(apiRef, gridDetailPanelExpandedRowIdsSelector);\n  const detailPanelsContent = useGridSelector(apiRef, gridDetailPanelExpandedRowsContentCacheSelector);\n  const detailPanelsHeights = useGridSelector(apiRef, gridDetailPanelExpandedRowsHeightCacheSelector);\n  const getDetailPanel = React.useCallback(rowId => {\n    const content = detailPanelsContent[rowId];\n\n    // Check if the id exists in the current page\n    const rowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(rowId);\n    const exists = rowIndex !== undefined;\n    if (! /*#__PURE__*/React.isValidElement(content) || !exists) {\n      return null;\n    }\n    const hasAutoHeight = apiRef.current.detailPanelHasAutoHeight(rowId);\n    const height = hasAutoHeight ? 'auto' : detailPanelsHeights[rowId];\n    return /*#__PURE__*/_jsx(GridDetailPanel, {\n      rowId: rowId,\n      height: height,\n      className: classes.detailPanel,\n      children: content\n    }, `panel-${rowId}`);\n  }, [apiRef, classes.detailPanel, detailPanelsHeights, detailPanelsContent]);\n  React.useEffect(() => {\n    if (expandedRowIds.length === 0) {\n      setPanels(EMPTY_DETAIL_PANELS);\n    } else {\n      setPanels(new Map(expandedRowIds.map(rowId => [rowId, getDetailPanel(rowId)])));\n    }\n  }, [expandedRowIds, setPanels, getDetailPanel]);\n  return null;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}