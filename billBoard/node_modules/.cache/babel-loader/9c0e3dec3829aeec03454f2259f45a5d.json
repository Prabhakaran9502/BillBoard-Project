{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"id\", \"value\", \"formattedValue\", \"api\", \"field\", \"row\", \"rowNode\", \"colDef\", \"cellMode\", \"isEditable\", \"tabIndex\", \"className\", \"hasFocus\", \"isValidating\", \"isProcessingProps\", \"error\", \"onValueChange\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses, unstable_useId as useId, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { getDataGridUtilityClass } from '../../constants/gridClasses';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['editBooleanCell']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n\nfunction GridEditBooleanCell(props) {\n  const {\n    id: idProp,\n    value,\n    field,\n    className,\n    hasFocus,\n    onValueChange\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const apiRef = useGridApiContext();\n  const inputRef = React.useRef(null);\n  const id = useId();\n  const [valueState, setValueState] = React.useState(value);\n  const rootProps = useGridRootProps();\n  const ownerState = {\n    classes: rootProps.classes\n  };\n  const classes = useUtilityClasses(ownerState);\n  const handleChange = React.useCallback(async event => {\n    const newValue = event.target.checked;\n\n    if (onValueChange) {\n      await onValueChange(event, newValue);\n    }\n\n    setValueState(newValue);\n    await apiRef.current.setEditCellValue({\n      id: idProp,\n      field,\n      value: newValue\n    }, event);\n  }, [apiRef, field, idProp, onValueChange]);\n  React.useEffect(() => {\n    setValueState(value);\n  }, [value]);\n  useEnhancedEffect(() => {\n    if (hasFocus) {\n      inputRef.current.focus();\n    }\n  }, [hasFocus]);\n  return /*#__PURE__*/_jsx(\"label\", _extends({\n    htmlFor: id,\n    className: clsx(classes.root, className)\n  }, other, {\n    children: /*#__PURE__*/_jsx(rootProps.slots.baseCheckbox, _extends({\n      id: id,\n      inputRef: inputRef,\n      checked: Boolean(valueState),\n      onChange: handleChange,\n      size: \"small\"\n    }, rootProps.slotProps?.baseCheckbox))\n  }));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? GridEditBooleanCell.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * GridApi that let you manipulate the grid.\n   */\n  api: PropTypes.object.isRequired,\n\n  /**\n   * The mode of the cell.\n   */\n  cellMode: PropTypes.oneOf(['edit', 'view']).isRequired,\n  changeReason: PropTypes.oneOf(['debouncedSetEditCellValue', 'setEditCellValue']),\n\n  /**\n   * The column of the row that the current cell belongs to.\n   */\n  colDef: PropTypes.object.isRequired,\n\n  /**\n   * The column field of the cell that triggered the event.\n   */\n  field: PropTypes.string.isRequired,\n\n  /**\n   * The cell value formatted with the column valueFormatter.\n   */\n  formattedValue: PropTypes.any,\n\n  /**\n   * If true, the cell is the active element.\n   */\n  hasFocus: PropTypes.bool.isRequired,\n\n  /**\n   * The grid row id.\n   */\n  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n\n  /**\n   * If true, the cell is editable.\n   */\n  isEditable: PropTypes.bool,\n  isProcessingProps: PropTypes.bool,\n  isValidating: PropTypes.bool,\n\n  /**\n   * Callback called when the value is changed by the user.\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * @param {boolean} newValue The value that is going to be passed to `apiRef.current.setEditCellValue`.\n   * @returns {Promise<void> | void} A promise to be awaited before calling `apiRef.current.setEditCellValue`\n   */\n  onValueChange: PropTypes.func,\n\n  /**\n   * The row model of the row that the current cell belongs to.\n   */\n  row: PropTypes.any.isRequired,\n\n  /**\n   * The node of the row that the current cell belongs to.\n   */\n  rowNode: PropTypes.object.isRequired,\n\n  /**\n   * the tabIndex value.\n   */\n  tabIndex: PropTypes.oneOf([-1, 0]).isRequired,\n\n  /**\n   * The cell value.\n   * If the column has `valueGetter`, use `params.row` to directly access the fields.\n   */\n  value: PropTypes.any\n} : void 0;\nexport { GridEditBooleanCell };\nexport const renderEditBooleanCell = params => /*#__PURE__*/_jsx(GridEditBooleanCell, _extends({}, params));","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","clsx","unstable_composeClasses","composeClasses","unstable_useId","useId","unstable_useEnhancedEffect","useEnhancedEffect","getDataGridUtilityClass","useGridRootProps","useGridApiContext","jsx","_jsx","useUtilityClasses","ownerState","classes","slots","root","GridEditBooleanCell","props","id","idProp","value","field","className","hasFocus","onValueChange","other","apiRef","inputRef","useRef","valueState","setValueState","useState","rootProps","handleChange","useCallback","event","newValue","target","checked","current","setEditCellValue","useEffect","focus","htmlFor","children","baseCheckbox","Boolean","onChange","size","slotProps","process","env","NODE_ENV","propTypes","api","object","isRequired","cellMode","oneOf","changeReason","colDef","string","formattedValue","any","bool","oneOfType","number","isEditable","isProcessingProps","isValidating","func","row","rowNode","tabIndex","renderEditBooleanCell","params"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/@mui/x-data-grid/components/cell/GridEditBooleanCell.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"id\", \"value\", \"formattedValue\", \"api\", \"field\", \"row\", \"rowNode\", \"colDef\", \"cellMode\", \"isEditable\", \"tabIndex\", \"className\", \"hasFocus\", \"isValidating\", \"isProcessingProps\", \"error\", \"onValueChange\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses, unstable_useId as useId, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { getDataGridUtilityClass } from '../../constants/gridClasses';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['editBooleanCell']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\nfunction GridEditBooleanCell(props) {\n  const {\n      id: idProp,\n      value,\n      field,\n      className,\n      hasFocus,\n      onValueChange\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const apiRef = useGridApiContext();\n  const inputRef = React.useRef(null);\n  const id = useId();\n  const [valueState, setValueState] = React.useState(value);\n  const rootProps = useGridRootProps();\n  const ownerState = {\n    classes: rootProps.classes\n  };\n  const classes = useUtilityClasses(ownerState);\n  const handleChange = React.useCallback(async event => {\n    const newValue = event.target.checked;\n    if (onValueChange) {\n      await onValueChange(event, newValue);\n    }\n    setValueState(newValue);\n    await apiRef.current.setEditCellValue({\n      id: idProp,\n      field,\n      value: newValue\n    }, event);\n  }, [apiRef, field, idProp, onValueChange]);\n  React.useEffect(() => {\n    setValueState(value);\n  }, [value]);\n  useEnhancedEffect(() => {\n    if (hasFocus) {\n      inputRef.current.focus();\n    }\n  }, [hasFocus]);\n  return /*#__PURE__*/_jsx(\"label\", _extends({\n    htmlFor: id,\n    className: clsx(classes.root, className)\n  }, other, {\n    children: /*#__PURE__*/_jsx(rootProps.slots.baseCheckbox, _extends({\n      id: id,\n      inputRef: inputRef,\n      checked: Boolean(valueState),\n      onChange: handleChange,\n      size: \"small\"\n    }, rootProps.slotProps?.baseCheckbox))\n  }));\n}\nprocess.env.NODE_ENV !== \"production\" ? GridEditBooleanCell.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * GridApi that let you manipulate the grid.\n   */\n  api: PropTypes.object.isRequired,\n  /**\n   * The mode of the cell.\n   */\n  cellMode: PropTypes.oneOf(['edit', 'view']).isRequired,\n  changeReason: PropTypes.oneOf(['debouncedSetEditCellValue', 'setEditCellValue']),\n  /**\n   * The column of the row that the current cell belongs to.\n   */\n  colDef: PropTypes.object.isRequired,\n  /**\n   * The column field of the cell that triggered the event.\n   */\n  field: PropTypes.string.isRequired,\n  /**\n   * The cell value formatted with the column valueFormatter.\n   */\n  formattedValue: PropTypes.any,\n  /**\n   * If true, the cell is the active element.\n   */\n  hasFocus: PropTypes.bool.isRequired,\n  /**\n   * The grid row id.\n   */\n  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  /**\n   * If true, the cell is editable.\n   */\n  isEditable: PropTypes.bool,\n  isProcessingProps: PropTypes.bool,\n  isValidating: PropTypes.bool,\n  /**\n   * Callback called when the value is changed by the user.\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * @param {boolean} newValue The value that is going to be passed to `apiRef.current.setEditCellValue`.\n   * @returns {Promise<void> | void} A promise to be awaited before calling `apiRef.current.setEditCellValue`\n   */\n  onValueChange: PropTypes.func,\n  /**\n   * The row model of the row that the current cell belongs to.\n   */\n  row: PropTypes.any.isRequired,\n  /**\n   * The node of the row that the current cell belongs to.\n   */\n  rowNode: PropTypes.object.isRequired,\n  /**\n   * the tabIndex value.\n   */\n  tabIndex: PropTypes.oneOf([-1, 0]).isRequired,\n  /**\n   * The cell value.\n   * If the column has `valueGetter`, use `params.row` to directly access the fields.\n   */\n  value: PropTypes.any\n} : void 0;\nexport { GridEditBooleanCell };\nexport const renderEditBooleanCell = params => /*#__PURE__*/_jsx(GridEditBooleanCell, _extends({}, params));"],"mappings":"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"},"metadata":{},"sourceType":"module"}