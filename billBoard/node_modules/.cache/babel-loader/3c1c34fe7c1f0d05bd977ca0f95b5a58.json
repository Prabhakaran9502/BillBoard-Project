{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { GRID_ROOT_GROUP_ID } from '@mui/x-data-grid';\nexport const getGroupRowIdFromPath = path => {\n  const pathStr = path.map(groupingCriteria => `${groupingCriteria.field}/${groupingCriteria.key}`).join('-');\n  return `auto-generated-row-${pathStr}`;\n};\nexport const getNodePathInTree = _ref => {\n  let {\n    id,\n    tree\n  } = _ref;\n  const path = [];\n  let node = tree[id];\n\n  while (node.id !== GRID_ROOT_GROUP_ID) {\n    path.push({\n      field: node.type === 'leaf' ? null : node.groupingField,\n      key: node.groupingKey\n    });\n    node = tree[node.parent];\n  }\n\n  path.reverse();\n  return path;\n};\nexport const updateGroupDefaultExpansion = (node, defaultGroupingExpansionDepth, isGroupExpandedByDefault) => {\n  let childrenExpanded;\n\n  if (node.id === GRID_ROOT_GROUP_ID) {\n    childrenExpanded = true;\n  } else if (isGroupExpandedByDefault) {\n    childrenExpanded = isGroupExpandedByDefault(node);\n  } else {\n    childrenExpanded = defaultGroupingExpansionDepth === -1 || defaultGroupingExpansionDepth > node.depth;\n  }\n\n  node.childrenExpanded = childrenExpanded;\n  return node;\n};\n/**\n * Insert a node in the tree\n */\n\nexport const insertNodeInTree = (node, tree, treeDepths, previousTree) => {\n  // 1. Insert node in the tree.\n  tree[node.id] = node; // 2. Increment the `treeDepths` object for the node's depth.\n\n  treeDepths[node.depth] = (treeDepths[node.depth] ?? 0) + 1; // 3. Register the new node in its parent.\n\n  const parentNode = tree[node.parent];\n\n  if (node.type === 'group' || node.type === 'leaf') {\n    // For groups and leaves,\n    // Register the node from its parents `children` and `childrenFromPath` properties.\n    const groupingFieldName = node.groupingField ?? '__no_field__';\n    const groupingKeyName = node.groupingKey ?? '__no_key__';\n    const groupingField = parentNode.childrenFromPath?.[groupingFieldName];\n\n    if (previousTree !== null && previousTree[parentNode.id] === tree[parentNode.id]) {\n      parentNode.children = [...parentNode.children, node.id];\n    } else {\n      parentNode.children.push(node.id);\n    }\n\n    if (groupingField == null) {\n      parentNode.childrenFromPath[groupingFieldName] = {\n        [groupingKeyName.toString()]: node.id\n      };\n    } else {\n      groupingField[groupingKeyName.toString()] = node.id;\n    }\n  } else if (node.type === 'footer') {\n    // For footers,\n    // Register the node from its parent `footerId` property.\n    parentNode.footerId = node.id;\n  }\n};\n/**\n * Removes a node from the tree\n */\n\nexport const removeNodeFromTree = _ref2 => {\n  let {\n    node,\n    tree,\n    treeDepths\n  } = _ref2;\n  // 1. Remove node from the tree.\n  delete tree[node.id]; // 2. Decrement the `treeDepths` object for the node's depth.\n\n  const nodeDepth = node.depth;\n  const currentNodeCount = treeDepths[nodeDepth];\n\n  if (currentNodeCount === 1) {\n    delete treeDepths[nodeDepth];\n  } else {\n    treeDepths[nodeDepth] = currentNodeCount - 1;\n  } // 3. Unregister the new node in its parent.\n\n\n  const parentNode = tree[node.parent]; // For footers,\n  // Unregister the node from its parent `footerId` property.\n\n  if (node.type === 'footer') {\n    tree[parentNode.id] = _extends({}, parentNode, {\n      footerId: null\n    });\n  } // For groups and leaves,\n  // Unregister the node from its parents `children` and `childrenFromPath` properties.\n  else {\n    const groupingField = node.groupingField ?? '__no_field__';\n    const groupingKey = node.groupingKey ?? '__no_key__'; // TODO rows v6: Can we avoid this linear complexity ?\n\n    const children = parentNode.children.filter(childId => childId !== node.id);\n    const childrenFromPath = parentNode.childrenFromPath;\n    delete childrenFromPath[groupingField][groupingKey.toString()];\n    tree[parentNode.id] = _extends({}, parentNode, {\n      children,\n      childrenFromPath\n    });\n  }\n};\n/**\n * Updates the `id` and `isAutoGenerated` properties of a group node.\n */\n\nexport const updateGroupNodeIdAndAutoGenerated = _ref3 => {\n  let {\n    node,\n    updatedNode,\n    previousTree,\n    tree,\n    treeDepths\n  } = _ref3;\n  // 1. Set the new parent for all children from the old group\n  node.children.forEach(childId => {\n    tree[childId] = _extends({}, tree[childId], {\n      parent: updatedNode.id\n    });\n  }); // 2. Remove the old group from the tree\n\n  removeNodeFromTree({\n    node,\n    tree,\n    treeDepths\n  }); // 3. Add the new group in the tree\n\n  const groupNode = _extends({}, node, updatedNode);\n\n  insertNodeInTree(groupNode, tree, treeDepths, previousTree);\n};\nexport const createUpdatedGroupsManager = () => ({\n  value: {},\n\n  addAction(groupId, action) {\n    if (!this.value[groupId]) {\n      this.value[groupId] = {};\n    }\n\n    this.value[groupId][action] = true;\n  }\n\n});\nexport const getVisibleRowsLookup = _ref4 => {\n  let {\n    tree,\n    filteredRowsLookup\n  } = _ref4;\n\n  if (!filteredRowsLookup) {\n    return {};\n  }\n\n  const visibleRowsLookup = {};\n\n  const handleTreeNode = (node, areAncestorsExpanded) => {\n    const isPassingFiltering = filteredRowsLookup[node.id];\n\n    if (node.type === 'group') {\n      node.children.forEach(childId => {\n        const childNode = tree[childId];\n        handleTreeNode(childNode, areAncestorsExpanded && !!node.childrenExpanded);\n      });\n    }\n\n    visibleRowsLookup[node.id] = isPassingFiltering && areAncestorsExpanded; // TODO rows v6: Should we keep storing the visibility status of footer independently or rely on the group visibility in the selector ?\n\n    if (node.type === 'group' && node.footerId != null) {\n      visibleRowsLookup[node.footerId] = isPassingFiltering && areAncestorsExpanded && !!node.childrenExpanded;\n    }\n  };\n\n  const nodes = Object.values(tree);\n\n  for (let i = 0; i < nodes.length; i += 1) {\n    const node = nodes[i];\n\n    if (node.depth === 0) {\n      handleTreeNode(node, true);\n    }\n  }\n\n  return visibleRowsLookup;\n};","map":{"version":3,"names":["_extends","GRID_ROOT_GROUP_ID","getGroupRowIdFromPath","path","pathStr","map","groupingCriteria","field","key","join","getNodePathInTree","id","tree","node","push","type","groupingField","groupingKey","parent","reverse","updateGroupDefaultExpansion","defaultGroupingExpansionDepth","isGroupExpandedByDefault","childrenExpanded","depth","insertNodeInTree","treeDepths","previousTree","parentNode","groupingFieldName","groupingKeyName","childrenFromPath","children","toString","footerId","removeNodeFromTree","nodeDepth","currentNodeCount","filter","childId","updateGroupNodeIdAndAutoGenerated","updatedNode","forEach","groupNode","createUpdatedGroupsManager","value","addAction","groupId","action","getVisibleRowsLookup","filteredRowsLookup","visibleRowsLookup","handleTreeNode","areAncestorsExpanded","isPassingFiltering","childNode","nodes","Object","values","i","length"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/@mui/x-data-grid-pro/esm/utils/tree/utils.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { GRID_ROOT_GROUP_ID } from '@mui/x-data-grid';\nexport const getGroupRowIdFromPath = path => {\n  const pathStr = path.map(groupingCriteria => `${groupingCriteria.field}/${groupingCriteria.key}`).join('-');\n  return `auto-generated-row-${pathStr}`;\n};\nexport const getNodePathInTree = ({\n  id,\n  tree\n}) => {\n  const path = [];\n  let node = tree[id];\n  while (node.id !== GRID_ROOT_GROUP_ID) {\n    path.push({\n      field: node.type === 'leaf' ? null : node.groupingField,\n      key: node.groupingKey\n    });\n    node = tree[node.parent];\n  }\n  path.reverse();\n  return path;\n};\nexport const updateGroupDefaultExpansion = (node, defaultGroupingExpansionDepth, isGroupExpandedByDefault) => {\n  let childrenExpanded;\n  if (node.id === GRID_ROOT_GROUP_ID) {\n    childrenExpanded = true;\n  } else if (isGroupExpandedByDefault) {\n    childrenExpanded = isGroupExpandedByDefault(node);\n  } else {\n    childrenExpanded = defaultGroupingExpansionDepth === -1 || defaultGroupingExpansionDepth > node.depth;\n  }\n  node.childrenExpanded = childrenExpanded;\n  return node;\n};\n\n/**\n * Insert a node in the tree\n */\nexport const insertNodeInTree = (node, tree, treeDepths, previousTree) => {\n  // 1. Insert node in the tree.\n  tree[node.id] = node;\n\n  // 2. Increment the `treeDepths` object for the node's depth.\n  treeDepths[node.depth] = (treeDepths[node.depth] ?? 0) + 1;\n\n  // 3. Register the new node in its parent.\n  const parentNode = tree[node.parent];\n  if (node.type === 'group' || node.type === 'leaf') {\n    // For groups and leaves,\n    // Register the node from its parents `children` and `childrenFromPath` properties.\n    const groupingFieldName = node.groupingField ?? '__no_field__';\n    const groupingKeyName = node.groupingKey ?? '__no_key__';\n    const groupingField = parentNode.childrenFromPath?.[groupingFieldName];\n    if (previousTree !== null && previousTree[parentNode.id] === tree[parentNode.id]) {\n      parentNode.children = [...parentNode.children, node.id];\n    } else {\n      parentNode.children.push(node.id);\n    }\n    if (groupingField == null) {\n      parentNode.childrenFromPath[groupingFieldName] = {\n        [groupingKeyName.toString()]: node.id\n      };\n    } else {\n      groupingField[groupingKeyName.toString()] = node.id;\n    }\n  } else if (node.type === 'footer') {\n    // For footers,\n    // Register the node from its parent `footerId` property.\n    parentNode.footerId = node.id;\n  }\n};\n\n/**\n * Removes a node from the tree\n */\nexport const removeNodeFromTree = ({\n  node,\n  tree,\n  treeDepths\n}) => {\n  // 1. Remove node from the tree.\n  delete tree[node.id];\n\n  // 2. Decrement the `treeDepths` object for the node's depth.\n  const nodeDepth = node.depth;\n  const currentNodeCount = treeDepths[nodeDepth];\n  if (currentNodeCount === 1) {\n    delete treeDepths[nodeDepth];\n  } else {\n    treeDepths[nodeDepth] = currentNodeCount - 1;\n  }\n\n  // 3. Unregister the new node in its parent.\n  const parentNode = tree[node.parent];\n  // For footers,\n  // Unregister the node from its parent `footerId` property.\n  if (node.type === 'footer') {\n    tree[parentNode.id] = _extends({}, parentNode, {\n      footerId: null\n    });\n  }\n  // For groups and leaves,\n  // Unregister the node from its parents `children` and `childrenFromPath` properties.\n  else {\n    const groupingField = node.groupingField ?? '__no_field__';\n    const groupingKey = node.groupingKey ?? '__no_key__';\n\n    // TODO rows v6: Can we avoid this linear complexity ?\n    const children = parentNode.children.filter(childId => childId !== node.id);\n    const childrenFromPath = parentNode.childrenFromPath;\n    delete childrenFromPath[groupingField][groupingKey.toString()];\n    tree[parentNode.id] = _extends({}, parentNode, {\n      children,\n      childrenFromPath\n    });\n  }\n};\n\n/**\n * Updates the `id` and `isAutoGenerated` properties of a group node.\n */\nexport const updateGroupNodeIdAndAutoGenerated = ({\n  node,\n  updatedNode,\n  previousTree,\n  tree,\n  treeDepths\n}) => {\n  // 1. Set the new parent for all children from the old group\n  node.children.forEach(childId => {\n    tree[childId] = _extends({}, tree[childId], {\n      parent: updatedNode.id\n    });\n  });\n\n  // 2. Remove the old group from the tree\n  removeNodeFromTree({\n    node,\n    tree,\n    treeDepths\n  });\n\n  // 3. Add the new group in the tree\n  const groupNode = _extends({}, node, updatedNode);\n  insertNodeInTree(groupNode, tree, treeDepths, previousTree);\n};\nexport const createUpdatedGroupsManager = () => ({\n  value: {},\n  addAction(groupId, action) {\n    if (!this.value[groupId]) {\n      this.value[groupId] = {};\n    }\n    this.value[groupId][action] = true;\n  }\n});\nexport const getVisibleRowsLookup = ({\n  tree,\n  filteredRowsLookup\n}) => {\n  if (!filteredRowsLookup) {\n    return {};\n  }\n  const visibleRowsLookup = {};\n  const handleTreeNode = (node, areAncestorsExpanded) => {\n    const isPassingFiltering = filteredRowsLookup[node.id];\n    if (node.type === 'group') {\n      node.children.forEach(childId => {\n        const childNode = tree[childId];\n        handleTreeNode(childNode, areAncestorsExpanded && !!node.childrenExpanded);\n      });\n    }\n    visibleRowsLookup[node.id] = isPassingFiltering && areAncestorsExpanded;\n\n    // TODO rows v6: Should we keep storing the visibility status of footer independently or rely on the group visibility in the selector ?\n    if (node.type === 'group' && node.footerId != null) {\n      visibleRowsLookup[node.footerId] = isPassingFiltering && areAncestorsExpanded && !!node.childrenExpanded;\n    }\n  };\n  const nodes = Object.values(tree);\n  for (let i = 0; i < nodes.length; i += 1) {\n    const node = nodes[i];\n    if (node.depth === 0) {\n      handleTreeNode(node, true);\n    }\n  }\n  return visibleRowsLookup;\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}