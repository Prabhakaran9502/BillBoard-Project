{"ast":null,"code":"import { GRID_ROOT_GROUP_ID } from '@mui/x-data-grid';\nimport { buildRootGroup } from '@mui/x-data-grid/internals';\nimport { insertDataRowInTree } from './insertDataRowInTree';\n/**\n * Transform a list of rows into a tree structure where each row references its parent and children.\n */\n\nexport const createRowTree = params => {\n  const dataRowIds = [];\n  const tree = {\n    [GRID_ROOT_GROUP_ID]: buildRootGroup()\n  };\n  const treeDepths = {};\n\n  for (let i = 0; i < params.nodes.length; i += 1) {\n    const node = params.nodes[i];\n    dataRowIds.push(node.id);\n    insertDataRowInTree({\n      tree,\n      previousTree: params.previousTree,\n      id: node.id,\n      path: node.path,\n      onDuplicatePath: params.onDuplicatePath,\n      treeDepths,\n      isGroupExpandedByDefault: params.isGroupExpandedByDefault,\n      defaultGroupingExpansionDepth: params.defaultGroupingExpansionDepth\n    });\n  }\n\n  return {\n    tree,\n    treeDepths,\n    groupingName: params.groupingName,\n    dataRowIds\n  };\n};","map":{"version":3,"names":["GRID_ROOT_GROUP_ID","buildRootGroup","insertDataRowInTree","createRowTree","params","dataRowIds","tree","treeDepths","i","nodes","length","node","push","id","previousTree","path","onDuplicatePath","isGroupExpandedByDefault","defaultGroupingExpansionDepth","groupingName"],"sources":["C:/Users/kb/Downloads/billBoard/billboard/node_modules/@mui/x-data-grid-pro/esm/utils/tree/createRowTree.js"],"sourcesContent":["import { GRID_ROOT_GROUP_ID } from '@mui/x-data-grid';\nimport { buildRootGroup } from '@mui/x-data-grid/internals';\nimport { insertDataRowInTree } from './insertDataRowInTree';\n/**\n * Transform a list of rows into a tree structure where each row references its parent and children.\n */\nexport const createRowTree = params => {\n  const dataRowIds = [];\n  const tree = {\n    [GRID_ROOT_GROUP_ID]: buildRootGroup()\n  };\n  const treeDepths = {};\n  for (let i = 0; i < params.nodes.length; i += 1) {\n    const node = params.nodes[i];\n    dataRowIds.push(node.id);\n    insertDataRowInTree({\n      tree,\n      previousTree: params.previousTree,\n      id: node.id,\n      path: node.path,\n      onDuplicatePath: params.onDuplicatePath,\n      treeDepths,\n      isGroupExpandedByDefault: params.isGroupExpandedByDefault,\n      defaultGroupingExpansionDepth: params.defaultGroupingExpansionDepth\n    });\n  }\n  return {\n    tree,\n    treeDepths,\n    groupingName: params.groupingName,\n    dataRowIds\n  };\n};"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,kBAAnC;AACA,SAASC,cAAT,QAA+B,4BAA/B;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA;AACA;AACA;;AACA,OAAO,MAAMC,aAAa,GAAGC,MAAM,IAAI;EACrC,MAAMC,UAAU,GAAG,EAAnB;EACA,MAAMC,IAAI,GAAG;IACX,CAACN,kBAAD,GAAsBC,cAAc;EADzB,CAAb;EAGA,MAAMM,UAAU,GAAG,EAAnB;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACK,KAAP,CAAaC,MAAjC,EAAyCF,CAAC,IAAI,CAA9C,EAAiD;IAC/C,MAAMG,IAAI,GAAGP,MAAM,CAACK,KAAP,CAAaD,CAAb,CAAb;IACAH,UAAU,CAACO,IAAX,CAAgBD,IAAI,CAACE,EAArB;IACAX,mBAAmB,CAAC;MAClBI,IADkB;MAElBQ,YAAY,EAAEV,MAAM,CAACU,YAFH;MAGlBD,EAAE,EAAEF,IAAI,CAACE,EAHS;MAIlBE,IAAI,EAAEJ,IAAI,CAACI,IAJO;MAKlBC,eAAe,EAAEZ,MAAM,CAACY,eALN;MAMlBT,UANkB;MAOlBU,wBAAwB,EAAEb,MAAM,CAACa,wBAPf;MAQlBC,6BAA6B,EAAEd,MAAM,CAACc;IARpB,CAAD,CAAnB;EAUD;;EACD,OAAO;IACLZ,IADK;IAELC,UAFK;IAGLY,YAAY,EAAEf,MAAM,CAACe,YAHhB;IAILd;EAJK,CAAP;AAMD,CA1BM"},"metadata":{},"sourceType":"module"}